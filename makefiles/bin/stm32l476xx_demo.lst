
../makefiles/bin/stm32l476xx_demo.elf:     file format elf32-littlearm


Disassembly of section .isr_vector:

08000000 <__isr_vectors>:
 8000000:	00 00 01 20 01 03 00 08 09 03 00 08 11 03 00 08     ... ............
 8000010:	65 03 00 08 6d 03 00 08 c1 03 00 08 00 00 00 00     e...m...........
	...
 800002c:	15 04 00 08 1d 04 00 08 00 00 00 00 25 04 00 08     ............%...
 800003c:	7d 41 00 08 4b 04 00 08 57 04 00 08 63 04 00 08     }A..K...W...c...
 800004c:	6f 04 00 08 7b 04 00 08 87 04 00 08 93 04 00 08     o...{...........
 800005c:	9f 04 00 08 ab 04 00 08 b7 04 00 08 c3 04 00 08     ................
 800006c:	cf 04 00 08 db 04 00 08 e7 04 00 08 f3 04 00 08     ................
 800007c:	ff 04 00 08 0b 05 00 08 17 05 00 08 23 05 00 08     ............#...
 800008c:	2f 05 00 08 3b 05 00 08 47 05 00 08 53 05 00 08     /...;...G...S...
 800009c:	5f 05 00 08 6b 05 00 08 77 05 00 08 83 05 00 08     _...k...w.......
 80000ac:	8f 05 00 08 9b 05 00 08 f9 21 00 08 b3 05 00 08     .........!......
 80000bc:	bf 05 00 08 cb 05 00 08 d7 05 00 08 e3 05 00 08     ................
 80000cc:	ef 05 00 08 fb 05 00 08 07 06 00 08 13 06 00 08     ................
 80000dc:	1f 06 00 08 2b 06 00 08 37 06 00 08 43 06 00 08     ....+...7...C...
 80000ec:	4f 06 00 08 5b 06 00 08 67 06 00 08 73 06 00 08     O...[...g...s...
 80000fc:	7f 06 00 08 8b 06 00 08 97 06 00 08 a3 06 00 08     ................
 800010c:	af 06 00 08 bb 06 00 08 c7 06 00 08 d1 21 00 08     .............!..
 800011c:	df 06 00 08 eb 06 00 08 f7 06 00 08 03 07 00 08     ................
 800012c:	0f 07 00 08 1b 07 00 08 27 07 00 08 33 07 00 08     ........'...3...
 800013c:	3f 07 00 08 4b 07 00 08 57 07 00 08 63 07 00 08     ?...K...W...c...
 800014c:	6f 07 00 08 7b 07 00 08 87 07 00 08 93 07 00 08     o...{...........
 800015c:	9f 07 00 08 ab 07 00 08 b7 07 00 08 c3 07 00 08     ................
 800016c:	cf 07 00 08 db 07 00 08 e7 07 00 08 f3 07 00 08     ................
 800017c:	00 00 00 00 ff 07 00 08 0b 08 00 08                 ............

08000188 <_start>:
// For the call to work, and for the call to __initialize_hardware_early()
// to work, the reset stack must point to a valid internal RAM area.

void __attribute__ ((section(".after_vectors"),noreturn,weak))
_start (void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b08e      	sub	sp, #56	; 0x38
 800018c:	af00      	add	r7, sp, #0
  // enabled and require an early sequence to disable it.
  //
  // Also useful on platform with external RAM, that need to be
  // initialised before filling the BSS section.

  __initialize_hardware_early ();
 800018e:	f001 fe91 	bl	8001eb4 <__initialize_hardware_early>

  // Use Old Style DATA and BSS section initialisation,
  // that will manage a single BSS sections.

#if defined(DEBUG) && (OS_INCLUDE_STARTUP_GUARD_CHECKS)
  __data_begin_guard = DATA_GUARD_BAD_VALUE;
 8000192:	4b49      	ldr	r3, [pc, #292]	; (80002b8 <_start+0x130>)
 8000194:	4a49      	ldr	r2, [pc, #292]	; (80002bc <_start+0x134>)
 8000196:	601a      	str	r2, [r3, #0]
  __data_end_guard = DATA_GUARD_BAD_VALUE;
 8000198:	4b49      	ldr	r3, [pc, #292]	; (80002c0 <_start+0x138>)
 800019a:	4a48      	ldr	r2, [pc, #288]	; (80002bc <_start+0x134>)
 800019c:	601a      	str	r2, [r3, #0]
 800019e:	4b49      	ldr	r3, [pc, #292]	; (80002c4 <_start+0x13c>)
 80001a0:	633b      	str	r3, [r7, #48]	; 0x30
 80001a2:	4b49      	ldr	r3, [pc, #292]	; (80002c8 <_start+0x140>)
 80001a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80001a6:	4b49      	ldr	r3, [pc, #292]	; (80002cc <_start+0x144>)
 80001a8:	62bb      	str	r3, [r7, #40]	; 0x28
  unsigned int *p = region_begin;
 80001aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80001ac:	627b      	str	r3, [r7, #36]	; 0x24
 80001ae:	e007      	b.n	80001c0 <_start+0x38>
    *p++ = *from++;
 80001b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80001b2:	1d13      	adds	r3, r2, #4
 80001b4:	633b      	str	r3, [r7, #48]	; 0x30
 80001b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80001b8:	1d19      	adds	r1, r3, #4
 80001ba:	6279      	str	r1, [r7, #36]	; 0x24
 80001bc:	6812      	ldr	r2, [r2, #0]
 80001be:	601a      	str	r2, [r3, #0]
  while (p < region_end)
 80001c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80001c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80001c4:	429a      	cmp	r2, r3
 80001c6:	d8f3      	bhi.n	80001b0 <_start+0x28>
    }

#endif

#if defined(DEBUG) && (OS_INCLUDE_STARTUP_GUARD_CHECKS)
  if ((__data_begin_guard != DATA_BEGIN_GUARD_VALUE)
 80001c8:	4b3b      	ldr	r3, [pc, #236]	; (80002b8 <_start+0x130>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	4a40      	ldr	r2, [pc, #256]	; (80002d0 <_start+0x148>)
 80001ce:	4293      	cmp	r3, r2
 80001d0:	d104      	bne.n	80001dc <_start+0x54>
      || (__data_end_guard != DATA_END_GUARD_VALUE))
 80001d2:	4b3b      	ldr	r3, [pc, #236]	; (80002c0 <_start+0x138>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	4a3f      	ldr	r2, [pc, #252]	; (80002d4 <_start+0x14c>)
 80001d8:	4293      	cmp	r3, r2
 80001da:	d000      	beq.n	80001de <_start+0x56>
    {
      for (;;)
 80001dc:	e7fe      	b.n	80001dc <_start+0x54>
	;
    }
#endif

#if defined(DEBUG) && (OS_INCLUDE_STARTUP_GUARD_CHECKS)
  __bss_begin_guard = BSS_GUARD_BAD_VALUE;
 80001de:	4b3e      	ldr	r3, [pc, #248]	; (80002d8 <_start+0x150>)
 80001e0:	4a36      	ldr	r2, [pc, #216]	; (80002bc <_start+0x134>)
 80001e2:	601a      	str	r2, [r3, #0]
  __bss_end_guard = BSS_GUARD_BAD_VALUE;
 80001e4:	4b3d      	ldr	r3, [pc, #244]	; (80002dc <_start+0x154>)
 80001e6:	4a35      	ldr	r2, [pc, #212]	; (80002bc <_start+0x134>)
 80001e8:	601a      	str	r2, [r3, #0]
 80001ea:	4b3d      	ldr	r3, [pc, #244]	; (80002e0 <_start+0x158>)
 80001ec:	623b      	str	r3, [r7, #32]
 80001ee:	4b3d      	ldr	r3, [pc, #244]	; (80002e4 <_start+0x15c>)
 80001f0:	61fb      	str	r3, [r7, #28]
  unsigned int *p = region_begin;
 80001f2:	6a3b      	ldr	r3, [r7, #32]
 80001f4:	61bb      	str	r3, [r7, #24]
 80001f6:	e004      	b.n	8000202 <_start+0x7a>
    *p++ = 0;
 80001f8:	69bb      	ldr	r3, [r7, #24]
 80001fa:	1d1a      	adds	r2, r3, #4
 80001fc:	61ba      	str	r2, [r7, #24]
 80001fe:	2200      	movs	r2, #0
 8000200:	601a      	str	r2, [r3, #0]
  while (p < region_end)
 8000202:	69fa      	ldr	r2, [r7, #28]
 8000204:	69bb      	ldr	r3, [r7, #24]
 8000206:	429a      	cmp	r2, r3
 8000208:	d8f6      	bhi.n	80001f8 <_start+0x70>
      __initialize_bss (region_begin, region_end);
    }
#endif

#if defined(DEBUG) && (OS_INCLUDE_STARTUP_GUARD_CHECKS)
  if ((__bss_begin_guard != 0) || (__bss_end_guard != 0))
 800020a:	4b33      	ldr	r3, [pc, #204]	; (80002d8 <_start+0x150>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	2b00      	cmp	r3, #0
 8000210:	d103      	bne.n	800021a <_start+0x92>
 8000212:	4b32      	ldr	r3, [pc, #200]	; (80002dc <_start+0x154>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	2b00      	cmp	r3, #0
 8000218:	d000      	beq.n	800021c <_start+0x94>
    {
      for (;;)
 800021a:	e7fe      	b.n	800021a <_start+0x92>
    }
#endif

  // Hook to continue the initialisations. Usually compute and store the
  // clock frequency in the global CMSIS variable, cleared above.
  __initialize_hardware ();
 800021c:	f001 fe58 	bl	8001ed0 <__initialize_hardware>

  // Get the argc/argv (useful in semihosting configurations).
  int argc;
  char** argv;
  __initialize_args (&argc, &argv);
 8000220:	463a      	mov	r2, r7
 8000222:	1d3b      	adds	r3, r7, #4
 8000224:	4611      	mov	r1, r2
 8000226:	4618      	mov	r0, r3
 8000228:	f001 fe04 	bl	8001e34 <__initialize_args>
  count = __preinit_array_end - __preinit_array_start;
 800022c:	4a2e      	ldr	r2, [pc, #184]	; (80002e8 <_start+0x160>)
 800022e:	4b2f      	ldr	r3, [pc, #188]	; (80002ec <_start+0x164>)
 8000230:	1ad3      	subs	r3, r2, r3
 8000232:	109b      	asrs	r3, r3, #2
 8000234:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < count; i++)
 8000236:	2300      	movs	r3, #0
 8000238:	60bb      	str	r3, [r7, #8]
 800023a:	e007      	b.n	800024c <_start+0xc4>
    __preinit_array_start[i] ();
 800023c:	4a2b      	ldr	r2, [pc, #172]	; (80002ec <_start+0x164>)
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000244:	4798      	blx	r3
  for (i = 0; i < count; i++)
 8000246:	68bb      	ldr	r3, [r7, #8]
 8000248:	3301      	adds	r3, #1
 800024a:	60bb      	str	r3, [r7, #8]
 800024c:	68fa      	ldr	r2, [r7, #12]
 800024e:	68bb      	ldr	r3, [r7, #8]
 8000250:	429a      	cmp	r2, r3
 8000252:	dcf3      	bgt.n	800023c <_start+0xb4>
  count = __init_array_end - __init_array_start;
 8000254:	4a26      	ldr	r2, [pc, #152]	; (80002f0 <_start+0x168>)
 8000256:	4b27      	ldr	r3, [pc, #156]	; (80002f4 <_start+0x16c>)
 8000258:	1ad3      	subs	r3, r2, r3
 800025a:	109b      	asrs	r3, r3, #2
 800025c:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < count; i++)
 800025e:	2300      	movs	r3, #0
 8000260:	60bb      	str	r3, [r7, #8]
 8000262:	e007      	b.n	8000274 <_start+0xec>
    __init_array_start[i] ();
 8000264:	4a23      	ldr	r2, [pc, #140]	; (80002f4 <_start+0x16c>)
 8000266:	68bb      	ldr	r3, [r7, #8]
 8000268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800026c:	4798      	blx	r3
  for (i = 0; i < count; i++)
 800026e:	68bb      	ldr	r3, [r7, #8]
 8000270:	3301      	adds	r3, #1
 8000272:	60bb      	str	r3, [r7, #8]
 8000274:	68fa      	ldr	r2, [r7, #12]
 8000276:	68bb      	ldr	r3, [r7, #8]
 8000278:	429a      	cmp	r2, r3
 800027a:	dcf3      	bgt.n	8000264 <_start+0xdc>
  // Call the standard library initialisation (mandatory for C++ to
  // execute the constructors for the static objects).
  __run_init_array ();

  // Call the main entry point, and save the exit code.
  int code = main (argc, argv);
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	683a      	ldr	r2, [r7, #0]
 8000280:	4611      	mov	r1, r2
 8000282:	4618      	mov	r0, r3
 8000284:	f003 f9de 	bl	8003644 <main>
 8000288:	6378      	str	r0, [r7, #52]	; 0x34
  count = __fini_array_end - __fini_array_start;
 800028a:	4a1b      	ldr	r2, [pc, #108]	; (80002f8 <_start+0x170>)
 800028c:	4b1b      	ldr	r3, [pc, #108]	; (80002fc <_start+0x174>)
 800028e:	1ad3      	subs	r3, r2, r3
 8000290:	109b      	asrs	r3, r3, #2
 8000292:	617b      	str	r3, [r7, #20]
  for (i = count; i > 0; i--)
 8000294:	697b      	ldr	r3, [r7, #20]
 8000296:	613b      	str	r3, [r7, #16]
 8000298:	e008      	b.n	80002ac <_start+0x124>
    __fini_array_start[i - 1] ();
 800029a:	693b      	ldr	r3, [r7, #16]
 800029c:	3b01      	subs	r3, #1
 800029e:	4a17      	ldr	r2, [pc, #92]	; (80002fc <_start+0x174>)
 80002a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002a4:	4798      	blx	r3
  for (i = count; i > 0; i--)
 80002a6:	693b      	ldr	r3, [r7, #16]
 80002a8:	3b01      	subs	r3, #1
 80002aa:	613b      	str	r3, [r7, #16]
 80002ac:	693b      	ldr	r3, [r7, #16]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	dcf3      	bgt.n	800029a <_start+0x112>

  // Run the C++ static destructors.
  __run_fini_array ();

  _exit (code);
 80002b2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80002b4:	f001 fd84 	bl	8001dc0 <_exit>
 80002b8:	20000000 	.word	0x20000000
 80002bc:	cadebaba 	.word	0xcadebaba
 80002c0:	200000f4 	.word	0x200000f4
 80002c4:	0800c080 	.word	0x0800c080
 80002c8:	20000000 	.word	0x20000000
 80002cc:	200000f8 	.word	0x200000f8
 80002d0:	12345678 	.word	0x12345678
 80002d4:	98765432 	.word	0x98765432
 80002d8:	200000f8 	.word	0x200000f8
 80002dc:	200005a0 	.word	0x200005a0
 80002e0:	200000f8 	.word	0x200000f8
 80002e4:	200005a4 	.word	0x200005a4
 80002e8:	08000840 	.word	0x08000840
 80002ec:	08000840 	.word	0x08000840
 80002f0:	08000840 	.word	0x08000840
 80002f4:	08000840 	.word	0x08000840
 80002f8:	08000840 	.word	0x08000840
 80002fc:	08000840 	.word	0x08000840

08000300 <Reset_Handler>:

// The DEBUG version is not naked, but has a proper stack frame,
// to allow setting breakpoints at Reset_Handler.
void __attribute__ ((section(".after_vectors"),noreturn))
Reset_Handler (void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
  _start ();
 8000304:	f7ff ff40 	bl	8000188 <_start>

08000308 <NMI_Handler>:

#endif

void __attribute__ ((section(".after_vectors"),weak))
NMI_Handler (void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
#if defined(DEBUG)
  __DEBUG_BKPT();
 800030c:	be00      	bkpt	0x0000
#endif
  while (1)
 800030e:	e7fe      	b.n	800030e <NMI_Handler+0x6>

08000310 <HardFault_Handler>:
// Cortex-M4 Processors, Third Edition, Chap. 12.8, page 402).

void __attribute__ ((section(".after_vectors"),weak,naked))
HardFault_Handler (void)
{
  asm volatile(
 8000310:	f01e 0f04 	tst.w	lr, #4
 8000314:	bf0c      	ite	eq
 8000316:	f3ef 8008 	mrseq	r0, MSP
 800031a:	f3ef 8009 	mrsne	r0, PSP
 800031e:	4671      	mov	r1, lr
 8000320:	4a45      	ldr	r2, [pc, #276]	; (8000438 <PendSV_Handler+0x14>)
 8000322:	4710      	bx	r2

      : /* Outputs */
      : /* Inputs */
      : /* Clobbers */
  );
}
 8000324:	bf00      	nop

08000326 <HardFault_Handler_C>:

void __attribute__ ((section(".after_vectors"),weak,used))
HardFault_Handler_C (ExceptionStackFrame* frame __attribute__((unused)),
                     uint32_t lr __attribute__((unused)))
{
 8000326:	b580      	push	{r7, lr}
 8000328:	b088      	sub	sp, #32
 800032a:	af02      	add	r7, sp, #8
 800032c:	6078      	str	r0, [r7, #4]
 800032e:	6039      	str	r1, [r7, #0]
#if defined(TRACE)
  uint32_t mmfar = SCB->MMFAR; // MemManage Fault Address
 8000330:	4b0a      	ldr	r3, [pc, #40]	; (800035c <HardFault_Handler_C+0x36>)
 8000332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000334:	617b      	str	r3, [r7, #20]
  uint32_t bfar = SCB->BFAR; // Bus Fault Address
 8000336:	4b09      	ldr	r3, [pc, #36]	; (800035c <HardFault_Handler_C+0x36>)
 8000338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800033a:	613b      	str	r3, [r7, #16]
  uint32_t cfsr = SCB->CFSR; // Configurable Fault Status Registers
 800033c:	4b07      	ldr	r3, [pc, #28]	; (800035c <HardFault_Handler_C+0x36>)
 800033e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000340:	60fb      	str	r3, [r7, #12]
    }

#endif

#if defined(TRACE)
  trace_printf ("[HardFault]\n");
 8000342:	4807      	ldr	r0, [pc, #28]	; (8000360 <HardFault_Handler_C+0x3a>)
 8000344:	f001 fd88 	bl	8001e58 <trace_printf>
  dumpExceptionStack (frame, cfsr, mmfar, bfar, lr);
 8000348:	683b      	ldr	r3, [r7, #0]
 800034a:	9300      	str	r3, [sp, #0]
 800034c:	693b      	ldr	r3, [r7, #16]
 800034e:	697a      	ldr	r2, [r7, #20]
 8000350:	68f9      	ldr	r1, [r7, #12]
 8000352:	6878      	ldr	r0, [r7, #4]
 8000354:	f001 fdc2 	bl	8001edc <dumpExceptionStack>
#endif // defined(TRACE)

#if defined(DEBUG)
  __DEBUG_BKPT();
 8000358:	be00      	bkpt	0x0000
#endif
  while (1)
 800035a:	e7fe      	b.n	800035a <HardFault_Handler_C+0x34>
 800035c:	e000ed00 	.word	0xe000ed00
 8000360:	0800609c 	.word	0x0800609c

08000364 <MemManage_Handler>:

#if defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7EM__)

void __attribute__ ((section(".after_vectors"),weak))
MemManage_Handler (void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
#if defined(DEBUG)
  __DEBUG_BKPT();
 8000368:	be00      	bkpt	0x0000
#endif
  while (1)
 800036a:	e7fe      	b.n	800036a <MemManage_Handler+0x6>

0800036c <BusFault_Handler>:
}

void __attribute__ ((section(".after_vectors"),weak,naked))
BusFault_Handler (void)
{
  asm volatile(
 800036c:	f01e 0f04 	tst.w	lr, #4
 8000370:	bf0c      	ite	eq
 8000372:	f3ef 8008 	mrseq	r0, MSP
 8000376:	f3ef 8009 	mrsne	r0, PSP
 800037a:	4671      	mov	r1, lr
 800037c:	4a2f      	ldr	r2, [pc, #188]	; (800043c <PendSV_Handler+0x18>)
 800037e:	4710      	bx	r2

      : /* Outputs */
      : /* Inputs */
      : /* Clobbers */
  );
}
 8000380:	bf00      	nop

08000382 <BusFault_Handler_C>:

void __attribute__ ((section(".after_vectors"),weak,used))
BusFault_Handler_C (ExceptionStackFrame* frame __attribute__((unused)),
                    uint32_t lr __attribute__((unused)))
{
 8000382:	b580      	push	{r7, lr}
 8000384:	b088      	sub	sp, #32
 8000386:	af02      	add	r7, sp, #8
 8000388:	6078      	str	r0, [r7, #4]
 800038a:	6039      	str	r1, [r7, #0]
#if defined(TRACE)
  uint32_t mmfar = SCB->MMFAR; // MemManage Fault Address
 800038c:	4b0a      	ldr	r3, [pc, #40]	; (80003b8 <BusFault_Handler_C+0x36>)
 800038e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000390:	617b      	str	r3, [r7, #20]
  uint32_t bfar = SCB->BFAR; // Bus Fault Address
 8000392:	4b09      	ldr	r3, [pc, #36]	; (80003b8 <BusFault_Handler_C+0x36>)
 8000394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000396:	613b      	str	r3, [r7, #16]
  uint32_t cfsr = SCB->CFSR; // Configurable Fault Status Registers
 8000398:	4b07      	ldr	r3, [pc, #28]	; (80003b8 <BusFault_Handler_C+0x36>)
 800039a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800039c:	60fb      	str	r3, [r7, #12]

  trace_printf ("[BusFault]\n");
 800039e:	4807      	ldr	r0, [pc, #28]	; (80003bc <BusFault_Handler_C+0x3a>)
 80003a0:	f001 fd5a 	bl	8001e58 <trace_printf>
  dumpExceptionStack (frame, cfsr, mmfar, bfar, lr);
 80003a4:	683b      	ldr	r3, [r7, #0]
 80003a6:	9300      	str	r3, [sp, #0]
 80003a8:	693b      	ldr	r3, [r7, #16]
 80003aa:	697a      	ldr	r2, [r7, #20]
 80003ac:	68f9      	ldr	r1, [r7, #12]
 80003ae:	6878      	ldr	r0, [r7, #4]
 80003b0:	f001 fd94 	bl	8001edc <dumpExceptionStack>
#endif // defined(TRACE)

#if defined(DEBUG)
  __DEBUG_BKPT();
 80003b4:	be00      	bkpt	0x0000
#endif
  while (1)
 80003b6:	e7fe      	b.n	80003b6 <BusFault_Handler_C+0x34>
 80003b8:	e000ed00 	.word	0xe000ed00
 80003bc:	080060ac 	.word	0x080060ac

080003c0 <UsageFault_Handler>:
}

void __attribute__ ((section(".after_vectors"),weak,naked))
UsageFault_Handler (void)
{
  asm volatile(
 80003c0:	f01e 0f04 	tst.w	lr, #4
 80003c4:	bf0c      	ite	eq
 80003c6:	f3ef 8008 	mrseq	r0, MSP
 80003ca:	f3ef 8009 	mrsne	r0, PSP
 80003ce:	4671      	mov	r1, lr
 80003d0:	4a1b      	ldr	r2, [pc, #108]	; (8000440 <PendSV_Handler+0x1c>)
 80003d2:	4710      	bx	r2

      : /* Outputs */
      : /* Inputs */
      : /* Clobbers */
  );
}
 80003d4:	bf00      	nop

080003d6 <UsageFault_Handler_C>:

void __attribute__ ((section(".after_vectors"),weak,used))
UsageFault_Handler_C (ExceptionStackFrame* frame __attribute__((unused)),
                      uint32_t lr __attribute__((unused)))
{
 80003d6:	b580      	push	{r7, lr}
 80003d8:	b088      	sub	sp, #32
 80003da:	af02      	add	r7, sp, #8
 80003dc:	6078      	str	r0, [r7, #4]
 80003de:	6039      	str	r1, [r7, #0]
#if defined(TRACE)
  uint32_t mmfar = SCB->MMFAR; // MemManage Fault Address
 80003e0:	4b0a      	ldr	r3, [pc, #40]	; (800040c <UsageFault_Handler_C+0x36>)
 80003e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003e4:	617b      	str	r3, [r7, #20]
  uint32_t bfar = SCB->BFAR; // Bus Fault Address
 80003e6:	4b09      	ldr	r3, [pc, #36]	; (800040c <UsageFault_Handler_C+0x36>)
 80003e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80003ea:	613b      	str	r3, [r7, #16]
  uint32_t cfsr = SCB->CFSR; // Configurable Fault Status Registers
 80003ec:	4b07      	ldr	r3, [pc, #28]	; (800040c <UsageFault_Handler_C+0x36>)
 80003ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003f0:	60fb      	str	r3, [r7, #12]
    }

#endif

#if defined(TRACE)
  trace_printf ("[UsageFault]\n");
 80003f2:	4807      	ldr	r0, [pc, #28]	; (8000410 <UsageFault_Handler_C+0x3a>)
 80003f4:	f001 fd30 	bl	8001e58 <trace_printf>
  dumpExceptionStack (frame, cfsr, mmfar, bfar, lr);
 80003f8:	683b      	ldr	r3, [r7, #0]
 80003fa:	9300      	str	r3, [sp, #0]
 80003fc:	693b      	ldr	r3, [r7, #16]
 80003fe:	697a      	ldr	r2, [r7, #20]
 8000400:	68f9      	ldr	r1, [r7, #12]
 8000402:	6878      	ldr	r0, [r7, #4]
 8000404:	f001 fd6a 	bl	8001edc <dumpExceptionStack>
#endif // defined(TRACE)

#if defined(DEBUG)
  __DEBUG_BKPT();
 8000408:	be00      	bkpt	0x0000
#endif
  while (1)
 800040a:	e7fe      	b.n	800040a <UsageFault_Handler_C+0x34>
 800040c:	e000ed00 	.word	0xe000ed00
 8000410:	080060b8 	.word	0x080060b8

08000414 <SVC_Handler>:

#endif

void __attribute__ ((section(".after_vectors"),weak))
SVC_Handler (void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
#if defined(DEBUG)
  __DEBUG_BKPT();
 8000418:	be00      	bkpt	0x0000
#endif
  while (1)
 800041a:	e7fe      	b.n	800041a <SVC_Handler+0x6>

0800041c <DebugMon_Handler>:

#if defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7EM__)

void __attribute__ ((section(".after_vectors"),weak))
DebugMon_Handler (void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
#if defined(DEBUG)
  __DEBUG_BKPT();
 8000420:	be00      	bkpt	0x0000
#endif
  while (1)
 8000422:	e7fe      	b.n	8000422 <DebugMon_Handler+0x6>

08000424 <PendSV_Handler>:

#endif

void __attribute__ ((section(".after_vectors"),weak))
PendSV_Handler (void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
#if defined(DEBUG)
  __DEBUG_BKPT();
 8000428:	be00      	bkpt	0x0000
#endif
  while (1)
 800042a:	e7fe      	b.n	800042a <PendSV_Handler+0x6>
    }
}

void __attribute__ ((section(".after_vectors"),weak))
SysTick_Handler (void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  // DO NOT loop, just return.
  // Useful in case someone (like STM HAL) inadvertently enables SysTick.
  ;
}
 8000430:	bf00      	nop
 8000432:	46bd      	mov	sp, r7
 8000434:	bc80      	pop	{r7}
 8000436:	4770      	bx	lr
 8000438:	08000327 	.word	0x08000327
 800043c:	08000383 	.word	0x08000383
 8000440:	080003d7 	.word	0x080003d7

08000444 <Default_Handler>:

// Processor ends up here if an unexpected interrupt occurs or a specific
// handler is not present in the application code.

void __attribute__ ((section(".after_vectors")))
Default_Handler(void) {
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
    while (1) {
 8000448:	e7fe      	b.n	8000448 <Default_Handler+0x4>

0800044a <WWDG_IRQHandler>:
    }
}

void __attribute__ ((weak, section(".after_vectors"))) WWDG_IRQHandler() {
 800044a:	b580      	push	{r7, lr}
 800044c:	af00      	add	r7, sp, #0
                          Default_Handler();
 800044e:	f7ff fff9 	bl	8000444 <Default_Handler>
                      };
 8000452:	bf00      	nop
 8000454:	bd80      	pop	{r7, pc}

08000456 <PVD_PVM_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) PVD_PVM_IRQHandler() {
 8000456:	b580      	push	{r7, lr}
 8000458:	af00      	add	r7, sp, #0
                          Default_Handler();
 800045a:	f7ff fff3 	bl	8000444 <Default_Handler>
                      };
 800045e:	bf00      	nop
 8000460:	bd80      	pop	{r7, pc}

08000462 <TAMP_STAMP_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) TAMP_STAMP_IRQHandler() {
 8000462:	b580      	push	{r7, lr}
 8000464:	af00      	add	r7, sp, #0
                          Default_Handler();
 8000466:	f7ff ffed 	bl	8000444 <Default_Handler>
                      };
 800046a:	bf00      	nop
 800046c:	bd80      	pop	{r7, pc}

0800046e <RTC_WKUP_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) RTC_WKUP_IRQHandler() {
 800046e:	b580      	push	{r7, lr}
 8000470:	af00      	add	r7, sp, #0
                          Default_Handler();
 8000472:	f7ff ffe7 	bl	8000444 <Default_Handler>
                      };
 8000476:	bf00      	nop
 8000478:	bd80      	pop	{r7, pc}

0800047a <FLASH_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) FLASH_IRQHandler() {
 800047a:	b580      	push	{r7, lr}
 800047c:	af00      	add	r7, sp, #0
                          Default_Handler();
 800047e:	f7ff ffe1 	bl	8000444 <Default_Handler>
                      };
 8000482:	bf00      	nop
 8000484:	bd80      	pop	{r7, pc}

08000486 <RCC_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) RCC_IRQHandler() {
 8000486:	b580      	push	{r7, lr}
 8000488:	af00      	add	r7, sp, #0
                          Default_Handler();
 800048a:	f7ff ffdb 	bl	8000444 <Default_Handler>
                      };
 800048e:	bf00      	nop
 8000490:	bd80      	pop	{r7, pc}

08000492 <EXTI0_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) EXTI0_IRQHandler() {
 8000492:	b580      	push	{r7, lr}
 8000494:	af00      	add	r7, sp, #0
                          Default_Handler();
 8000496:	f7ff ffd5 	bl	8000444 <Default_Handler>
                      };
 800049a:	bf00      	nop
 800049c:	bd80      	pop	{r7, pc}

0800049e <EXTI1_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) EXTI1_IRQHandler() {
 800049e:	b580      	push	{r7, lr}
 80004a0:	af00      	add	r7, sp, #0
                          Default_Handler();
 80004a2:	f7ff ffcf 	bl	8000444 <Default_Handler>
                      };
 80004a6:	bf00      	nop
 80004a8:	bd80      	pop	{r7, pc}

080004aa <EXTI2_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) EXTI2_IRQHandler() {
 80004aa:	b580      	push	{r7, lr}
 80004ac:	af00      	add	r7, sp, #0
                          Default_Handler();
 80004ae:	f7ff ffc9 	bl	8000444 <Default_Handler>
                      };
 80004b2:	bf00      	nop
 80004b4:	bd80      	pop	{r7, pc}

080004b6 <EXTI3_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) EXTI3_IRQHandler() {
 80004b6:	b580      	push	{r7, lr}
 80004b8:	af00      	add	r7, sp, #0
                          Default_Handler();
 80004ba:	f7ff ffc3 	bl	8000444 <Default_Handler>
                      };
 80004be:	bf00      	nop
 80004c0:	bd80      	pop	{r7, pc}

080004c2 <EXTI4_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) EXTI4_IRQHandler() {
 80004c2:	b580      	push	{r7, lr}
 80004c4:	af00      	add	r7, sp, #0
                          Default_Handler();
 80004c6:	f7ff ffbd 	bl	8000444 <Default_Handler>
                      };
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}

080004ce <DMA1_Channel1_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) DMA1_Channel1_IRQHandler() {
 80004ce:	b580      	push	{r7, lr}
 80004d0:	af00      	add	r7, sp, #0
                          Default_Handler();
 80004d2:	f7ff ffb7 	bl	8000444 <Default_Handler>
                      };
 80004d6:	bf00      	nop
 80004d8:	bd80      	pop	{r7, pc}

080004da <DMA1_Channel2_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) DMA1_Channel2_IRQHandler() {
 80004da:	b580      	push	{r7, lr}
 80004dc:	af00      	add	r7, sp, #0
                          Default_Handler();
 80004de:	f7ff ffb1 	bl	8000444 <Default_Handler>
                      };
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}

080004e6 <DMA1_Channel3_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) DMA1_Channel3_IRQHandler() {
 80004e6:	b580      	push	{r7, lr}
 80004e8:	af00      	add	r7, sp, #0
                          Default_Handler();
 80004ea:	f7ff ffab 	bl	8000444 <Default_Handler>
                      };
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}

080004f2 <DMA1_Channel4_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) DMA1_Channel4_IRQHandler() {
 80004f2:	b580      	push	{r7, lr}
 80004f4:	af00      	add	r7, sp, #0
                          Default_Handler();
 80004f6:	f7ff ffa5 	bl	8000444 <Default_Handler>
                      };
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}

080004fe <DMA1_Channel5_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) DMA1_Channel5_IRQHandler() {
 80004fe:	b580      	push	{r7, lr}
 8000500:	af00      	add	r7, sp, #0
                          Default_Handler();
 8000502:	f7ff ff9f 	bl	8000444 <Default_Handler>
                      };
 8000506:	bf00      	nop
 8000508:	bd80      	pop	{r7, pc}

0800050a <DMA1_Channel6_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) DMA1_Channel6_IRQHandler() {
 800050a:	b580      	push	{r7, lr}
 800050c:	af00      	add	r7, sp, #0
                          Default_Handler();
 800050e:	f7ff ff99 	bl	8000444 <Default_Handler>
                      };
 8000512:	bf00      	nop
 8000514:	bd80      	pop	{r7, pc}

08000516 <DMA1_Channel7_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) DMA1_Channel7_IRQHandler() {
 8000516:	b580      	push	{r7, lr}
 8000518:	af00      	add	r7, sp, #0
                          Default_Handler();
 800051a:	f7ff ff93 	bl	8000444 <Default_Handler>
                      };
 800051e:	bf00      	nop
 8000520:	bd80      	pop	{r7, pc}

08000522 <ADC1_2_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) ADC1_2_IRQHandler() {
 8000522:	b580      	push	{r7, lr}
 8000524:	af00      	add	r7, sp, #0
                          Default_Handler();
 8000526:	f7ff ff8d 	bl	8000444 <Default_Handler>
                      };
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}

0800052e <CAN1_TX_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) CAN1_TX_IRQHandler() {
 800052e:	b580      	push	{r7, lr}
 8000530:	af00      	add	r7, sp, #0
                          Default_Handler();
 8000532:	f7ff ff87 	bl	8000444 <Default_Handler>
                      };
 8000536:	bf00      	nop
 8000538:	bd80      	pop	{r7, pc}

0800053a <CAN1_RX0_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) CAN1_RX0_IRQHandler() {
 800053a:	b580      	push	{r7, lr}
 800053c:	af00      	add	r7, sp, #0
                          Default_Handler();
 800053e:	f7ff ff81 	bl	8000444 <Default_Handler>
                      };
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}

08000546 <CAN1_RX1_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) CAN1_RX1_IRQHandler() {
 8000546:	b580      	push	{r7, lr}
 8000548:	af00      	add	r7, sp, #0
                          Default_Handler();
 800054a:	f7ff ff7b 	bl	8000444 <Default_Handler>
                      };
 800054e:	bf00      	nop
 8000550:	bd80      	pop	{r7, pc}

08000552 <CAN1_SCE_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) CAN1_SCE_IRQHandler() {
 8000552:	b580      	push	{r7, lr}
 8000554:	af00      	add	r7, sp, #0
                          Default_Handler();
 8000556:	f7ff ff75 	bl	8000444 <Default_Handler>
                      };
 800055a:	bf00      	nop
 800055c:	bd80      	pop	{r7, pc}

0800055e <EXTI9_5_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) EXTI9_5_IRQHandler() {
 800055e:	b580      	push	{r7, lr}
 8000560:	af00      	add	r7, sp, #0
                          Default_Handler();
 8000562:	f7ff ff6f 	bl	8000444 <Default_Handler>
                      };
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}

0800056a <TIM1_BRK_TIM15_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) TIM1_BRK_TIM15_IRQHandler() {
 800056a:	b580      	push	{r7, lr}
 800056c:	af00      	add	r7, sp, #0
                          Default_Handler();
 800056e:	f7ff ff69 	bl	8000444 <Default_Handler>
                      };
 8000572:	bf00      	nop
 8000574:	bd80      	pop	{r7, pc}

08000576 <TIM1_UP_TIM16_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) TIM1_UP_TIM16_IRQHandler() {
 8000576:	b580      	push	{r7, lr}
 8000578:	af00      	add	r7, sp, #0
                          Default_Handler();
 800057a:	f7ff ff63 	bl	8000444 <Default_Handler>
                      };
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}

08000582 <TIM1_TRG_COM_TIM17_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) TIM1_TRG_COM_TIM17_IRQHandler() {
 8000582:	b580      	push	{r7, lr}
 8000584:	af00      	add	r7, sp, #0
                          Default_Handler();
 8000586:	f7ff ff5d 	bl	8000444 <Default_Handler>
                      };
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}

0800058e <TIM1_CC_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) TIM1_CC_IRQHandler() {
 800058e:	b580      	push	{r7, lr}
 8000590:	af00      	add	r7, sp, #0
                          Default_Handler();
 8000592:	f7ff ff57 	bl	8000444 <Default_Handler>
                      };
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}

0800059a <TIM2_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) TIM2_IRQHandler() {
 800059a:	b580      	push	{r7, lr}
 800059c:	af00      	add	r7, sp, #0
                          Default_Handler();
 800059e:	f7ff ff51 	bl	8000444 <Default_Handler>
                      };
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}

void __attribute__ ((weak, section(".after_vectors"))) TIM3_IRQHandler() {
 80005a6:	b580      	push	{r7, lr}
 80005a8:	af00      	add	r7, sp, #0
                          Default_Handler();
 80005aa:	f7ff ff4b 	bl	8000444 <Default_Handler>
                      };
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}

080005b2 <TIM4_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) TIM4_IRQHandler() {
 80005b2:	b580      	push	{r7, lr}
 80005b4:	af00      	add	r7, sp, #0
                          Default_Handler();
 80005b6:	f7ff ff45 	bl	8000444 <Default_Handler>
                      };
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}

080005be <I2C1_EV_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) I2C1_EV_IRQHandler() {
 80005be:	b580      	push	{r7, lr}
 80005c0:	af00      	add	r7, sp, #0
                          Default_Handler();
 80005c2:	f7ff ff3f 	bl	8000444 <Default_Handler>
                      };
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}

080005ca <I2C1_ER_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) I2C1_ER_IRQHandler() {
 80005ca:	b580      	push	{r7, lr}
 80005cc:	af00      	add	r7, sp, #0
                          Default_Handler();
 80005ce:	f7ff ff39 	bl	8000444 <Default_Handler>
                      };
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}

080005d6 <I2C2_EV_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) I2C2_EV_IRQHandler() {
 80005d6:	b580      	push	{r7, lr}
 80005d8:	af00      	add	r7, sp, #0
                          Default_Handler();
 80005da:	f7ff ff33 	bl	8000444 <Default_Handler>
                      };
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}

080005e2 <I2C2_ER_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) I2C2_ER_IRQHandler() {
 80005e2:	b580      	push	{r7, lr}
 80005e4:	af00      	add	r7, sp, #0
                          Default_Handler();
 80005e6:	f7ff ff2d 	bl	8000444 <Default_Handler>
                      };
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}

080005ee <SPI1_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) SPI1_IRQHandler() {
 80005ee:	b580      	push	{r7, lr}
 80005f0:	af00      	add	r7, sp, #0
                          Default_Handler();
 80005f2:	f7ff ff27 	bl	8000444 <Default_Handler>
                      };
 80005f6:	bf00      	nop
 80005f8:	bd80      	pop	{r7, pc}

080005fa <SPI2_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) SPI2_IRQHandler() {
 80005fa:	b580      	push	{r7, lr}
 80005fc:	af00      	add	r7, sp, #0
                          Default_Handler();
 80005fe:	f7ff ff21 	bl	8000444 <Default_Handler>
                      };
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}

08000606 <USART1_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) USART1_IRQHandler() {
 8000606:	b580      	push	{r7, lr}
 8000608:	af00      	add	r7, sp, #0
                          Default_Handler();
 800060a:	f7ff ff1b 	bl	8000444 <Default_Handler>
                      };
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}

08000612 <USART2_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) USART2_IRQHandler() {
 8000612:	b580      	push	{r7, lr}
 8000614:	af00      	add	r7, sp, #0
                          Default_Handler();
 8000616:	f7ff ff15 	bl	8000444 <Default_Handler>
                      };
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}

0800061e <USART3_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) USART3_IRQHandler() {
 800061e:	b580      	push	{r7, lr}
 8000620:	af00      	add	r7, sp, #0
                          Default_Handler();
 8000622:	f7ff ff0f 	bl	8000444 <Default_Handler>
                      };
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}

0800062a <EXTI15_10_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) EXTI15_10_IRQHandler() {
 800062a:	b580      	push	{r7, lr}
 800062c:	af00      	add	r7, sp, #0
                          Default_Handler();
 800062e:	f7ff ff09 	bl	8000444 <Default_Handler>
                      };
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}

08000636 <RTC_Alarm_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) RTC_Alarm_IRQHandler() {
 8000636:	b580      	push	{r7, lr}
 8000638:	af00      	add	r7, sp, #0
                          Default_Handler();
 800063a:	f7ff ff03 	bl	8000444 <Default_Handler>
                      };
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}

08000642 <DFSDM1_FLT3_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) DFSDM1_FLT3_IRQHandler() {
 8000642:	b580      	push	{r7, lr}
 8000644:	af00      	add	r7, sp, #0
                          Default_Handler();
 8000646:	f7ff fefd 	bl	8000444 <Default_Handler>
                      };
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}

0800064e <TIM8_BRK_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) TIM8_BRK_IRQHandler() {
 800064e:	b580      	push	{r7, lr}
 8000650:	af00      	add	r7, sp, #0
                          Default_Handler();
 8000652:	f7ff fef7 	bl	8000444 <Default_Handler>
                      };
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}

0800065a <TIM8_UP_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) TIM8_UP_IRQHandler() {
 800065a:	b580      	push	{r7, lr}
 800065c:	af00      	add	r7, sp, #0
                          Default_Handler();
 800065e:	f7ff fef1 	bl	8000444 <Default_Handler>
                      };
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}

08000666 <TIM8_TRG_COM_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) TIM8_TRG_COM_IRQHandler() {
 8000666:	b580      	push	{r7, lr}
 8000668:	af00      	add	r7, sp, #0
                          Default_Handler();
 800066a:	f7ff feeb 	bl	8000444 <Default_Handler>
                      };
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}

08000672 <TIM8_CC_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) TIM8_CC_IRQHandler() {
 8000672:	b580      	push	{r7, lr}
 8000674:	af00      	add	r7, sp, #0
                          Default_Handler();
 8000676:	f7ff fee5 	bl	8000444 <Default_Handler>
                      };
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}

0800067e <ADC3_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) ADC3_IRQHandler() {
 800067e:	b580      	push	{r7, lr}
 8000680:	af00      	add	r7, sp, #0
                          Default_Handler();
 8000682:	f7ff fedf 	bl	8000444 <Default_Handler>
                      };
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}

0800068a <FMC_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) FMC_IRQHandler() {
 800068a:	b580      	push	{r7, lr}
 800068c:	af00      	add	r7, sp, #0
                          Default_Handler();
 800068e:	f7ff fed9 	bl	8000444 <Default_Handler>
                      };
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}

08000696 <SDMMC1_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) SDMMC1_IRQHandler() {
 8000696:	b580      	push	{r7, lr}
 8000698:	af00      	add	r7, sp, #0
                          Default_Handler();
 800069a:	f7ff fed3 	bl	8000444 <Default_Handler>
                      };
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <TIM5_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) TIM5_IRQHandler() {
 80006a2:	b580      	push	{r7, lr}
 80006a4:	af00      	add	r7, sp, #0
                          Default_Handler();
 80006a6:	f7ff fecd 	bl	8000444 <Default_Handler>
                      };
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}

080006ae <SPI3_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) SPI3_IRQHandler() {
 80006ae:	b580      	push	{r7, lr}
 80006b0:	af00      	add	r7, sp, #0
                          Default_Handler();
 80006b2:	f7ff fec7 	bl	8000444 <Default_Handler>
                      };
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}

080006ba <UART4_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) UART4_IRQHandler() {
 80006ba:	b580      	push	{r7, lr}
 80006bc:	af00      	add	r7, sp, #0
                          Default_Handler();
 80006be:	f7ff fec1 	bl	8000444 <Default_Handler>
                      };
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <UART5_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) UART5_IRQHandler() {
 80006c6:	b580      	push	{r7, lr}
 80006c8:	af00      	add	r7, sp, #0
                          Default_Handler();
 80006ca:	f7ff febb 	bl	8000444 <Default_Handler>
                      };
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}

void __attribute__ ((weak, section(".after_vectors"))) TIM6_DAC_IRQHandler() {
 80006d2:	b580      	push	{r7, lr}
 80006d4:	af00      	add	r7, sp, #0
                          Default_Handler();
 80006d6:	f7ff feb5 	bl	8000444 <Default_Handler>
                      };
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}

080006de <TIM7_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) TIM7_IRQHandler() {
 80006de:	b580      	push	{r7, lr}
 80006e0:	af00      	add	r7, sp, #0
                          Default_Handler();
 80006e2:	f7ff feaf 	bl	8000444 <Default_Handler>
                      };
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}

080006ea <DMA2_Channel1_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) DMA2_Channel1_IRQHandler() {
 80006ea:	b580      	push	{r7, lr}
 80006ec:	af00      	add	r7, sp, #0
                          Default_Handler();
 80006ee:	f7ff fea9 	bl	8000444 <Default_Handler>
                      };
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <DMA2_Channel2_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) DMA2_Channel2_IRQHandler() {
 80006f6:	b580      	push	{r7, lr}
 80006f8:	af00      	add	r7, sp, #0
                          Default_Handler();
 80006fa:	f7ff fea3 	bl	8000444 <Default_Handler>
                      };
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}

08000702 <DMA2_Channel3_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) DMA2_Channel3_IRQHandler() {
 8000702:	b580      	push	{r7, lr}
 8000704:	af00      	add	r7, sp, #0
                          Default_Handler();
 8000706:	f7ff fe9d 	bl	8000444 <Default_Handler>
                      };
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}

0800070e <DMA2_Channel4_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) DMA2_Channel4_IRQHandler() {
 800070e:	b580      	push	{r7, lr}
 8000710:	af00      	add	r7, sp, #0
                          Default_Handler();
 8000712:	f7ff fe97 	bl	8000444 <Default_Handler>
                      };
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}

0800071a <DMA2_Channel5_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) DMA2_Channel5_IRQHandler() {
 800071a:	b580      	push	{r7, lr}
 800071c:	af00      	add	r7, sp, #0
                          Default_Handler();
 800071e:	f7ff fe91 	bl	8000444 <Default_Handler>
                      };
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}

08000726 <DFSDM1_FLT0_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) DFSDM1_FLT0_IRQHandler() {
 8000726:	b580      	push	{r7, lr}
 8000728:	af00      	add	r7, sp, #0
                          Default_Handler();
 800072a:	f7ff fe8b 	bl	8000444 <Default_Handler>
                      };
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}

08000732 <DFSDM1_FLT1_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) DFSDM1_FLT1_IRQHandler() {
 8000732:	b580      	push	{r7, lr}
 8000734:	af00      	add	r7, sp, #0
                          Default_Handler();
 8000736:	f7ff fe85 	bl	8000444 <Default_Handler>
                      };
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}

0800073e <DFSDM1_FLT2_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) DFSDM1_FLT2_IRQHandler() {
 800073e:	b580      	push	{r7, lr}
 8000740:	af00      	add	r7, sp, #0
                          Default_Handler();
 8000742:	f7ff fe7f 	bl	8000444 <Default_Handler>
                      };
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}

0800074a <COMP_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) COMP_IRQHandler() {
 800074a:	b580      	push	{r7, lr}
 800074c:	af00      	add	r7, sp, #0
                          Default_Handler();
 800074e:	f7ff fe79 	bl	8000444 <Default_Handler>
                      };
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}

08000756 <LPTIM1_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) LPTIM1_IRQHandler() {
 8000756:	b580      	push	{r7, lr}
 8000758:	af00      	add	r7, sp, #0
                          Default_Handler();
 800075a:	f7ff fe73 	bl	8000444 <Default_Handler>
                      };
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}

08000762 <LPTIM2_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) LPTIM2_IRQHandler() {
 8000762:	b580      	push	{r7, lr}
 8000764:	af00      	add	r7, sp, #0
                          Default_Handler();
 8000766:	f7ff fe6d 	bl	8000444 <Default_Handler>
                      };
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}

0800076e <OTG_FS_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) OTG_FS_IRQHandler() {
 800076e:	b580      	push	{r7, lr}
 8000770:	af00      	add	r7, sp, #0
                          Default_Handler();
 8000772:	f7ff fe67 	bl	8000444 <Default_Handler>
                      };
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}

0800077a <DMA2_Channel6_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) DMA2_Channel6_IRQHandler() {
 800077a:	b580      	push	{r7, lr}
 800077c:	af00      	add	r7, sp, #0
                          Default_Handler();
 800077e:	f7ff fe61 	bl	8000444 <Default_Handler>
                      };
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}

08000786 <DMA2_Channel7_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) DMA2_Channel7_IRQHandler() {
 8000786:	b580      	push	{r7, lr}
 8000788:	af00      	add	r7, sp, #0
                          Default_Handler();
 800078a:	f7ff fe5b 	bl	8000444 <Default_Handler>
                      };
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}

08000792 <LPUART1_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) LPUART1_IRQHandler() {
 8000792:	b580      	push	{r7, lr}
 8000794:	af00      	add	r7, sp, #0
                          Default_Handler();
 8000796:	f7ff fe55 	bl	8000444 <Default_Handler>
                      };
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}

0800079e <QUADSPI_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) QUADSPI_IRQHandler() {
 800079e:	b580      	push	{r7, lr}
 80007a0:	af00      	add	r7, sp, #0
                          Default_Handler();
 80007a2:	f7ff fe4f 	bl	8000444 <Default_Handler>
                      };
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}

080007aa <I2C3_EV_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) I2C3_EV_IRQHandler() {
 80007aa:	b580      	push	{r7, lr}
 80007ac:	af00      	add	r7, sp, #0
                          Default_Handler();
 80007ae:	f7ff fe49 	bl	8000444 <Default_Handler>
                      };
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <I2C3_ER_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) I2C3_ER_IRQHandler() {
 80007b6:	b580      	push	{r7, lr}
 80007b8:	af00      	add	r7, sp, #0
                          Default_Handler();
 80007ba:	f7ff fe43 	bl	8000444 <Default_Handler>
                      };
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <SAI1_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) SAI1_IRQHandler() {
 80007c2:	b580      	push	{r7, lr}
 80007c4:	af00      	add	r7, sp, #0
                          Default_Handler();
 80007c6:	f7ff fe3d 	bl	8000444 <Default_Handler>
                      };
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}

080007ce <SAI2_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) SAI2_IRQHandler() {
 80007ce:	b580      	push	{r7, lr}
 80007d0:	af00      	add	r7, sp, #0
                          Default_Handler();
 80007d2:	f7ff fe37 	bl	8000444 <Default_Handler>
                      };
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}

080007da <SWPMI1_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) SWPMI1_IRQHandler() {
 80007da:	b580      	push	{r7, lr}
 80007dc:	af00      	add	r7, sp, #0
                          Default_Handler();
 80007de:	f7ff fe31 	bl	8000444 <Default_Handler>
                      };
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <TSC_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) TSC_IRQHandler() {
 80007e6:	b580      	push	{r7, lr}
 80007e8:	af00      	add	r7, sp, #0
                          Default_Handler();
 80007ea:	f7ff fe2b 	bl	8000444 <Default_Handler>
                      };
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <LCD_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) LCD_IRQHandler() {
 80007f2:	b580      	push	{r7, lr}
 80007f4:	af00      	add	r7, sp, #0
                          Default_Handler();
 80007f6:	f7ff fe25 	bl	8000444 <Default_Handler>
                      };
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}

080007fe <RNG_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) RNG_IRQHandler() {
 80007fe:	b580      	push	{r7, lr}
 8000800:	af00      	add	r7, sp, #0
                          Default_Handler();
 8000802:	f7ff fe1f 	bl	8000444 <Default_Handler>
                      };
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}

0800080a <FPU_IRQHandler>:

void __attribute__ ((weak, section(".after_vectors"))) FPU_IRQHandler() {
 800080a:	b580      	push	{r7, lr}
 800080c:	af00      	add	r7, sp, #0
                          Default_Handler();
 800080e:	f7ff fe19 	bl	8000444 <Default_Handler>
                      };
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}

Disassembly of section .text:

08000840 <dummyButtonHandler>:
#include <sound.h>

static void testTask(uint32_t parameters);
static uint8_t firstStart;

static void dummyButtonHandler() {
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
    soundKeyBeep();
 8000844:	f003 f956 	bl	8003af4 <soundKeyBeep>
}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}

0800084c <buttonNoHandler>:

static void buttonNoHandler(uint32_t pressType) {
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
    soundKeyBeep();
 8000854:	f003 f94e 	bl	8003af4 <soundKeyBeep>
    soundStopAlarm();
 8000858:	f003 f96c 	bl	8003b34 <soundStopAlarm>
    soundSetLevel(3);
 800085c:	2003      	movs	r0, #3
 800085e:	f003 f91d 	bl	8003a9c <soundSetLevel>
    osTaskDelHandler(testTask);
 8000862:	4804      	ldr	r0, [pc, #16]	; (8000874 <buttonNoHandler+0x28>)
 8000864:	f003 fd7a 	bl	800435c <osTaskDelHandler>
    showManualTestsScreen();
 8000868:	f001 f912 	bl	8001a90 <showManualTestsScreen>
}
 800086c:	bf00      	nop
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	08000879 	.word	0x08000879

08000878 <testTask>:
    dummyButtonHandler, dummyButtonHandler, dummyButtonHandler, dummyButtonHandler,
    dummyButtonHandler, dummyButtonHandler, dummyButtonHandler, buttonNoHandler,
    dummyButtonHandler
};

static void testTask(uint32_t parameters) {
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
    displayAlarmTest();
 8000880:	f002 fd3e 	bl	8003300 <displayAlarmTest>
    if (firstStart) {
 8000884:	4b09      	ldr	r3, [pc, #36]	; (80008ac <testTask+0x34>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d003      	beq.n	8000894 <testTask+0x1c>
        firstStart = 0;
 800088c:	4b07      	ldr	r3, [pc, #28]	; (80008ac <testTask+0x34>)
 800088e:	2200      	movs	r2, #0
 8000890:	701a      	strb	r2, [r3, #0]
 8000892:	e001      	b.n	8000898 <testTask+0x20>
    } else {
        soundHiAlarm();
 8000894:	f003 f93e 	bl	8003b14 <soundHiAlarm>
    }
    osTaskAdd(testTask, 0, 1000);
 8000898:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800089c:	2100      	movs	r1, #0
 800089e:	4804      	ldr	r0, [pc, #16]	; (80008b0 <testTask+0x38>)
 80008a0:	f003 fce2 	bl	8004268 <osTaskAdd>
}
 80008a4:	bf00      	nop
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	200000fc 	.word	0x200000fc
 80008b0:	08000879 	.word	0x08000879

080008b4 <startAlarmTest>:

void startAlarmTest() {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
    for (buttonName_t btn = 0; btn < Button_Last; btn++) {
 80008ba:	2300      	movs	r3, #0
 80008bc:	71fb      	strb	r3, [r7, #7]
 80008be:	e00b      	b.n	80008d8 <startAlarmTest+0x24>
        setButtonHandler(btn, handlers[btn]);
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	4a0d      	ldr	r2, [pc, #52]	; (80008f8 <startAlarmTest+0x44>)
 80008c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	4611      	mov	r1, r2
 80008cc:	4618      	mov	r0, r3
 80008ce:	f004 fa73 	bl	8004db8 <setButtonHandler>
    for (buttonName_t btn = 0; btn < Button_Last; btn++) {
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	3301      	adds	r3, #1
 80008d6:	71fb      	strb	r3, [r7, #7]
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	2b10      	cmp	r3, #16
 80008dc:	d9f0      	bls.n	80008c0 <startAlarmTest+0xc>
    }

    firstStart = 1;
 80008de:	4b07      	ldr	r3, [pc, #28]	; (80008fc <startAlarmTest+0x48>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	701a      	strb	r2, [r3, #0]
    osTaskAdd(testTask, 0, 200);
 80008e4:	22c8      	movs	r2, #200	; 0xc8
 80008e6:	2100      	movs	r1, #0
 80008e8:	4805      	ldr	r0, [pc, #20]	; (8000900 <startAlarmTest+0x4c>)
 80008ea:	f003 fcbd 	bl	8004268 <osTaskAdd>
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	08005c08 	.word	0x08005c08
 80008fc:	200000fc 	.word	0x200000fc
 8000900:	08000879 	.word	0x08000879

08000904 <button6Handler>:
    Button_5, Button_0, Button_Point, Button_Lock,
    Button_Info, Button_No, Button_Ok, Button_Prime,
    Button_Power, Button_Last
};

static void button6Handler(uint32_t pressType) {
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]

    if (buttonsTestOrder[testStage] == Button_6) {
 800090c:	4b08      	ldr	r3, [pc, #32]	; (8000930 <button6Handler+0x2c>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	461a      	mov	r2, r3
 8000912:	4b08      	ldr	r3, [pc, #32]	; (8000934 <button6Handler+0x30>)
 8000914:	5c9b      	ldrb	r3, [r3, r2]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d105      	bne.n	8000926 <button6Handler+0x22>
        testStage++;
 800091a:	4b05      	ldr	r3, [pc, #20]	; (8000930 <button6Handler+0x2c>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	3301      	adds	r3, #1
 8000920:	b2da      	uxtb	r2, r3
 8000922:	4b03      	ldr	r3, [pc, #12]	; (8000930 <button6Handler+0x2c>)
 8000924:	701a      	strb	r2, [r3, #0]
    }
}
 8000926:	bf00      	nop
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr
 8000930:	200000fd 	.word	0x200000fd
 8000934:	08005c4c 	.word	0x08005c4c

08000938 <button7Handler>:

static void button7Handler(uint32_t pressType) {
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
    if (buttonsTestOrder[testStage] == Button_7) {
 8000940:	4b08      	ldr	r3, [pc, #32]	; (8000964 <button7Handler+0x2c>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	461a      	mov	r2, r3
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <button7Handler+0x30>)
 8000948:	5c9b      	ldrb	r3, [r3, r2]
 800094a:	2b01      	cmp	r3, #1
 800094c:	d105      	bne.n	800095a <button7Handler+0x22>
        testStage++;
 800094e:	4b05      	ldr	r3, [pc, #20]	; (8000964 <button7Handler+0x2c>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	3301      	adds	r3, #1
 8000954:	b2da      	uxtb	r2, r3
 8000956:	4b03      	ldr	r3, [pc, #12]	; (8000964 <button7Handler+0x2c>)
 8000958:	701a      	strb	r2, [r3, #0]
    }
}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr
 8000964:	200000fd 	.word	0x200000fd
 8000968:	08005c4c 	.word	0x08005c4c

0800096c <button8Handler>:

static void button8Handler(uint32_t pressType) {
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
    if (buttonsTestOrder[testStage] == Button_8) {
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <button8Handler+0x2c>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	461a      	mov	r2, r3
 800097a:	4b08      	ldr	r3, [pc, #32]	; (800099c <button8Handler+0x30>)
 800097c:	5c9b      	ldrb	r3, [r3, r2]
 800097e:	2b02      	cmp	r3, #2
 8000980:	d105      	bne.n	800098e <button8Handler+0x22>
        testStage++;
 8000982:	4b05      	ldr	r3, [pc, #20]	; (8000998 <button8Handler+0x2c>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	3301      	adds	r3, #1
 8000988:	b2da      	uxtb	r2, r3
 800098a:	4b03      	ldr	r3, [pc, #12]	; (8000998 <button8Handler+0x2c>)
 800098c:	701a      	strb	r2, [r3, #0]
    }
}
 800098e:	bf00      	nop
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr
 8000998:	200000fd 	.word	0x200000fd
 800099c:	08005c4c 	.word	0x08005c4c

080009a0 <button9Handler>:

static void button9Handler(uint32_t pressType) {
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
    if (buttonsTestOrder[testStage] == Button_9) {
 80009a8:	4b08      	ldr	r3, [pc, #32]	; (80009cc <button9Handler+0x2c>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	461a      	mov	r2, r3
 80009ae:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <button9Handler+0x30>)
 80009b0:	5c9b      	ldrb	r3, [r3, r2]
 80009b2:	2b03      	cmp	r3, #3
 80009b4:	d105      	bne.n	80009c2 <button9Handler+0x22>
        testStage++;
 80009b6:	4b05      	ldr	r3, [pc, #20]	; (80009cc <button9Handler+0x2c>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	3301      	adds	r3, #1
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	4b03      	ldr	r3, [pc, #12]	; (80009cc <button9Handler+0x2c>)
 80009c0:	701a      	strb	r2, [r3, #0]
    }
}
 80009c2:	bf00      	nop
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr
 80009cc:	200000fd 	.word	0x200000fd
 80009d0:	08005c4c 	.word	0x08005c4c

080009d4 <button0Handler>:

static void button0Handler(uint32_t pressType) {
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
    if (buttonsTestOrder[testStage] == Button_0) {
 80009dc:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <button0Handler+0x2c>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	461a      	mov	r2, r3
 80009e2:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <button0Handler+0x30>)
 80009e4:	5c9b      	ldrb	r3, [r3, r2]
 80009e6:	2b04      	cmp	r3, #4
 80009e8:	d105      	bne.n	80009f6 <button0Handler+0x22>
        testStage++;
 80009ea:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <button0Handler+0x2c>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	3301      	adds	r3, #1
 80009f0:	b2da      	uxtb	r2, r3
 80009f2:	4b03      	ldr	r3, [pc, #12]	; (8000a00 <button0Handler+0x2c>)
 80009f4:	701a      	strb	r2, [r3, #0]
    }
}
 80009f6:	bf00      	nop
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr
 8000a00:	200000fd 	.word	0x200000fd
 8000a04:	08005c4c 	.word	0x08005c4c

08000a08 <buttonInfoHandler>:

static void buttonInfoHandler(uint32_t pressType) {
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
    if (buttonsTestOrder[testStage] == Button_Info) {
 8000a10:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <buttonInfoHandler+0x2c>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	461a      	mov	r2, r3
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <buttonInfoHandler+0x30>)
 8000a18:	5c9b      	ldrb	r3, [r3, r2]
 8000a1a:	2b05      	cmp	r3, #5
 8000a1c:	d105      	bne.n	8000a2a <buttonInfoHandler+0x22>
        testStage++;
 8000a1e:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <buttonInfoHandler+0x2c>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	3301      	adds	r3, #1
 8000a24:	b2da      	uxtb	r2, r3
 8000a26:	4b03      	ldr	r3, [pc, #12]	; (8000a34 <buttonInfoHandler+0x2c>)
 8000a28:	701a      	strb	r2, [r3, #0]
    }
}
 8000a2a:	bf00      	nop
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bc80      	pop	{r7}
 8000a32:	4770      	bx	lr
 8000a34:	200000fd 	.word	0x200000fd
 8000a38:	08005c4c 	.word	0x08005c4c

08000a3c <buttonPrimeHandler>:

static void buttonPrimeHandler(uint32_t pressType) {
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
    if (buttonsTestOrder[testStage] == Button_Prime) {
 8000a44:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <buttonPrimeHandler+0x2c>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <buttonPrimeHandler+0x30>)
 8000a4c:	5c9b      	ldrb	r3, [r3, r2]
 8000a4e:	2b06      	cmp	r3, #6
 8000a50:	d105      	bne.n	8000a5e <buttonPrimeHandler+0x22>
        testStage++;
 8000a52:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <buttonPrimeHandler+0x2c>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	3301      	adds	r3, #1
 8000a58:	b2da      	uxtb	r2, r3
 8000a5a:	4b03      	ldr	r3, [pc, #12]	; (8000a68 <buttonPrimeHandler+0x2c>)
 8000a5c:	701a      	strb	r2, [r3, #0]
    }
}
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc80      	pop	{r7}
 8000a66:	4770      	bx	lr
 8000a68:	200000fd 	.word	0x200000fd
 8000a6c:	08005c4c 	.word	0x08005c4c

08000a70 <buttonLockHandler>:

static void buttonLockHandler(uint32_t pressType) {
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
    if (buttonsTestOrder[testStage] == Button_Lock) {
 8000a78:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <buttonLockHandler+0x2c>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <buttonLockHandler+0x30>)
 8000a80:	5c9b      	ldrb	r3, [r3, r2]
 8000a82:	2b07      	cmp	r3, #7
 8000a84:	d105      	bne.n	8000a92 <buttonLockHandler+0x22>
        testStage++;
 8000a86:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <buttonLockHandler+0x2c>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	b2da      	uxtb	r2, r3
 8000a8e:	4b03      	ldr	r3, [pc, #12]	; (8000a9c <buttonLockHandler+0x2c>)
 8000a90:	701a      	strb	r2, [r3, #0]
    }
}
 8000a92:	bf00      	nop
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bc80      	pop	{r7}
 8000a9a:	4770      	bx	lr
 8000a9c:	200000fd 	.word	0x200000fd
 8000aa0:	08005c4c 	.word	0x08005c4c

08000aa4 <button1Handler>:

static void button1Handler(uint32_t pressType) {
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
    if (buttonsTestOrder[testStage] == Button_1) {
 8000aac:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <button1Handler+0x2c>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <button1Handler+0x30>)
 8000ab4:	5c9b      	ldrb	r3, [r3, r2]
 8000ab6:	2b08      	cmp	r3, #8
 8000ab8:	d105      	bne.n	8000ac6 <button1Handler+0x22>
        testStage++;
 8000aba:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <button1Handler+0x2c>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	b2da      	uxtb	r2, r3
 8000ac2:	4b03      	ldr	r3, [pc, #12]	; (8000ad0 <button1Handler+0x2c>)
 8000ac4:	701a      	strb	r2, [r3, #0]
    }
}
 8000ac6:	bf00      	nop
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr
 8000ad0:	200000fd 	.word	0x200000fd
 8000ad4:	08005c4c 	.word	0x08005c4c

08000ad8 <button2Handler>:

static void button2Handler(uint32_t pressType) {
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
    if (buttonsTestOrder[testStage] == Button_2) {
 8000ae0:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <button2Handler+0x2c>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <button2Handler+0x30>)
 8000ae8:	5c9b      	ldrb	r3, [r3, r2]
 8000aea:	2b09      	cmp	r3, #9
 8000aec:	d105      	bne.n	8000afa <button2Handler+0x22>
        testStage++;
 8000aee:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <button2Handler+0x2c>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	3301      	adds	r3, #1
 8000af4:	b2da      	uxtb	r2, r3
 8000af6:	4b03      	ldr	r3, [pc, #12]	; (8000b04 <button2Handler+0x2c>)
 8000af8:	701a      	strb	r2, [r3, #0]
    }
}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr
 8000b04:	200000fd 	.word	0x200000fd
 8000b08:	08005c4c 	.word	0x08005c4c

08000b0c <button3Handler>:

static void button3Handler(uint32_t pressType) {
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
    if (buttonsTestOrder[testStage] == Button_3) {
 8000b14:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <button3Handler+0x2c>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	461a      	mov	r2, r3
 8000b1a:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <button3Handler+0x30>)
 8000b1c:	5c9b      	ldrb	r3, [r3, r2]
 8000b1e:	2b0a      	cmp	r3, #10
 8000b20:	d105      	bne.n	8000b2e <button3Handler+0x22>
        testStage++;
 8000b22:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <button3Handler+0x2c>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	3301      	adds	r3, #1
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	4b03      	ldr	r3, [pc, #12]	; (8000b38 <button3Handler+0x2c>)
 8000b2c:	701a      	strb	r2, [r3, #0]
    }
}
 8000b2e:	bf00      	nop
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr
 8000b38:	200000fd 	.word	0x200000fd
 8000b3c:	08005c4c 	.word	0x08005c4c

08000b40 <button4Handler>:

static void button4Handler(uint32_t pressType) {
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
    if (buttonsTestOrder[testStage] == Button_4) {
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <button4Handler+0x2c>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <button4Handler+0x30>)
 8000b50:	5c9b      	ldrb	r3, [r3, r2]
 8000b52:	2b0b      	cmp	r3, #11
 8000b54:	d105      	bne.n	8000b62 <button4Handler+0x22>
        testStage++;
 8000b56:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <button4Handler+0x2c>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	4b03      	ldr	r3, [pc, #12]	; (8000b6c <button4Handler+0x2c>)
 8000b60:	701a      	strb	r2, [r3, #0]
    }
}
 8000b62:	bf00      	nop
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr
 8000b6c:	200000fd 	.word	0x200000fd
 8000b70:	08005c4c 	.word	0x08005c4c

08000b74 <button5Handler>:

static void button5Handler(uint32_t pressType) {
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
    if (buttonsTestOrder[testStage] == Button_5) {
 8000b7c:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <button5Handler+0x2c>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	461a      	mov	r2, r3
 8000b82:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <button5Handler+0x30>)
 8000b84:	5c9b      	ldrb	r3, [r3, r2]
 8000b86:	2b0c      	cmp	r3, #12
 8000b88:	d105      	bne.n	8000b96 <button5Handler+0x22>
        testStage++;
 8000b8a:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <button5Handler+0x2c>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	b2da      	uxtb	r2, r3
 8000b92:	4b03      	ldr	r3, [pc, #12]	; (8000ba0 <button5Handler+0x2c>)
 8000b94:	701a      	strb	r2, [r3, #0]
    }
}
 8000b96:	bf00      	nop
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr
 8000ba0:	200000fd 	.word	0x200000fd
 8000ba4:	08005c4c 	.word	0x08005c4c

08000ba8 <buttonPointHandler>:

static void buttonPointHandler(uint32_t pressType) {
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
    if (buttonsTestOrder[testStage] == Button_Point) {
 8000bb0:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <buttonPointHandler+0x2c>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <buttonPointHandler+0x30>)
 8000bb8:	5c9b      	ldrb	r3, [r3, r2]
 8000bba:	2b0d      	cmp	r3, #13
 8000bbc:	d105      	bne.n	8000bca <buttonPointHandler+0x22>
        testStage++;
 8000bbe:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <buttonPointHandler+0x2c>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	4b03      	ldr	r3, [pc, #12]	; (8000bd4 <buttonPointHandler+0x2c>)
 8000bc8:	701a      	strb	r2, [r3, #0]
    }
}
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr
 8000bd4:	200000fd 	.word	0x200000fd
 8000bd8:	08005c4c 	.word	0x08005c4c

08000bdc <buttonOkHandler>:

static void buttonOkHandler(uint32_t pressType) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
    if (buttonsTestOrder[testStage] == Button_Ok) {
 8000be4:	4b0d      	ldr	r3, [pc, #52]	; (8000c1c <buttonOkHandler+0x40>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	461a      	mov	r2, r3
 8000bea:	4b0d      	ldr	r3, [pc, #52]	; (8000c20 <buttonOkHandler+0x44>)
 8000bec:	5c9b      	ldrb	r3, [r3, r2]
 8000bee:	2b0e      	cmp	r3, #14
 8000bf0:	d106      	bne.n	8000c00 <buttonOkHandler+0x24>
        testStage++;
 8000bf2:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <buttonOkHandler+0x40>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <buttonOkHandler+0x40>)
 8000bfc:	701a      	strb	r2, [r3, #0]
    } else if (testStage == Button_Last) {
        osTaskDelHandler(testTask);
        showManualTestsScreen();
    }
}
 8000bfe:	e008      	b.n	8000c12 <buttonOkHandler+0x36>
    } else if (testStage == Button_Last) {
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <buttonOkHandler+0x40>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2b11      	cmp	r3, #17
 8000c06:	d104      	bne.n	8000c12 <buttonOkHandler+0x36>
        osTaskDelHandler(testTask);
 8000c08:	4806      	ldr	r0, [pc, #24]	; (8000c24 <buttonOkHandler+0x48>)
 8000c0a:	f003 fba7 	bl	800435c <osTaskDelHandler>
        showManualTestsScreen();
 8000c0e:	f000 ff3f 	bl	8001a90 <showManualTestsScreen>
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	200000fd 	.word	0x200000fd
 8000c20:	08005c4c 	.word	0x08005c4c
 8000c24:	08000c91 	.word	0x08000c91

08000c28 <buttonNoHandler>:

static void buttonNoHandler(uint32_t pressType) {
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
    if (buttonsTestOrder[testStage] == Button_No) {
 8000c30:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <buttonNoHandler+0x2c>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	461a      	mov	r2, r3
 8000c36:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <buttonNoHandler+0x30>)
 8000c38:	5c9b      	ldrb	r3, [r3, r2]
 8000c3a:	2b0f      	cmp	r3, #15
 8000c3c:	d105      	bne.n	8000c4a <buttonNoHandler+0x22>
        testStage++;
 8000c3e:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <buttonNoHandler+0x2c>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	3301      	adds	r3, #1
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4b03      	ldr	r3, [pc, #12]	; (8000c54 <buttonNoHandler+0x2c>)
 8000c48:	701a      	strb	r2, [r3, #0]
    }
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr
 8000c54:	200000fd 	.word	0x200000fd
 8000c58:	08005c4c 	.word	0x08005c4c

08000c5c <buttonPowerHandler>:

static void buttonPowerHandler(uint32_t pressType) {
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
    if (buttonsTestOrder[testStage] == Button_Power) {
 8000c64:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <buttonPowerHandler+0x2c>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <buttonPowerHandler+0x30>)
 8000c6c:	5c9b      	ldrb	r3, [r3, r2]
 8000c6e:	2b10      	cmp	r3, #16
 8000c70:	d105      	bne.n	8000c7e <buttonPowerHandler+0x22>
        testStage++;
 8000c72:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <buttonPowerHandler+0x2c>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	3301      	adds	r3, #1
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	4b03      	ldr	r3, [pc, #12]	; (8000c88 <buttonPowerHandler+0x2c>)
 8000c7c:	701a      	strb	r2, [r3, #0]
    }
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr
 8000c88:	200000fd 	.word	0x200000fd
 8000c8c:	08005c4c 	.word	0x08005c4c

08000c90 <testTask>:
    button1Handler, button2Handler, button3Handler, button4Handler,
    button5Handler, buttonPointHandler, buttonOkHandler, buttonNoHandler,
    buttonPowerHandler
};

static void testTask(uint32_t parameter) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
    display64(buttonsTestOrder[testStage]);
 8000c98:	4b0a      	ldr	r3, [pc, #40]	; (8000cc4 <testTask+0x34>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <testTask+0x38>)
 8000ca0:	5c9b      	ldrb	r3, [r3, r2]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f002 f83a 	bl	8002d1c <display64>
    if (testStage <= Button_Last) {
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <testTask+0x34>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b11      	cmp	r3, #17
 8000cae:	d804      	bhi.n	8000cba <testTask+0x2a>
        osTaskAdd(testTask, 0, 200);
 8000cb0:	22c8      	movs	r2, #200	; 0xc8
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4805      	ldr	r0, [pc, #20]	; (8000ccc <testTask+0x3c>)
 8000cb6:	f003 fad7 	bl	8004268 <osTaskAdd>
    }
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	200000fd 	.word	0x200000fd
 8000cc8:	08005c4c 	.word	0x08005c4c
 8000ccc:	08000c91 	.word	0x08000c91

08000cd0 <startButtonsTest>:

void startButtonsTest() {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
    testStage = 0;
 8000cd6:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <startButtonsTest+0x44>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	701a      	strb	r2, [r3, #0]

    for (buttonName_t btn = 0; btn < Button_Last; btn++) {
 8000cdc:	2300      	movs	r3, #0
 8000cde:	71fb      	strb	r3, [r7, #7]
 8000ce0:	e00b      	b.n	8000cfa <startButtonsTest+0x2a>
        setButtonHandler(btn, handlers[btn]);
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	4a0c      	ldr	r2, [pc, #48]	; (8000d18 <startButtonsTest+0x48>)
 8000ce6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	4611      	mov	r1, r2
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f004 f862 	bl	8004db8 <setButtonHandler>
    for (buttonName_t btn = 0; btn < Button_Last; btn++) {
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	71fb      	strb	r3, [r7, #7]
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	2b10      	cmp	r3, #16
 8000cfe:	d9f0      	bls.n	8000ce2 <startButtonsTest+0x12>
    }
    osTaskAdd(testTask, 0, 200);
 8000d00:	22c8      	movs	r2, #200	; 0xc8
 8000d02:	2100      	movs	r1, #0
 8000d04:	4805      	ldr	r0, [pc, #20]	; (8000d1c <startButtonsTest+0x4c>)
 8000d06:	f003 faaf 	bl	8004268 <osTaskAdd>
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	200000fd 	.word	0x200000fd
 8000d18:	08005c60 	.word	0x08005c60
 8000d1c:	08000c91 	.word	0x08000c91

08000d20 <dummyButtonHandler>:
#include <game.h>

static void testTask(uint32_t parameters);
static uint32_t testStep;

static void dummyButtonHandler() {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
    soundKeyBeep();
 8000d24:	f002 fee6 	bl	8003af4 <soundKeyBeep>
}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <buttonNoHandler>:

static void buttonNoHandler(uint32_t pressType) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
    soundKeyBeep();
 8000d34:	f002 fede 	bl	8003af4 <soundKeyBeep>
    osTaskDelHandler(testTask);
 8000d38:	4804      	ldr	r0, [pc, #16]	; (8000d4c <buttonNoHandler+0x20>)
 8000d3a:	f003 fb0f 	bl	800435c <osTaskDelHandler>
    showManualTestsScreen();
 8000d3e:	f000 fea7 	bl	8001a90 <showManualTestsScreen>
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	08000d51 	.word	0x08000d51

08000d50 <testTask>:
    dummyButtonHandler,         //Button_Ok
    buttonNoHandler,            //Button_No
    dummyButtonHandler          //Button_Power
};

static void testTask(uint32_t parameters) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
    testStep = (testStep + 1) % 3;
 8000d58:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <testTask+0x64>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	1c59      	adds	r1, r3, #1
 8000d5e:	4b16      	ldr	r3, [pc, #88]	; (8000db8 <testTask+0x68>)
 8000d60:	fba3 2301 	umull	r2, r3, r3, r1
 8000d64:	085a      	lsrs	r2, r3, #1
 8000d66:	4613      	mov	r3, r2
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	4413      	add	r3, r2
 8000d6c:	1aca      	subs	r2, r1, r3
 8000d6e:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <testTask+0x64>)
 8000d70:	601a      	str	r2, [r3, #0]

    switch (testStep) {
 8000d72:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <testTask+0x64>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d009      	beq.n	8000d8e <testTask+0x3e>
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d302      	bcc.n	8000d84 <testTask+0x34>
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d00a      	beq.n	8000d98 <testTask+0x48>
 8000d82:	e00d      	b.n	8000da0 <testTask+0x50>
    case 0:
        colorfill(color_lightred);
 8000d84:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000d88:	f002 f932 	bl	8002ff0 <colorfill>
        break;
 8000d8c:	e008      	b.n	8000da0 <testTask+0x50>
    case 1:
        colorfill(color_lightgreen);
 8000d8e:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8000d92:	f002 f92d 	bl	8002ff0 <colorfill>
        break;
 8000d96:	e003      	b.n	8000da0 <testTask+0x50>
    case 2:
        colorfill(color_lightblue);
 8000d98:	201f      	movs	r0, #31
 8000d9a:	f002 f929 	bl	8002ff0 <colorfill>
        break;
 8000d9e:	bf00      	nop
    }
    osTaskAdd(testTask, 0, 1000);
 8000da0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000da4:	2100      	movs	r1, #0
 8000da6:	4805      	ldr	r0, [pc, #20]	; (8000dbc <testTask+0x6c>)
 8000da8:	f003 fa5e 	bl	8004268 <osTaskAdd>
}
 8000dac:	bf00      	nop
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000100 	.word	0x20000100
 8000db8:	aaaaaaab 	.word	0xaaaaaaab
 8000dbc:	08000d51 	.word	0x08000d51

08000dc0 <startDisplayTest>:

void startDisplayTest() {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
    testStep = 0;
 8000dc6:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <startDisplayTest+0x44>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
    for (buttonName_t btn = 0; btn < Button_Last; btn++) {
 8000dcc:	2300      	movs	r3, #0
 8000dce:	71fb      	strb	r3, [r7, #7]
 8000dd0:	e00b      	b.n	8000dea <startDisplayTest+0x2a>
        setButtonHandler(btn, handlers[btn]);
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	4a0c      	ldr	r2, [pc, #48]	; (8000e08 <startDisplayTest+0x48>)
 8000dd6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	4611      	mov	r1, r2
 8000dde:	4618      	mov	r0, r3
 8000de0:	f003 ffea 	bl	8004db8 <setButtonHandler>
    for (buttonName_t btn = 0; btn < Button_Last; btn++) {
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	3301      	adds	r3, #1
 8000de8:	71fb      	strb	r3, [r7, #7]
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	2b10      	cmp	r3, #16
 8000dee:	d9f0      	bls.n	8000dd2 <startDisplayTest+0x12>
    }

    osTaskAdd(testTask, 0, 200);
 8000df0:	22c8      	movs	r2, #200	; 0xc8
 8000df2:	2100      	movs	r1, #0
 8000df4:	4805      	ldr	r0, [pc, #20]	; (8000e0c <startDisplayTest+0x4c>)
 8000df6:	f003 fa37 	bl	8004268 <osTaskAdd>
}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000100 	.word	0x20000100
 8000e08:	08005ca4 	.word	0x08005ca4
 8000e0c:	08000d51 	.word	0x08000d51

08000e10 <dummyButtonHandler>:
#include <taskmgr.h>
#include <display.h>

static void testTask(uint32_t parameters);

static void dummyButtonHandler() {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
    soundKeyBeep();
 8000e14:	f002 fe6e 	bl	8003af4 <soundKeyBeep>
}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <buttonOkHandler>:

static void buttonOkHandler(uint32_t pressType) {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
    soundKeyBeep();
 8000e24:	f002 fe66 	bl	8003af4 <soundKeyBeep>
    osTaskDelHandler(testTask);
 8000e28:	4804      	ldr	r0, [pc, #16]	; (8000e3c <buttonOkHandler+0x20>)
 8000e2a:	f003 fa97 	bl	800435c <osTaskDelHandler>
    showManualTestsScreen();
 8000e2e:	f000 fe2f 	bl	8001a90 <showManualTestsScreen>
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	08000e41 	.word	0x08000e41

08000e40 <testTask>:
    dummyButtonHandler, dummyButtonHandler, dummyButtonHandler, dummyButtonHandler,
    dummyButtonHandler, dummyButtonHandler, buttonOkHandler, dummyButtonHandler,
    dummyButtonHandler
};

static void testTask(uint32_t parameters) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
    display66();
 8000e48:	f001 fed6 	bl	8002bf8 <display66>
    osTaskAdd(testTask, 0, 200);
 8000e4c:	22c8      	movs	r2, #200	; 0xc8
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4803      	ldr	r0, [pc, #12]	; (8000e60 <testTask+0x20>)
 8000e52:	f003 fa09 	bl	8004268 <osTaskAdd>
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	08000e41 	.word	0x08000e41

08000e64 <startDoorTest>:

void startDoorTest() {
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
    for (buttonName_t btn = 0; btn < Button_Last; btn++) {
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	71fb      	strb	r3, [r7, #7]
 8000e6e:	e00b      	b.n	8000e88 <startDoorTest+0x24>
        setButtonHandler(btn, handlers[btn]);
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	4a0b      	ldr	r2, [pc, #44]	; (8000ea0 <startDoorTest+0x3c>)
 8000e74:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	4611      	mov	r1, r2
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f003 ff9b 	bl	8004db8 <setButtonHandler>
    for (buttonName_t btn = 0; btn < Button_Last; btn++) {
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	3301      	adds	r3, #1
 8000e86:	71fb      	strb	r3, [r7, #7]
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	2b10      	cmp	r3, #16
 8000e8c:	d9f0      	bls.n	8000e70 <startDoorTest+0xc>
    }

    osTaskAdd(testTask, 0, 200);
 8000e8e:	22c8      	movs	r2, #200	; 0xc8
 8000e90:	2100      	movs	r1, #0
 8000e92:	4804      	ldr	r0, [pc, #16]	; (8000ea4 <startDoorTest+0x40>)
 8000e94:	f003 f9e8 	bl	8004268 <osTaskAdd>
}
 8000e98:	bf00      	nop
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	08005ce8 	.word	0x08005ce8
 8000ea4:	08000e41 	.word	0x08000e41

08000ea8 <gameMoveLeft>:
char clearGoal(void);
void compress(char line);
char isGameover(void);
void gameOver(void);

void gameMoveLeft(void) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
    mvLeft(&currentTet);
 8000eac:	4802      	ldr	r0, [pc, #8]	; (8000eb8 <gameMoveLeft+0x10>)
 8000eae:	f000 f9d0 	bl	8001252 <mvLeft>
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000598 	.word	0x20000598

08000ebc <gameMoveRight>:

void gameMoveRight(void) {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
    mvRight(&currentTet);
 8000ec0:	4802      	ldr	r0, [pc, #8]	; (8000ecc <gameMoveRight+0x10>)
 8000ec2:	f000 f9e6 	bl	8001292 <mvRight>
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000598 	.word	0x20000598

08000ed0 <gameMoveDown>:

void gameMoveDown(void) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
    mvDown(&currentTet);
 8000ed4:	4802      	ldr	r0, [pc, #8]	; (8000ee0 <gameMoveDown+0x10>)
 8000ed6:	f000 f9fc 	bl	80012d2 <mvDown>
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000598 	.word	0x20000598

08000ee4 <gameRotate>:

void gameRotate(void) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
    rotateTet(&currentTet);
 8000ee8:	4802      	ldr	r0, [pc, #8]	; (8000ef4 <gameRotate+0x10>)
 8000eea:	f000 f98d 	bl	8001208 <rotateTet>
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000598 	.word	0x20000598

08000ef8 <gameRestart>:

void gameRestart() {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
    int i, j;

    score = 0;
 8000efe:	4b1b      	ldr	r3, [pc, #108]	; (8000f6c <gameRestart+0x74>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
    firstTet = true;
 8000f04:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <gameRestart+0x78>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	701a      	strb	r2, [r3, #0]
    gameDisplay();
 8000f0a:	f002 f999 	bl	8003240 <gameDisplay>
    showScores(0);
 8000f0e:	2000      	movs	r0, #0
 8000f10:	f002 f93a 	bl	8003188 <showScores>
    drawGameBorder();
 8000f14:	f000 f89a 	bl	800104c <drawGameBorder>
    srand(SysTick->VAL);
 8000f18:	4b16      	ldr	r3, [pc, #88]	; (8000f74 <gameRestart+0x7c>)
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f004 f965 	bl	80051ec <srand>
    tick = 1;
 8000f22:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <gameRestart+0x80>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	601a      	str	r2, [r3, #0]
    for (i = 0; i < 20; i++) {
 8000f28:	2300      	movs	r3, #0
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	e016      	b.n	8000f5c <gameRestart+0x64>
        for (j = 0; j < 10; j++) {
 8000f2e:	2300      	movs	r3, #0
 8000f30:	603b      	str	r3, [r7, #0]
 8000f32:	e00d      	b.n	8000f50 <gameRestart+0x58>
            board[i][j] = 0;
 8000f34:	4911      	ldr	r1, [pc, #68]	; (8000f7c <gameRestart+0x84>)
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	4413      	add	r3, r2
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	18ca      	adds	r2, r1, r3
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	4413      	add	r3, r2
 8000f46:	2200      	movs	r2, #0
 8000f48:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < 10; j++) {
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	603b      	str	r3, [r7, #0]
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	2b09      	cmp	r3, #9
 8000f54:	ddee      	ble.n	8000f34 <gameRestart+0x3c>
    for (i = 0; i < 20; i++) {
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b13      	cmp	r3, #19
 8000f60:	dde5      	ble.n	8000f2e <gameRestart+0x36>
        }
    }
}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	200001cc 	.word	0x200001cc
 8000f70:	20000590 	.word	0x20000590
 8000f74:	e000e010 	.word	0xe000e010
 8000f78:	20000004 	.word	0x20000004
 8000f7c:	20000104 	.word	0x20000104

08000f80 <gameTick>:
void gameTick() {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
    mvDown(&currentTet);
 8000f86:	482d      	ldr	r0, [pc, #180]	; (800103c <gameTick+0xbc>)
 8000f88:	f000 f9a3 	bl	80012d2 <mvDown>
    if (downCollision(&currentTet)) {
 8000f8c:	482b      	ldr	r0, [pc, #172]	; (800103c <gameTick+0xbc>)
 8000f8e:	f000 f9db 	bl	8001348 <downCollision>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d04d      	beq.n	8001034 <gameTick+0xb4>
        for (int i = 0; i < 4; i++) {
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	e03e      	b.n	800101c <gameTick+0x9c>
            volatile gameLoc offset;
            offset.column = tetrominos[currentTet.type][currentTet.orientation][i].column;
 8000f9e:	4b27      	ldr	r3, [pc, #156]	; (800103c <gameTick+0xbc>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	4b25      	ldr	r3, [pc, #148]	; (800103c <gameTick+0xbc>)
 8000fa6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000faa:	461a      	mov	r2, r3
 8000fac:	4924      	ldr	r1, [pc, #144]	; (8001040 <gameTick+0xc0>)
 8000fae:	0083      	lsls	r3, r0, #2
 8000fb0:	4413      	add	r3, r2
 8000fb2:	009a      	lsls	r2, r3, #2
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	f911 3013 	ldrsb.w	r3, [r1, r3, lsl #1]
 8000fbc:	723b      	strb	r3, [r7, #8]
            offset.row = tetrominos[currentTet.type][currentTet.orientation][i].row;
 8000fbe:	4b1f      	ldr	r3, [pc, #124]	; (800103c <gameTick+0xbc>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	4b1d      	ldr	r3, [pc, #116]	; (800103c <gameTick+0xbc>)
 8000fc6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	491c      	ldr	r1, [pc, #112]	; (8001040 <gameTick+0xc0>)
 8000fce:	0083      	lsls	r3, r0, #2
 8000fd0:	4413      	add	r3, r2
 8000fd2:	009a      	lsls	r2, r3, #2
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	440b      	add	r3, r1
 8000fdc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000fe0:	727b      	strb	r3, [r7, #9]
            gameLoc origin = currentTet.origin;
 8000fe2:	4a16      	ldr	r2, [pc, #88]	; (800103c <gameTick+0xbc>)
 8000fe4:	1d3b      	adds	r3, r7, #4
 8000fe6:	3202      	adds	r2, #2
 8000fe8:	8812      	ldrh	r2, [r2, #0]
 8000fea:	801a      	strh	r2, [r3, #0]
            board[origin.row + offset.row][origin.column + offset.column] = true;
 8000fec:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	7a7b      	ldrb	r3, [r7, #9]
 8000ff4:	b25b      	sxtb	r3, r3
 8000ff6:	441a      	add	r2, r3
 8000ff8:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	7a3b      	ldrb	r3, [r7, #8]
 8001000:	b25b      	sxtb	r3, r3
 8001002:	4419      	add	r1, r3
 8001004:	480f      	ldr	r0, [pc, #60]	; (8001044 <gameTick+0xc4>)
 8001006:	4613      	mov	r3, r2
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	4413      	add	r3, r2
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	4403      	add	r3, r0
 8001010:	440b      	add	r3, r1
 8001012:	2201      	movs	r2, #1
 8001014:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < 4; i++) {
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	3301      	adds	r3, #1
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2b03      	cmp	r3, #3
 8001020:	ddbd      	ble.n	8000f9e <gameTick+0x1e>
        }
        if (tick == -1)
 8001022:	4b09      	ldr	r3, [pc, #36]	; (8001048 <gameTick+0xc8>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800102a:	d100      	bne.n	800102e <gameTick+0xae>
            while(1);
 800102c:	e7fe      	b.n	800102c <gameTick+0xac>
        tick = 1;
 800102e:	4b06      	ldr	r3, [pc, #24]	; (8001048 <gameTick+0xc8>)
 8001030:	2201      	movs	r2, #1
 8001032:	601a      	str	r2, [r3, #0]
    }
}
 8001034:	bf00      	nop
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000598 	.word	0x20000598
 8001040:	08005d2c 	.word	0x08005d2c
 8001044:	20000104 	.word	0x20000104
 8001048:	20000004 	.word	0x20000004

0800104c <drawGameBorder>:
/*
 * Game drawing functions for drawing the game border and the tetrominos
 */
void drawGameBorder(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
	for (int x = X_MIN; x < X_MAX; x++) {
 8001052:	237d      	movs	r3, #125	; 0x7d
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	e00e      	b.n	8001076 <drawGameBorder+0x2a>
		pixel(x, Y_MIN, color_white);
 8001058:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800105c:	210a      	movs	r1, #10
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f001 fff2 	bl	8003048 <pixel>
		pixel(x, Y_MAX, color_white);
 8001064:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001068:	21d2      	movs	r1, #210	; 0xd2
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f001 ffec 	bl	8003048 <pixel>
	for (int x = X_MIN; x < X_MAX; x++) {
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3301      	adds	r3, #1
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2be0      	cmp	r3, #224	; 0xe0
 800107a:	dded      	ble.n	8001058 <drawGameBorder+0xc>
	}
	for (int y = Y_MIN; y <= Y_MAX; y++) {
 800107c:	230a      	movs	r3, #10
 800107e:	603b      	str	r3, [r7, #0]
 8001080:	e00e      	b.n	80010a0 <drawGameBorder+0x54>
		pixel(X_MIN, y, color_white);
 8001082:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001086:	6839      	ldr	r1, [r7, #0]
 8001088:	207d      	movs	r0, #125	; 0x7d
 800108a:	f001 ffdd 	bl	8003048 <pixel>
		pixel(X_MAX, y, color_white);
 800108e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001092:	6839      	ldr	r1, [r7, #0]
 8001094:	20e1      	movs	r0, #225	; 0xe1
 8001096:	f001 ffd7 	bl	8003048 <pixel>
	for (int y = Y_MIN; y <= Y_MAX; y++) {
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	3301      	adds	r3, #1
 800109e:	603b      	str	r3, [r7, #0]
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	2bd2      	cmp	r3, #210	; 0xd2
 80010a4:	dded      	ble.n	8001082 <drawGameBorder+0x36>
	}
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <drawSquare>:

void drawSquare(gameLoc *loc, uint16_t colour)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b084      	sub	sp, #16
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
 80010b6:	460b      	mov	r3, r1
 80010b8:	807b      	strh	r3, [r7, #2]
	unsigned char y = Y_MIN + loc->row * PIXEL_SCALE_FACTOR;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80010c0:	3301      	adds	r3, #1
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	461a      	mov	r2, r3
 80010c6:	0092      	lsls	r2, r2, #2
 80010c8:	4413      	add	r3, r2
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	73fb      	strb	r3, [r7, #15]
	unsigned char x = X_MIN + loc->column * PIXEL_SCALE_FACTOR;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f993 3000 	ldrsb.w	r3, [r3]
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	461a      	mov	r2, r3
 80010d8:	0092      	lsls	r2, r2, #2
 80010da:	4413      	add	r3, r2
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	337d      	adds	r3, #125	; 0x7d
 80010e2:	73bb      	strb	r3, [r7, #14]
	block(x, y, colour);
 80010e4:	7bbb      	ldrb	r3, [r7, #14]
 80010e6:	7bf9      	ldrb	r1, [r7, #15]
 80010e8:	887a      	ldrh	r2, [r7, #2]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f001 ffc9 	bl	8003082 <block>
}
 80010f0:	bf00      	nop
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <drawNextTet>:

void drawNextTet(uint16_t colour)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	80fb      	strh	r3, [r7, #6]
    for (char i = 0; i < 4; i++) {
 8001102:	2300      	movs	r3, #0
 8001104:	73fb      	strb	r3, [r7, #15]
 8001106:	e02b      	b.n	8001160 <drawNextTet+0x68>
        gameLoc offset = tetrominos[nextTet.type][nextTet.orientation][i];
 8001108:	4b19      	ldr	r3, [pc, #100]	; (8001170 <drawNextTet+0x78>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	461a      	mov	r2, r3
 800110e:	4b18      	ldr	r3, [pc, #96]	; (8001170 <drawNextTet+0x78>)
 8001110:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001114:	4618      	mov	r0, r3
 8001116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800111a:	4916      	ldr	r1, [pc, #88]	; (8001174 <drawNextTet+0x7c>)
 800111c:	0092      	lsls	r2, r2, #2
 800111e:	4402      	add	r2, r0
 8001120:	0092      	lsls	r2, r2, #2
 8001122:	4413      	add	r3, r2
 8001124:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001128:	81bb      	strh	r3, [r7, #12]
        gameLoc draw;
        draw.column = COL_MAX + 2 + offset.column;
 800112a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800112e:	b2db      	uxtb	r3, r3
 8001130:	330c      	adds	r3, #12
 8001132:	b2db      	uxtb	r3, r3
 8001134:	b25b      	sxtb	r3, r3
 8001136:	723b      	strb	r3, [r7, #8]
        draw.row = ROW_MAX / 2 + 2 + offset.row;
 8001138:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	330c      	adds	r3, #12
 8001140:	b2db      	uxtb	r3, r3
 8001142:	b25b      	sxtb	r3, r3
 8001144:	727b      	strb	r3, [r7, #9]
        drawSquare(&draw, colour);
 8001146:	88fa      	ldrh	r2, [r7, #6]
 8001148:	f107 0308 	add.w	r3, r7, #8
 800114c:	4611      	mov	r1, r2
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff ffad 	bl	80010ae <drawSquare>
    for (char i = 0; i < 4; i++) {
 8001154:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001158:	b2db      	uxtb	r3, r3
 800115a:	3301      	adds	r3, #1
 800115c:	b2db      	uxtb	r3, r3
 800115e:	73fb      	strb	r3, [r7, #15]
 8001160:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001164:	2b03      	cmp	r3, #3
 8001166:	ddcf      	ble.n	8001108 <drawNextTet+0x10>
    }
}
 8001168:	bf00      	nop
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000594 	.word	0x20000594
 8001174:	08005d2c 	.word	0x08005d2c

08001178 <drawTet>:

void drawTet(tet *t, uint16_t colour)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	460b      	mov	r3, r1
 8001182:	807b      	strh	r3, [r7, #2]
	for (char i = 0; i < 4; i++) {
 8001184:	2300      	movs	r3, #0
 8001186:	73fb      	strb	r3, [r7, #15]
 8001188:	e033      	b.n	80011f2 <drawTet+0x7a>
		gameLoc offset = tetrominos[t->type][t->orientation][i];
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	461a      	mov	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001196:	4618      	mov	r0, r3
 8001198:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800119c:	4919      	ldr	r1, [pc, #100]	; (8001204 <drawTet+0x8c>)
 800119e:	0092      	lsls	r2, r2, #2
 80011a0:	4402      	add	r2, r0
 80011a2:	0092      	lsls	r2, r2, #2
 80011a4:	4413      	add	r3, r2
 80011a6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80011aa:	81bb      	strh	r3, [r7, #12]
		gameLoc draw;
		draw.column = t->origin.column + offset.column;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	4413      	add	r3, r2
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	b25b      	sxtb	r3, r3
 80011c0:	723b      	strb	r3, [r7, #8]
		draw.row = t->origin.row + offset.row;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	4413      	add	r3, r2
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	b25b      	sxtb	r3, r3
 80011d6:	727b      	strb	r3, [r7, #9]
		drawSquare(&draw, colour);
 80011d8:	887a      	ldrh	r2, [r7, #2]
 80011da:	f107 0308 	add.w	r3, r7, #8
 80011de:	4611      	mov	r1, r2
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff ff64 	bl	80010ae <drawSquare>
	for (char i = 0; i < 4; i++) {
 80011e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	3301      	adds	r3, #1
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	73fb      	strb	r3, [r7, #15]
 80011f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011f6:	2b03      	cmp	r3, #3
 80011f8:	ddc7      	ble.n	800118a <drawTet+0x12>
	}
}
 80011fa:	bf00      	nop
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	08005d2c 	.word	0x08005d2c

08001208 <rotateTet>:
/*
 * Tetromino Movement Functions
 * These are triggered on interrupt and not called manually.
 */
void rotateTet(tet *t)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
	drawTet(t, color_defback);
 8001210:	2100      	movs	r1, #0
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff ffb0 	bl	8001178 <drawTet>
	if (!rotCollision(t))
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f000 f99d 	bl	8001558 <rotCollision>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d10d      	bne.n	8001240 <rotateTet+0x38>
		t->orientation = (t->orientation + 1) % 4;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800122a:	3301      	adds	r3, #1
 800122c:	425a      	negs	r2, r3
 800122e:	f003 0303 	and.w	r3, r3, #3
 8001232:	f002 0203 	and.w	r2, r2, #3
 8001236:	bf58      	it	pl
 8001238:	4253      	negpl	r3, r2
 800123a:	b25a      	sxtb	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	705a      	strb	r2, [r3, #1]
	drawTet(t, color_white);
 8001240:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff ff97 	bl	8001178 <drawTet>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <mvLeft>:

void mvLeft(tet *t)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
	drawTet(t, color_defback);
 800125a:	2100      	movs	r1, #0
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff ff8b 	bl	8001178 <drawTet>
	if (!leftCollision(t))
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f000 f8c8 	bl	80013f8 <leftCollision>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d108      	bne.n	8001280 <mvLeft+0x2e>
		t->origin.column--;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001274:	b2db      	uxtb	r3, r3
 8001276:	3b01      	subs	r3, #1
 8001278:	b2db      	uxtb	r3, r3
 800127a:	b25a      	sxtb	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	709a      	strb	r2, [r3, #2]
	drawTet(t, color_white);
 8001280:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f7ff ff77 	bl	8001178 <drawTet>
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <mvRight>:

void mvRight(tet *t)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
	drawTet(t, color_defback);
 800129a:	2100      	movs	r1, #0
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7ff ff6b 	bl	8001178 <drawTet>
	if (!rightCollision(t))
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f000 f900 	bl	80014a8 <rightCollision>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d108      	bne.n	80012c0 <mvRight+0x2e>
		t->origin.column++;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	3301      	adds	r3, #1
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	b25a      	sxtb	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	709a      	strb	r2, [r3, #2]
	drawTet(t, color_white);
 80012c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff ff57 	bl	8001178 <drawTet>
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <mvDown>:

void mvDown(tet *t)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
	drawTet(t, color_defback);
 80012da:	2100      	movs	r1, #0
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff ff4b 	bl	8001178 <drawTet>
	if (!downCollision(t))
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f000 f830 	bl	8001348 <downCollision>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d108      	bne.n	8001300 <mvDown+0x2e>
		t->origin.row++;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	3301      	adds	r3, #1
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	b25a      	sxtb	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	70da      	strb	r2, [r3, #3]
	drawTet(t, color_white);
 8001300:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff ff37 	bl	8001178 <drawTet>
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <newTet>:

void newTet(gameLoc origin, char orientation, SHAPE type, tet *t)
{
 8001312:	b480      	push	{r7}
 8001314:	b085      	sub	sp, #20
 8001316:	af00      	add	r7, sp, #0
 8001318:	81b8      	strh	r0, [r7, #12]
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	460b      	mov	r3, r1
 800131e:	72fb      	strb	r3, [r7, #11]
 8001320:	4613      	mov	r3, r2
 8001322:	72bb      	strb	r3, [r7, #10]
	t->type = type;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	7aba      	ldrb	r2, [r7, #10]
 8001328:	701a      	strb	r2, [r3, #0]
	t->origin = origin;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	3302      	adds	r3, #2
 800132e:	f107 020c 	add.w	r2, r7, #12
 8001332:	8812      	ldrh	r2, [r2, #0]
 8001334:	801a      	strh	r2, [r3, #0]
	t->orientation = orientation;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	7afa      	ldrb	r2, [r7, #11]
 800133a:	705a      	strb	r2, [r3, #1]
}
 800133c:	bf00      	nop
 800133e:	3714      	adds	r7, #20
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr
	...

08001348 <downCollision>:
/*
 * Boundary and collision checking code
 */

char downCollision(tet *t)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	for (char i = 0; i < 4; i++) {
 8001350:	2300      	movs	r3, #0
 8001352:	73fb      	strb	r3, [r7, #15]
 8001354:	e041      	b.n	80013da <downCollision+0x92>
		gameLoc offset = tetrominos[t->type][t->orientation][i];
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	461a      	mov	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001362:	4618      	mov	r0, r3
 8001364:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001368:	4921      	ldr	r1, [pc, #132]	; (80013f0 <downCollision+0xa8>)
 800136a:	0092      	lsls	r2, r2, #2
 800136c:	4402      	add	r2, r0
 800136e:	0092      	lsls	r2, r2, #2
 8001370:	4413      	add	r3, r2
 8001372:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001376:	81bb      	strh	r3, [r7, #12]
		gameLoc origin = t->origin;
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	f107 0308 	add.w	r3, r7, #8
 800137e:	3202      	adds	r2, #2
 8001380:	8812      	ldrh	r2, [r2, #0]
 8001382:	801a      	strh	r2, [r3, #0]
		if (board[origin.row + offset.row + 1][origin.column + offset.column]) { //Checking against other blocks
 8001384:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8001388:	461a      	mov	r2, r3
 800138a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800138e:	4413      	add	r3, r2
 8001390:	1c5a      	adds	r2, r3, #1
 8001392:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8001396:	4619      	mov	r1, r3
 8001398:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800139c:	4419      	add	r1, r3
 800139e:	4815      	ldr	r0, [pc, #84]	; (80013f4 <downCollision+0xac>)
 80013a0:	4613      	mov	r3, r2
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	4413      	add	r3, r2
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	4403      	add	r3, r0
 80013aa:	440b      	add	r3, r1
 80013ac:	f993 3000 	ldrsb.w	r3, [r3]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <downCollision+0x70>
			return true;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e015      	b.n	80013e4 <downCollision+0x9c>
		}
		if (origin.row + offset.row + 1 >= ROW_MAX) { // Checking against game boundaries
 80013b8:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80013bc:	461a      	mov	r2, r3
 80013be:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80013c2:	4413      	add	r3, r2
 80013c4:	3301      	adds	r3, #1
 80013c6:	2b13      	cmp	r3, #19
 80013c8:	dd01      	ble.n	80013ce <downCollision+0x86>
			return true;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e00a      	b.n	80013e4 <downCollision+0x9c>
	for (char i = 0; i < 4; i++) {
 80013ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	3301      	adds	r3, #1
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	73fb      	strb	r3, [r7, #15]
 80013da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013de:	2b03      	cmp	r3, #3
 80013e0:	ddb9      	ble.n	8001356 <downCollision+0xe>
		}
	}
	return false;
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	08005d2c 	.word	0x08005d2c
 80013f4:	20000104 	.word	0x20000104

080013f8 <leftCollision>:

char leftCollision(tet *t)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
	for (char i = 0; i < 4; i++) {
 8001400:	2300      	movs	r3, #0
 8001402:	73fb      	strb	r3, [r7, #15]
 8001404:	e041      	b.n	800148a <leftCollision+0x92>
		gameLoc offset = tetrominos[t->type][t->orientation][i];
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	461a      	mov	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001412:	4618      	mov	r0, r3
 8001414:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001418:	4921      	ldr	r1, [pc, #132]	; (80014a0 <leftCollision+0xa8>)
 800141a:	0092      	lsls	r2, r2, #2
 800141c:	4402      	add	r2, r0
 800141e:	0092      	lsls	r2, r2, #2
 8001420:	4413      	add	r3, r2
 8001422:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001426:	81bb      	strh	r3, [r7, #12]
		gameLoc origin = t->origin;
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	f107 0308 	add.w	r3, r7, #8
 800142e:	3202      	adds	r2, #2
 8001430:	8812      	ldrh	r2, [r2, #0]
 8001432:	801a      	strh	r2, [r3, #0]
		if (board[origin.row + offset.row][origin.column + offset.column - 1]) //Checking against other blocks
 8001434:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8001438:	461a      	mov	r2, r3
 800143a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800143e:	441a      	add	r2, r3
 8001440:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8001444:	4619      	mov	r1, r3
 8001446:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800144a:	440b      	add	r3, r1
 800144c:	1e59      	subs	r1, r3, #1
 800144e:	4815      	ldr	r0, [pc, #84]	; (80014a4 <leftCollision+0xac>)
 8001450:	4613      	mov	r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	4413      	add	r3, r2
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	4403      	add	r3, r0
 800145a:	440b      	add	r3, r1
 800145c:	f993 3000 	ldrsb.w	r3, [r3]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <leftCollision+0x70>
			return true;
 8001464:	2301      	movs	r3, #1
 8001466:	e015      	b.n	8001494 <leftCollision+0x9c>
		if (origin.column + offset.column - 1 < COL_MIN) // Checking against game boundaries
 8001468:	f997 3008 	ldrsb.w	r3, [r7, #8]
 800146c:	461a      	mov	r2, r3
 800146e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001472:	4413      	add	r3, r2
 8001474:	3b01      	subs	r3, #1
 8001476:	2b00      	cmp	r3, #0
 8001478:	da01      	bge.n	800147e <leftCollision+0x86>
			return true;
 800147a:	2301      	movs	r3, #1
 800147c:	e00a      	b.n	8001494 <leftCollision+0x9c>
	for (char i = 0; i < 4; i++) {
 800147e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001482:	b2db      	uxtb	r3, r3
 8001484:	3301      	adds	r3, #1
 8001486:	b2db      	uxtb	r3, r3
 8001488:	73fb      	strb	r3, [r7, #15]
 800148a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800148e:	2b03      	cmp	r3, #3
 8001490:	ddb9      	ble.n	8001406 <leftCollision+0xe>
	}
	return false;
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	08005d2c 	.word	0x08005d2c
 80014a4:	20000104 	.word	0x20000104

080014a8 <rightCollision>:

char rightCollision(tet *t)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	for (char i = 0; i < 4; i++) {
 80014b0:	2300      	movs	r3, #0
 80014b2:	73fb      	strb	r3, [r7, #15]
 80014b4:	e041      	b.n	800153a <rightCollision+0x92>
		gameLoc offset = tetrominos[t->type][t->orientation][i];
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	461a      	mov	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014c8:	4921      	ldr	r1, [pc, #132]	; (8001550 <rightCollision+0xa8>)
 80014ca:	0092      	lsls	r2, r2, #2
 80014cc:	4402      	add	r2, r0
 80014ce:	0092      	lsls	r2, r2, #2
 80014d0:	4413      	add	r3, r2
 80014d2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80014d6:	81bb      	strh	r3, [r7, #12]
		gameLoc origin = t->origin;
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	f107 0308 	add.w	r3, r7, #8
 80014de:	3202      	adds	r2, #2
 80014e0:	8812      	ldrh	r2, [r2, #0]
 80014e2:	801a      	strh	r2, [r3, #0]
		if (board[origin.row + offset.row][origin.column + offset.column + 1]) //Checking against other blocks
 80014e4:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80014e8:	461a      	mov	r2, r3
 80014ea:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80014ee:	441a      	add	r2, r3
 80014f0:	f997 3008 	ldrsb.w	r3, [r7, #8]
 80014f4:	4619      	mov	r1, r3
 80014f6:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80014fa:	440b      	add	r3, r1
 80014fc:	1c59      	adds	r1, r3, #1
 80014fe:	4815      	ldr	r0, [pc, #84]	; (8001554 <rightCollision+0xac>)
 8001500:	4613      	mov	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	4413      	add	r3, r2
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	4403      	add	r3, r0
 800150a:	440b      	add	r3, r1
 800150c:	f993 3000 	ldrsb.w	r3, [r3]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <rightCollision+0x70>
			return true;
 8001514:	2301      	movs	r3, #1
 8001516:	e015      	b.n	8001544 <rightCollision+0x9c>
		if (origin.column + offset.column + 1 >= COL_MAX) // Checking against game boundaries
 8001518:	f997 3008 	ldrsb.w	r3, [r7, #8]
 800151c:	461a      	mov	r2, r3
 800151e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001522:	4413      	add	r3, r2
 8001524:	3301      	adds	r3, #1
 8001526:	2b09      	cmp	r3, #9
 8001528:	dd01      	ble.n	800152e <rightCollision+0x86>
			return true;
 800152a:	2301      	movs	r3, #1
 800152c:	e00a      	b.n	8001544 <rightCollision+0x9c>
	for (char i = 0; i < 4; i++) {
 800152e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001532:	b2db      	uxtb	r3, r3
 8001534:	3301      	adds	r3, #1
 8001536:	b2db      	uxtb	r3, r3
 8001538:	73fb      	strb	r3, [r7, #15]
 800153a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800153e:	2b03      	cmp	r3, #3
 8001540:	ddb9      	ble.n	80014b6 <rightCollision+0xe>
	}
	return false;
 8001542:	2300      	movs	r3, #0
}
 8001544:	4618      	mov	r0, r3
 8001546:	3714      	adds	r7, #20
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	08005d2c 	.word	0x08005d2c
 8001554:	20000104 	.word	0x20000104

08001558 <rotCollision>:

char rotCollision(tet *t)
{
 8001558:	b480      	push	{r7}
 800155a:	b087      	sub	sp, #28
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
	gameLoc orig = t->origin;
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	f107 0310 	add.w	r3, r7, #16
 8001566:	3202      	adds	r2, #2
 8001568:	8812      	ldrh	r2, [r2, #0]
 800156a:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	e056      	b.n	8001620 <rotCollision+0xc8>
		gameLoc offset = tetrominos[t->type][(t->orientation + 1) % 4][i];
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800157e:	3301      	adds	r3, #1
 8001580:	425a      	negs	r2, r3
 8001582:	f003 0303 	and.w	r3, r3, #3
 8001586:	f002 0203 	and.w	r2, r2, #3
 800158a:	bf58      	it	pl
 800158c:	4253      	negpl	r3, r2
 800158e:	4929      	ldr	r1, [pc, #164]	; (8001634 <rotCollision+0xdc>)
 8001590:	0082      	lsls	r2, r0, #2
 8001592:	4413      	add	r3, r2
 8001594:	009a      	lsls	r2, r3, #2
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	4413      	add	r3, r2
 800159a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800159e:	81bb      	strh	r3, [r7, #12]
		if (offset.column + orig.column >= COL_MAX || offset.column + orig.column < COL_MIN) //Check out of bounds horizontally
 80015a0:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80015a4:	461a      	mov	r2, r3
 80015a6:	f997 3010 	ldrsb.w	r3, [r7, #16]
 80015aa:	4413      	add	r3, r2
 80015ac:	2b09      	cmp	r3, #9
 80015ae:	dc07      	bgt.n	80015c0 <rotCollision+0x68>
 80015b0:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80015b4:	461a      	mov	r2, r3
 80015b6:	f997 3010 	ldrsb.w	r3, [r7, #16]
 80015ba:	4413      	add	r3, r2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	da01      	bge.n	80015c4 <rotCollision+0x6c>
			return 1;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e031      	b.n	8001628 <rotCollision+0xd0>
		if (offset.row + orig.row >= ROW_MAX || offset.row + orig.row < COL_MIN) // Check out of bounds vertically
 80015c4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80015c8:	461a      	mov	r2, r3
 80015ca:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80015ce:	4413      	add	r3, r2
 80015d0:	2b13      	cmp	r3, #19
 80015d2:	dc07      	bgt.n	80015e4 <rotCollision+0x8c>
 80015d4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80015d8:	461a      	mov	r2, r3
 80015da:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80015de:	4413      	add	r3, r2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	da01      	bge.n	80015e8 <rotCollision+0x90>
			return 1;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e01f      	b.n	8001628 <rotCollision+0xd0>
		if (board[orig.row + offset.row][orig.column + offset.column]) // Check for other blocks
 80015e8:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80015ec:	461a      	mov	r2, r3
 80015ee:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80015f2:	441a      	add	r2, r3
 80015f4:	f997 3010 	ldrsb.w	r3, [r7, #16]
 80015f8:	4619      	mov	r1, r3
 80015fa:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80015fe:	4419      	add	r1, r3
 8001600:	480d      	ldr	r0, [pc, #52]	; (8001638 <rotCollision+0xe0>)
 8001602:	4613      	mov	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	4403      	add	r3, r0
 800160c:	440b      	add	r3, r1
 800160e:	f993 3000 	ldrsb.w	r3, [r3]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <rotCollision+0xc2>
			return 1;
 8001616:	2301      	movs	r3, #1
 8001618:	e006      	b.n	8001628 <rotCollision+0xd0>
	for (int i = 0; i < 4; i++) {
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	3301      	adds	r3, #1
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	2b03      	cmp	r3, #3
 8001624:	dda5      	ble.n	8001572 <rotCollision+0x1a>
	}
	return 0;
 8001626:	2300      	movs	r3, #0
}
 8001628:	4618      	mov	r0, r3
 800162a:	371c      	adds	r7, #28
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	08005d2c 	.word	0x08005d2c
 8001638:	20000104 	.word	0x20000104

0800163c <clearGoal>:
/*
 * Goal check and board compress algorithms
 */

char clearGoal(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
	char goalCount = 0;
 8001642:	2300      	movs	r3, #0
 8001644:	71fb      	strb	r3, [r7, #7]
	char start = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	71bb      	strb	r3, [r7, #6]
	for (char i = ROW_MAX - 1; i >= ROW_MIN; i--) {
 800164a:	2313      	movs	r3, #19
 800164c:	717b      	strb	r3, [r7, #5]
 800164e:	e064      	b.n	800171a <clearGoal+0xde>
		char goal = true;
 8001650:	2301      	movs	r3, #1
 8001652:	713b      	strb	r3, [r7, #4]
		for(char j = COL_MIN; j < COL_MAX; j++) {
 8001654:	2300      	movs	r3, #0
 8001656:	70fb      	strb	r3, [r7, #3]
 8001658:	e017      	b.n	800168a <clearGoal+0x4e>
			if (!board[i][j]) {
 800165a:	f997 2005 	ldrsb.w	r2, [r7, #5]
 800165e:	f997 1003 	ldrsb.w	r1, [r7, #3]
 8001662:	4836      	ldr	r0, [pc, #216]	; (800173c <clearGoal+0x100>)
 8001664:	4613      	mov	r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4413      	add	r3, r2
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	4403      	add	r3, r0
 800166e:	440b      	add	r3, r1
 8001670:	f993 3000 	ldrsb.w	r3, [r3]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d102      	bne.n	800167e <clearGoal+0x42>
				goal = false;
 8001678:	2300      	movs	r3, #0
 800167a:	713b      	strb	r3, [r7, #4]
				break; // Don't Clear the row
 800167c:	e009      	b.n	8001692 <clearGoal+0x56>
		for(char j = COL_MIN; j < COL_MAX; j++) {
 800167e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001682:	b2db      	uxtb	r3, r3
 8001684:	3301      	adds	r3, #1
 8001686:	b2db      	uxtb	r3, r3
 8001688:	70fb      	strb	r3, [r7, #3]
 800168a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800168e:	2b09      	cmp	r3, #9
 8001690:	dde3      	ble.n	800165a <clearGoal+0x1e>
			}
		}
		if (goal) { // Clear it!
 8001692:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d039      	beq.n	800170e <clearGoal+0xd2>
			goalCount++;
 800169a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	3301      	adds	r3, #1
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	71fb      	strb	r3, [r7, #7]
			if (i > start)
 80016a6:	f997 2005 	ldrsb.w	r2, [r7, #5]
 80016aa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	dd01      	ble.n	80016b6 <clearGoal+0x7a>
				start = i;
 80016b2:	797b      	ldrb	r3, [r7, #5]
 80016b4:	71bb      	strb	r3, [r7, #6]
			for (char k = COL_MIN; k < COL_MAX; k++) {
 80016b6:	2300      	movs	r3, #0
 80016b8:	70bb      	strb	r3, [r7, #2]
 80016ba:	e01b      	b.n	80016f4 <clearGoal+0xb8>
				board[i][k] = false;
 80016bc:	f997 2005 	ldrsb.w	r2, [r7, #5]
 80016c0:	f997 1002 	ldrsb.w	r1, [r7, #2]
 80016c4:	481d      	ldr	r0, [pc, #116]	; (800173c <clearGoal+0x100>)
 80016c6:	4613      	mov	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	4403      	add	r3, r0
 80016d0:	440b      	add	r3, r1
 80016d2:	2200      	movs	r2, #0
 80016d4:	701a      	strb	r2, [r3, #0]
				gameLoc clear;
				clear.row = i;
 80016d6:	797b      	ldrb	r3, [r7, #5]
 80016d8:	707b      	strb	r3, [r7, #1]
				clear.column = k;
 80016da:	78bb      	ldrb	r3, [r7, #2]
 80016dc:	703b      	strb	r3, [r7, #0]
				drawSquare(&clear, color_defback);
 80016de:	463b      	mov	r3, r7
 80016e0:	2100      	movs	r1, #0
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff fce3 	bl	80010ae <drawSquare>
			for (char k = COL_MIN; k < COL_MAX; k++) {
 80016e8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	3301      	adds	r3, #1
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	70bb      	strb	r3, [r7, #2]
 80016f4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80016f8:	2b09      	cmp	r3, #9
 80016fa:	dddf      	ble.n	80016bc <clearGoal+0x80>
			}
            compress(i);
 80016fc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001700:	4618      	mov	r0, r3
 8001702:	f000 f81d 	bl	8001740 <compress>
            i += 1;
 8001706:	797b      	ldrb	r3, [r7, #5]
 8001708:	3301      	adds	r3, #1
 800170a:	b2db      	uxtb	r3, r3
 800170c:	717b      	strb	r3, [r7, #5]
	for (char i = ROW_MAX - 1; i >= ROW_MIN; i--) {
 800170e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001712:	b2db      	uxtb	r3, r3
 8001714:	3b01      	subs	r3, #1
 8001716:	b2db      	uxtb	r3, r3
 8001718:	717b      	strb	r3, [r7, #5]
 800171a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800171e:	2b00      	cmp	r3, #0
 8001720:	da96      	bge.n	8001650 <clearGoal+0x14>
		}
	}
	if (goalCount) {
 8001722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <clearGoal+0xf2>
		soundBeep();
 800172a:	f002 f9d3 	bl	8003ad4 <soundBeep>
	}
	return goalCount;
 800172e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000104 	.word	0x20000104

08001740 <compress>:

void compress(char line)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	71fb      	strb	r3, [r7, #7]
	for (char i = line - 1; i >= ROW_MIN; i--) {
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	3b01      	subs	r3, #1
 800174e:	b2db      	uxtb	r3, r3
 8001750:	73fb      	strb	r3, [r7, #15]
 8001752:	e052      	b.n	80017fa <compress+0xba>
		for (char j = COL_MIN; j < COL_MAX; j++) {
 8001754:	2300      	movs	r3, #0
 8001756:	73bb      	strb	r3, [r7, #14]
 8001758:	e045      	b.n	80017e6 <compress+0xa6>
			if (board[i][j]) {
 800175a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800175e:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8001762:	482a      	ldr	r0, [pc, #168]	; (800180c <compress+0xcc>)
 8001764:	4613      	mov	r3, r2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4413      	add	r3, r2
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	4403      	add	r3, r0
 800176e:	440b      	add	r3, r1
 8001770:	f993 3000 	ldrsb.w	r3, [r3]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d030      	beq.n	80017da <compress+0x9a>
				board[i][j] = false;
 8001778:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800177c:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8001780:	4822      	ldr	r0, [pc, #136]	; (800180c <compress+0xcc>)
 8001782:	4613      	mov	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	4413      	add	r3, r2
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	4403      	add	r3, r0
 800178c:	440b      	add	r3, r1
 800178e:	2200      	movs	r2, #0
 8001790:	701a      	strb	r2, [r3, #0]
				board[i + 1][j] = true;
 8001792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001796:	1c5a      	adds	r2, r3, #1
 8001798:	f997 100e 	ldrsb.w	r1, [r7, #14]
 800179c:	481b      	ldr	r0, [pc, #108]	; (800180c <compress+0xcc>)
 800179e:	4613      	mov	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	4403      	add	r3, r0
 80017a8:	440b      	add	r3, r1
 80017aa:	2201      	movs	r2, #1
 80017ac:	701a      	strb	r2, [r3, #0]
				gameLoc move;
				move.row = i;
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
 80017b0:	737b      	strb	r3, [r7, #13]
				move.column = j;
 80017b2:	7bbb      	ldrb	r3, [r7, #14]
 80017b4:	733b      	strb	r3, [r7, #12]
				drawSquare(&move, color_defback);
 80017b6:	f107 030c 	add.w	r3, r7, #12
 80017ba:	2100      	movs	r1, #0
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff fc76 	bl	80010ae <drawSquare>
				move.row = i + 1;
 80017c2:	7bfb      	ldrb	r3, [r7, #15]
 80017c4:	3301      	adds	r3, #1
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	b25b      	sxtb	r3, r3
 80017ca:	737b      	strb	r3, [r7, #13]
				drawSquare(&move, color_white);
 80017cc:	f107 030c 	add.w	r3, r7, #12
 80017d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff fc6a 	bl	80010ae <drawSquare>
		for (char j = COL_MIN; j < COL_MAX; j++) {
 80017da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	3301      	adds	r3, #1
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	73bb      	strb	r3, [r7, #14]
 80017e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80017ea:	2b09      	cmp	r3, #9
 80017ec:	ddb5      	ble.n	800175a <compress+0x1a>
	for (char i = line - 1; i >= ROW_MIN; i--) {
 80017ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	3b01      	subs	r3, #1
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	73fb      	strb	r3, [r7, #15]
 80017fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	daa8      	bge.n	8001754 <compress+0x14>
			}
		}
	}
}
 8001802:	bf00      	nop
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000104 	.word	0x20000104

08001810 <isgameOver>:

char isgameOver()
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
	char row = ROW_MIN + 1;
 8001816:	2301      	movs	r3, #1
 8001818:	70fb      	strb	r3, [r7, #3]
	for (int col = COL_MIN; col < COL_MAX; col++) {
 800181a:	2300      	movs	r3, #0
 800181c:	607b      	str	r3, [r7, #4]
 800181e:	e012      	b.n	8001846 <isgameOver+0x36>
		if (board[row][col])
 8001820:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8001824:	490c      	ldr	r1, [pc, #48]	; (8001858 <isgameOver+0x48>)
 8001826:	4613      	mov	r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4413      	add	r3, r2
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	18ca      	adds	r2, r1, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4413      	add	r3, r2
 8001834:	f993 3000 	ldrsb.w	r3, [r3]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <isgameOver+0x30>
			return true;
 800183c:	2301      	movs	r3, #1
 800183e:	e006      	b.n	800184e <isgameOver+0x3e>
	for (int col = COL_MIN; col < COL_MAX; col++) {
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3301      	adds	r3, #1
 8001844:	607b      	str	r3, [r7, #4]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b09      	cmp	r3, #9
 800184a:	dde9      	ble.n	8001820 <isgameOver+0x10>
	}
	return false;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr
 8001858:	20000104 	.word	0x20000104

0800185c <gameLoop>:
/*
 * Main game loop
 */

void gameLoop(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
		gameLoc origin = {5, 1};
 8001862:	4b41      	ldr	r3, [pc, #260]	; (8001968 <gameLoop+0x10c>)
 8001864:	881b      	ldrh	r3, [r3, #0]
 8001866:	80bb      	strh	r3, [r7, #4]
		if (isgameOver()) {
 8001868:	f7ff ffd2 	bl	8001810 <isgameOver>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d006      	beq.n	8001880 <gameLoop+0x24>
		    showScores(-1);
 8001872:	f04f 30ff 	mov.w	r0, #4294967295
 8001876:	f001 fc87 	bl	8003188 <showScores>
		    soundHiAlarm();
 800187a:	f002 f94b 	bl	8003b14 <soundHiAlarm>
		        showScores(score);
		    } else {
		        gameTick();
		    }
		}
}
 800187e:	e06f      	b.n	8001960 <gameLoop+0x104>
		    if (tick) {
 8001880:	4b3a      	ldr	r3, [pc, #232]	; (800196c <gameLoop+0x110>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d069      	beq.n	800195c <gameLoop+0x100>
		        tick = 0;
 8001888:	4b38      	ldr	r3, [pc, #224]	; (800196c <gameLoop+0x110>)
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
		        if (firstTet) {
 800188e:	4b38      	ldr	r3, [pc, #224]	; (8001970 <gameLoop+0x114>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d02f      	beq.n	80018f6 <gameLoop+0x9a>
		            newTet(origin, 0, (SHAPE)(rand() % 7), &currentTet);
 8001896:	f003 fccd 	bl	8005234 <rand>
 800189a:	4602      	mov	r2, r0
 800189c:	4b35      	ldr	r3, [pc, #212]	; (8001974 <gameLoop+0x118>)
 800189e:	fb83 1302 	smull	r1, r3, r3, r2
 80018a2:	4413      	add	r3, r2
 80018a4:	1099      	asrs	r1, r3, #2
 80018a6:	17d3      	asrs	r3, r2, #31
 80018a8:	1ac9      	subs	r1, r1, r3
 80018aa:	460b      	mov	r3, r1
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	1a5b      	subs	r3, r3, r1
 80018b0:	1ad1      	subs	r1, r2, r3
 80018b2:	b2ca      	uxtb	r2, r1
 80018b4:	4b30      	ldr	r3, [pc, #192]	; (8001978 <gameLoop+0x11c>)
 80018b6:	2100      	movs	r1, #0
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f7ff fd2a 	bl	8001312 <newTet>
		            newTet(origin, 0, (SHAPE)(rand() % 7), &nextTet);
 80018be:	f003 fcb9 	bl	8005234 <rand>
 80018c2:	4602      	mov	r2, r0
 80018c4:	4b2b      	ldr	r3, [pc, #172]	; (8001974 <gameLoop+0x118>)
 80018c6:	fb83 1302 	smull	r1, r3, r3, r2
 80018ca:	4413      	add	r3, r2
 80018cc:	1099      	asrs	r1, r3, #2
 80018ce:	17d3      	asrs	r3, r2, #31
 80018d0:	1ac9      	subs	r1, r1, r3
 80018d2:	460b      	mov	r3, r1
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	1a5b      	subs	r3, r3, r1
 80018d8:	1ad1      	subs	r1, r2, r3
 80018da:	b2ca      	uxtb	r2, r1
 80018dc:	4b27      	ldr	r3, [pc, #156]	; (800197c <gameLoop+0x120>)
 80018de:	2100      	movs	r1, #0
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f7ff fd16 	bl	8001312 <newTet>
		            drawNextTet(color_white);
 80018e6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80018ea:	f7ff fc05 	bl	80010f8 <drawNextTet>
		            firstTet = false;
 80018ee:	4b20      	ldr	r3, [pc, #128]	; (8001970 <gameLoop+0x114>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	701a      	strb	r2, [r3, #0]
 80018f4:	e01e      	b.n	8001934 <gameLoop+0xd8>
		            currentTet = nextTet;
 80018f6:	4a20      	ldr	r2, [pc, #128]	; (8001978 <gameLoop+0x11c>)
 80018f8:	4b20      	ldr	r3, [pc, #128]	; (800197c <gameLoop+0x120>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6013      	str	r3, [r2, #0]
                    drawNextTet(color_defback);
 80018fe:	2000      	movs	r0, #0
 8001900:	f7ff fbfa 	bl	80010f8 <drawNextTet>
		            newTet(origin, 0, (SHAPE)(rand() % 7), &nextTet);
 8001904:	f003 fc96 	bl	8005234 <rand>
 8001908:	4602      	mov	r2, r0
 800190a:	4b1a      	ldr	r3, [pc, #104]	; (8001974 <gameLoop+0x118>)
 800190c:	fb83 1302 	smull	r1, r3, r3, r2
 8001910:	4413      	add	r3, r2
 8001912:	1099      	asrs	r1, r3, #2
 8001914:	17d3      	asrs	r3, r2, #31
 8001916:	1ac9      	subs	r1, r1, r3
 8001918:	460b      	mov	r3, r1
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	1a5b      	subs	r3, r3, r1
 800191e:	1ad1      	subs	r1, r2, r3
 8001920:	b2ca      	uxtb	r2, r1
 8001922:	4b16      	ldr	r3, [pc, #88]	; (800197c <gameLoop+0x120>)
 8001924:	2100      	movs	r1, #0
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f7ff fcf3 	bl	8001312 <newTet>
                    drawNextTet(color_white);
 800192c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001930:	f7ff fbe2 	bl	80010f8 <drawNextTet>
		        drawTet(&currentTet, color_white);
 8001934:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001938:	480f      	ldr	r0, [pc, #60]	; (8001978 <gameLoop+0x11c>)
 800193a:	f7ff fc1d 	bl	8001178 <drawTet>
		        score += clearGoal();
 800193e:	f7ff fe7d 	bl	800163c <clearGoal>
 8001942:	4603      	mov	r3, r0
 8001944:	461a      	mov	r2, r3
 8001946:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <gameLoop+0x124>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4413      	add	r3, r2
 800194c:	4a0c      	ldr	r2, [pc, #48]	; (8001980 <gameLoop+0x124>)
 800194e:	6013      	str	r3, [r2, #0]
		        showScores(score);
 8001950:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <gameLoop+0x124>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f001 fc17 	bl	8003188 <showScores>
}
 800195a:	e001      	b.n	8001960 <gameLoop+0x104>
		        gameTick();
 800195c:	f7ff fb10 	bl	8000f80 <gameTick>
}
 8001960:	bf00      	nop
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	08005e0c 	.word	0x08005e0c
 800196c:	20000004 	.word	0x20000004
 8001970:	20000590 	.word	0x20000590
 8001974:	92492493 	.word	0x92492493
 8001978:	20000598 	.word	0x20000598
 800197c:	20000594 	.word	0x20000594
 8001980:	200001cc 	.word	0x200001cc

08001984 <dummyButtonHandler>:
    startMotorTest,
    startSoundTest,
    startAlarmTest
};

static void dummyButtonHandler() {
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
    soundKeyBeep();
 8001988:	f002 f8b4 	bl	8003af4 <soundKeyBeep>
}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}

08001990 <button0Handler>:

static void button0Handler(uint32_t pressType) {
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
    soundKeyBeep();
 8001998:	f002 f8ac 	bl	8003af4 <soundKeyBeep>
    if (currentTest < ManualTestLast - 1) {
 800199c:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <button0Handler+0x30>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b05      	cmp	r3, #5
 80019a2:	d806      	bhi.n	80019b2 <button0Handler+0x22>
        currentTest++;
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <button0Handler+0x30>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	3301      	adds	r3, #1
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	4b04      	ldr	r3, [pc, #16]	; (80019c0 <button0Handler+0x30>)
 80019ae:	701a      	strb	r2, [r3, #0]
    } else {
        currentTest = 0;
    }
}
 80019b0:	e002      	b.n	80019b8 <button0Handler+0x28>
        currentTest = 0;
 80019b2:	4b03      	ldr	r3, [pc, #12]	; (80019c0 <button0Handler+0x30>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	701a      	strb	r2, [r3, #0]
}
 80019b8:	bf00      	nop
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	200001d0 	.word	0x200001d0

080019c4 <button5Handler>:

static void button5Handler(uint32_t pressType) {
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
    soundKeyBeep();
 80019cc:	f002 f892 	bl	8003af4 <soundKeyBeep>
    if (currentTest > 0) {
 80019d0:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <button5Handler+0x30>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d006      	beq.n	80019e6 <button5Handler+0x22>
        currentTest--;
 80019d8:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <button5Handler+0x30>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	3b01      	subs	r3, #1
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	4b04      	ldr	r3, [pc, #16]	; (80019f4 <button5Handler+0x30>)
 80019e2:	701a      	strb	r2, [r3, #0]
    } else {
        currentTest = ManualTestLast - 1;
    }
}
 80019e4:	e002      	b.n	80019ec <button5Handler+0x28>
        currentTest = ManualTestLast - 1;
 80019e6:	4b03      	ldr	r3, [pc, #12]	; (80019f4 <button5Handler+0x30>)
 80019e8:	2206      	movs	r2, #6
 80019ea:	701a      	strb	r2, [r3, #0]
}
 80019ec:	bf00      	nop
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	200001d0 	.word	0x200001d0

080019f8 <buttonOkHandler>:

static void buttonOkHandler(uint32_t pressType) {
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
    soundKeyBeep();
 8001a00:	f002 f878 	bl	8003af4 <soundKeyBeep>
    if (manualTestsHandlers[currentTest] != 0) {
 8001a04:	4b0a      	ldr	r3, [pc, #40]	; (8001a30 <buttonOkHandler+0x38>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	461a      	mov	r2, r3
 8001a0a:	4b0a      	ldr	r3, [pc, #40]	; (8001a34 <buttonOkHandler+0x3c>)
 8001a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d009      	beq.n	8001a28 <buttonOkHandler+0x30>
        osTaskDelHandler(manualTestsTask);
 8001a14:	4808      	ldr	r0, [pc, #32]	; (8001a38 <buttonOkHandler+0x40>)
 8001a16:	f002 fca1 	bl	800435c <osTaskDelHandler>
        manualTestsHandlers[currentTest]();
 8001a1a:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <buttonOkHandler+0x38>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	4b04      	ldr	r3, [pc, #16]	; (8001a34 <buttonOkHandler+0x3c>)
 8001a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a26:	4798      	blx	r3
    }
}
 8001a28:	bf00      	nop
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	200001d0 	.word	0x200001d0
 8001a34:	20000024 	.word	0x20000024
 8001a38:	08001a5d 	.word	0x08001a5d

08001a3c <buttonPowerHandler>:

static void buttonPowerHandler(uint32_t pressType) {
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
    if ((pressType == BUTTON_PRESS_LONG) ||
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d002      	beq.n	8001a50 <buttonPowerHandler+0x14>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2b03      	cmp	r3, #3
 8001a4e:	d101      	bne.n	8001a54 <buttonPowerHandler+0x18>
        (pressType == BUTTON_PRESS_STICK)) {
        powerOff();
 8001a50:	f003 f8fa 	bl	8004c48 <powerOff>
    }
}
 8001a54:	bf00      	nop
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <manualTestsTask>:
    dummyButtonHandler, dummyButtonHandler, dummyButtonHandler, dummyButtonHandler,
    button5Handler, dummyButtonHandler, buttonOkHandler, dummyButtonHandler,
    buttonPowerHandler
};

static void manualTestsTask(uint32_t parameters) {
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
    display48(manualTests, ManualTestLast, currentTest);
 8001a64:	4b07      	ldr	r3, [pc, #28]	; (8001a84 <manualTestsTask+0x28>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	461a      	mov	r2, r3
 8001a6a:	2107      	movs	r1, #7
 8001a6c:	4806      	ldr	r0, [pc, #24]	; (8001a88 <manualTestsTask+0x2c>)
 8001a6e:	f001 fa0f 	bl	8002e90 <display48>
    osTaskAdd(manualTestsTask, 0, 200);
 8001a72:	22c8      	movs	r2, #200	; 0xc8
 8001a74:	2100      	movs	r1, #0
 8001a76:	4805      	ldr	r0, [pc, #20]	; (8001a8c <manualTestsTask+0x30>)
 8001a78:	f002 fbf6 	bl	8004268 <osTaskAdd>
}
 8001a7c:	bf00      	nop
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	200001d0 	.word	0x200001d0
 8001a88:	20000008 	.word	0x20000008
 8001a8c:	08001a5d 	.word	0x08001a5d

08001a90 <showManualTestsScreen>:

void showManualTestsScreen(void) {
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
    currentTest = 0;
 8001a96:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <showManualTestsScreen+0x44>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	701a      	strb	r2, [r3, #0]
    for (buttonName_t btn = 0; btn < Button_Last; btn++) {
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	71fb      	strb	r3, [r7, #7]
 8001aa0:	e00b      	b.n	8001aba <showManualTestsScreen+0x2a>
        setButtonHandler(btn, handlers[btn]);
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	4a0c      	ldr	r2, [pc, #48]	; (8001ad8 <showManualTestsScreen+0x48>)
 8001aa6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001aaa:	79fb      	ldrb	r3, [r7, #7]
 8001aac:	4611      	mov	r1, r2
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f003 f982 	bl	8004db8 <setButtonHandler>
    for (buttonName_t btn = 0; btn < Button_Last; btn++) {
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	71fb      	strb	r3, [r7, #7]
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	2b10      	cmp	r3, #16
 8001abe:	d9f0      	bls.n	8001aa2 <showManualTestsScreen+0x12>
    }
    osTaskAdd(manualTestsTask, 0, 100);
 8001ac0:	2264      	movs	r2, #100	; 0x64
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	4805      	ldr	r0, [pc, #20]	; (8001adc <showManualTestsScreen+0x4c>)
 8001ac6:	f002 fbcf 	bl	8004268 <osTaskAdd>
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	200001d0 	.word	0x200001d0
 8001ad8:	08005e70 	.word	0x08005e70
 8001adc:	08001a5d 	.word	0x08001a5d

08001ae0 <dummyButtonHandler>:
#include <display.h>
#include <button_config.h>

static void testTask(uint32_t parameters);

static void dummyButtonHandler() {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
    soundKeyBeep();
 8001ae4:	f002 f806 	bl	8003af4 <soundKeyBeep>
}
 8001ae8:	bf00      	nop
 8001aea:	bd80      	pop	{r7, pc}

08001aec <button5Handler>:

static void button5Handler(uint32_t pressType) {
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
    soundKeyBeep();
 8001af4:	f001 fffe 	bl	8003af4 <soundKeyBeep>
    increaseMotorSpeed(5);
 8001af8:	2005      	movs	r0, #5
 8001afa:	f001 fe19 	bl	8003730 <increaseMotorSpeed>
}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <button0Handler>:

static void button0Handler(uint32_t pressType) {
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b082      	sub	sp, #8
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
    soundKeyBeep();
 8001b0e:	f001 fff1 	bl	8003af4 <soundKeyBeep>
    decreaseMotorSpeed(5);
 8001b12:	2005      	movs	r0, #5
 8001b14:	f001 fe2e 	bl	8003774 <decreaseMotorSpeed>
}
 8001b18:	bf00      	nop
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <buttonNoHandler>:

static void buttonNoHandler(uint32_t pressType) {
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
    soundKeyBeep();
 8001b28:	f001 ffe4 	bl	8003af4 <soundKeyBeep>
    disableMotor();
 8001b2c:	f001 fe56 	bl	80037dc <disableMotor>
    osTaskDelHandler(testTask);
 8001b30:	4804      	ldr	r0, [pc, #16]	; (8001b44 <buttonNoHandler+0x24>)
 8001b32:	f002 fc13 	bl	800435c <osTaskDelHandler>
    showManualTestsScreen();
 8001b36:	f7ff ffab 	bl	8001a90 <showManualTestsScreen>
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	08001b49 	.word	0x08001b49

08001b48 <testTask>:
    dummyButtonHandler, dummyButtonHandler, dummyButtonHandler, dummyButtonHandler,
    button5Handler, dummyButtonHandler, dummyButtonHandler, buttonNoHandler,
    dummyButtonHandler
};

static void testTask(uint32_t parameters) {
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
    display68();
 8001b50:	f001 f89a 	bl	8002c88 <display68>
    osTaskAdd(testTask, 0, 200);
 8001b54:	22c8      	movs	r2, #200	; 0xc8
 8001b56:	2100      	movs	r1, #0
 8001b58:	4803      	ldr	r0, [pc, #12]	; (8001b68 <testTask+0x20>)
 8001b5a:	f002 fb85 	bl	8004268 <osTaskAdd>
}
 8001b5e:	bf00      	nop
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	08001b49 	.word	0x08001b49

08001b6c <startMotorTest>:

void startMotorTest() {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
    for (buttonName_t btn = 0; btn < Button_Last; btn++) {
 8001b72:	2300      	movs	r3, #0
 8001b74:	71fb      	strb	r3, [r7, #7]
 8001b76:	e00b      	b.n	8001b90 <startMotorTest+0x24>
        setButtonHandler(btn, handlers[btn]);
 8001b78:	79fb      	ldrb	r3, [r7, #7]
 8001b7a:	4a0c      	ldr	r2, [pc, #48]	; (8001bac <startMotorTest+0x40>)
 8001b7c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b80:	79fb      	ldrb	r3, [r7, #7]
 8001b82:	4611      	mov	r1, r2
 8001b84:	4618      	mov	r0, r3
 8001b86:	f003 f917 	bl	8004db8 <setButtonHandler>
    for (buttonName_t btn = 0; btn < Button_Last; btn++) {
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	71fb      	strb	r3, [r7, #7]
 8001b90:	79fb      	ldrb	r3, [r7, #7]
 8001b92:	2b10      	cmp	r3, #16
 8001b94:	d9f0      	bls.n	8001b78 <startMotorTest+0xc>
    }

    enableMotor();
 8001b96:	f001 fe0b 	bl	80037b0 <enableMotor>
    osTaskAdd(testTask, 0, 200);
 8001b9a:	22c8      	movs	r2, #200	; 0xc8
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4804      	ldr	r0, [pc, #16]	; (8001bb0 <startMotorTest+0x44>)
 8001ba0:	f002 fb62 	bl	8004268 <osTaskAdd>
}
 8001ba4:	bf00      	nop
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	08005eb4 	.word	0x08005eb4
 8001bb0:	08001b49 	.word	0x08001b49

08001bb4 <dummyButtonHandler>:

static void testTask(uint32_t parameters);
static uint8_t currentSoundLevel;
static uint8_t firstStart;

static void dummyButtonHandler() {
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
    soundKeyBeep();
 8001bb8:	f001 ff9c 	bl	8003af4 <soundKeyBeep>
}
 8001bbc:	bf00      	nop
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <buttonNoHandler>:

static void buttonNoHandler(uint32_t pressType) {
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
    soundKeyBeep();
 8001bc8:	f001 ff94 	bl	8003af4 <soundKeyBeep>
    soundSetLevel(3);
 8001bcc:	2003      	movs	r0, #3
 8001bce:	f001 ff65 	bl	8003a9c <soundSetLevel>
    osTaskDelHandler(testTask);
 8001bd2:	4804      	ldr	r0, [pc, #16]	; (8001be4 <buttonNoHandler+0x24>)
 8001bd4:	f002 fbc2 	bl	800435c <osTaskDelHandler>
    showManualTestsScreen();
 8001bd8:	f7ff ff5a 	bl	8001a90 <showManualTestsScreen>
}
 8001bdc:	bf00      	nop
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	08001be9 	.word	0x08001be9

08001be8 <testTask>:
    dummyButtonHandler, dummyButtonHandler, dummyButtonHandler, dummyButtonHandler,
    dummyButtonHandler, dummyButtonHandler, dummyButtonHandler, buttonNoHandler,
    dummyButtonHandler
};

static void testTask(uint32_t parameters) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
    if (firstStart) {
 8001bf0:	4b1b      	ldr	r3, [pc, #108]	; (8001c60 <testTask+0x78>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d00d      	beq.n	8001c14 <testTask+0x2c>
        currentSoundLevel = 1;
 8001bf8:	4b1a      	ldr	r3, [pc, #104]	; (8001c64 <testTask+0x7c>)
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	701a      	strb	r2, [r3, #0]
        display65(soundGetLevel());
 8001bfe:	f001 ff5f 	bl	8003ac0 <soundGetLevel>
 8001c02:	4603      	mov	r3, r0
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	4618      	mov	r0, r3
 8001c08:	f000 ffc6 	bl	8002b98 <display65>
        firstStart = 0;
 8001c0c:	4b14      	ldr	r3, [pc, #80]	; (8001c60 <testTask+0x78>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	701a      	strb	r2, [r3, #0]
 8001c12:	e01a      	b.n	8001c4a <testTask+0x62>
    } else {
        soundSetLevel(currentSoundLevel);
 8001c14:	4b13      	ldr	r3, [pc, #76]	; (8001c64 <testTask+0x7c>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f001 ff3f 	bl	8003a9c <soundSetLevel>
        display65(soundGetLevel());
 8001c1e:	f001 ff4f 	bl	8003ac0 <soundGetLevel>
 8001c22:	4603      	mov	r3, r0
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 ffb6 	bl	8002b98 <display65>
        soundKeyBeep();
 8001c2c:	f001 ff62 	bl	8003af4 <soundKeyBeep>

        currentSoundLevel++;
 8001c30:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <testTask+0x7c>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	3301      	adds	r3, #1
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	4b0a      	ldr	r3, [pc, #40]	; (8001c64 <testTask+0x7c>)
 8001c3a:	701a      	strb	r2, [r3, #0]
        if (currentSoundLevel > 7) {
 8001c3c:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <testTask+0x7c>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b07      	cmp	r3, #7
 8001c42:	d902      	bls.n	8001c4a <testTask+0x62>
            currentSoundLevel = 1;
 8001c44:	4b07      	ldr	r3, [pc, #28]	; (8001c64 <testTask+0x7c>)
 8001c46:	2201      	movs	r2, #1
 8001c48:	701a      	strb	r2, [r3, #0]
        }
    }
    osTaskAdd(testTask, 0, 1000);
 8001c4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c4e:	2100      	movs	r1, #0
 8001c50:	4805      	ldr	r0, [pc, #20]	; (8001c68 <testTask+0x80>)
 8001c52:	f002 fb09 	bl	8004268 <osTaskAdd>
}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	200001d2 	.word	0x200001d2
 8001c64:	200001d1 	.word	0x200001d1
 8001c68:	08001be9 	.word	0x08001be9

08001c6c <startSoundTest>:

void startSoundTest() {
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
    for (buttonName_t btn = 0; btn < Button_Last; btn++) {
 8001c72:	2300      	movs	r3, #0
 8001c74:	71fb      	strb	r3, [r7, #7]
 8001c76:	e00b      	b.n	8001c90 <startSoundTest+0x24>
        setButtonHandler(btn, handlers[btn]);
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	4a0d      	ldr	r2, [pc, #52]	; (8001cb0 <startSoundTest+0x44>)
 8001c7c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c80:	79fb      	ldrb	r3, [r7, #7]
 8001c82:	4611      	mov	r1, r2
 8001c84:	4618      	mov	r0, r3
 8001c86:	f003 f897 	bl	8004db8 <setButtonHandler>
    for (buttonName_t btn = 0; btn < Button_Last; btn++) {
 8001c8a:	79fb      	ldrb	r3, [r7, #7]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	71fb      	strb	r3, [r7, #7]
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	2b10      	cmp	r3, #16
 8001c94:	d9f0      	bls.n	8001c78 <startSoundTest+0xc>
    }

    firstStart = 1;
 8001c96:	4b07      	ldr	r3, [pc, #28]	; (8001cb4 <startSoundTest+0x48>)
 8001c98:	2201      	movs	r2, #1
 8001c9a:	701a      	strb	r2, [r3, #0]
    osTaskAdd(testTask, 0, 200);
 8001c9c:	22c8      	movs	r2, #200	; 0xc8
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	4805      	ldr	r0, [pc, #20]	; (8001cb8 <startSoundTest+0x4c>)
 8001ca2:	f002 fae1 	bl	8004268 <osTaskAdd>
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	08005ef8 	.word	0x08005ef8
 8001cb4:	200001d2 	.word	0x200001d2
 8001cb8:	08001be9 	.word	0x08001be9

08001cbc <dummyButtonHandler>:
#include <display.h>
#include <game.h>

static void testTask(uint32_t parameters);

static void dummyButtonHandler() {
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
}
 8001cc0:	bf00      	nop
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr

08001cc8 <buttonNoHandler>:

static void buttonNoHandler(uint32_t pressType) {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
    soundStopAlarm();
 8001cd0:	f001 ff30 	bl	8003b34 <soundStopAlarm>
    osTaskDelHandler(testTask);
 8001cd4:	4804      	ldr	r0, [pc, #16]	; (8001ce8 <buttonNoHandler+0x20>)
 8001cd6:	f002 fb41 	bl	800435c <osTaskDelHandler>
    showManualTestsScreen();
 8001cda:	f7ff fed9 	bl	8001a90 <showManualTestsScreen>
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	08001d55 	.word	0x08001d55

08001cec <buttonPointHandler>:

static void buttonPointHandler(uint32_t pressType) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
    gameMoveRight();
 8001cf4:	f7ff f8e2 	bl	8000ebc <gameMoveRight>
}
 8001cf8:	bf00      	nop
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <button5Handler>:

static void button5Handler(uint32_t pressType) {
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
    gameRotate();
 8001d08:	f7ff f8ec 	bl	8000ee4 <gameRotate>
}
 8001d0c:	bf00      	nop
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <button4Handler>:

static void button4Handler(uint32_t pressType) {
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
    gameMoveLeft();
 8001d1c:	f7ff f8c4 	bl	8000ea8 <gameMoveLeft>
}
 8001d20:	bf00      	nop
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <buttonPrimeHandler>:

static void buttonPrimeHandler(uint32_t pressType) {
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
    gameMoveDown();
 8001d30:	f7ff f8ce 	bl	8000ed0 <gameMoveDown>
}
 8001d34:	bf00      	nop
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <buttonOkHandler>:

static void buttonOkHandler(uint32_t pressType) {
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
    soundStopAlarm();
 8001d44:	f001 fef6 	bl	8003b34 <soundStopAlarm>
    gameRestart();
 8001d48:	f7ff f8d6 	bl	8000ef8 <gameRestart>
}
 8001d4c:	bf00      	nop
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <testTask>:
    buttonOkHandler,            //Button_Ok
    buttonNoHandler,            //Button_No
    dummyButtonHandler          //Button_Power
};

static void testTask(uint32_t parameters) {
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
    gameLoop();
 8001d5c:	f7ff fd7e 	bl	800185c <gameLoop>
    osTaskAdd(testTask, 0, 400);
 8001d60:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001d64:	2100      	movs	r1, #0
 8001d66:	4803      	ldr	r0, [pc, #12]	; (8001d74 <testTask+0x20>)
 8001d68:	f002 fa7e 	bl	8004268 <osTaskAdd>
}
 8001d6c:	bf00      	nop
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	08001d55 	.word	0x08001d55

08001d78 <startTetrisTest>:

void startTetrisTest(void) {
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
    for (buttonName_t btn = 0; btn < Button_Last; btn++) {
 8001d7e:	2300      	movs	r3, #0
 8001d80:	71fb      	strb	r3, [r7, #7]
 8001d82:	e00b      	b.n	8001d9c <startTetrisTest+0x24>
        setButtonHandler(btn, handlers[btn]);
 8001d84:	79fb      	ldrb	r3, [r7, #7]
 8001d86:	4a0c      	ldr	r2, [pc, #48]	; (8001db8 <startTetrisTest+0x40>)
 8001d88:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d8c:	79fb      	ldrb	r3, [r7, #7]
 8001d8e:	4611      	mov	r1, r2
 8001d90:	4618      	mov	r0, r3
 8001d92:	f003 f811 	bl	8004db8 <setButtonHandler>
    for (buttonName_t btn = 0; btn < Button_Last; btn++) {
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	71fb      	strb	r3, [r7, #7]
 8001d9c:	79fb      	ldrb	r3, [r7, #7]
 8001d9e:	2b10      	cmp	r3, #16
 8001da0:	d9f0      	bls.n	8001d84 <startTetrisTest+0xc>
    }
    gameRestart();
 8001da2:	f7ff f8a9 	bl	8000ef8 <gameRestart>
    osTaskAdd(testTask, 0, 200);
 8001da6:	22c8      	movs	r2, #200	; 0xc8
 8001da8:	2100      	movs	r1, #0
 8001daa:	4804      	ldr	r0, [pc, #16]	; (8001dbc <startTetrisTest+0x44>)
 8001dac:	f002 fa5c 	bl	8004268 <osTaskAdd>
}
 8001db0:	bf00      	nop
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	08005f3c 	.word	0x08005f3c
 8001dbc:	08001d55 	.word	0x08001d55

08001dc0 <_exit>:
// is required.

void
__attribute__((weak))
_exit(int code __attribute__((unused)))
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
#if !defined(DEBUG)
  __reset_hardware();
#endif

  // TODO: write on trace
  while (1)
 8001dc8:	e7fe      	b.n	8001dc8 <_exit+0x8>
	...

08001dcc <_sbrk>:
// The definitions used here should be kept in sync with the
// stack definitions in the linker script.

caddr_t
_sbrk(int incr)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  extern char _Heap_Limit; // Defined by the linker.

  static char* current_heap_end;
  char* current_block_address;

  if (current_heap_end == 0)
 8001dd4:	4b14      	ldr	r3, [pc, #80]	; (8001e28 <_sbrk+0x5c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d102      	bne.n	8001de2 <_sbrk+0x16>
    {
      current_heap_end = &_Heap_Begin;
 8001ddc:	4b12      	ldr	r3, [pc, #72]	; (8001e28 <_sbrk+0x5c>)
 8001dde:	4a13      	ldr	r2, [pc, #76]	; (8001e2c <_sbrk+0x60>)
 8001de0:	601a      	str	r2, [r3, #0]
    }

  current_block_address = current_heap_end;
 8001de2:	4b11      	ldr	r3, [pc, #68]	; (8001e28 <_sbrk+0x5c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	60fb      	str	r3, [r7, #12]

  // Need to align heap to word boundary, else will get
  // hard faults on Cortex-M0. So we assume that heap starts on
  // word boundary, hence make sure we always add a multiple of
  // 4 to it.
  incr = (incr + 3) & (~3); // align value to 4
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3303      	adds	r3, #3
 8001dec:	f023 0303 	bic.w	r3, r3, #3
 8001df0:	607b      	str	r3, [r7, #4]
  if (current_heap_end + incr > &_Heap_Limit)
 8001df2:	4b0d      	ldr	r3, [pc, #52]	; (8001e28 <_sbrk+0x5c>)
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4413      	add	r3, r2
 8001dfa:	4a0d      	ldr	r2, [pc, #52]	; (8001e30 <_sbrk+0x64>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d907      	bls.n	8001e10 <_sbrk+0x44>
      _write (1, "_sbrk: Heap and stack collision\n", 32);

      abort ();
#else
      // Heap has overflowed
      errno = ENOMEM;
 8001e00:	f003 f9cc 	bl	800519c <__errno>
 8001e04:	4602      	mov	r2, r0
 8001e06:	230c      	movs	r3, #12
 8001e08:	6013      	str	r3, [r2, #0]
      return (caddr_t) - 1;
 8001e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e0e:	e006      	b.n	8001e1e <_sbrk+0x52>
#endif
    }

  current_heap_end += incr;
 8001e10:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <_sbrk+0x5c>)
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4413      	add	r3, r2
 8001e18:	4a03      	ldr	r2, [pc, #12]	; (8001e28 <_sbrk+0x5c>)
 8001e1a:	6013      	str	r3, [r2, #0]

  return (caddr_t) current_block_address;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	200001d4 	.word	0x200001d4
 8001e2c:	200005a4 	.word	0x200005a4
 8001e30:	2000fc00 	.word	0x2000fc00

08001e34 <__initialize_args>:
// args from the debugger. You can also use it if you decide to keep
// some args in a non-volatile memory.

void __attribute__((weak))
__initialize_args(int* p_argc, char*** p_argv)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  // available from the host environment. argv[argc] shall be a null pointer.
  // (static, no const)
  static char* argv[2] =
    { name, NULL };

  *p_argc = 1;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2201      	movs	r2, #1
 8001e42:	601a      	str	r2, [r3, #0]
  *p_argv = &argv[0];
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	4a03      	ldr	r2, [pc, #12]	; (8001e54 <__initialize_args+0x20>)
 8001e48:	601a      	str	r2, [r3, #0]
  return;
 8001e4a:	bf00      	nop
}
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr
 8001e54:	20000040 	.word	0x20000040

08001e58 <trace_printf>:

// ----------------------------------------------------------------------------

int
trace_printf(const char* format, ...)
{
 8001e58:	b40f      	push	{r0, r1, r2, r3}
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b082      	sub	sp, #8
 8001e5e:	af00      	add	r7, sp, #0
  int ret;
  va_list ap;

  va_start (ap, format);
 8001e60:	f107 0314 	add.w	r3, r7, #20
 8001e64:	603b      	str	r3, [r7, #0]
  // TODO: rewrite it to no longer use newlib, it is way too heavy

  static char buf[OS_INTEGER_TRACE_PRINTF_TMP_ARRAY_SIZE];

  // Print to the local buffer
  ret = vsnprintf (buf, sizeof(buf), format, ap);
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	2180      	movs	r1, #128	; 0x80
 8001e6c:	480a      	ldr	r0, [pc, #40]	; (8001e98 <trace_printf+0x40>)
 8001e6e:	f003 fa7f 	bl	8005370 <vsniprintf>
 8001e72:	6078      	str	r0, [r7, #4]
  if (ret > 0)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	dd05      	ble.n	8001e86 <trace_printf+0x2e>
    {
      // Transfer the buffer to the device
      ret = trace_write (buf, (size_t)ret);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4806      	ldr	r0, [pc, #24]	; (8001e98 <trace_printf+0x40>)
 8001e80:	f000 f80c 	bl	8001e9c <trace_write>
 8001e84:	6078      	str	r0, [r7, #4]
    }

  va_end (ap);
  return ret;
 8001e86:	687b      	ldr	r3, [r7, #4]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001e92:	b004      	add	sp, #16
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	200001dc 	.word	0x200001dc

08001e9c <trace_write>:
// of the trace_* functions.

ssize_t
trace_write (const char* buf __attribute__((unused)),
	     size_t nbyte __attribute__((unused)))
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  return _trace_write_semihosting_stdout(buf, nbyte);
#elif defined(OS_USE_TRACE_SEMIHOSTING_DEBUG)
  return _trace_write_semihosting_debug(buf, nbyte);
#endif

  return -1;
 8001ea6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr

08001eb4 <__initialize_hardware_early>:
// priority is Privileged, and the Stack is set to Main.

void
__attribute__((weak))
__initialize_hardware_early(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  // Call the CSMSIS system initialisation routine.
  SystemInit();
 8001eb8:	f000 f8a6 	bl	8002008 <SystemInit>

#if defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7EM__)
  // Set VTOR to the actual address, provided by the linker script.
  // Override the manual, possibly wrong, SystemInit() setting.
  SCB->VTOR = (uint32_t)(&__vectors_start);
 8001ebc:	4b02      	ldr	r3, [pc, #8]	; (8001ec8 <__initialize_hardware_early+0x14>)
 8001ebe:	4a03      	ldr	r2, [pc, #12]	; (8001ecc <__initialize_hardware_early+0x18>)
 8001ec0:	609a      	str	r2, [r3, #8]
#endif // (__VFP_FP__) && !(__SOFTFP__)

#if defined(OS_DEBUG_SEMIHOSTING_FAULTS)
  SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk;
#endif
}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	e000ed00 	.word	0xe000ed00
 8001ecc:	08000000 	.word	0x08000000

08001ed0 <__initialize_hardware>:
// constructors.

void
__attribute__((weak))
__initialize_hardware(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  // Call the CSMSIS system clock routine to store the clock frequency
  // in the SystemCoreClock global RAM location.
  SystemCoreClockUpdate();
 8001ed4:	f000 f8c4 	bl	8002060 <SystemCoreClockUpdate>
}
 8001ed8:	bf00      	nop
 8001eda:	bd80      	pop	{r7, pc}

08001edc <dumpExceptionStack>:
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
 8001ee8:	603b      	str	r3, [r7, #0]
  trace_printf ("Stack frame:\n");
 8001eea:	4834      	ldr	r0, [pc, #208]	; (8001fbc <dumpExceptionStack+0xe0>)
 8001eec:	f7ff ffb4 	bl	8001e58 <trace_printf>
  trace_printf (" R0 =  %08X\n", frame->r0);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4832      	ldr	r0, [pc, #200]	; (8001fc0 <dumpExceptionStack+0xe4>)
 8001ef8:	f7ff ffae 	bl	8001e58 <trace_printf>
  trace_printf (" R1 =  %08X\n", frame->r1);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	4619      	mov	r1, r3
 8001f02:	4830      	ldr	r0, [pc, #192]	; (8001fc4 <dumpExceptionStack+0xe8>)
 8001f04:	f7ff ffa8 	bl	8001e58 <trace_printf>
  trace_printf (" R2 =  %08X\n", frame->r2);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	482e      	ldr	r0, [pc, #184]	; (8001fc8 <dumpExceptionStack+0xec>)
 8001f10:	f7ff ffa2 	bl	8001e58 <trace_printf>
  trace_printf (" R3 =  %08X\n", frame->r3);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	4619      	mov	r1, r3
 8001f1a:	482c      	ldr	r0, [pc, #176]	; (8001fcc <dumpExceptionStack+0xf0>)
 8001f1c:	f7ff ff9c 	bl	8001e58 <trace_printf>
  trace_printf (" R12 = %08X\n", frame->r12);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	691b      	ldr	r3, [r3, #16]
 8001f24:	4619      	mov	r1, r3
 8001f26:	482a      	ldr	r0, [pc, #168]	; (8001fd0 <dumpExceptionStack+0xf4>)
 8001f28:	f7ff ff96 	bl	8001e58 <trace_printf>
  trace_printf (" LR =  %08X\n", frame->lr);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	695b      	ldr	r3, [r3, #20]
 8001f30:	4619      	mov	r1, r3
 8001f32:	4828      	ldr	r0, [pc, #160]	; (8001fd4 <dumpExceptionStack+0xf8>)
 8001f34:	f7ff ff90 	bl	8001e58 <trace_printf>
  trace_printf (" PC =  %08X\n", frame->pc);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4826      	ldr	r0, [pc, #152]	; (8001fd8 <dumpExceptionStack+0xfc>)
 8001f40:	f7ff ff8a 	bl	8001e58 <trace_printf>
  trace_printf (" PSR = %08X\n", frame->psr);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	69db      	ldr	r3, [r3, #28]
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4824      	ldr	r0, [pc, #144]	; (8001fdc <dumpExceptionStack+0x100>)
 8001f4c:	f7ff ff84 	bl	8001e58 <trace_printf>
  trace_printf ("FSR/FAR:\n");
 8001f50:	4823      	ldr	r0, [pc, #140]	; (8001fe0 <dumpExceptionStack+0x104>)
 8001f52:	f7ff ff81 	bl	8001e58 <trace_printf>
  trace_printf (" CFSR =  %08X\n", cfsr);
 8001f56:	68b9      	ldr	r1, [r7, #8]
 8001f58:	4822      	ldr	r0, [pc, #136]	; (8001fe4 <dumpExceptionStack+0x108>)
 8001f5a:	f7ff ff7d 	bl	8001e58 <trace_printf>
  trace_printf (" HFSR =  %08X\n", SCB->HFSR);
 8001f5e:	4b22      	ldr	r3, [pc, #136]	; (8001fe8 <dumpExceptionStack+0x10c>)
 8001f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f62:	4619      	mov	r1, r3
 8001f64:	4821      	ldr	r0, [pc, #132]	; (8001fec <dumpExceptionStack+0x110>)
 8001f66:	f7ff ff77 	bl	8001e58 <trace_printf>
  trace_printf (" DFSR =  %08X\n", SCB->DFSR);
 8001f6a:	4b1f      	ldr	r3, [pc, #124]	; (8001fe8 <dumpExceptionStack+0x10c>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	4619      	mov	r1, r3
 8001f70:	481f      	ldr	r0, [pc, #124]	; (8001ff0 <dumpExceptionStack+0x114>)
 8001f72:	f7ff ff71 	bl	8001e58 <trace_printf>
  trace_printf (" AFSR =  %08X\n", SCB->AFSR);
 8001f76:	4b1c      	ldr	r3, [pc, #112]	; (8001fe8 <dumpExceptionStack+0x10c>)
 8001f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	481d      	ldr	r0, [pc, #116]	; (8001ff4 <dumpExceptionStack+0x118>)
 8001f7e:	f7ff ff6b 	bl	8001e58 <trace_printf>
  if (cfsr & (1UL << 7))
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d003      	beq.n	8001f94 <dumpExceptionStack+0xb8>
      trace_printf (" MMFAR = %08X\n", mmfar);
 8001f8c:	6879      	ldr	r1, [r7, #4]
 8001f8e:	481a      	ldr	r0, [pc, #104]	; (8001ff8 <dumpExceptionStack+0x11c>)
 8001f90:	f7ff ff62 	bl	8001e58 <trace_printf>
  if (cfsr & (1UL << 15))
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <dumpExceptionStack+0xca>
      trace_printf (" BFAR =  %08X\n", bfar);
 8001f9e:	6839      	ldr	r1, [r7, #0]
 8001fa0:	4816      	ldr	r0, [pc, #88]	; (8001ffc <dumpExceptionStack+0x120>)
 8001fa2:	f7ff ff59 	bl	8001e58 <trace_printf>
  trace_printf ("Misc\n");
 8001fa6:	4816      	ldr	r0, [pc, #88]	; (8002000 <dumpExceptionStack+0x124>)
 8001fa8:	f7ff ff56 	bl	8001e58 <trace_printf>
  trace_printf (" LR/EXC_RETURN= %08X\n", lr);
 8001fac:	69b9      	ldr	r1, [r7, #24]
 8001fae:	4815      	ldr	r0, [pc, #84]	; (8002004 <dumpExceptionStack+0x128>)
 8001fb0:	f7ff ff52 	bl	8001e58 <trace_printf>
}
 8001fb4:	bf00      	nop
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	08005f80 	.word	0x08005f80
 8001fc0:	08005f90 	.word	0x08005f90
 8001fc4:	08005fa0 	.word	0x08005fa0
 8001fc8:	08005fb0 	.word	0x08005fb0
 8001fcc:	08005fc0 	.word	0x08005fc0
 8001fd0:	08005fd0 	.word	0x08005fd0
 8001fd4:	08005fe0 	.word	0x08005fe0
 8001fd8:	08005ff0 	.word	0x08005ff0
 8001fdc:	08006000 	.word	0x08006000
 8001fe0:	08006010 	.word	0x08006010
 8001fe4:	0800601c 	.word	0x0800601c
 8001fe8:	e000ed00 	.word	0xe000ed00
 8001fec:	0800602c 	.word	0x0800602c
 8001ff0:	0800603c 	.word	0x0800603c
 8001ff4:	0800604c 	.word	0x0800604c
 8001ff8:	0800605c 	.word	0x0800605c
 8001ffc:	0800606c 	.word	0x0800606c
 8002000:	0800607c 	.word	0x0800607c
 8002004:	08006084 	.word	0x08006084

08002008 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800200c:	4b12      	ldr	r3, [pc, #72]	; (8002058 <SystemInit+0x50>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a11      	ldr	r2, [pc, #68]	; (8002058 <SystemInit+0x50>)
 8002012:	f043 0301 	orr.w	r3, r3, #1
 8002016:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002018:	4b0f      	ldr	r3, [pc, #60]	; (8002058 <SystemInit+0x50>)
 800201a:	2200      	movs	r2, #0
 800201c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800201e:	4b0e      	ldr	r3, [pc, #56]	; (8002058 <SystemInit+0x50>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a0d      	ldr	r2, [pc, #52]	; (8002058 <SystemInit+0x50>)
 8002024:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002028:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800202c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800202e:	4b0a      	ldr	r3, [pc, #40]	; (8002058 <SystemInit+0x50>)
 8002030:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002034:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002036:	4b08      	ldr	r3, [pc, #32]	; (8002058 <SystemInit+0x50>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a07      	ldr	r2, [pc, #28]	; (8002058 <SystemInit+0x50>)
 800203c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002040:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002042:	4b05      	ldr	r3, [pc, #20]	; (8002058 <SystemInit+0x50>)
 8002044:	2200      	movs	r2, #0
 8002046:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002048:	4b04      	ldr	r3, [pc, #16]	; (800205c <SystemInit+0x54>)
 800204a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800204e:	609a      	str	r2, [r3, #8]
#endif
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	bc80      	pop	{r7}
 8002056:	4770      	bx	lr
 8002058:	40021000 	.word	0x40021000
 800205c:	e000ed00 	.word	0xe000ed00

08002060 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002060:	b480      	push	{r7}
 8002062:	b087      	sub	sp, #28
 8002064:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, msirange = 0U, pllvco = 0U, pllr = 2U, pllsource = 0U, pllm = 2U;
 8002066:	2300      	movs	r3, #0
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	2300      	movs	r3, #0
 800206c:	617b      	str	r3, [r7, #20]
 800206e:	2300      	movs	r3, #0
 8002070:	613b      	str	r3, [r7, #16]
 8002072:	2302      	movs	r3, #2
 8002074:	60bb      	str	r3, [r7, #8]
 8002076:	2300      	movs	r3, #0
 8002078:	607b      	str	r3, [r7, #4]
 800207a:	2302      	movs	r3, #2
 800207c:	603b      	str	r3, [r7, #0]

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == RESET)
 800207e:	4b4e      	ldr	r3, [pc, #312]	; (80021b8 <SystemCoreClockUpdate+0x158>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0308 	and.w	r3, r3, #8
 8002086:	2b00      	cmp	r3, #0
 8002088:	d107      	bne.n	800209a <SystemCoreClockUpdate+0x3a>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 800208a:	4b4b      	ldr	r3, [pc, #300]	; (80021b8 <SystemCoreClockUpdate+0x158>)
 800208c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002090:	0a1b      	lsrs	r3, r3, #8
 8002092:	f003 030f 	and.w	r3, r3, #15
 8002096:	617b      	str	r3, [r7, #20]
 8002098:	e005      	b.n	80020a6 <SystemCoreClockUpdate+0x46>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 800209a:	4b47      	ldr	r3, [pc, #284]	; (80021b8 <SystemCoreClockUpdate+0x158>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	091b      	lsrs	r3, r3, #4
 80020a0:	f003 030f 	and.w	r3, r3, #15
 80020a4:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 80020a6:	4a45      	ldr	r2, [pc, #276]	; (80021bc <SystemCoreClockUpdate+0x15c>)
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ae:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020b0:	4b41      	ldr	r3, [pc, #260]	; (80021b8 <SystemCoreClockUpdate+0x158>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f003 030c 	and.w	r3, r3, #12
 80020b8:	2b0c      	cmp	r3, #12
 80020ba:	d865      	bhi.n	8002188 <SystemCoreClockUpdate+0x128>
 80020bc:	a201      	add	r2, pc, #4	; (adr r2, 80020c4 <SystemCoreClockUpdate+0x64>)
 80020be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c2:	bf00      	nop
 80020c4:	080020f9 	.word	0x080020f9
 80020c8:	08002189 	.word	0x08002189
 80020cc:	08002189 	.word	0x08002189
 80020d0:	08002189 	.word	0x08002189
 80020d4:	08002101 	.word	0x08002101
 80020d8:	08002189 	.word	0x08002189
 80020dc:	08002189 	.word	0x08002189
 80020e0:	08002189 	.word	0x08002189
 80020e4:	08002109 	.word	0x08002109
 80020e8:	08002189 	.word	0x08002189
 80020ec:	08002189 	.word	0x08002189
 80020f0:	08002189 	.word	0x08002189
 80020f4:	08002111 	.word	0x08002111
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80020f8:	4a31      	ldr	r2, [pc, #196]	; (80021c0 <SystemCoreClockUpdate+0x160>)
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	6013      	str	r3, [r2, #0]
      break;
 80020fe:	e047      	b.n	8002190 <SystemCoreClockUpdate+0x130>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8002100:	4b2f      	ldr	r3, [pc, #188]	; (80021c0 <SystemCoreClockUpdate+0x160>)
 8002102:	4a30      	ldr	r2, [pc, #192]	; (80021c4 <SystemCoreClockUpdate+0x164>)
 8002104:	601a      	str	r2, [r3, #0]
      break;
 8002106:	e043      	b.n	8002190 <SystemCoreClockUpdate+0x130>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8002108:	4b2d      	ldr	r3, [pc, #180]	; (80021c0 <SystemCoreClockUpdate+0x160>)
 800210a:	4a2f      	ldr	r2, [pc, #188]	; (80021c8 <SystemCoreClockUpdate+0x168>)
 800210c:	601a      	str	r2, [r3, #0]
      break;
 800210e:	e03f      	b.n	8002190 <SystemCoreClockUpdate+0x130>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002110:	4b29      	ldr	r3, [pc, #164]	; (80021b8 <SystemCoreClockUpdate+0x158>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	f003 0303 	and.w	r3, r3, #3
 8002118:	607b      	str	r3, [r7, #4]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 800211a:	4b27      	ldr	r3, [pc, #156]	; (80021b8 <SystemCoreClockUpdate+0x158>)
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	091b      	lsrs	r3, r3, #4
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	3301      	adds	r3, #1
 8002126:	603b      	str	r3, [r7, #0]

      switch (pllsource)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b02      	cmp	r3, #2
 800212c:	d002      	beq.n	8002134 <SystemCoreClockUpdate+0xd4>
 800212e:	2b03      	cmp	r3, #3
 8002130:	d006      	beq.n	8002140 <SystemCoreClockUpdate+0xe0>
 8002132:	e00b      	b.n	800214c <SystemCoreClockUpdate+0xec>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8002134:	4a23      	ldr	r2, [pc, #140]	; (80021c4 <SystemCoreClockUpdate+0x164>)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	fbb2 f3f3 	udiv	r3, r2, r3
 800213c:	613b      	str	r3, [r7, #16]
          break;
 800213e:	e00b      	b.n	8002158 <SystemCoreClockUpdate+0xf8>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8002140:	4a21      	ldr	r2, [pc, #132]	; (80021c8 <SystemCoreClockUpdate+0x168>)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	fbb2 f3f3 	udiv	r3, r2, r3
 8002148:	613b      	str	r3, [r7, #16]
          break;
 800214a:	e005      	b.n	8002158 <SystemCoreClockUpdate+0xf8>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	fbb2 f3f3 	udiv	r3, r2, r3
 8002154:	613b      	str	r3, [r7, #16]
          break;
 8002156:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8002158:	4b17      	ldr	r3, [pc, #92]	; (80021b8 <SystemCoreClockUpdate+0x158>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	0a1b      	lsrs	r3, r3, #8
 800215e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	fb02 f303 	mul.w	r3, r2, r3
 8002168:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 800216a:	4b13      	ldr	r3, [pc, #76]	; (80021b8 <SystemCoreClockUpdate+0x158>)
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	0e5b      	lsrs	r3, r3, #25
 8002170:	f003 0303 	and.w	r3, r3, #3
 8002174:	3301      	adds	r3, #1
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	60bb      	str	r3, [r7, #8]
      SystemCoreClock = pllvco/pllr;
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002182:	4a0f      	ldr	r2, [pc, #60]	; (80021c0 <SystemCoreClockUpdate+0x160>)
 8002184:	6013      	str	r3, [r2, #0]
      break;
 8002186:	e003      	b.n	8002190 <SystemCoreClockUpdate+0x130>

    default:
      SystemCoreClock = msirange;
 8002188:	4a0d      	ldr	r2, [pc, #52]	; (80021c0 <SystemCoreClockUpdate+0x160>)
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	6013      	str	r3, [r2, #0]
      break;
 800218e:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8002190:	4b09      	ldr	r3, [pc, #36]	; (80021b8 <SystemCoreClockUpdate+0x158>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	091b      	lsrs	r3, r3, #4
 8002196:	f003 030f 	and.w	r3, r3, #15
 800219a:	4a0c      	ldr	r2, [pc, #48]	; (80021cc <SystemCoreClockUpdate+0x16c>)
 800219c:	5cd3      	ldrb	r3, [r2, r3]
 800219e:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80021a0:	4b07      	ldr	r3, [pc, #28]	; (80021c0 <SystemCoreClockUpdate+0x160>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	fa22 f303 	lsr.w	r3, r2, r3
 80021aa:	4a05      	ldr	r2, [pc, #20]	; (80021c0 <SystemCoreClockUpdate+0x160>)
 80021ac:	6013      	str	r3, [r2, #0]
}
 80021ae:	bf00      	nop
 80021b0:	371c      	adds	r7, #28
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr
 80021b8:	40021000 	.word	0x40021000
 80021bc:	080060d8 	.word	0x080060d8
 80021c0:	20000048 	.word	0x20000048
 80021c4:	00f42400 	.word	0x00f42400
 80021c8:	007a1200 	.word	0x007a1200
 80021cc:	080060c8 	.word	0x080060c8

080021d0 <TIM6_DAC_IRQHandler>:
#include <sound.h>
#include <stm32l4xx.h>

void TIM6_DAC_IRQHandler() {
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
    if (TIM6->SR & TIM_SR_UIF) {
 80021d4:	4b07      	ldr	r3, [pc, #28]	; (80021f4 <TIM6_DAC_IRQHandler+0x24>)
 80021d6:	691b      	ldr	r3, [r3, #16]
 80021d8:	f003 0301 	and.w	r3, r3, #1
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d007      	beq.n	80021f0 <TIM6_DAC_IRQHandler+0x20>
        TIM6->SR &= ~TIM_SR_UIF;
 80021e0:	4b04      	ldr	r3, [pc, #16]	; (80021f4 <TIM6_DAC_IRQHandler+0x24>)
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	4a03      	ldr	r2, [pc, #12]	; (80021f4 <TIM6_DAC_IRQHandler+0x24>)
 80021e6:	f023 0301 	bic.w	r3, r3, #1
 80021ea:	6113      	str	r3, [r2, #16]
        soundControlHandler();
 80021ec:	f001 fee0 	bl	8003fb0 <soundControlHandler>
    }
}
 80021f0:	bf00      	nop
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40001000 	.word	0x40001000

080021f8 <TIM3_IRQHandler>:

void TIM3_IRQHandler() {
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
    if (TIM3->SR & TIM_SR_UIF) {
 80021fc:	4b07      	ldr	r3, [pc, #28]	; (800221c <TIM3_IRQHandler+0x24>)
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b00      	cmp	r3, #0
 8002206:	d007      	beq.n	8002218 <TIM3_IRQHandler+0x20>
        TIM3->SR &= ~TIM_SR_UIF;
 8002208:	4b04      	ldr	r3, [pc, #16]	; (800221c <TIM3_IRQHandler+0x24>)
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	4a03      	ldr	r2, [pc, #12]	; (800221c <TIM3_IRQHandler+0x24>)
 800220e:	f023 0301 	bic.w	r3, r3, #1
 8002212:	6113      	str	r3, [r2, #16]
        soundWaveformHandler();
 8002214:	f001 fef6 	bl	8004004 <soundWaveformHandler>
    }
}
 8002218:	bf00      	nop
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40000400 	.word	0x40000400

08002220 <initDisplay>:
{INIT_SEQ_CMD, 0x29}};

static uint16_t currentPage, currentColumn;
static uint16_t fgColor, bgColor;

void initDisplay() {
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
    RST_SET();
 8002226:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800222a:	695b      	ldr	r3, [r3, #20]
 800222c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002230:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002234:	6153      	str	r3, [r2, #20]
    //Wait to leave reset
    //TODO: implement delay by using tasks
    for (int i = 0; i < 1000; i++);
 8002236:	2300      	movs	r3, #0
 8002238:	607b      	str	r3, [r7, #4]
 800223a:	e002      	b.n	8002242 <initDisplay+0x22>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3301      	adds	r3, #1
 8002240:	607b      	str	r3, [r7, #4]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002248:	dbf8      	blt.n	800223c <initDisplay+0x1c>
    RD_SET();
 800224a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800224e:	695b      	ldr	r3, [r3, #20]
 8002250:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002254:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002258:	6153      	str	r3, [r2, #20]
    CS_CLEAR();
 800225a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002264:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002268:	6153      	str	r3, [r2, #20]

    for (uint32_t i = 0; i < INIT_SEQUENCE_LENGTH; i++) {
 800226a:	2300      	movs	r3, #0
 800226c:	603b      	str	r3, [r7, #0]
 800226e:	e04b      	b.n	8002308 <initDisplay+0xe8>
        switch (DisplayInitSequence[i].type) {
 8002270:	4a2a      	ldr	r2, [pc, #168]	; (800231c <initDisplay+0xfc>)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d002      	beq.n	8002282 <initDisplay+0x62>
 800227c:	2b01      	cmp	r3, #1
 800227e:	d020      	beq.n	80022c2 <initDisplay+0xa2>
 8002280:	e03f      	b.n	8002302 <initDisplay+0xe2>
            case INIT_SEQ_CMD:
                WR_CLEAR();
 8002282:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002286:	695b      	ldr	r3, [r3, #20]
 8002288:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800228c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002290:	6153      	str	r3, [r2, #20]
                DC_CLEAR();
 8002292:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800229c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022a0:	6153      	str	r3, [r2, #20]
                GPIOD->ODR = DisplayInitSequence[i].data;
 80022a2:	4a1e      	ldr	r2, [pc, #120]	; (800231c <initDisplay+0xfc>)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	4413      	add	r3, r2
 80022aa:	785a      	ldrb	r2, [r3, #1]
 80022ac:	4b1c      	ldr	r3, [pc, #112]	; (8002320 <initDisplay+0x100>)
 80022ae:	615a      	str	r2, [r3, #20]
                WR_SET();
 80022b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80022ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022be:	6153      	str	r3, [r2, #20]
                break;
 80022c0:	e01f      	b.n	8002302 <initDisplay+0xe2>
            case INIT_SEQ_DATA:
                WR_CLEAR();
 80022c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80022cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022d0:	6153      	str	r3, [r2, #20]
                DC_SET();
 80022d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80022dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022e0:	6153      	str	r3, [r2, #20]
                GPIOD->ODR = DisplayInitSequence[i].data;
 80022e2:	4a0e      	ldr	r2, [pc, #56]	; (800231c <initDisplay+0xfc>)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	4413      	add	r3, r2
 80022ea:	785a      	ldrb	r2, [r3, #1]
 80022ec:	4b0c      	ldr	r3, [pc, #48]	; (8002320 <initDisplay+0x100>)
 80022ee:	615a      	str	r2, [r3, #20]
                WR_SET();
 80022f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80022fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022fe:	6153      	str	r3, [r2, #20]
                break;
 8002300:	bf00      	nop
    for (uint32_t i = 0; i < INIT_SEQUENCE_LENGTH; i++) {
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	3301      	adds	r3, #1
 8002306:	603b      	str	r3, [r7, #0]
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	2b4d      	cmp	r3, #77	; 0x4d
 800230c:	d9b0      	bls.n	8002270 <initDisplay+0x50>
        }
    }
    start_display();
 800230e:	f000 f923 	bl	8002558 <start_display>
}
 8002312:	bf00      	nop
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	08006108 	.word	0x08006108
 8002320:	48000c00 	.word	0x48000c00

08002324 <cmdWrite>:

static void cmdWrite(uint16_t cmd) {
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	80fb      	strh	r3, [r7, #6]
    WR_CLEAR();
 800232e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002332:	695b      	ldr	r3, [r3, #20]
 8002334:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002338:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800233c:	6153      	str	r3, [r2, #20]
    DC_CLEAR();
 800233e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002342:	695b      	ldr	r3, [r3, #20]
 8002344:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002348:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800234c:	6153      	str	r3, [r2, #20]
    GPIOD->ODR = cmd;
 800234e:	4a08      	ldr	r2, [pc, #32]	; (8002370 <cmdWrite+0x4c>)
 8002350:	88fb      	ldrh	r3, [r7, #6]
 8002352:	6153      	str	r3, [r2, #20]
    WR_SET();
 8002354:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800235e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002362:	6153      	str	r3, [r2, #20]
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	bc80      	pop	{r7}
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	48000c00 	.word	0x48000c00

08002374 <dataWrite>:

static void dataWrite(uint16_t data) {
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	4603      	mov	r3, r0
 800237c:	80fb      	strh	r3, [r7, #6]
    WR_CLEAR();
 800237e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002388:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800238c:	6153      	str	r3, [r2, #20]
    DC_SET();
 800238e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002392:	695b      	ldr	r3, [r3, #20]
 8002394:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002398:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800239c:	6153      	str	r3, [r2, #20]
    GPIOD->ODR = data;
 800239e:	4a08      	ldr	r2, [pc, #32]	; (80023c0 <dataWrite+0x4c>)
 80023a0:	88fb      	ldrh	r3, [r7, #6]
 80023a2:	6153      	str	r3, [r2, #20]
    WR_SET();
 80023a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80023ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b2:	6153      	str	r3, [r2, #20]
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bc80      	pop	{r7}
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	48000c00 	.word	0x48000c00

080023c4 <setFgColor>:

void setFgColor(uint16_t color) {
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	4603      	mov	r3, r0
 80023cc:	80fb      	strh	r3, [r7, #6]
    fgColor = color;
 80023ce:	4a04      	ldr	r2, [pc, #16]	; (80023e0 <setFgColor+0x1c>)
 80023d0:	88fb      	ldrh	r3, [r7, #6]
 80023d2:	8013      	strh	r3, [r2, #0]
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	bc80      	pop	{r7}
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	20000260 	.word	0x20000260

080023e4 <setBgColor>:

void setBgColor(uint16_t color) {
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	80fb      	strh	r3, [r7, #6]
    bgColor = color;
 80023ee:	4a04      	ldr	r2, [pc, #16]	; (8002400 <setBgColor+0x1c>)
 80023f0:	88fb      	ldrh	r3, [r7, #6]
 80023f2:	8013      	strh	r3, [r2, #0]
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc80      	pop	{r7}
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	20000262 	.word	0x20000262

08002404 <graflocat>:

//column -> x
//page -> y
void graflocat(uint16_t page, uint16_t column) {
 8002404:	b590      	push	{r4, r7, lr}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	460a      	mov	r2, r1
 800240e:	80fb      	strh	r3, [r7, #6]
 8002410:	4613      	mov	r3, r2
 8002412:	80bb      	strh	r3, [r7, #4]
    cmdWrite(0x2A);
 8002414:	202a      	movs	r0, #42	; 0x2a
 8002416:	f7ff ff85 	bl	8002324 <cmdWrite>
    dataWrite(0x00);
 800241a:	2000      	movs	r0, #0
 800241c:	f7ff ffaa 	bl	8002374 <dataWrite>
    dataWrite(240 - page - getFontSize());
 8002420:	88fb      	ldrh	r3, [r7, #6]
 8002422:	425b      	negs	r3, r3
 8002424:	b29c      	uxth	r4, r3
 8002426:	f000 ffb7 	bl	8003398 <getFontSize>
 800242a:	4603      	mov	r3, r0
 800242c:	b29b      	uxth	r3, r3
 800242e:	1ae3      	subs	r3, r4, r3
 8002430:	b29b      	uxth	r3, r3
 8002432:	33f0      	adds	r3, #240	; 0xf0
 8002434:	b29b      	uxth	r3, r3
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff ff9c 	bl	8002374 <dataWrite>
    dataWrite(0x00);
 800243c:	2000      	movs	r0, #0
 800243e:	f7ff ff99 	bl	8002374 <dataWrite>
    dataWrite(240);
 8002442:	20f0      	movs	r0, #240	; 0xf0
 8002444:	f7ff ff96 	bl	8002374 <dataWrite>
    cmdWrite(0x2B);
 8002448:	202b      	movs	r0, #43	; 0x2b
 800244a:	f7ff ff6b 	bl	8002324 <cmdWrite>
    dataWrite(column >> 8);
 800244e:	88bb      	ldrh	r3, [r7, #4]
 8002450:	0a1b      	lsrs	r3, r3, #8
 8002452:	b29b      	uxth	r3, r3
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff ff8d 	bl	8002374 <dataWrite>
    dataWrite(column & 0xFF);
 800245a:	88bb      	ldrh	r3, [r7, #4]
 800245c:	b2db      	uxtb	r3, r3
 800245e:	b29b      	uxth	r3, r3
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff ff87 	bl	8002374 <dataWrite>
    dataWrite(0x01);
 8002466:	2001      	movs	r0, #1
 8002468:	f7ff ff84 	bl	8002374 <dataWrite>
    dataWrite(0x3F);
 800246c:	203f      	movs	r0, #63	; 0x3f
 800246e:	f7ff ff81 	bl	8002374 <dataWrite>

    currentPage = page;
 8002472:	4a05      	ldr	r2, [pc, #20]	; (8002488 <graflocat+0x84>)
 8002474:	88fb      	ldrh	r3, [r7, #6]
 8002476:	8013      	strh	r3, [r2, #0]
    currentColumn = column;
 8002478:	4a04      	ldr	r2, [pc, #16]	; (800248c <graflocat+0x88>)
 800247a:	88bb      	ldrh	r3, [r7, #4]
 800247c:	8013      	strh	r3, [r2, #0]
}
 800247e:	bf00      	nop
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	bd90      	pop	{r4, r7, pc}
 8002486:	bf00      	nop
 8002488:	2000025c 	.word	0x2000025c
 800248c:	2000025e 	.word	0x2000025e

08002490 <fillhx>:

void fillhx(uint16_t column) {
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	80fb      	strh	r3, [r7, #6]
    uint16_t lastCol;

    lastCol = column;
 800249a:	88fb      	ldrh	r3, [r7, #6]
 800249c:	82fb      	strh	r3, [r7, #22]
    if (column > 320) {
 800249e:	88fb      	ldrh	r3, [r7, #6]
 80024a0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80024a4:	d902      	bls.n	80024ac <fillhx+0x1c>
        lastCol = 320;
 80024a6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80024aa:	82fb      	strh	r3, [r7, #22]
    }
    graflocat(currentPage, currentColumn);
 80024ac:	4b1a      	ldr	r3, [pc, #104]	; (8002518 <fillhx+0x88>)
 80024ae:	881a      	ldrh	r2, [r3, #0]
 80024b0:	4b1a      	ldr	r3, [pc, #104]	; (800251c <fillhx+0x8c>)
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	4619      	mov	r1, r3
 80024b6:	4610      	mov	r0, r2
 80024b8:	f7ff ffa4 	bl	8002404 <graflocat>
    for (int i = currentColumn; i < lastCol; i++) {
 80024bc:	4b17      	ldr	r3, [pc, #92]	; (800251c <fillhx+0x8c>)
 80024be:	881b      	ldrh	r3, [r3, #0]
 80024c0:	613b      	str	r3, [r7, #16]
 80024c2:	e021      	b.n	8002508 <fillhx+0x78>
        cmdWrite(0x2C);
 80024c4:	202c      	movs	r0, #44	; 0x2c
 80024c6:	f7ff ff2d 	bl	8002324 <cmdWrite>
        for (int j = 0; j < getFontSize(); j++) {
 80024ca:	2300      	movs	r3, #0
 80024cc:	60fb      	str	r3, [r7, #12]
 80024ce:	e007      	b.n	80024e0 <fillhx+0x50>
            dataWrite(bgColor);
 80024d0:	4b13      	ldr	r3, [pc, #76]	; (8002520 <fillhx+0x90>)
 80024d2:	881b      	ldrh	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff ff4d 	bl	8002374 <dataWrite>
        for (int j = 0; j < getFontSize(); j++) {
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	3301      	adds	r3, #1
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	f000 ff5a 	bl	8003398 <getFontSize>
 80024e4:	4603      	mov	r3, r0
 80024e6:	461a      	mov	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	4293      	cmp	r3, r2
 80024ec:	dbf0      	blt.n	80024d0 <fillhx+0x40>
        }
        graflocat(currentPage, currentColumn + 1);
 80024ee:	4b0a      	ldr	r3, [pc, #40]	; (8002518 <fillhx+0x88>)
 80024f0:	881a      	ldrh	r2, [r3, #0]
 80024f2:	4b0a      	ldr	r3, [pc, #40]	; (800251c <fillhx+0x8c>)
 80024f4:	881b      	ldrh	r3, [r3, #0]
 80024f6:	3301      	adds	r3, #1
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	4619      	mov	r1, r3
 80024fc:	4610      	mov	r0, r2
 80024fe:	f7ff ff81 	bl	8002404 <graflocat>
    for (int i = currentColumn; i < lastCol; i++) {
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	3301      	adds	r3, #1
 8002506:	613b      	str	r3, [r7, #16]
 8002508:	8afb      	ldrh	r3, [r7, #22]
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	429a      	cmp	r2, r3
 800250e:	dbd9      	blt.n	80024c4 <fillhx+0x34>
    }
}
 8002510:	bf00      	nop
 8002512:	3718      	adds	r7, #24
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	2000025c 	.word	0x2000025c
 800251c:	2000025e 	.word	0x2000025e
 8002520:	20000262 	.word	0x20000262

08002524 <enterxxx>:

void enterxxx() {
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
    fillhx(320);
 8002528:	f44f 70a0 	mov.w	r0, #320	; 0x140
 800252c:	f7ff ffb0 	bl	8002490 <fillhx>
    currentColumn = 0;
 8002530:	4b07      	ldr	r3, [pc, #28]	; (8002550 <enterxxx+0x2c>)
 8002532:	2200      	movs	r2, #0
 8002534:	801a      	strh	r2, [r3, #0]
    currentPage += getFontSize();
 8002536:	f000 ff2f 	bl	8003398 <getFontSize>
 800253a:	4603      	mov	r3, r0
 800253c:	b29a      	uxth	r2, r3
 800253e:	4b05      	ldr	r3, [pc, #20]	; (8002554 <enterxxx+0x30>)
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	4413      	add	r3, r2
 8002544:	b29a      	uxth	r2, r3
 8002546:	4b03      	ldr	r3, [pc, #12]	; (8002554 <enterxxx+0x30>)
 8002548:	801a      	strh	r2, [r3, #0]
}
 800254a:	bf00      	nop
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	2000025e 	.word	0x2000025e
 8002554:	2000025c 	.word	0x2000025c

08002558 <start_display>:

void start_display() {
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
    currentPage = 0;
 800255c:	4b08      	ldr	r3, [pc, #32]	; (8002580 <start_display+0x28>)
 800255e:	2200      	movs	r2, #0
 8002560:	801a      	strh	r2, [r3, #0]
    currentColumn = 0;
 8002562:	4b08      	ldr	r3, [pc, #32]	; (8002584 <start_display+0x2c>)
 8002564:	2200      	movs	r2, #0
 8002566:	801a      	strh	r2, [r3, #0]
    fgColor = color_datatitle;
 8002568:	4b07      	ldr	r3, [pc, #28]	; (8002588 <start_display+0x30>)
 800256a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800256e:	801a      	strh	r2, [r3, #0]
    bgColor = color_defback;
 8002570:	4b06      	ldr	r3, [pc, #24]	; (800258c <start_display+0x34>)
 8002572:	2200      	movs	r2, #0
 8002574:	801a      	strh	r2, [r3, #0]
    setFontSize(8);
 8002576:	2008      	movs	r0, #8
 8002578:	f000 fed4 	bl	8003324 <setFontSize>
}
 800257c:	bf00      	nop
 800257e:	bd80      	pop	{r7, pc}
 8002580:	2000025c 	.word	0x2000025c
 8002584:	2000025e 	.word	0x2000025e
 8002588:	20000260 	.word	0x20000260
 800258c:	20000262 	.word	0x20000262

08002590 <grafchar>:

void grafchar(char c) {
 8002590:	b580      	push	{r7, lr}
 8002592:	b08e      	sub	sp, #56	; 0x38
 8002594:	af00      	add	r7, sp, #0
 8002596:	4603      	mov	r3, r0
 8002598:	71fb      	strb	r3, [r7, #7]
    Font *font;
    FontCharacter *charImage;
    uint32_t charPixels = 0;
 800259a:	2300      	movs	r3, #0
 800259c:	637b      	str	r3, [r7, #52]	; 0x34
    uint32_t pixelMask = 0;
 800259e:	2300      	movs	r3, #0
 80025a0:	633b      	str	r3, [r7, #48]	; 0x30
    uint32_t charSize;
    uint32_t fontScale, scaleW;
    uint32_t i = 0;
 80025a2:	2300      	movs	r3, #0
 80025a4:	62bb      	str	r3, [r7, #40]	; 0x28

    font = (Font*)getCurrentFont();
 80025a6:	f000 ff01 	bl	80033ac <getCurrentFont>
 80025aa:	61b8      	str	r0, [r7, #24]
    charImage = (FontCharacter*)font->chars[c - 0x20];
 80025ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b0:	3b20      	subs	r3, #32
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4413      	add	r3, r2
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	617b      	str	r3, [r7, #20]
    charSize = charImage->charWidth * font->charHeight / font->elemSize;
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	461a      	mov	r2, r3
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	fb03 f302 	mul.w	r3, r3, r2
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	7852      	ldrb	r2, [r2, #1]
 80025ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
    fontScale = getFontScale();
 80025d4:	f000 ff18 	bl	8003408 <getFontScale>
 80025d8:	60f8      	str	r0, [r7, #12]

    scaleW = fontScale;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	62fb      	str	r3, [r7, #44]	; 0x2c

    graflocat(currentPage, currentColumn);
 80025de:	4b51      	ldr	r3, [pc, #324]	; (8002724 <grafchar+0x194>)
 80025e0:	881a      	ldrh	r2, [r3, #0]
 80025e2:	4b51      	ldr	r3, [pc, #324]	; (8002728 <grafchar+0x198>)
 80025e4:	881b      	ldrh	r3, [r3, #0]
 80025e6:	4619      	mov	r1, r3
 80025e8:	4610      	mov	r0, r2
 80025ea:	f7ff ff0b 	bl	8002404 <graflocat>
    cmdWrite(0x2C);
 80025ee:	202c      	movs	r0, #44	; 0x2c
 80025f0:	f7ff fe98 	bl	8002324 <cmdWrite>
    while (i < charSize) {
 80025f4:	e08d      	b.n	8002712 <grafchar+0x182>
        switch (font->elemSize) {
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	785b      	ldrb	r3, [r3, #1]
 80025fa:	2b10      	cmp	r3, #16
 80025fc:	d00c      	beq.n	8002618 <grafchar+0x88>
 80025fe:	2b20      	cmp	r3, #32
 8002600:	d015      	beq.n	800262e <grafchar+0x9e>
 8002602:	2b08      	cmp	r3, #8
 8002604:	d11e      	bne.n	8002644 <grafchar+0xb4>
        case 8:
            charPixels = *((uint8_t*)charImage->charData + i);
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	685a      	ldr	r2, [r3, #4]
 800260a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800260c:	4413      	add	r3, r2
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	637b      	str	r3, [r7, #52]	; 0x34
            pixelMask = 0x80;
 8002612:	2380      	movs	r3, #128	; 0x80
 8002614:	633b      	str	r3, [r7, #48]	; 0x30
            break;
 8002616:	e015      	b.n	8002644 <grafchar+0xb4>
        case 16:
            charPixels = *((uint16_t*)charImage->charData + i);
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	4413      	add	r3, r2
 8002622:	881b      	ldrh	r3, [r3, #0]
 8002624:	637b      	str	r3, [r7, #52]	; 0x34
            pixelMask = 0x8000;
 8002626:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800262a:	633b      	str	r3, [r7, #48]	; 0x30
            break;
 800262c:	e00a      	b.n	8002644 <grafchar+0xb4>
        case 32:
            charPixels = *((uint32_t*)charImage->charData + i);
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	637b      	str	r3, [r7, #52]	; 0x34
            pixelMask = 0x80000000;
 800263c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002640:	633b      	str	r3, [r7, #48]	; 0x30
            break;
 8002642:	bf00      	nop
        }

        for (int j = 0; j < font->elemSize; j++) {
 8002644:	2300      	movs	r3, #0
 8002646:	627b      	str	r3, [r7, #36]	; 0x24
 8002648:	e029      	b.n	800269e <grafchar+0x10e>
            if ((charPixels & pixelMask) != 0) {
 800264a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800264c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800264e:	4013      	ands	r3, r2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d00f      	beq.n	8002674 <grafchar+0xe4>
                for (uint32_t scaleH = 0; scaleH < fontScale; scaleH++) {
 8002654:	2300      	movs	r3, #0
 8002656:	623b      	str	r3, [r7, #32]
 8002658:	e007      	b.n	800266a <grafchar+0xda>
                    dataWrite(fgColor);
 800265a:	4b34      	ldr	r3, [pc, #208]	; (800272c <grafchar+0x19c>)
 800265c:	881b      	ldrh	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff fe88 	bl	8002374 <dataWrite>
                for (uint32_t scaleH = 0; scaleH < fontScale; scaleH++) {
 8002664:	6a3b      	ldr	r3, [r7, #32]
 8002666:	3301      	adds	r3, #1
 8002668:	623b      	str	r3, [r7, #32]
 800266a:	6a3a      	ldr	r2, [r7, #32]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	429a      	cmp	r2, r3
 8002670:	d3f3      	bcc.n	800265a <grafchar+0xca>
 8002672:	e00e      	b.n	8002692 <grafchar+0x102>
                }
            } else {
                for (uint32_t scaleH = 0; scaleH < fontScale; scaleH++) {
 8002674:	2300      	movs	r3, #0
 8002676:	61fb      	str	r3, [r7, #28]
 8002678:	e007      	b.n	800268a <grafchar+0xfa>
                    dataWrite(bgColor);
 800267a:	4b2d      	ldr	r3, [pc, #180]	; (8002730 <grafchar+0x1a0>)
 800267c:	881b      	ldrh	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff fe78 	bl	8002374 <dataWrite>
                for (uint32_t scaleH = 0; scaleH < fontScale; scaleH++) {
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	3301      	adds	r3, #1
 8002688:	61fb      	str	r3, [r7, #28]
 800268a:	69fa      	ldr	r2, [r7, #28]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	429a      	cmp	r2, r3
 8002690:	d3f3      	bcc.n	800267a <grafchar+0xea>
                }
            }
            charPixels <<= 1;
 8002692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	637b      	str	r3, [r7, #52]	; 0x34
        for (int j = 0; j < font->elemSize; j++) {
 8002698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269a:	3301      	adds	r3, #1
 800269c:	627b      	str	r3, [r7, #36]	; 0x24
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	785b      	ldrb	r3, [r3, #1]
 80026a2:	461a      	mov	r2, r3
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a6:	4293      	cmp	r3, r2
 80026a8:	dbcf      	blt.n	800264a <grafchar+0xba>
        }

        i++;
 80026aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ac:	3301      	adds	r3, #1
 80026ae:	62bb      	str	r3, [r7, #40]	; 0x28
        if (i % (font->charHeight / font->elemSize) == 0) {
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	781a      	ldrb	r2, [r3, #0]
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	785b      	ldrb	r3, [r3, #1]
 80026b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	461a      	mov	r2, r3
 80026c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80026c6:	fb02 f201 	mul.w	r2, r2, r1
 80026ca:	1a9b      	subs	r3, r3, r2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d120      	bne.n	8002712 <grafchar+0x182>
            graflocat(currentPage, currentColumn + 1);
 80026d0:	4b14      	ldr	r3, [pc, #80]	; (8002724 <grafchar+0x194>)
 80026d2:	881a      	ldrh	r2, [r3, #0]
 80026d4:	4b14      	ldr	r3, [pc, #80]	; (8002728 <grafchar+0x198>)
 80026d6:	881b      	ldrh	r3, [r3, #0]
 80026d8:	3301      	adds	r3, #1
 80026da:	b29b      	uxth	r3, r3
 80026dc:	4619      	mov	r1, r3
 80026de:	4610      	mov	r0, r2
 80026e0:	f7ff fe90 	bl	8002404 <graflocat>
            cmdWrite(0x2C);
 80026e4:	202c      	movs	r0, #44	; 0x2c
 80026e6:	f7ff fe1d 	bl	8002324 <cmdWrite>
            if (scaleW > 1) {
 80026ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d90e      	bls.n	800270e <grafchar+0x17e>
                scaleW--;
 80026f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f2:	3b01      	subs	r3, #1
 80026f4:	62fb      	str	r3, [r7, #44]	; 0x2c
                i = i - font->charHeight / font->elemSize;
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	781a      	ldrb	r2, [r3, #0]
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	785b      	ldrb	r3, [r3, #1]
 80026fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002702:	b2db      	uxtb	r3, r3
 8002704:	461a      	mov	r2, r3
 8002706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002708:	1a9b      	subs	r3, r3, r2
 800270a:	62bb      	str	r3, [r7, #40]	; 0x28
 800270c:	e001      	b.n	8002712 <grafchar+0x182>
            } else {
                scaleW = fontScale;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (i < charSize) {
 8002712:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	429a      	cmp	r2, r3
 8002718:	f4ff af6d 	bcc.w	80025f6 <grafchar+0x66>
            }
        }
    }
}
 800271c:	bf00      	nop
 800271e:	3738      	adds	r7, #56	; 0x38
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	2000025c 	.word	0x2000025c
 8002728:	2000025e 	.word	0x2000025e
 800272c:	20000260 	.word	0x20000260
 8002730:	20000262 	.word	0x20000262

08002734 <keyshow>:

void keyshow(uint8_t key) {
 8002734:	b580      	push	{r7, lr}
 8002736:	b08a      	sub	sp, #40	; 0x28
 8002738:	af00      	add	r7, sp, #0
 800273a:	4603      	mov	r3, r0
 800273c:	71fb      	strb	r3, [r7, #7]
    KeyCharacter *keyCharacter = getKeyCharacter(key);
 800273e:	79fb      	ldrb	r3, [r7, #7]
 8002740:	4618      	mov	r0, r3
 8002742:	f000 fe6b 	bl	800341c <getKeyCharacter>
 8002746:	4603      	mov	r3, r0
 8002748:	613b      	str	r3, [r7, #16]
    const FontCharacter *currentImage;
    uint8_t charPixels;
    uint8_t pixelMask;
    uint32_t i = 0;
 800274a:	2300      	movs	r3, #0
 800274c:	623b      	str	r3, [r7, #32]

    currentImage = keyCharacter->startCap;
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	60fb      	str	r3, [r7, #12]
    graflocat(currentPage, currentColumn);
 8002754:	4b8d      	ldr	r3, [pc, #564]	; (800298c <keyshow+0x258>)
 8002756:	881a      	ldrh	r2, [r3, #0]
 8002758:	4b8d      	ldr	r3, [pc, #564]	; (8002990 <keyshow+0x25c>)
 800275a:	881b      	ldrh	r3, [r3, #0]
 800275c:	4619      	mov	r1, r3
 800275e:	4610      	mov	r0, r2
 8002760:	f7ff fe50 	bl	8002404 <graflocat>
    cmdWrite(0x2C);
 8002764:	202c      	movs	r0, #44	; 0x2c
 8002766:	f7ff fddd 	bl	8002324 <cmdWrite>
    while (i < currentImage->charWidth * 3) {
 800276a:	e043      	b.n	80027f4 <keyshow+0xc0>
        charPixels = *((uint8_t*)currentImage->charData + i);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	6a3b      	ldr	r3, [r7, #32]
 8002772:	4413      	add	r3, r2
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        pixelMask = 0x80;
 800277a:	2380      	movs	r3, #128	; 0x80
 800277c:	72fb      	strb	r3, [r7, #11]
        for (int j = 0; j < 8; j++) {
 800277e:	2300      	movs	r3, #0
 8002780:	61fb      	str	r3, [r7, #28]
 8002782:	e019      	b.n	80027b8 <keyshow+0x84>
            if ((charPixels & pixelMask) != 0) {
 8002784:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002788:	7afb      	ldrb	r3, [r7, #11]
 800278a:	4013      	ands	r3, r2
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d005      	beq.n	800279e <keyshow+0x6a>
                dataWrite(keyCharacter->bgColor);
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	881b      	ldrh	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff fdec 	bl	8002374 <dataWrite>
 800279c:	e004      	b.n	80027a8 <keyshow+0x74>
            } else {
                dataWrite(bgColor);
 800279e:	4b7d      	ldr	r3, [pc, #500]	; (8002994 <keyshow+0x260>)
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7ff fde6 	bl	8002374 <dataWrite>
            }
            charPixels <<= 1;
 80027a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        for (int j = 0; j < 8; j++) {
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	3301      	adds	r3, #1
 80027b6:	61fb      	str	r3, [r7, #28]
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	2b07      	cmp	r3, #7
 80027bc:	dde2      	ble.n	8002784 <keyshow+0x50>
        }
        i++;
 80027be:	6a3b      	ldr	r3, [r7, #32]
 80027c0:	3301      	adds	r3, #1
 80027c2:	623b      	str	r3, [r7, #32]
        if (i % 3 == 0) {
 80027c4:	6a39      	ldr	r1, [r7, #32]
 80027c6:	4b74      	ldr	r3, [pc, #464]	; (8002998 <keyshow+0x264>)
 80027c8:	fba3 2301 	umull	r2, r3, r3, r1
 80027cc:	085a      	lsrs	r2, r3, #1
 80027ce:	4613      	mov	r3, r2
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	4413      	add	r3, r2
 80027d4:	1aca      	subs	r2, r1, r3
 80027d6:	2a00      	cmp	r2, #0
 80027d8:	d10c      	bne.n	80027f4 <keyshow+0xc0>
            graflocat(currentPage, currentColumn + 1);
 80027da:	4b6c      	ldr	r3, [pc, #432]	; (800298c <keyshow+0x258>)
 80027dc:	881a      	ldrh	r2, [r3, #0]
 80027de:	4b6c      	ldr	r3, [pc, #432]	; (8002990 <keyshow+0x25c>)
 80027e0:	881b      	ldrh	r3, [r3, #0]
 80027e2:	3301      	adds	r3, #1
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	4619      	mov	r1, r3
 80027e8:	4610      	mov	r0, r2
 80027ea:	f7ff fe0b 	bl	8002404 <graflocat>
            cmdWrite(0x2C);
 80027ee:	202c      	movs	r0, #44	; 0x2c
 80027f0:	f7ff fd98 	bl	8002324 <cmdWrite>
    while (i < currentImage->charWidth * 3) {
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	461a      	mov	r2, r3
 80027fa:	4613      	mov	r3, r2
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	4413      	add	r3, r2
 8002800:	461a      	mov	r2, r3
 8002802:	6a3b      	ldr	r3, [r7, #32]
 8002804:	4293      	cmp	r3, r2
 8002806:	d3b1      	bcc.n	800276c <keyshow+0x38>
        }
    }
    i = 0;
 8002808:	2300      	movs	r3, #0
 800280a:	623b      	str	r3, [r7, #32]
    currentImage = keyCharacter->keyCharacter;
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	60fb      	str	r3, [r7, #12]
    graflocat(currentPage, currentColumn);
 8002812:	4b5e      	ldr	r3, [pc, #376]	; (800298c <keyshow+0x258>)
 8002814:	881a      	ldrh	r2, [r3, #0]
 8002816:	4b5e      	ldr	r3, [pc, #376]	; (8002990 <keyshow+0x25c>)
 8002818:	881b      	ldrh	r3, [r3, #0]
 800281a:	4619      	mov	r1, r3
 800281c:	4610      	mov	r0, r2
 800281e:	f7ff fdf1 	bl	8002404 <graflocat>
    cmdWrite(0x2C);
 8002822:	202c      	movs	r0, #44	; 0x2c
 8002824:	f7ff fd7e 	bl	8002324 <cmdWrite>
    while (i < currentImage->charWidth * 3) {
 8002828:	e043      	b.n	80028b2 <keyshow+0x17e>
        charPixels = *((uint8_t*)currentImage->charData + i);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	685a      	ldr	r2, [r3, #4]
 800282e:	6a3b      	ldr	r3, [r7, #32]
 8002830:	4413      	add	r3, r2
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        pixelMask = 0x80;
 8002838:	2380      	movs	r3, #128	; 0x80
 800283a:	72fb      	strb	r3, [r7, #11]
        for (int j = 0; j < 8; j++) {
 800283c:	2300      	movs	r3, #0
 800283e:	61bb      	str	r3, [r7, #24]
 8002840:	e019      	b.n	8002876 <keyshow+0x142>
            if ((charPixels & pixelMask) != 0) {
 8002842:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002846:	7afb      	ldrb	r3, [r7, #11]
 8002848:	4013      	ands	r3, r2
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b00      	cmp	r3, #0
 800284e:	d005      	beq.n	800285c <keyshow+0x128>
                dataWrite(keyCharacter->fgColor);
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	885b      	ldrh	r3, [r3, #2]
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff fd8d 	bl	8002374 <dataWrite>
 800285a:	e004      	b.n	8002866 <keyshow+0x132>
            } else {
                dataWrite(keyCharacter->bgColor);
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	881b      	ldrh	r3, [r3, #0]
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff fd87 	bl	8002374 <dataWrite>
            }
            charPixels <<= 1;
 8002866:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        for (int j = 0; j < 8; j++) {
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	3301      	adds	r3, #1
 8002874:	61bb      	str	r3, [r7, #24]
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	2b07      	cmp	r3, #7
 800287a:	dde2      	ble.n	8002842 <keyshow+0x10e>
        }
        i++;
 800287c:	6a3b      	ldr	r3, [r7, #32]
 800287e:	3301      	adds	r3, #1
 8002880:	623b      	str	r3, [r7, #32]
        if (i % 3 == 0) {
 8002882:	6a39      	ldr	r1, [r7, #32]
 8002884:	4b44      	ldr	r3, [pc, #272]	; (8002998 <keyshow+0x264>)
 8002886:	fba3 2301 	umull	r2, r3, r3, r1
 800288a:	085a      	lsrs	r2, r3, #1
 800288c:	4613      	mov	r3, r2
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	4413      	add	r3, r2
 8002892:	1aca      	subs	r2, r1, r3
 8002894:	2a00      	cmp	r2, #0
 8002896:	d10c      	bne.n	80028b2 <keyshow+0x17e>
            graflocat(currentPage, currentColumn + 1);
 8002898:	4b3c      	ldr	r3, [pc, #240]	; (800298c <keyshow+0x258>)
 800289a:	881a      	ldrh	r2, [r3, #0]
 800289c:	4b3c      	ldr	r3, [pc, #240]	; (8002990 <keyshow+0x25c>)
 800289e:	881b      	ldrh	r3, [r3, #0]
 80028a0:	3301      	adds	r3, #1
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	4619      	mov	r1, r3
 80028a6:	4610      	mov	r0, r2
 80028a8:	f7ff fdac 	bl	8002404 <graflocat>
            cmdWrite(0x2C);
 80028ac:	202c      	movs	r0, #44	; 0x2c
 80028ae:	f7ff fd39 	bl	8002324 <cmdWrite>
    while (i < currentImage->charWidth * 3) {
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	461a      	mov	r2, r3
 80028b8:	4613      	mov	r3, r2
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	4413      	add	r3, r2
 80028be:	461a      	mov	r2, r3
 80028c0:	6a3b      	ldr	r3, [r7, #32]
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d3b1      	bcc.n	800282a <keyshow+0xf6>
        }
    }
    i = 0;
 80028c6:	2300      	movs	r3, #0
 80028c8:	623b      	str	r3, [r7, #32]
    currentImage = keyCharacter->endCap;
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	60fb      	str	r3, [r7, #12]
    graflocat(currentPage, currentColumn);
 80028d0:	4b2e      	ldr	r3, [pc, #184]	; (800298c <keyshow+0x258>)
 80028d2:	881a      	ldrh	r2, [r3, #0]
 80028d4:	4b2e      	ldr	r3, [pc, #184]	; (8002990 <keyshow+0x25c>)
 80028d6:	881b      	ldrh	r3, [r3, #0]
 80028d8:	4619      	mov	r1, r3
 80028da:	4610      	mov	r0, r2
 80028dc:	f7ff fd92 	bl	8002404 <graflocat>
    cmdWrite(0x2C);
 80028e0:	202c      	movs	r0, #44	; 0x2c
 80028e2:	f7ff fd1f 	bl	8002324 <cmdWrite>
    while (i < currentImage->charWidth * 3) {
 80028e6:	e043      	b.n	8002970 <keyshow+0x23c>
        charPixels = *((uint8_t*)currentImage->charData + i);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	6a3b      	ldr	r3, [r7, #32]
 80028ee:	4413      	add	r3, r2
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        pixelMask = 0x80;
 80028f6:	2380      	movs	r3, #128	; 0x80
 80028f8:	72fb      	strb	r3, [r7, #11]
        for (int j = 0; j < 8; j++) {
 80028fa:	2300      	movs	r3, #0
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	e019      	b.n	8002934 <keyshow+0x200>
            if ((charPixels & pixelMask) != 0) {
 8002900:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002904:	7afb      	ldrb	r3, [r7, #11]
 8002906:	4013      	ands	r3, r2
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d005      	beq.n	800291a <keyshow+0x1e6>
                dataWrite(keyCharacter->bgColor);
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	881b      	ldrh	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff fd2e 	bl	8002374 <dataWrite>
 8002918:	e004      	b.n	8002924 <keyshow+0x1f0>
            } else {
                dataWrite(bgColor);
 800291a:	4b1e      	ldr	r3, [pc, #120]	; (8002994 <keyshow+0x260>)
 800291c:	881b      	ldrh	r3, [r3, #0]
 800291e:	4618      	mov	r0, r3
 8002920:	f7ff fd28 	bl	8002374 <dataWrite>
            }
            charPixels <<= 1;
 8002924:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        for (int j = 0; j < 8; j++) {
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	3301      	adds	r3, #1
 8002932:	617b      	str	r3, [r7, #20]
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	2b07      	cmp	r3, #7
 8002938:	dde2      	ble.n	8002900 <keyshow+0x1cc>
        }
        i++;
 800293a:	6a3b      	ldr	r3, [r7, #32]
 800293c:	3301      	adds	r3, #1
 800293e:	623b      	str	r3, [r7, #32]
        if (i % 3 == 0) {
 8002940:	6a39      	ldr	r1, [r7, #32]
 8002942:	4b15      	ldr	r3, [pc, #84]	; (8002998 <keyshow+0x264>)
 8002944:	fba3 2301 	umull	r2, r3, r3, r1
 8002948:	085a      	lsrs	r2, r3, #1
 800294a:	4613      	mov	r3, r2
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	4413      	add	r3, r2
 8002950:	1aca      	subs	r2, r1, r3
 8002952:	2a00      	cmp	r2, #0
 8002954:	d10c      	bne.n	8002970 <keyshow+0x23c>
            graflocat(currentPage, currentColumn + 1);
 8002956:	4b0d      	ldr	r3, [pc, #52]	; (800298c <keyshow+0x258>)
 8002958:	881a      	ldrh	r2, [r3, #0]
 800295a:	4b0d      	ldr	r3, [pc, #52]	; (8002990 <keyshow+0x25c>)
 800295c:	881b      	ldrh	r3, [r3, #0]
 800295e:	3301      	adds	r3, #1
 8002960:	b29b      	uxth	r3, r3
 8002962:	4619      	mov	r1, r3
 8002964:	4610      	mov	r0, r2
 8002966:	f7ff fd4d 	bl	8002404 <graflocat>
            cmdWrite(0x2C);
 800296a:	202c      	movs	r0, #44	; 0x2c
 800296c:	f7ff fcda 	bl	8002324 <cmdWrite>
    while (i < currentImage->charWidth * 3) {
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	461a      	mov	r2, r3
 8002976:	4613      	mov	r3, r2
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	4413      	add	r3, r2
 800297c:	461a      	mov	r2, r3
 800297e:	6a3b      	ldr	r3, [r7, #32]
 8002980:	4293      	cmp	r3, r2
 8002982:	d3b1      	bcc.n	80028e8 <keyshow+0x1b4>
        }
    }
}
 8002984:	bf00      	nop
 8002986:	3728      	adds	r7, #40	; 0x28
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	2000025c 	.word	0x2000025c
 8002990:	2000025e 	.word	0x2000025e
 8002994:	20000262 	.word	0x20000262
 8002998:	aaaaaaab 	.word	0xaaaaaaab

0800299c <putstr>:

void putstr(const char *s) {
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
    while (*s) {
 80029a4:	e007      	b.n	80029b6 <putstr+0x1a>
        grafchar(*(s++));
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	1c5a      	adds	r2, r3, #1
 80029aa:	607a      	str	r2, [r7, #4]
 80029ac:	f993 3000 	ldrsb.w	r3, [r3]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff fded 	bl	8002590 <grafchar>
    while (*s) {
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f993 3000 	ldrsb.w	r3, [r3]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1f2      	bne.n	80029a6 <putstr+0xa>
    }
}
 80029c0:	bf00      	nop
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <filldisplay>:

void filldisplay() {
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
    setFontSize(8);
 80029cc:	2008      	movs	r0, #8
 80029ce:	f000 fca9 	bl	8003324 <setFontSize>
    while (currentPage < 240) {
 80029d2:	e001      	b.n	80029d8 <filldisplay+0x10>
        enterxxx();
 80029d4:	f7ff fda6 	bl	8002524 <enterxxx>
    while (currentPage < 240) {
 80029d8:	4b02      	ldr	r3, [pc, #8]	; (80029e4 <filldisplay+0x1c>)
 80029da:	881b      	ldrh	r3, [r3, #0]
 80029dc:	2bef      	cmp	r3, #239	; 0xef
 80029de:	d9f9      	bls.n	80029d4 <filldisplay+0xc>
    }
}
 80029e0:	bf00      	nop
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	2000025c 	.word	0x2000025c

080029e8 <enteremtystr>:

void enteremtystr() {
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
    enterxxx();
 80029ec:	f7ff fd9a 	bl	8002524 <enterxxx>
    setFontSize(8);
 80029f0:	2008      	movs	r0, #8
 80029f2:	f000 fc97 	bl	8003324 <setFontSize>
    enterxxx();
 80029f6:	f7ff fd95 	bl	8002524 <enterxxx>
}
 80029fa:	bf00      	nop
 80029fc:	bd80      	pop	{r7, pc}

080029fe <display00>:

void display00() {
 80029fe:	b580      	push	{r7, lr}
 8002a00:	af00      	add	r7, sp, #0
    start_display();
 8002a02:	f7ff fda9 	bl	8002558 <start_display>
    filldisplay();
 8002a06:	f7ff ffdf 	bl	80029c8 <filldisplay>
}
 8002a0a:	bf00      	nop
 8002a0c:	bd80      	pop	{r7, pc}
	...

08002a10 <display01>:

void display01() {
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
    uint16_t column1, column2;

    start_display();
 8002a16:	f7ff fd9f 	bl	8002558 <start_display>
    setFontSize(8);
 8002a1a:	2008      	movs	r0, #8
 8002a1c:	f000 fc82 	bl	8003324 <setFontSize>
    setFgColor(color_white);
 8002a20:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002a24:	f7ff fcce 	bl	80023c4 <setFgColor>
    enterxxx();
 8002a28:	f7ff fd7c 	bl	8002524 <enterxxx>
    setFontSize(32);
 8002a2c:	2020      	movs	r0, #32
 8002a2e:	f000 fc79 	bl	8003324 <setFontSize>
    fillhx(16);
 8002a32:	2010      	movs	r0, #16
 8002a34:	f7ff fd2c 	bl	8002490 <fillhx>
    grafchar(0x5D);
 8002a38:	205d      	movs	r0, #93	; 0x5d
 8002a3a:	f7ff fda9 	bl	8002590 <grafchar>
    grafchar(0x5E);
 8002a3e:	205e      	movs	r0, #94	; 0x5e
 8002a40:	f7ff fda6 	bl	8002590 <grafchar>
    grafchar(' ');
 8002a44:	2020      	movs	r0, #32
 8002a46:	f7ff fda3 	bl	8002590 <grafchar>
    column1 = currentColumn;
 8002a4a:	4b47      	ldr	r3, [pc, #284]	; (8002b68 <display01+0x158>)
 8002a4c:	881b      	ldrh	r3, [r3, #0]
 8002a4e:	80fb      	strh	r3, [r7, #6]
    putstr("BodyGuard");
 8002a50:	4846      	ldr	r0, [pc, #280]	; (8002b6c <display01+0x15c>)
 8002a52:	f7ff ffa3 	bl	800299c <putstr>
    column2 = currentColumn;
 8002a56:	4b44      	ldr	r3, [pc, #272]	; (8002b68 <display01+0x158>)
 8002a58:	881b      	ldrh	r3, [r3, #0]
 8002a5a:	80bb      	strh	r3, [r7, #4]
    setFontSize(8);
 8002a5c:	2008      	movs	r0, #8
 8002a5e:	f000 fc61 	bl	8003324 <setFontSize>
    putstr("TM");
 8002a62:	4843      	ldr	r0, [pc, #268]	; (8002b70 <display01+0x160>)
 8002a64:	f7ff ff9a 	bl	800299c <putstr>
    setFontSize(32);
 8002a68:	2020      	movs	r0, #32
 8002a6a:	f000 fc5b 	bl	8003324 <setFontSize>
    enterxxx();
 8002a6e:	f7ff fd59 	bl	8002524 <enterxxx>
    setFontSize(8);
 8002a72:	2008      	movs	r0, #8
 8002a74:	f000 fc56 	bl	8003324 <setFontSize>
    enterxxx();
 8002a78:	f7ff fd54 	bl	8002524 <enterxxx>
    setFontSize(32);
 8002a7c:	2020      	movs	r0, #32
 8002a7e:	f000 fc51 	bl	8003324 <setFontSize>
    putstr(" ARM Cortex-M4 inside");
 8002a82:	483c      	ldr	r0, [pc, #240]	; (8002b74 <display01+0x164>)
 8002a84:	f7ff ff8a 	bl	800299c <putstr>
    enterxxx();
 8002a88:	f7ff fd4c 	bl	8002524 <enterxxx>
    enterxxx();
 8002a8c:	f7ff fd4a 	bl	8002524 <enterxxx>
    setFontSize(16);
 8002a90:	2010      	movs	r0, #16
 8002a92:	f000 fc47 	bl	8003324 <setFontSize>
    fillhx(16);
 8002a96:	2010      	movs	r0, #16
 8002a98:	f7ff fcfa 	bl	8002490 <fillhx>
    putstr("Software Version: ");
 8002a9c:	4836      	ldr	r0, [pc, #216]	; (8002b78 <display01+0x168>)
 8002a9e:	f7ff ff7d 	bl	800299c <putstr>
    enterxxx();
 8002aa2:	f7ff fd3f 	bl	8002524 <enterxxx>
    setFontSize(12);
 8002aa6:	200c      	movs	r0, #12
 8002aa8:	f000 fc3c 	bl	8003324 <setFontSize>
    enterxxx();
 8002aac:	f7ff fd3a 	bl	8002524 <enterxxx>
    setFontSize(16);
 8002ab0:	2010      	movs	r0, #16
 8002ab2:	f000 fc37 	bl	8003324 <setFontSize>
    fillhx(16);
 8002ab6:	2010      	movs	r0, #16
 8002ab8:	f7ff fcea 	bl	8002490 <fillhx>
    setFgColor(0xf483);
 8002abc:	f24f 4083 	movw	r0, #62595	; 0xf483
 8002ac0:	f7ff fc80 	bl	80023c4 <setFgColor>
    putstr("NextGen Demo version");
 8002ac4:	482d      	ldr	r0, [pc, #180]	; (8002b7c <display01+0x16c>)
 8002ac6:	f7ff ff69 	bl	800299c <putstr>
    enterxxx();
 8002aca:	f7ff fd2b 	bl	8002524 <enterxxx>
    setFontSize(12);
 8002ace:	200c      	movs	r0, #12
 8002ad0:	f000 fc28 	bl	8003324 <setFontSize>
    enterxxx();
 8002ad4:	f7ff fd26 	bl	8002524 <enterxxx>
    setFontSize(16);
 8002ad8:	2010      	movs	r0, #16
 8002ada:	f000 fc23 	bl	8003324 <setFontSize>
    fillhx(16);
 8002ade:	2010      	movs	r0, #16
 8002ae0:	f7ff fcd6 	bl	8002490 <fillhx>
    setFgColor(color_white);
 8002ae4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002ae8:	f7ff fc6c 	bl	80023c4 <setFgColor>
    putstr("Library");
 8002aec:	4824      	ldr	r0, [pc, #144]	; (8002b80 <display01+0x170>)
 8002aee:	f7ff ff55 	bl	800299c <putstr>
    fillhx(150);
 8002af2:	2096      	movs	r0, #150	; 0x96
 8002af4:	f7ff fccc 	bl	8002490 <fillhx>
    putstr("-----------");
 8002af8:	4822      	ldr	r0, [pc, #136]	; (8002b84 <display01+0x174>)
 8002afa:	f7ff ff4f 	bl	800299c <putstr>
    enterxxx();
 8002afe:	f7ff fd11 	bl	8002524 <enterxxx>
    setFontSize(12);
 8002b02:	200c      	movs	r0, #12
 8002b04:	f000 fc0e 	bl	8003324 <setFontSize>
    enterxxx();
 8002b08:	f7ff fd0c 	bl	8002524 <enterxxx>
    setFontSize(16);
 8002b0c:	2010      	movs	r0, #16
 8002b0e:	f000 fc09 	bl	8003324 <setFontSize>
    fillhx(16);
 8002b12:	2010      	movs	r0, #16
 8002b14:	f7ff fcbc 	bl	8002490 <fillhx>
    putstr("Serial Number: ");
 8002b18:	481b      	ldr	r0, [pc, #108]	; (8002b88 <display01+0x178>)
 8002b1a:	f7ff ff3f 	bl	800299c <putstr>
    fillhx(150);
 8002b1e:	2096      	movs	r0, #150	; 0x96
 8002b20:	f7ff fcb6 	bl	8002490 <fillhx>
    putstr("T     1    ");
 8002b24:	4819      	ldr	r0, [pc, #100]	; (8002b8c <display01+0x17c>)
 8002b26:	f7ff ff39 	bl	800299c <putstr>
    enterxxx();
 8002b2a:	f7ff fcfb 	bl	8002524 <enterxxx>
    setFontSize(12);
 8002b2e:	200c      	movs	r0, #12
 8002b30:	f000 fbf8 	bl	8003324 <setFontSize>
    enterxxx();
 8002b34:	f7ff fcf6 	bl	8002524 <enterxxx>
    setFontSize(16);
 8002b38:	2010      	movs	r0, #16
 8002b3a:	f000 fbf3 	bl	8003324 <setFontSize>
    fillhx(16);
 8002b3e:	2010      	movs	r0, #16
 8002b40:	f7ff fca6 	bl	8002490 <fillhx>
    putstr("Production Date: ");
 8002b44:	4812      	ldr	r0, [pc, #72]	; (8002b90 <display01+0x180>)
 8002b46:	f7ff ff29 	bl	800299c <putstr>
    fillhx(150);
 8002b4a:	2096      	movs	r0, #150	; 0x96
 8002b4c:	f7ff fca0 	bl	8002490 <fillhx>
    putstr("12-Nov-2019");
 8002b50:	4810      	ldr	r0, [pc, #64]	; (8002b94 <display01+0x184>)
 8002b52:	f7ff ff23 	bl	800299c <putstr>
    enterxxx();
 8002b56:	f7ff fce5 	bl	8002524 <enterxxx>
    enterxxx();
 8002b5a:	f7ff fce3 	bl	8002524 <enterxxx>
}
 8002b5e:	bf00      	nop
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	2000025e 	.word	0x2000025e
 8002b6c:	080061a4 	.word	0x080061a4
 8002b70:	080061b0 	.word	0x080061b0
 8002b74:	080061b4 	.word	0x080061b4
 8002b78:	080061cc 	.word	0x080061cc
 8002b7c:	080061e0 	.word	0x080061e0
 8002b80:	080061f8 	.word	0x080061f8
 8002b84:	08006200 	.word	0x08006200
 8002b88:	0800620c 	.word	0x0800620c
 8002b8c:	0800621c 	.word	0x0800621c
 8002b90:	08006228 	.word	0x08006228
 8002b94:	0800623c 	.word	0x0800623c

08002b98 <display65>:

void display65(uint8_t level) {
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b08a      	sub	sp, #40	; 0x28
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	71fb      	strb	r3, [r7, #7]
    char *buf[8];

    start_display();
 8002ba2:	f7ff fcd9 	bl	8002558 <start_display>
    setFontSize(32);
 8002ba6:	2020      	movs	r0, #32
 8002ba8:	f000 fbbc 	bl	8003324 <setFontSize>
    putstr("Sound alarm test");
 8002bac:	4810      	ldr	r0, [pc, #64]	; (8002bf0 <display65+0x58>)
 8002bae:	f7ff fef5 	bl	800299c <putstr>
    enterxxx();
 8002bb2:	f7ff fcb7 	bl	8002524 <enterxxx>
    setFontSize(24);
 8002bb6:	2018      	movs	r0, #24
 8002bb8:	f000 fbb4 	bl	8003324 <setFontSize>
    enterxxx();
 8002bbc:	f7ff fcb2 	bl	8002524 <enterxxx>
    putstr("Current sound level: ");
 8002bc0:	480c      	ldr	r0, [pc, #48]	; (8002bf4 <display65+0x5c>)
 8002bc2:	f7ff feeb 	bl	800299c <putstr>
    itoa(level, buf, 10);
 8002bc6:	79fb      	ldrb	r3, [r7, #7]
 8002bc8:	f107 0108 	add.w	r1, r7, #8
 8002bcc:	220a      	movs	r2, #10
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f002 fb02 	bl	80051d8 <itoa>
    putstr(buf);
 8002bd4:	f107 0308 	add.w	r3, r7, #8
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7ff fedf 	bl	800299c <putstr>
    enterxxx();
 8002bde:	f7ff fca1 	bl	8002524 <enterxxx>
    filldisplay();
 8002be2:	f7ff fef1 	bl	80029c8 <filldisplay>
}
 8002be6:	bf00      	nop
 8002be8:	3728      	adds	r7, #40	; 0x28
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	08006248 	.word	0x08006248
 8002bf4:	0800625c 	.word	0x0800625c

08002bf8 <display66>:

void display66() {
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
	start_display();
 8002bfc:	f7ff fcac 	bl	8002558 <start_display>
	setFontSize(32);
 8002c00:	2020      	movs	r0, #32
 8002c02:	f000 fb8f 	bl	8003324 <setFontSize>
	putstr("Door Sensor Test ");
 8002c06:	481a      	ldr	r0, [pc, #104]	; (8002c70 <display66+0x78>)
 8002c08:	f7ff fec8 	bl	800299c <putstr>
    enterxxx();
 8002c0c:	f7ff fc8a 	bl	8002524 <enterxxx>
    enterxxx();
 8002c10:	f7ff fc88 	bl	8002524 <enterxxx>

	setFontSize(72);
 8002c14:	2048      	movs	r0, #72	; 0x48
 8002c16:	f000 fb85 	bl	8003324 <setFontSize>
    setFgColor(color_warnfont);
 8002c1a:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002c1e:	f7ff fbd1 	bl	80023c4 <setFgColor>
    if ((GPIOC->IDR & 0x01UL) != 0) {
 8002c22:	4b14      	ldr	r3, [pc, #80]	; (8002c74 <display66+0x7c>)
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <display66+0x3e>
        putstr("Open");
 8002c2e:	4812      	ldr	r0, [pc, #72]	; (8002c78 <display66+0x80>)
 8002c30:	f7ff feb4 	bl	800299c <putstr>
 8002c34:	e002      	b.n	8002c3c <display66+0x44>
    } else {
        putstr("Close");
 8002c36:	4811      	ldr	r0, [pc, #68]	; (8002c7c <display66+0x84>)
 8002c38:	f7ff feb0 	bl	800299c <putstr>
    }
    enterxxx();
 8002c3c:	f7ff fc72 	bl	8002524 <enterxxx>
    setFontSize(24);
 8002c40:	2018      	movs	r0, #24
 8002c42:	f000 fb6f 	bl	8003324 <setFontSize>
    enterxxx();
 8002c46:	f7ff fc6d 	bl	8002524 <enterxxx>
    enterxxx();
 8002c4a:	f7ff fc6b 	bl	8002524 <enterxxx>
    enterxxx();
 8002c4e:	f7ff fc69 	bl	8002524 <enterxxx>
    putstr("Press ");
 8002c52:	480b      	ldr	r0, [pc, #44]	; (8002c80 <display66+0x88>)
 8002c54:	f7ff fea2 	bl	800299c <putstr>
    keyshow(Button_Ok);
 8002c58:	200e      	movs	r0, #14
 8002c5a:	f7ff fd6b 	bl	8002734 <keyshow>
    putstr(" Key to Continue");
 8002c5e:	4809      	ldr	r0, [pc, #36]	; (8002c84 <display66+0x8c>)
 8002c60:	f7ff fe9c 	bl	800299c <putstr>
    enterxxx();
 8002c64:	f7ff fc5e 	bl	8002524 <enterxxx>
    filldisplay();
 8002c68:	f7ff feae 	bl	80029c8 <filldisplay>
}
 8002c6c:	bf00      	nop
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	08006274 	.word	0x08006274
 8002c74:	48000800 	.word	0x48000800
 8002c78:	08006288 	.word	0x08006288
 8002c7c:	08006290 	.word	0x08006290
 8002c80:	08006298 	.word	0x08006298
 8002c84:	080062a0 	.word	0x080062a0

08002c88 <display68>:

void display68() {
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
    start_display();
 8002c8c:	f7ff fc64 	bl	8002558 <start_display>
    setFontSize(32);
 8002c90:	2020      	movs	r0, #32
 8002c92:	f000 fb47 	bl	8003324 <setFontSize>
    putstr("Motor rotation test");
 8002c96:	481b      	ldr	r0, [pc, #108]	; (8002d04 <display68+0x7c>)
 8002c98:	f7ff fe80 	bl	800299c <putstr>
    enterxxx();
 8002c9c:	f7ff fc42 	bl	8002524 <enterxxx>
    setFontSize(24);
 8002ca0:	2018      	movs	r0, #24
 8002ca2:	f000 fb3f 	bl	8003324 <setFontSize>
    enterxxx();
 8002ca6:	f7ff fc3d 	bl	8002524 <enterxxx>
    enterxxx();
 8002caa:	f7ff fc3b 	bl	8002524 <enterxxx>
    putstr("Please check motor rotation");
 8002cae:	4816      	ldr	r0, [pc, #88]	; (8002d08 <display68+0x80>)
 8002cb0:	f7ff fe74 	bl	800299c <putstr>
    enterxxx();
 8002cb4:	f7ff fc36 	bl	8002524 <enterxxx>
    putstr("Press ");
 8002cb8:	4814      	ldr	r0, [pc, #80]	; (8002d0c <display68+0x84>)
 8002cba:	f7ff fe6f 	bl	800299c <putstr>
    keyshow(Button_5);
 8002cbe:	200c      	movs	r0, #12
 8002cc0:	f7ff fd38 	bl	8002734 <keyshow>
    putstr(" to increase and ");
 8002cc4:	4812      	ldr	r0, [pc, #72]	; (8002d10 <display68+0x88>)
 8002cc6:	f7ff fe69 	bl	800299c <putstr>
    keyshow(Button_0);
 8002cca:	2004      	movs	r0, #4
 8002ccc:	f7ff fd32 	bl	8002734 <keyshow>
    enterxxx();
 8002cd0:	f7ff fc28 	bl	8002524 <enterxxx>
    putstr("to decrease the motor speed");
 8002cd4:	480f      	ldr	r0, [pc, #60]	; (8002d14 <display68+0x8c>)
 8002cd6:	f7ff fe61 	bl	800299c <putstr>
    enterxxx();
 8002cda:	f7ff fc23 	bl	8002524 <enterxxx>
    enterxxx();
 8002cde:	f7ff fc21 	bl	8002524 <enterxxx>
    enterxxx();
 8002ce2:	f7ff fc1f 	bl	8002524 <enterxxx>
    putstr("Press ");
 8002ce6:	4809      	ldr	r0, [pc, #36]	; (8002d0c <display68+0x84>)
 8002ce8:	f7ff fe58 	bl	800299c <putstr>
    keyshow(Button_No);
 8002cec:	200f      	movs	r0, #15
 8002cee:	f7ff fd21 	bl	8002734 <keyshow>
    putstr(" to exit");
 8002cf2:	4809      	ldr	r0, [pc, #36]	; (8002d18 <display68+0x90>)
 8002cf4:	f7ff fe52 	bl	800299c <putstr>
    enterxxx();
 8002cf8:	f7ff fc14 	bl	8002524 <enterxxx>
    filldisplay();
 8002cfc:	f7ff fe64 	bl	80029c8 <filldisplay>
}
 8002d00:	bf00      	nop
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	080062b4 	.word	0x080062b4
 8002d08:	080062c8 	.word	0x080062c8
 8002d0c:	08006298 	.word	0x08006298
 8002d10:	080062e4 	.word	0x080062e4
 8002d14:	080062f8 	.word	0x080062f8
 8002d18:	08006314 	.word	0x08006314

08002d1c <display64>:

void display64(uint8_t currentKey) {
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	4603      	mov	r3, r0
 8002d24:	71fb      	strb	r3, [r7, #7]
    start_display();
 8002d26:	f7ff fc17 	bl	8002558 <start_display>
    setFontSize(32);
 8002d2a:	2020      	movs	r0, #32
 8002d2c:	f000 fafa 	bl	8003324 <setFontSize>
    putstr("Keypad Test ");
 8002d30:	4852      	ldr	r0, [pc, #328]	; (8002e7c <display64+0x160>)
 8002d32:	f7ff fe33 	bl	800299c <putstr>
    enteremtystr();
 8002d36:	f7ff fe57 	bl	80029e8 <enteremtystr>
    setFontSize(24);
 8002d3a:	2018      	movs	r0, #24
 8002d3c:	f000 faf2 	bl	8003324 <setFontSize>
    keyshow(Button_Power);
 8002d40:	2010      	movs	r0, #16
 8002d42:	f7ff fcf7 	bl	8002734 <keyshow>
    fillhx(250);
 8002d46:	20fa      	movs	r0, #250	; 0xfa
 8002d48:	f7ff fba2 	bl	8002490 <fillhx>
    keyshow(Button_No);
 8002d4c:	200f      	movs	r0, #15
 8002d4e:	f7ff fcf1 	bl	8002734 <keyshow>
    enteremtystr();
 8002d52:	f7ff fe49 	bl	80029e8 <enteremtystr>
    setFontSize(24);
 8002d56:	2018      	movs	r0, #24
 8002d58:	f000 fae4 	bl	8003324 <setFontSize>
    keyshow(Button_Lock);
 8002d5c:	2007      	movs	r0, #7
 8002d5e:	f7ff fce9 	bl	8002734 <keyshow>
    fillhx(250);
 8002d62:	20fa      	movs	r0, #250	; 0xfa
 8002d64:	f7ff fb94 	bl	8002490 <fillhx>
    keyshow(Button_Ok);
 8002d68:	200e      	movs	r0, #14
 8002d6a:	f7ff fce3 	bl	8002734 <keyshow>
    enteremtystr();
 8002d6e:	f7ff fe3b 	bl	80029e8 <enteremtystr>
    setFontSize(24);
 8002d72:	2018      	movs	r0, #24
 8002d74:	f000 fad6 	bl	8003324 <setFontSize>
    keyshow(Button_Info);
 8002d78:	2005      	movs	r0, #5
 8002d7a:	f7ff fcdb 	bl	8002734 <keyshow>
    fillhx(250);
 8002d7e:	20fa      	movs	r0, #250	; 0xfa
 8002d80:	f7ff fb86 	bl	8002490 <fillhx>
    keyshow(Button_Prime);
 8002d84:	2006      	movs	r0, #6
 8002d86:	f7ff fcd5 	bl	8002734 <keyshow>
    enterxxx();
 8002d8a:	f7ff fbcb 	bl	8002524 <enterxxx>
    setFontSize(16);
 8002d8e:	2010      	movs	r0, #16
 8002d90:	f000 fac8 	bl	8003324 <setFontSize>
    enterxxx();
 8002d94:	f7ff fbc6 	bl	8002524 <enterxxx>
    setFontSize(24);
 8002d98:	2018      	movs	r0, #24
 8002d9a:	f000 fac3 	bl	8003324 <setFontSize>
    keyshow(Button_1);
 8002d9e:	2008      	movs	r0, #8
 8002da0:	f7ff fcc8 	bl	8002734 <keyshow>
    fillhx(50);
 8002da4:	2032      	movs	r0, #50	; 0x32
 8002da6:	f7ff fb73 	bl	8002490 <fillhx>
    keyshow(Button_2);
 8002daa:	2009      	movs	r0, #9
 8002dac:	f7ff fcc2 	bl	8002734 <keyshow>
    fillhx(100);
 8002db0:	2064      	movs	r0, #100	; 0x64
 8002db2:	f7ff fb6d 	bl	8002490 <fillhx>
    keyshow(Button_3);
 8002db6:	200a      	movs	r0, #10
 8002db8:	f7ff fcbc 	bl	8002734 <keyshow>
    fillhx(150);
 8002dbc:	2096      	movs	r0, #150	; 0x96
 8002dbe:	f7ff fb67 	bl	8002490 <fillhx>
    keyshow(Button_4);
 8002dc2:	200b      	movs	r0, #11
 8002dc4:	f7ff fcb6 	bl	8002734 <keyshow>
    fillhx(200);
 8002dc8:	20c8      	movs	r0, #200	; 0xc8
 8002dca:	f7ff fb61 	bl	8002490 <fillhx>
    keyshow(Button_5);
 8002dce:	200c      	movs	r0, #12
 8002dd0:	f7ff fcb0 	bl	8002734 <keyshow>
    fillhx(250);
 8002dd4:	20fa      	movs	r0, #250	; 0xfa
 8002dd6:	f7ff fb5b 	bl	8002490 <fillhx>
    keyshow(Button_Point);
 8002dda:	200d      	movs	r0, #13
 8002ddc:	f7ff fcaa 	bl	8002734 <keyshow>
    enteremtystr();
 8002de0:	f7ff fe02 	bl	80029e8 <enteremtystr>
    setFontSize(24);
 8002de4:	2018      	movs	r0, #24
 8002de6:	f000 fa9d 	bl	8003324 <setFontSize>
    keyshow(Button_6);
 8002dea:	2000      	movs	r0, #0
 8002dec:	f7ff fca2 	bl	8002734 <keyshow>
    fillhx(50);
 8002df0:	2032      	movs	r0, #50	; 0x32
 8002df2:	f7ff fb4d 	bl	8002490 <fillhx>
    keyshow(Button_7);
 8002df6:	2001      	movs	r0, #1
 8002df8:	f7ff fc9c 	bl	8002734 <keyshow>
    fillhx(100);
 8002dfc:	2064      	movs	r0, #100	; 0x64
 8002dfe:	f7ff fb47 	bl	8002490 <fillhx>
    keyshow(Button_8);
 8002e02:	2002      	movs	r0, #2
 8002e04:	f7ff fc96 	bl	8002734 <keyshow>
    fillhx(150);
 8002e08:	2096      	movs	r0, #150	; 0x96
 8002e0a:	f7ff fb41 	bl	8002490 <fillhx>
    keyshow(Button_9);
 8002e0e:	2003      	movs	r0, #3
 8002e10:	f7ff fc90 	bl	8002734 <keyshow>
    fillhx(200);
 8002e14:	20c8      	movs	r0, #200	; 0xc8
 8002e16:	f7ff fb3b 	bl	8002490 <fillhx>
    keyshow(Button_0);
 8002e1a:	2004      	movs	r0, #4
 8002e1c:	f7ff fc8a 	bl	8002734 <keyshow>
    enterxxx();
 8002e20:	f7ff fb80 	bl	8002524 <enterxxx>
    setFontSize(16);
 8002e24:	2010      	movs	r0, #16
 8002e26:	f000 fa7d 	bl	8003324 <setFontSize>
    enterxxx();
 8002e2a:	f7ff fb7b 	bl	8002524 <enterxxx>
    setFontSize(24);
 8002e2e:	2018      	movs	r0, #24
 8002e30:	f000 fa78 	bl	8003324 <setFontSize>
    setFgColor(color_white);
 8002e34:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002e38:	f7ff fac4 	bl	80023c4 <setFgColor>
    if (currentKey != Button_Last) {
 8002e3c:	79fb      	ldrb	r3, [r7, #7]
 8002e3e:	2b11      	cmp	r3, #17
 8002e40:	d00a      	beq.n	8002e58 <display64+0x13c>
        putstr("Press ");
 8002e42:	480f      	ldr	r0, [pc, #60]	; (8002e80 <display64+0x164>)
 8002e44:	f7ff fdaa 	bl	800299c <putstr>
        keyshow(currentKey);
 8002e48:	79fb      	ldrb	r3, [r7, #7]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff fc72 	bl	8002734 <keyshow>
        putstr(" Key");
 8002e50:	480c      	ldr	r0, [pc, #48]	; (8002e84 <display64+0x168>)
 8002e52:	f7ff fda3 	bl	800299c <putstr>
 8002e56:	e008      	b.n	8002e6a <display64+0x14e>
    } else {
        putstr("Test OK! Press ");
 8002e58:	480b      	ldr	r0, [pc, #44]	; (8002e88 <display64+0x16c>)
 8002e5a:	f7ff fd9f 	bl	800299c <putstr>
        keyshow(Button_Ok);
 8002e5e:	200e      	movs	r0, #14
 8002e60:	f7ff fc68 	bl	8002734 <keyshow>
        putstr(" to continue.");
 8002e64:	4809      	ldr	r0, [pc, #36]	; (8002e8c <display64+0x170>)
 8002e66:	f7ff fd99 	bl	800299c <putstr>
    }
    enterxxx();
 8002e6a:	f7ff fb5b 	bl	8002524 <enterxxx>
    filldisplay();
 8002e6e:	f7ff fdab 	bl	80029c8 <filldisplay>
};
 8002e72:	bf00      	nop
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	08006320 	.word	0x08006320
 8002e80:	08006298 	.word	0x08006298
 8002e84:	08006330 	.word	0x08006330
 8002e88:	08006338 	.word	0x08006338
 8002e8c:	08006348 	.word	0x08006348

08002e90 <display48>:

void display48(char *items[], int32_t count, int32_t selected) {
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b088      	sub	sp, #32
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
    int32_t startItem, endItem;

    start_display();
 8002e9c:	f7ff fb5c 	bl	8002558 <start_display>
    setFontSize(32);
 8002ea0:	2020      	movs	r0, #32
 8002ea2:	f000 fa3f 	bl	8003324 <setFontSize>
    putstr("Technician options: ");
 8002ea6:	484e      	ldr	r0, [pc, #312]	; (8002fe0 <display48+0x150>)
 8002ea8:	f7ff fd78 	bl	800299c <putstr>
    enteremtystr();
 8002eac:	f7ff fd9c 	bl	80029e8 <enteremtystr>
    if (selected < 4) {
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b03      	cmp	r3, #3
 8002eb4:	dc0a      	bgt.n	8002ecc <display48+0x3c>
        startItem = 0;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	61fb      	str	r3, [r7, #28]
        if (count > 7) {
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	2b07      	cmp	r3, #7
 8002ebe:	dd02      	ble.n	8002ec6 <display48+0x36>
            endItem = 7;
 8002ec0:	2307      	movs	r3, #7
 8002ec2:	61bb      	str	r3, [r7, #24]
 8002ec4:	e019      	b.n	8002efa <display48+0x6a>
        } else {
            endItem = count;
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	61bb      	str	r3, [r7, #24]
 8002eca:	e016      	b.n	8002efa <display48+0x6a>
        }
    } else if (selected > count - 4) {
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	3b04      	subs	r3, #4
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	dd0b      	ble.n	8002eee <display48+0x5e>
        if (count >= 7) {
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	2b06      	cmp	r3, #6
 8002eda:	dd03      	ble.n	8002ee4 <display48+0x54>
            startItem = count - 7;
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	3b07      	subs	r3, #7
 8002ee0:	61fb      	str	r3, [r7, #28]
 8002ee2:	e001      	b.n	8002ee8 <display48+0x58>
        } else {
            startItem = 0;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	61fb      	str	r3, [r7, #28]
        }
        endItem = count;
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	61bb      	str	r3, [r7, #24]
 8002eec:	e005      	b.n	8002efa <display48+0x6a>
    } else {
        startItem = selected - 3;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	3b03      	subs	r3, #3
 8002ef2:	61fb      	str	r3, [r7, #28]
        endItem = selected + 4;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	3304      	adds	r3, #4
 8002ef8:	61bb      	str	r3, [r7, #24]
    }

    for (int i = startItem; i < endItem; i++) {
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	617b      	str	r3, [r7, #20]
 8002efe:	e037      	b.n	8002f70 <display48+0xe0>
        if (i != selected) {
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d018      	beq.n	8002f3a <display48+0xaa>
            setFgColor(color_selnotsel);
 8002f08:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8002f0c:	f7ff fa5a 	bl	80023c4 <setFgColor>
            setBgColor(color_defback);
 8002f10:	2000      	movs	r0, #0
 8002f12:	f7ff fa67 	bl	80023e4 <setBgColor>
            setFontSize(24);
 8002f16:	2018      	movs	r0, #24
 8002f18:	f000 fa04 	bl	8003324 <setFontSize>
            putstr(items[i]);
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	68fa      	ldr	r2, [r7, #12]
 8002f22:	4413      	add	r3, r2
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff fd38 	bl	800299c <putstr>
            setFgColor(color_white);
 8002f2c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002f30:	f7ff fa48 	bl	80023c4 <setFgColor>
            enterxxx();
 8002f34:	f7ff faf6 	bl	8002524 <enterxxx>
 8002f38:	e017      	b.n	8002f6a <display48+0xda>
        } else {
            setFgColor(color_white);
 8002f3a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002f3e:	f7ff fa41 	bl	80023c4 <setFgColor>
            setBgColor(color_green);
 8002f42:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002f46:	f7ff fa4d 	bl	80023e4 <setBgColor>
            setFontSize(32);
 8002f4a:	2020      	movs	r0, #32
 8002f4c:	f000 f9ea 	bl	8003324 <setFontSize>
            putstr(items[i]);
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	4413      	add	r3, r2
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff fd1e 	bl	800299c <putstr>
            setBgColor(color_defback);
 8002f60:	2000      	movs	r0, #0
 8002f62:	f7ff fa3f 	bl	80023e4 <setBgColor>
            enterxxx();
 8002f66:	f7ff fadd 	bl	8002524 <enterxxx>
    for (int i = startItem; i < endItem; i++) {
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	617b      	str	r3, [r7, #20]
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	dbc3      	blt.n	8002f00 <display48+0x70>
        }
    }

    setFontSize(24);
 8002f78:	2018      	movs	r0, #24
 8002f7a:	f000 f9d3 	bl	8003324 <setFontSize>
    for (int i = 0; i < 7 - (endItem - startItem); i++) {
 8002f7e:	2300      	movs	r3, #0
 8002f80:	613b      	str	r3, [r7, #16]
 8002f82:	e004      	b.n	8002f8e <display48+0xfe>
        enterxxx();
 8002f84:	f7ff face 	bl	8002524 <enterxxx>
    for (int i = 0; i < 7 - (endItem - startItem); i++) {
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	613b      	str	r3, [r7, #16]
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	f1c3 0307 	rsb	r3, r3, #7
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	dbf2      	blt.n	8002f84 <display48+0xf4>
    }

    setFgColor(color_white);
 8002f9e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002fa2:	f7ff fa0f 	bl	80023c4 <setFgColor>
    setFontSize(24);
 8002fa6:	2018      	movs	r0, #24
 8002fa8:	f000 f9bc 	bl	8003324 <setFontSize>
    putstr("Select ");
 8002fac:	480d      	ldr	r0, [pc, #52]	; (8002fe4 <display48+0x154>)
 8002fae:	f7ff fcf5 	bl	800299c <putstr>
    keyshow(Button_5);
 8002fb2:	200c      	movs	r0, #12
 8002fb4:	f7ff fbbe 	bl	8002734 <keyshow>
    putstr(", ");
 8002fb8:	480b      	ldr	r0, [pc, #44]	; (8002fe8 <display48+0x158>)
 8002fba:	f7ff fcef 	bl	800299c <putstr>
    keyshow(Button_0);
 8002fbe:	2004      	movs	r0, #4
 8002fc0:	f7ff fbb8 	bl	8002734 <keyshow>
    putstr(" and press ");
 8002fc4:	4809      	ldr	r0, [pc, #36]	; (8002fec <display48+0x15c>)
 8002fc6:	f7ff fce9 	bl	800299c <putstr>
    keyshow(Button_Ok);
 8002fca:	200e      	movs	r0, #14
 8002fcc:	f7ff fbb2 	bl	8002734 <keyshow>
    enterxxx();
 8002fd0:	f7ff faa8 	bl	8002524 <enterxxx>
    filldisplay();
 8002fd4:	f7ff fcf8 	bl	80029c8 <filldisplay>
}
 8002fd8:	bf00      	nop
 8002fda:	3720      	adds	r7, #32
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	08006358 	.word	0x08006358
 8002fe4:	08006370 	.word	0x08006370
 8002fe8:	08006378 	.word	0x08006378
 8002fec:	0800637c 	.word	0x0800637c

08002ff0 <colorfill>:

void colorfill(uint16_t color) {
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	80fb      	strh	r3, [r7, #6]
    int x, y;

    start_display();
 8002ffa:	f7ff faad 	bl	8002558 <start_display>
    setFontSize(8);
 8002ffe:	2008      	movs	r0, #8
 8003000:	f000 f990 	bl	8003324 <setFontSize>
    graflocat(240 - 8, 0);
 8003004:	2100      	movs	r1, #0
 8003006:	20e8      	movs	r0, #232	; 0xe8
 8003008:	f7ff f9fc 	bl	8002404 <graflocat>
    cmdWrite(0x2C);
 800300c:	202c      	movs	r0, #44	; 0x2c
 800300e:	f7ff f989 	bl	8002324 <cmdWrite>
    for (x = 0; x < 320; x++) {
 8003012:	2300      	movs	r3, #0
 8003014:	60fb      	str	r3, [r7, #12]
 8003016:	e00f      	b.n	8003038 <colorfill+0x48>
        for (y = 0; y < 240; y++) {
 8003018:	2300      	movs	r3, #0
 800301a:	60bb      	str	r3, [r7, #8]
 800301c:	e006      	b.n	800302c <colorfill+0x3c>
            dataWrite(color);
 800301e:	88fb      	ldrh	r3, [r7, #6]
 8003020:	4618      	mov	r0, r3
 8003022:	f7ff f9a7 	bl	8002374 <dataWrite>
        for (y = 0; y < 240; y++) {
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	3301      	adds	r3, #1
 800302a:	60bb      	str	r3, [r7, #8]
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	2bef      	cmp	r3, #239	; 0xef
 8003030:	ddf5      	ble.n	800301e <colorfill+0x2e>
    for (x = 0; x < 320; x++) {
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	3301      	adds	r3, #1
 8003036:	60fb      	str	r3, [r7, #12]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800303e:	dbeb      	blt.n	8003018 <colorfill+0x28>
        }
    }
}
 8003040:	bf00      	nop
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <pixel>:

void pixel(int x, int y, uint16_t color) {
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	4613      	mov	r3, r2
 8003054:	80fb      	strh	r3, [r7, #6]
    setFontSize(0);
 8003056:	2000      	movs	r0, #0
 8003058:	f000 f964 	bl	8003324 <setFontSize>
    graflocat(y, x);
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	b29b      	uxth	r3, r3
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	b292      	uxth	r2, r2
 8003064:	4611      	mov	r1, r2
 8003066:	4618      	mov	r0, r3
 8003068:	f7ff f9cc 	bl	8002404 <graflocat>
    cmdWrite(0x2C);
 800306c:	202c      	movs	r0, #44	; 0x2c
 800306e:	f7ff f959 	bl	8002324 <cmdWrite>
    dataWrite(color);
 8003072:	88fb      	ldrh	r3, [r7, #6]
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff f97d 	bl	8002374 <dataWrite>
}
 800307a:	bf00      	nop
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <block>:

void block(int x, int y, uint16_t color) {
 8003082:	b580      	push	{r7, lr}
 8003084:	b08a      	sub	sp, #40	; 0x28
 8003086:	af00      	add	r7, sp, #0
 8003088:	60f8      	str	r0, [r7, #12]
 800308a:	60b9      	str	r1, [r7, #8]
 800308c:	4613      	mov	r3, r2
 800308e:	80fb      	strh	r3, [r7, #6]
    if (color == color_defback) {
 8003090:	88fb      	ldrh	r3, [r7, #6]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d11e      	bne.n	80030d4 <block+0x52>
        for (int i = x + 1; i < x + 9; i++) {
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	3301      	adds	r3, #1
 800309a:	627b      	str	r3, [r7, #36]	; 0x24
 800309c:	e014      	b.n	80030c8 <block+0x46>
            for (int j = y + 1; j < y + 9; j++) {
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	3301      	adds	r3, #1
 80030a2:	623b      	str	r3, [r7, #32]
 80030a4:	e008      	b.n	80030b8 <block+0x36>
                pixel(i, j, color);
 80030a6:	88fb      	ldrh	r3, [r7, #6]
 80030a8:	461a      	mov	r2, r3
 80030aa:	6a39      	ldr	r1, [r7, #32]
 80030ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80030ae:	f7ff ffcb 	bl	8003048 <pixel>
            for (int j = y + 1; j < y + 9; j++) {
 80030b2:	6a3b      	ldr	r3, [r7, #32]
 80030b4:	3301      	adds	r3, #1
 80030b6:	623b      	str	r3, [r7, #32]
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	3309      	adds	r3, #9
 80030bc:	6a3a      	ldr	r2, [r7, #32]
 80030be:	429a      	cmp	r2, r3
 80030c0:	dbf1      	blt.n	80030a6 <block+0x24>
        for (int i = x + 1; i < x + 9; i++) {
 80030c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c4:	3301      	adds	r3, #1
 80030c6:	627b      	str	r3, [r7, #36]	; 0x24
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	3309      	adds	r3, #9
 80030cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ce:	429a      	cmp	r2, r3
 80030d0:	dbe5      	blt.n	800309e <block+0x1c>
            pixel(x + 1, j, color_white);
            pixel(x + 8, j, color_gray);
        }

    }
}
 80030d2:	e055      	b.n	8003180 <block+0xfe>
        for (int i = x + 2; i < x + 8; i++) {
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	3302      	adds	r3, #2
 80030d8:	61fb      	str	r3, [r7, #28]
 80030da:	e014      	b.n	8003106 <block+0x84>
            for (int j = y + 2; j < y + 8; j++) {
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	3302      	adds	r3, #2
 80030e0:	61bb      	str	r3, [r7, #24]
 80030e2:	e008      	b.n	80030f6 <block+0x74>
                pixel(i, j, color);
 80030e4:	88fb      	ldrh	r3, [r7, #6]
 80030e6:	461a      	mov	r2, r3
 80030e8:	69b9      	ldr	r1, [r7, #24]
 80030ea:	69f8      	ldr	r0, [r7, #28]
 80030ec:	f7ff ffac 	bl	8003048 <pixel>
            for (int j = y + 2; j < y + 8; j++) {
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	3301      	adds	r3, #1
 80030f4:	61bb      	str	r3, [r7, #24]
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	3308      	adds	r3, #8
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	dbf1      	blt.n	80030e4 <block+0x62>
        for (int i = x + 2; i < x + 8; i++) {
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	3301      	adds	r3, #1
 8003104:	61fb      	str	r3, [r7, #28]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	3308      	adds	r3, #8
 800310a:	69fa      	ldr	r2, [r7, #28]
 800310c:	429a      	cmp	r2, r3
 800310e:	dbe5      	blt.n	80030dc <block+0x5a>
        for (int i = x + 1; i < x + 9; i++) {
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	3301      	adds	r3, #1
 8003114:	617b      	str	r3, [r7, #20]
 8003116:	e012      	b.n	800313e <block+0xbc>
            pixel(i, y + 1, color_white);
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	3301      	adds	r3, #1
 800311c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003120:	4619      	mov	r1, r3
 8003122:	6978      	ldr	r0, [r7, #20]
 8003124:	f7ff ff90 	bl	8003048 <pixel>
            pixel(i, y + 8, color_gray);
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	3308      	adds	r3, #8
 800312c:	f248 4210 	movw	r2, #33808	; 0x8410
 8003130:	4619      	mov	r1, r3
 8003132:	6978      	ldr	r0, [r7, #20]
 8003134:	f7ff ff88 	bl	8003048 <pixel>
        for (int i = x + 1; i < x + 9; i++) {
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	3301      	adds	r3, #1
 800313c:	617b      	str	r3, [r7, #20]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	3309      	adds	r3, #9
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	429a      	cmp	r2, r3
 8003146:	dbe7      	blt.n	8003118 <block+0x96>
        for (int j = y + 1; j < y + 9; j++) {
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	3301      	adds	r3, #1
 800314c:	613b      	str	r3, [r7, #16]
 800314e:	e012      	b.n	8003176 <block+0xf4>
            pixel(x + 1, j, color_white);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	3301      	adds	r3, #1
 8003154:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003158:	6939      	ldr	r1, [r7, #16]
 800315a:	4618      	mov	r0, r3
 800315c:	f7ff ff74 	bl	8003048 <pixel>
            pixel(x + 8, j, color_gray);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	3308      	adds	r3, #8
 8003164:	f248 4210 	movw	r2, #33808	; 0x8410
 8003168:	6939      	ldr	r1, [r7, #16]
 800316a:	4618      	mov	r0, r3
 800316c:	f7ff ff6c 	bl	8003048 <pixel>
        for (int j = y + 1; j < y + 9; j++) {
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	3301      	adds	r3, #1
 8003174:	613b      	str	r3, [r7, #16]
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	3309      	adds	r3, #9
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	429a      	cmp	r2, r3
 800317e:	dbe7      	blt.n	8003150 <block+0xce>
}
 8003180:	bf00      	nop
 8003182:	3728      	adds	r7, #40	; 0x28
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <showScores>:

void showScores(int scores) {
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
    char buf[8];

    start_display();
 8003190:	f7ff f9e2 	bl	8002558 <start_display>
    setFontSize(24);
 8003194:	2018      	movs	r0, #24
 8003196:	f000 f8c5 	bl	8003324 <setFontSize>
    graflocat(0, 235);
 800319a:	21eb      	movs	r1, #235	; 0xeb
 800319c:	2000      	movs	r0, #0
 800319e:	f7ff f931 	bl	8002404 <graflocat>
    enterxxx();
 80031a2:	f7ff f9bf 	bl	8002524 <enterxxx>
    graflocat(currentPage, 235);
 80031a6:	4b21      	ldr	r3, [pc, #132]	; (800322c <showScores+0xa4>)
 80031a8:	881b      	ldrh	r3, [r3, #0]
 80031aa:	21eb      	movs	r1, #235	; 0xeb
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff f929 	bl	8002404 <graflocat>
    if (scores >= 0) {
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	db17      	blt.n	80031e8 <showScores+0x60>
        itoa(scores, buf, 10);
 80031b8:	f107 0308 	add.w	r3, r7, #8
 80031bc:	220a      	movs	r2, #10
 80031be:	4619      	mov	r1, r3
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f002 f809 	bl	80051d8 <itoa>
        putstr("Scores");
 80031c6:	481a      	ldr	r0, [pc, #104]	; (8003230 <showScores+0xa8>)
 80031c8:	f7ff fbe8 	bl	800299c <putstr>
        enterxxx();
 80031cc:	f7ff f9aa 	bl	8002524 <enterxxx>
        graflocat(currentPage, 235);
 80031d0:	4b16      	ldr	r3, [pc, #88]	; (800322c <showScores+0xa4>)
 80031d2:	881b      	ldrh	r3, [r3, #0]
 80031d4:	21eb      	movs	r1, #235	; 0xeb
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7ff f914 	bl	8002404 <graflocat>
        putstr(buf);
 80031dc:	f107 0308 	add.w	r3, r7, #8
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff fbdb 	bl	800299c <putstr>
 80031e6:	e00d      	b.n	8003204 <showScores+0x7c>
    } else {
        putstr("Game");
 80031e8:	4812      	ldr	r0, [pc, #72]	; (8003234 <showScores+0xac>)
 80031ea:	f7ff fbd7 	bl	800299c <putstr>
        enterxxx();
 80031ee:	f7ff f999 	bl	8002524 <enterxxx>
        graflocat(currentPage, 235);
 80031f2:	4b0e      	ldr	r3, [pc, #56]	; (800322c <showScores+0xa4>)
 80031f4:	881b      	ldrh	r3, [r3, #0]
 80031f6:	21eb      	movs	r1, #235	; 0xeb
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff f903 	bl	8002404 <graflocat>
        putstr("Over");
 80031fe:	480e      	ldr	r0, [pc, #56]	; (8003238 <showScores+0xb0>)
 8003200:	f7ff fbcc 	bl	800299c <putstr>
    }
    graflocat(4 * getFontSize(), 235);
 8003204:	f000 f8c8 	bl	8003398 <getFontSize>
 8003208:	4603      	mov	r3, r0
 800320a:	b29b      	uxth	r3, r3
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	b29b      	uxth	r3, r3
 8003210:	21eb      	movs	r1, #235	; 0xeb
 8003212:	4618      	mov	r0, r3
 8003214:	f7ff f8f6 	bl	8002404 <graflocat>
    putstr("Next:");
 8003218:	4808      	ldr	r0, [pc, #32]	; (800323c <showScores+0xb4>)
 800321a:	f7ff fbbf 	bl	800299c <putstr>
    enterxxx();
 800321e:	f7ff f981 	bl	8002524 <enterxxx>

}
 8003222:	bf00      	nop
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	2000025c 	.word	0x2000025c
 8003230:	08006388 	.word	0x08006388
 8003234:	08006390 	.word	0x08006390
 8003238:	08006398 	.word	0x08006398
 800323c:	080063a0 	.word	0x080063a0

08003240 <gameDisplay>:

void gameDisplay() {
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
    colorfill(color_defback);
 8003244:	2000      	movs	r0, #0
 8003246:	f7ff fed3 	bl	8002ff0 <colorfill>
    start_display();
 800324a:	f7ff f985 	bl	8002558 <start_display>
    setFontSize(24);
 800324e:	2018      	movs	r0, #24
 8003250:	f000 f868 	bl	8003324 <setFontSize>
    enterxxx();
 8003254:	f7ff f966 	bl	8002524 <enterxxx>
    keyshow(Button_4);
 8003258:	200b      	movs	r0, #11
 800325a:	f7ff fa6b 	bl	8002734 <keyshow>
    putstr(" - Left");
 800325e:	4823      	ldr	r0, [pc, #140]	; (80032ec <gameDisplay+0xac>)
 8003260:	f7ff fb9c 	bl	800299c <putstr>
    enterxxx();
 8003264:	f7ff f95e 	bl	8002524 <enterxxx>
    setFontSize(8);
 8003268:	2008      	movs	r0, #8
 800326a:	f000 f85b 	bl	8003324 <setFontSize>
    enterxxx();
 800326e:	f7ff f959 	bl	8002524 <enterxxx>
    setFontSize(24);
 8003272:	2018      	movs	r0, #24
 8003274:	f000 f856 	bl	8003324 <setFontSize>
    keyshow(Button_Point);
 8003278:	200d      	movs	r0, #13
 800327a:	f7ff fa5b 	bl	8002734 <keyshow>
    putstr(" - Right");
 800327e:	481c      	ldr	r0, [pc, #112]	; (80032f0 <gameDisplay+0xb0>)
 8003280:	f7ff fb8c 	bl	800299c <putstr>
    enterxxx();
 8003284:	f7ff f94e 	bl	8002524 <enterxxx>
    setFontSize(8);
 8003288:	2008      	movs	r0, #8
 800328a:	f000 f84b 	bl	8003324 <setFontSize>
    enterxxx();
 800328e:	f7ff f949 	bl	8002524 <enterxxx>
    setFontSize(24);
 8003292:	2018      	movs	r0, #24
 8003294:	f000 f846 	bl	8003324 <setFontSize>
    keyshow(Button_5);
 8003298:	200c      	movs	r0, #12
 800329a:	f7ff fa4b 	bl	8002734 <keyshow>
    putstr(" - Rotate");
 800329e:	4815      	ldr	r0, [pc, #84]	; (80032f4 <gameDisplay+0xb4>)
 80032a0:	f7ff fb7c 	bl	800299c <putstr>
    enterxxx();
 80032a4:	f7ff f93e 	bl	8002524 <enterxxx>
    setFontSize(8);
 80032a8:	2008      	movs	r0, #8
 80032aa:	f000 f83b 	bl	8003324 <setFontSize>
    enterxxx();
 80032ae:	f7ff f939 	bl	8002524 <enterxxx>
    setFontSize(24);
 80032b2:	2018      	movs	r0, #24
 80032b4:	f000 f836 	bl	8003324 <setFontSize>
    keyshow(Button_Prime);
 80032b8:	2006      	movs	r0, #6
 80032ba:	f7ff fa3b 	bl	8002734 <keyshow>
    putstr(" - Down");
 80032be:	480e      	ldr	r0, [pc, #56]	; (80032f8 <gameDisplay+0xb8>)
 80032c0:	f7ff fb6c 	bl	800299c <putstr>
    enterxxx();
 80032c4:	f7ff f92e 	bl	8002524 <enterxxx>
    setFontSize(8);
 80032c8:	2008      	movs	r0, #8
 80032ca:	f000 f82b 	bl	8003324 <setFontSize>
    enterxxx();
 80032ce:	f7ff f929 	bl	8002524 <enterxxx>
    setFontSize(24);
 80032d2:	2018      	movs	r0, #24
 80032d4:	f000 f826 	bl	8003324 <setFontSize>
    keyshow(Button_Ok);
 80032d8:	200e      	movs	r0, #14
 80032da:	f7ff fa2b 	bl	8002734 <keyshow>
    putstr(" - New");
 80032de:	4807      	ldr	r0, [pc, #28]	; (80032fc <gameDisplay+0xbc>)
 80032e0:	f7ff fb5c 	bl	800299c <putstr>
    enterxxx();
 80032e4:	f7ff f91e 	bl	8002524 <enterxxx>
}
 80032e8:	bf00      	nop
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	080063a8 	.word	0x080063a8
 80032f0:	080063b0 	.word	0x080063b0
 80032f4:	080063bc 	.word	0x080063bc
 80032f8:	080063c8 	.word	0x080063c8
 80032fc:	080063d0 	.word	0x080063d0

08003300 <displayAlarmTest>:

void displayAlarmTest() {
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0
    start_display();
 8003304:	f7ff f928 	bl	8002558 <start_display>
    setFontSize(32);
 8003308:	2020      	movs	r0, #32
 800330a:	f000 f80b 	bl	8003324 <setFontSize>
    putstr("High priority alarm");
 800330e:	4804      	ldr	r0, [pc, #16]	; (8003320 <displayAlarmTest+0x20>)
 8003310:	f7ff fb44 	bl	800299c <putstr>
    enterxxx();
 8003314:	f7ff f906 	bl	8002524 <enterxxx>
    filldisplay();
 8003318:	f7ff fb56 	bl	80029c8 <filldisplay>
}
 800331c:	bf00      	nop
 800331e:	bd80      	pop	{r7, pc}
 8003320:	080063d8 	.word	0x080063d8

08003324 <setFontSize>:
void initFonts() {
    currentFontSize = 8;
    fontScale = 1;
}

void setFontSize(uint8_t fontSize) {
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	4603      	mov	r3, r0
 800332c:	71fb      	strb	r3, [r7, #7]
    currentFontSize = fontSize;
 800332e:	4a18      	ldr	r2, [pc, #96]	; (8003390 <setFontSize+0x6c>)
 8003330:	79fb      	ldrb	r3, [r7, #7]
 8003332:	7013      	strb	r3, [r2, #0]

    switch (fontSize) {
 8003334:	79fb      	ldrb	r3, [r7, #7]
 8003336:	2b20      	cmp	r3, #32
 8003338:	d014      	beq.n	8003364 <setFontSize+0x40>
 800333a:	2b20      	cmp	r3, #32
 800333c:	dc06      	bgt.n	800334c <setFontSize+0x28>
 800333e:	2b10      	cmp	r3, #16
 8003340:	d010      	beq.n	8003364 <setFontSize+0x40>
 8003342:	2b18      	cmp	r3, #24
 8003344:	d00e      	beq.n	8003364 <setFontSize+0x40>
 8003346:	2b08      	cmp	r3, #8
 8003348:	d00c      	beq.n	8003364 <setFontSize+0x40>
        break;
    case 96:
        fontScale = 4;
        break;
    }
}
 800334a:	e01b      	b.n	8003384 <setFontSize+0x60>
    switch (fontSize) {
 800334c:	2b40      	cmp	r3, #64	; 0x40
 800334e:	d00d      	beq.n	800336c <setFontSize+0x48>
 8003350:	2b40      	cmp	r3, #64	; 0x40
 8003352:	dc02      	bgt.n	800335a <setFontSize+0x36>
 8003354:	2b30      	cmp	r3, #48	; 0x30
 8003356:	d009      	beq.n	800336c <setFontSize+0x48>
}
 8003358:	e014      	b.n	8003384 <setFontSize+0x60>
    switch (fontSize) {
 800335a:	2b48      	cmp	r3, #72	; 0x48
 800335c:	d00a      	beq.n	8003374 <setFontSize+0x50>
 800335e:	2b60      	cmp	r3, #96	; 0x60
 8003360:	d00c      	beq.n	800337c <setFontSize+0x58>
}
 8003362:	e00f      	b.n	8003384 <setFontSize+0x60>
        fontScale = 1;
 8003364:	4b0b      	ldr	r3, [pc, #44]	; (8003394 <setFontSize+0x70>)
 8003366:	2201      	movs	r2, #1
 8003368:	601a      	str	r2, [r3, #0]
        break;
 800336a:	e00b      	b.n	8003384 <setFontSize+0x60>
        fontScale = 2;
 800336c:	4b09      	ldr	r3, [pc, #36]	; (8003394 <setFontSize+0x70>)
 800336e:	2202      	movs	r2, #2
 8003370:	601a      	str	r2, [r3, #0]
        break;
 8003372:	e007      	b.n	8003384 <setFontSize+0x60>
        fontScale = 3;
 8003374:	4b07      	ldr	r3, [pc, #28]	; (8003394 <setFontSize+0x70>)
 8003376:	2203      	movs	r2, #3
 8003378:	601a      	str	r2, [r3, #0]
        break;
 800337a:	e003      	b.n	8003384 <setFontSize+0x60>
        fontScale = 4;
 800337c:	4b05      	ldr	r3, [pc, #20]	; (8003394 <setFontSize+0x70>)
 800337e:	2204      	movs	r2, #4
 8003380:	601a      	str	r2, [r3, #0]
        break;
 8003382:	bf00      	nop
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	bc80      	pop	{r7}
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	20000264 	.word	0x20000264
 8003394:	20000268 	.word	0x20000268

08003398 <getFontSize>:

uint8_t getFontSize() {
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
    return currentFontSize;
 800339c:	4b02      	ldr	r3, [pc, #8]	; (80033a8 <getFontSize+0x10>)
 800339e:	781b      	ldrb	r3, [r3, #0]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bc80      	pop	{r7}
 80033a6:	4770      	bx	lr
 80033a8:	20000264 	.word	0x20000264

080033ac <getCurrentFont>:

const Font *getCurrentFont() {
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
    switch (currentFontSize) {
 80033b0:	4b10      	ldr	r3, [pc, #64]	; (80033f4 <getCurrentFont+0x48>)
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	2b20      	cmp	r3, #32
 80033b6:	d013      	beq.n	80033e0 <getCurrentFont+0x34>
 80033b8:	2b20      	cmp	r3, #32
 80033ba:	dc06      	bgt.n	80033ca <getCurrentFont+0x1e>
 80033bc:	2b10      	cmp	r3, #16
 80033be:	d00d      	beq.n	80033dc <getCurrentFont+0x30>
 80033c0:	2b18      	cmp	r3, #24
 80033c2:	d00f      	beq.n	80033e4 <getCurrentFont+0x38>
 80033c4:	2b08      	cmp	r3, #8
 80033c6:	d007      	beq.n	80033d8 <getCurrentFont+0x2c>
 80033c8:	e00e      	b.n	80033e8 <getCurrentFont+0x3c>
 80033ca:	2b48      	cmp	r3, #72	; 0x48
 80033cc:	d00a      	beq.n	80033e4 <getCurrentFont+0x38>
 80033ce:	2b60      	cmp	r3, #96	; 0x60
 80033d0:	d008      	beq.n	80033e4 <getCurrentFont+0x38>
 80033d2:	2b30      	cmp	r3, #48	; 0x30
 80033d4:	d006      	beq.n	80033e4 <getCurrentFont+0x38>
 80033d6:	e007      	b.n	80033e8 <getCurrentFont+0x3c>
    case 8:
        return &font8;
 80033d8:	4b07      	ldr	r3, [pc, #28]	; (80033f8 <getCurrentFont+0x4c>)
 80033da:	e006      	b.n	80033ea <getCurrentFont+0x3e>
    case 16:
        return &font16;
 80033dc:	4b07      	ldr	r3, [pc, #28]	; (80033fc <getCurrentFont+0x50>)
 80033de:	e004      	b.n	80033ea <getCurrentFont+0x3e>
    case 32:
        return &font32;
 80033e0:	4b07      	ldr	r3, [pc, #28]	; (8003400 <getCurrentFont+0x54>)
 80033e2:	e002      	b.n	80033ea <getCurrentFont+0x3e>
    case 24:
    case 48:
    case 72:
    case 96:
        return &font24;
 80033e4:	4b07      	ldr	r3, [pc, #28]	; (8003404 <getCurrentFont+0x58>)
 80033e6:	e000      	b.n	80033ea <getCurrentFont+0x3e>
    default:
        return &font8;
 80033e8:	4b03      	ldr	r3, [pc, #12]	; (80033f8 <getCurrentFont+0x4c>)
    }
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bc80      	pop	{r7}
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	20000264 	.word	0x20000264
 80033f8:	08006a90 	.word	0x08006a90
 80033fc:	08007894 	.word	0x08007894
 8003400:	0800b3cc 	.word	0x0800b3cc
 8003404:	08009034 	.word	0x08009034

08003408 <getFontScale>:

uint32_t getFontScale() {
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
    return fontScale;
 800340c:	4b02      	ldr	r3, [pc, #8]	; (8003418 <getFontScale+0x10>)
 800340e:	681b      	ldr	r3, [r3, #0]
}
 8003410:	4618      	mov	r0, r3
 8003412:	46bd      	mov	sp, r7
 8003414:	bc80      	pop	{r7}
 8003416:	4770      	bx	lr
 8003418:	20000268 	.word	0x20000268

0800341c <getKeyCharacter>:

const KeyCharacter *getKeyCharacter(buttonName_t button) {
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	4603      	mov	r3, r0
 8003424:	71fb      	strb	r3, [r7, #7]
    return FontKeys[button];
 8003426:	79fb      	ldrb	r3, [r7, #7]
 8003428:	4a03      	ldr	r2, [pc, #12]	; (8003438 <getKeyCharacter+0x1c>)
 800342a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800342e:	4618      	mov	r0, r3
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	bc80      	pop	{r7}
 8003436:	4770      	bx	lr
 8003438:	2000004c 	.word	0x2000004c

0800343c <initLeds>:
#include <stm32l4xx.h>
#include <leds.h>

void initLeds() {
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
    ledOff(ledRed);
 8003440:	2000      	movs	r0, #0
 8003442:	f000 f805 	bl	8003450 <ledOff>
    ledOff(ledGreen);
 8003446:	2001      	movs	r0, #1
 8003448:	f000 f802 	bl	8003450 <ledOff>
}
 800344c:	bf00      	nop
 800344e:	bd80      	pop	{r7, pc}

08003450 <ledOff>:

void ledOff(led_t led) {
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	4603      	mov	r3, r0
 8003458:	71fb      	strb	r3, [r7, #7]
    switch (led) {
 800345a:	79fb      	ldrb	r3, [r7, #7]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d002      	beq.n	8003466 <ledOff+0x16>
 8003460:	2b01      	cmp	r3, #1
 8003462:	d007      	beq.n	8003474 <ledOff+0x24>
        break;
    case ledGreen:
        GPIOB->ODR &= ~(1 << 8);
        break;
    }
}
 8003464:	e00d      	b.n	8003482 <ledOff+0x32>
        GPIOB->ODR &= ~(1 << 9);
 8003466:	4b09      	ldr	r3, [pc, #36]	; (800348c <ledOff+0x3c>)
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	4a08      	ldr	r2, [pc, #32]	; (800348c <ledOff+0x3c>)
 800346c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003470:	6153      	str	r3, [r2, #20]
        break;
 8003472:	e006      	b.n	8003482 <ledOff+0x32>
        GPIOB->ODR &= ~(1 << 8);
 8003474:	4b05      	ldr	r3, [pc, #20]	; (800348c <ledOff+0x3c>)
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	4a04      	ldr	r2, [pc, #16]	; (800348c <ledOff+0x3c>)
 800347a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800347e:	6153      	str	r3, [r2, #20]
        break;
 8003480:	bf00      	nop
}
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	bc80      	pop	{r7}
 800348a:	4770      	bx	lr
 800348c:	48000400 	.word	0x48000400

08003490 <initGPIO>:
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"
#pragma GCC diagnostic ignored "-Wmissing-declarations"
#pragma GCC diagnostic ignored "-Wreturn-type"

void initGPIO() {
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN |
 8003494:	4b29      	ldr	r3, [pc, #164]	; (800353c <initGPIO+0xac>)
 8003496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003498:	4a28      	ldr	r2, [pc, #160]	; (800353c <initGPIO+0xac>)
 800349a:	f043 031f 	orr.w	r3, r3, #31
 800349e:	64d3      	str	r3, [r2, #76]	; 0x4c
                    RCC_AHB2ENR_GPIOBEN |
                    RCC_AHB2ENR_GPIOCEN |
                    RCC_AHB2ENR_GPIODEN |
                    RCC_AHB2ENR_GPIOEEN;

    GPIOA->MODER &= ~(GPIO_MODER_MODE8_Msk |
 80034a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80034aa:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 80034ae:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80034b2:	6013      	str	r3, [r2, #0]
                      GPIO_MODER_MODE9_Msk |
                      GPIO_MODER_MODE10_Msk |
                      GPIO_MODER_MODE11_Msk |
                      GPIO_MODER_MODE12_Msk);
    GPIOA->MODER |= (1 << GPIO_MODER_MODE8_Pos) |
 80034b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80034be:	f043 73aa 	orr.w	r3, r3, #22282240	; 0x1540000
 80034c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034c6:	6013      	str	r3, [r2, #0]
                    (1 << GPIO_MODER_MODE9_Pos) |
                    (1 << GPIO_MODER_MODE10_Pos) |
                    (1 << GPIO_MODER_MODE11_Pos) |
                    (1 << GPIO_MODER_MODE12_Pos);

    GPIOB->MODER = (1 << GPIO_MODER_MODE3_Pos) |
 80034c8:	4b1d      	ldr	r3, [pc, #116]	; (8003540 <initGPIO+0xb0>)
 80034ca:	4a1e      	ldr	r2, [pc, #120]	; (8003544 <initGPIO+0xb4>)
 80034cc:	601a      	str	r2, [r3, #0]
                   (1 << GPIO_MODER_MODE8_Pos) |
                   (1 << GPIO_MODER_MODE9_Pos) |
                   (1 << GPIO_MODER_MODE12_Pos) |
                   (1 << GPIO_MODER_MODE14_Pos);

    GPIOB->MODER &= ~(GPIO_MODER_MODE5_Msk);
 80034ce:	4b1c      	ldr	r3, [pc, #112]	; (8003540 <initGPIO+0xb0>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a1b      	ldr	r2, [pc, #108]	; (8003540 <initGPIO+0xb0>)
 80034d4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80034d8:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR = (1 < GPIO_PUPDR_PUPD5_Pos);  //KEYS3 with pull-up
 80034da:	4b19      	ldr	r3, [pc, #100]	; (8003540 <initGPIO+0xb0>)
 80034dc:	2201      	movs	r2, #1
 80034de:	60da      	str	r2, [r3, #12]

    GPIOE->MODER = 0xFFFB0000UL;				//PORTE[9] is alternate function
 80034e0:	4b19      	ldr	r3, [pc, #100]	; (8003548 <initGPIO+0xb8>)
 80034e2:	4a1a      	ldr	r2, [pc, #104]	; (800354c <initGPIO+0xbc>)
 80034e4:	601a      	str	r2, [r3, #0]
    GPIOE->PUPDR = 0x5555;                      //PORTE[7:0] with pull up
 80034e6:	4b18      	ldr	r3, [pc, #96]	; (8003548 <initGPIO+0xb8>)
 80034e8:	f245 5255 	movw	r2, #21845	; 0x5555
 80034ec:	60da      	str	r2, [r3, #12]
    GPIOE->AFR[1] = 1 << GPIO_AFRH_AFSEL9_Pos;	//TIM1_CH1 is an alternate function AF1 for PE9
 80034ee:	4b16      	ldr	r3, [pc, #88]	; (8003548 <initGPIO+0xb8>)
 80034f0:	2210      	movs	r2, #16
 80034f2:	625a      	str	r2, [r3, #36]	; 0x24

    GPIOC->MODER &= ~(GPIO_MODER_MODE0_Msk |
 80034f4:	4b16      	ldr	r3, [pc, #88]	; (8003550 <initGPIO+0xc0>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a15      	ldr	r2, [pc, #84]	; (8003550 <initGPIO+0xc0>)
 80034fa:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80034fe:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8003502:	6013      	str	r3, [r2, #0]
                      GPIO_MODER_MODE2_Msk |
                      GPIO_MODER_MODE3_Msk |
                      GPIO_MODER_MODE9_Msk);
    GPIOC->MODER |= (1 << GPIO_MODER_MODE2_Pos) |
 8003504:	4b12      	ldr	r3, [pc, #72]	; (8003550 <initGPIO+0xc0>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a11      	ldr	r2, [pc, #68]	; (8003550 <initGPIO+0xc0>)
 800350a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800350e:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8003512:	6013      	str	r3, [r2, #0]
                    (1 << GPIO_MODER_MODE3_Pos) |
                    (2 << GPIO_MODER_MODE9_Pos);
    GPIOC->AFR[1] = 2 << GPIO_AFRH_AFSEL9_Pos;  //TIM3_CH4 is an alternate function AF2 for PC9
 8003514:	4b0e      	ldr	r3, [pc, #56]	; (8003550 <initGPIO+0xc0>)
 8003516:	2220      	movs	r2, #32
 8003518:	625a      	str	r2, [r3, #36]	; 0x24
    GPIOC->ODR |= (1 << 2);
 800351a:	4b0d      	ldr	r3, [pc, #52]	; (8003550 <initGPIO+0xc0>)
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	4a0c      	ldr	r2, [pc, #48]	; (8003550 <initGPIO+0xc0>)
 8003520:	f043 0304 	orr.w	r3, r3, #4
 8003524:	6153      	str	r3, [r2, #20]
    GPIOC->PUPDR = 1 << GPIO_PUPDR_PUPD0_Pos;
 8003526:	4b0a      	ldr	r3, [pc, #40]	; (8003550 <initGPIO+0xc0>)
 8003528:	2201      	movs	r2, #1
 800352a:	60da      	str	r2, [r3, #12]

    GPIOD->MODER = 0x55555555;
 800352c:	4b09      	ldr	r3, [pc, #36]	; (8003554 <initGPIO+0xc4>)
 800352e:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8003532:	601a      	str	r2, [r3, #0]
}
 8003534:	bf00      	nop
 8003536:	46bd      	mov	sp, r7
 8003538:	bc80      	pop	{r7}
 800353a:	4770      	bx	lr
 800353c:	40021000 	.word	0x40021000
 8003540:	48000400 	.word	0x48000400
 8003544:	11050140 	.word	0x11050140
 8003548:	48001000 	.word	0x48001000
 800354c:	fffb0000 	.word	0xfffb0000
 8003550:	48000800 	.word	0x48000800
 8003554:	48000c00 	.word	0x48000c00

08003558 <max706_toggle>:

void max706_toggle(uint32_t parameter) {
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
    GPIOC->ODR ^= (1 << 3);
 8003560:	4b07      	ldr	r3, [pc, #28]	; (8003580 <max706_toggle+0x28>)
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	4a06      	ldr	r2, [pc, #24]	; (8003580 <max706_toggle+0x28>)
 8003566:	f083 0308 	eor.w	r3, r3, #8
 800356a:	6153      	str	r3, [r2, #20]

    osTaskAdd(max706_toggle, 0, 500);
 800356c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003570:	2100      	movs	r1, #0
 8003572:	4804      	ldr	r0, [pc, #16]	; (8003584 <max706_toggle+0x2c>)
 8003574:	f000 fe78 	bl	8004268 <osTaskAdd>
}
 8003578:	bf00      	nop
 800357a:	3708      	adds	r7, #8
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	48000800 	.word	0x48000800
 8003584:	08003559 	.word	0x08003559

08003588 <initClocks>:

void initClocks() {
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
    //Enable HSE oscillator and wait for ready
    RCC->CR |= RCC_CR_HSEON;
 800358c:	4b15      	ldr	r3, [pc, #84]	; (80035e4 <initClocks+0x5c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a14      	ldr	r2, [pc, #80]	; (80035e4 <initClocks+0x5c>)
 8003592:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003596:	6013      	str	r3, [r2, #0]
    while ((RCC->CR & RCC_CR_HSERDY) == 0);
 8003598:	bf00      	nop
 800359a:	4b12      	ldr	r3, [pc, #72]	; (80035e4 <initClocks+0x5c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d0f9      	beq.n	800359a <initClocks+0x12>

    //Enable Main PLL
    //Configure PLL output to 30 MHZ
    //Wait for ready
    RCC->PLLCFGR = (0x3 << RCC_PLLCFGR_PLLSRC_Pos) | //Main PLL Clock source -> HSE (8 MHz)
 80035a6:	4b0f      	ldr	r3, [pc, #60]	; (80035e4 <initClocks+0x5c>)
 80035a8:	4a0f      	ldr	r2, [pc, #60]	; (80035e8 <initClocks+0x60>)
 80035aa:	60da      	str	r2, [r3, #12]
                   (0xF << RCC_PLLCFGR_PLLN_Pos) |   //VCO multiplication factor = 15 (120 MHz)
				   (0x1 << RCC_PLLCFGR_PLLR_Pos) |   //R division factor = 4 (30 MHz)
                   RCC_PLLCFGR_PLLREN;               //Enable Main PLL PLLCLK output

    RCC->CR |= RCC_CR_PLLON;
 80035ac:	4b0d      	ldr	r3, [pc, #52]	; (80035e4 <initClocks+0x5c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a0c      	ldr	r2, [pc, #48]	; (80035e4 <initClocks+0x5c>)
 80035b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035b6:	6013      	str	r3, [r2, #0]
    while ((RCC->CR & RCC_CR_PLLRDY) == 0);
 80035b8:	bf00      	nop
 80035ba:	4b0a      	ldr	r3, [pc, #40]	; (80035e4 <initClocks+0x5c>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0f9      	beq.n	80035ba <initClocks+0x32>

    //Switch system clock to PLLCLK and wait for being switched
    RCC->CFGR = RCC_CFGR_SW_PLL << RCC_CFGR_SW_Pos;
 80035c6:	4b07      	ldr	r3, [pc, #28]	; (80035e4 <initClocks+0x5c>)
 80035c8:	2203      	movs	r2, #3
 80035ca:	609a      	str	r2, [r3, #8]
    while ((RCC->CFGR & RCC_CFGR_SWS_Msk) != RCC_CFGR_SWS_PLL);
 80035cc:	bf00      	nop
 80035ce:	4b05      	ldr	r3, [pc, #20]	; (80035e4 <initClocks+0x5c>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f003 030c 	and.w	r3, r3, #12
 80035d6:	2b0c      	cmp	r3, #12
 80035d8:	d1f9      	bne.n	80035ce <initClocks+0x46>

    SystemCoreClockUpdate();
 80035da:	f7fe fd41 	bl	8002060 <SystemCoreClockUpdate>
}
 80035de:	bf00      	nop
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	40021000 	.word	0x40021000
 80035e8:	03000f03 	.word	0x03000f03

080035ec <initializationTask>:

void initializationTask(uint32_t parameter) {
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
    static uint32_t time;

    if (time == 0) {
 80035f4:	4b11      	ldr	r3, [pc, #68]	; (800363c <initializationTask+0x50>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d107      	bne.n	800360c <initializationTask+0x20>
        display00();
 80035fc:	f7ff f9ff 	bl	80029fe <display00>
        osTaskAdd(initializationTask, 0, 50);
 8003600:	2232      	movs	r2, #50	; 0x32
 8003602:	2100      	movs	r1, #0
 8003604:	480e      	ldr	r0, [pc, #56]	; (8003640 <initializationTask+0x54>)
 8003606:	f000 fe2f 	bl	8004268 <osTaskAdd>
 800360a:	e00e      	b.n	800362a <initializationTask+0x3e>
    } else if (time < 5) {
 800360c:	4b0b      	ldr	r3, [pc, #44]	; (800363c <initializationTask+0x50>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2b04      	cmp	r3, #4
 8003612:	d808      	bhi.n	8003626 <initializationTask+0x3a>
        display01();
 8003614:	f7ff f9fc 	bl	8002a10 <display01>
        osTaskAdd(initializationTask, 0, 1000);
 8003618:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800361c:	2100      	movs	r1, #0
 800361e:	4808      	ldr	r0, [pc, #32]	; (8003640 <initializationTask+0x54>)
 8003620:	f000 fe22 	bl	8004268 <osTaskAdd>
 8003624:	e001      	b.n	800362a <initializationTask+0x3e>
    } else {
        showManualTestsScreen();
 8003626:	f7fe fa33 	bl	8001a90 <showManualTestsScreen>
    }
    time++;
 800362a:	4b04      	ldr	r3, [pc, #16]	; (800363c <initializationTask+0x50>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	3301      	adds	r3, #1
 8003630:	4a02      	ldr	r2, [pc, #8]	; (800363c <initializationTask+0x50>)
 8003632:	6013      	str	r3, [r2, #0]
}
 8003634:	bf00      	nop
 8003636:	3708      	adds	r7, #8
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	2000026c 	.word	0x2000026c
 8003640:	080035ed 	.word	0x080035ed

08003644 <main>:

int main (int argc, char* argv[]) {
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
    initClocks();
 800364e:	f7ff ff9b 	bl	8003588 <initClocks>
    osInit(1000, timerInit, timerElapseSinceLastTime);
 8003652:	4a17      	ldr	r2, [pc, #92]	; (80036b0 <main+0x6c>)
 8003654:	4917      	ldr	r1, [pc, #92]	; (80036b4 <main+0x70>)
 8003656:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800365a:	f000 fda3 	bl	80041a4 <osInit>

    initGPIO();
 800365e:	f7ff ff17 	bl	8003490 <initGPIO>
    initSound();
 8003662:	f000 fa05 	bl	8003a70 <initSound>
    initMotor();
 8003666:	f000 f85d 	bl	8003724 <initMotor>
    initLeds();
 800366a:	f7ff fee7 	bl	800343c <initLeds>
    initDisplay();
 800366e:	f7fe fdd7 	bl	8002220 <initDisplay>

    osTaskAdd(max706_toggle, 0, 500);
 8003672:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003676:	2100      	movs	r1, #0
 8003678:	480f      	ldr	r0, [pc, #60]	; (80036b8 <main+0x74>)
 800367a:	f000 fdf5 	bl	8004268 <osTaskAdd>
    buttonInit(getButtonsConfig(), Button_Last);
 800367e:	f000 ff7f 	bl	8004580 <getButtonsConfig>
 8003682:	4603      	mov	r3, r0
 8003684:	2111      	movs	r1, #17
 8003686:	4618      	mov	r0, r3
 8003688:	f001 faec 	bl	8004c64 <buttonInit>
    osTaskAdd(buttonsPollTask, 0, 5);
 800368c:	2205      	movs	r2, #5
 800368e:	2100      	movs	r1, #0
 8003690:	480a      	ldr	r0, [pc, #40]	; (80036bc <main+0x78>)
 8003692:	f000 fde9 	bl	8004268 <osTaskAdd>
    osTaskAdd(initializationTask, 0, 100);
 8003696:	2264      	movs	r2, #100	; 0x64
 8003698:	2100      	movs	r1, #0
 800369a:	4809      	ldr	r0, [pc, #36]	; (80036c0 <main+0x7c>)
 800369c:	f000 fde4 	bl	8004268 <osTaskAdd>
    osRun();
 80036a0:	f000 fda8 	bl	80041f4 <osRun>
}
 80036a4:	bf00      	nop
 80036a6:	4618      	mov	r0, r3
 80036a8:	3708      	adds	r7, #8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	08004151 	.word	0x08004151
 80036b4:	08004109 	.word	0x08004109
 80036b8:	08003559 	.word	0x08003559
 80036bc:	08004b89 	.word	0x08004b89
 80036c0:	080035ed 	.word	0x080035ed

080036c4 <initMotorTimer>:
#include <stm32l4xx.h>

#define MOTOR_TIMER_FREQ (78125)
#define MOTOR_TIMER_PERIOD (SystemCoreClock / MOTOR_TIMER_FREQ)

static void initMotorTimer() {
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 80036c8:	4b12      	ldr	r3, [pc, #72]	; (8003714 <initMotorTimer+0x50>)
 80036ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036cc:	4a11      	ldr	r2, [pc, #68]	; (8003714 <initMotorTimer+0x50>)
 80036ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80036d2:	6613      	str	r3, [r2, #96]	; 0x60

	TIM1->CCMR1 = 0x6 << TIM_CCMR1_OC1M_Pos;    //PWM Mode 1
 80036d4:	4b10      	ldr	r3, [pc, #64]	; (8003718 <initMotorTimer+0x54>)
 80036d6:	2260      	movs	r2, #96	; 0x60
 80036d8:	619a      	str	r2, [r3, #24]

	TIM1->CCER = TIM_CCER_CC1E;                 //Enable Channel1 output
 80036da:	4b0f      	ldr	r3, [pc, #60]	; (8003718 <initMotorTimer+0x54>)
 80036dc:	2201      	movs	r2, #1
 80036de:	621a      	str	r2, [r3, #32]
	TIM1->PSC = 0;
 80036e0:	4b0d      	ldr	r3, [pc, #52]	; (8003718 <initMotorTimer+0x54>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	629a      	str	r2, [r3, #40]	; 0x28
	TIM1->ARR = MOTOR_TIMER_PERIOD - 1;
 80036e6:	4b0d      	ldr	r3, [pc, #52]	; (800371c <initMotorTimer+0x58>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a0d      	ldr	r2, [pc, #52]	; (8003720 <initMotorTimer+0x5c>)
 80036ec:	fba2 2303 	umull	r2, r3, r2, r3
 80036f0:	0bdb      	lsrs	r3, r3, #15
 80036f2:	4a09      	ldr	r2, [pc, #36]	; (8003718 <initMotorTimer+0x54>)
 80036f4:	3b01      	subs	r3, #1
 80036f6:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM1->CCR1 = 10;
 80036f8:	4b07      	ldr	r3, [pc, #28]	; (8003718 <initMotorTimer+0x54>)
 80036fa:	220a      	movs	r2, #10
 80036fc:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->BDTR |= TIM_BDTR_MOE;
 80036fe:	4b06      	ldr	r3, [pc, #24]	; (8003718 <initMotorTimer+0x54>)
 8003700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003702:	4a05      	ldr	r2, [pc, #20]	; (8003718 <initMotorTimer+0x54>)
 8003704:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003708:	6453      	str	r3, [r2, #68]	; 0x44
}
 800370a:	bf00      	nop
 800370c:	46bd      	mov	sp, r7
 800370e:	bc80      	pop	{r7}
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	40021000 	.word	0x40021000
 8003718:	40012c00 	.word	0x40012c00
 800371c:	20000048 	.word	0x20000048
 8003720:	6b5fca6b 	.word	0x6b5fca6b

08003724 <initMotor>:

void initMotor() {
 8003724:	b580      	push	{r7, lr}
 8003726:	af00      	add	r7, sp, #0
	initMotorTimer();
 8003728:	f7ff ffcc 	bl	80036c4 <initMotorTimer>
}
 800372c:	bf00      	nop
 800372e:	bd80      	pop	{r7, pc}

08003730 <increaseMotorSpeed>:

void increaseMotorSpeed(uint16_t step) {
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	4603      	mov	r3, r0
 8003738:	80fb      	strh	r3, [r7, #6]
    uint16_t tmp = TIM1->CCR1;
 800373a:	4b0d      	ldr	r3, [pc, #52]	; (8003770 <increaseMotorSpeed+0x40>)
 800373c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800373e:	81fb      	strh	r3, [r7, #14]
    uint16_t maxDuty = 100;
 8003740:	2364      	movs	r3, #100	; 0x64
 8003742:	81bb      	strh	r3, [r7, #12]

    if (step > (maxDuty - tmp)) {
 8003744:	88fa      	ldrh	r2, [r7, #6]
 8003746:	89b9      	ldrh	r1, [r7, #12]
 8003748:	89fb      	ldrh	r3, [r7, #14]
 800374a:	1acb      	subs	r3, r1, r3
 800374c:	429a      	cmp	r2, r3
 800374e:	dd02      	ble.n	8003756 <increaseMotorSpeed+0x26>
        tmp = maxDuty;
 8003750:	89bb      	ldrh	r3, [r7, #12]
 8003752:	81fb      	strh	r3, [r7, #14]
 8003754:	e003      	b.n	800375e <increaseMotorSpeed+0x2e>
    } else {
        tmp += step;
 8003756:	89fa      	ldrh	r2, [r7, #14]
 8003758:	88fb      	ldrh	r3, [r7, #6]
 800375a:	4413      	add	r3, r2
 800375c:	81fb      	strh	r3, [r7, #14]
    }
    TIM1->CCR1 = tmp;
 800375e:	4a04      	ldr	r2, [pc, #16]	; (8003770 <increaseMotorSpeed+0x40>)
 8003760:	89fb      	ldrh	r3, [r7, #14]
 8003762:	6353      	str	r3, [r2, #52]	; 0x34
}
 8003764:	bf00      	nop
 8003766:	3714      	adds	r7, #20
 8003768:	46bd      	mov	sp, r7
 800376a:	bc80      	pop	{r7}
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	40012c00 	.word	0x40012c00

08003774 <decreaseMotorSpeed>:

void decreaseMotorSpeed(uint16_t step) {
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	4603      	mov	r3, r0
 800377c:	80fb      	strh	r3, [r7, #6]
    uint16_t tmp = TIM1->CCR1;
 800377e:	4b0b      	ldr	r3, [pc, #44]	; (80037ac <decreaseMotorSpeed+0x38>)
 8003780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003782:	81fb      	strh	r3, [r7, #14]

    if (step > tmp) {
 8003784:	88fa      	ldrh	r2, [r7, #6]
 8003786:	89fb      	ldrh	r3, [r7, #14]
 8003788:	429a      	cmp	r2, r3
 800378a:	d902      	bls.n	8003792 <decreaseMotorSpeed+0x1e>
        tmp = 0;
 800378c:	2300      	movs	r3, #0
 800378e:	81fb      	strh	r3, [r7, #14]
 8003790:	e003      	b.n	800379a <decreaseMotorSpeed+0x26>
    } else {
        tmp -= step;
 8003792:	89fa      	ldrh	r2, [r7, #14]
 8003794:	88fb      	ldrh	r3, [r7, #6]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	81fb      	strh	r3, [r7, #14]
    }
    TIM1->CCR1 = tmp;
 800379a:	4a04      	ldr	r2, [pc, #16]	; (80037ac <decreaseMotorSpeed+0x38>)
 800379c:	89fb      	ldrh	r3, [r7, #14]
 800379e:	6353      	str	r3, [r2, #52]	; 0x34
}
 80037a0:	bf00      	nop
 80037a2:	3714      	adds	r7, #20
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bc80      	pop	{r7}
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	40012c00 	.word	0x40012c00

080037b0 <enableMotor>:

void enableMotor() {
 80037b0:	b480      	push	{r7}
 80037b2:	af00      	add	r7, sp, #0
    GPIOB->ODR |= (1 << 12);
 80037b4:	4b07      	ldr	r3, [pc, #28]	; (80037d4 <enableMotor+0x24>)
 80037b6:	695b      	ldr	r3, [r3, #20]
 80037b8:	4a06      	ldr	r2, [pc, #24]	; (80037d4 <enableMotor+0x24>)
 80037ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80037be:	6153      	str	r3, [r2, #20]
    TIM1->CR1 |= TIM_CR1_CEN;
 80037c0:	4b05      	ldr	r3, [pc, #20]	; (80037d8 <enableMotor+0x28>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a04      	ldr	r2, [pc, #16]	; (80037d8 <enableMotor+0x28>)
 80037c6:	f043 0301 	orr.w	r3, r3, #1
 80037ca:	6013      	str	r3, [r2, #0]
}
 80037cc:	bf00      	nop
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bc80      	pop	{r7}
 80037d2:	4770      	bx	lr
 80037d4:	48000400 	.word	0x48000400
 80037d8:	40012c00 	.word	0x40012c00

080037dc <disableMotor>:

void disableMotor() {
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
	TIM1->CR1 &= ~TIM_CR1_CEN;
 80037e0:	4b07      	ldr	r3, [pc, #28]	; (8003800 <disableMotor+0x24>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a06      	ldr	r2, [pc, #24]	; (8003800 <disableMotor+0x24>)
 80037e6:	f023 0301 	bic.w	r3, r3, #1
 80037ea:	6013      	str	r3, [r2, #0]
    GPIOB->ODR &= ~(1 << 12);
 80037ec:	4b05      	ldr	r3, [pc, #20]	; (8003804 <disableMotor+0x28>)
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	4a04      	ldr	r2, [pc, #16]	; (8003804 <disableMotor+0x28>)
 80037f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037f6:	6153      	str	r3, [r2, #20]
}
 80037f8:	bf00      	nop
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bc80      	pop	{r7}
 80037fe:	4770      	bx	lr
 8003800:	40012c00 	.word	0x40012c00
 8003804:	48000400 	.word	0x48000400

08003808 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	4603      	mov	r3, r0
 8003810:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003812:	79fb      	ldrb	r3, [r7, #7]
 8003814:	f003 021f 	and.w	r2, r3, #31
 8003818:	4906      	ldr	r1, [pc, #24]	; (8003834 <NVIC_EnableIRQ+0x2c>)
 800381a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381e:	095b      	lsrs	r3, r3, #5
 8003820:	2001      	movs	r0, #1
 8003822:	fa00 f202 	lsl.w	r2, r0, r2
 8003826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800382a:	bf00      	nop
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	bc80      	pop	{r7}
 8003832:	4770      	bx	lr
 8003834:	e000e100 	.word	0xe000e100

08003838 <soundInitTimers>:

static const uint8_t audioleveltab[AUDIOLEVELS_COUNT] = {
    4, 6, 10, 15, 25, 40, 64, 127
};

static void soundInitTimers() {
 8003838:	b580      	push	{r7, lr}
 800383a:	af00      	add	r7, sp, #0
    RCC->APB1ENR1 |= RCC_APB1ENR1_TIM3EN | RCC_APB1ENR1_TIM6EN;
 800383c:	4b17      	ldr	r3, [pc, #92]	; (800389c <soundInitTimers+0x64>)
 800383e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003840:	4a16      	ldr	r2, [pc, #88]	; (800389c <soundInitTimers+0x64>)
 8003842:	f043 0312 	orr.w	r3, r3, #18
 8003846:	6593      	str	r3, [r2, #88]	; 0x58

    TIM3->CCMR2 = 0x6 << TIM_CCMR2_OC4M_Pos;    //PWM Mode 1
 8003848:	4b15      	ldr	r3, [pc, #84]	; (80038a0 <soundInitTimers+0x68>)
 800384a:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 800384e:	61da      	str	r2, [r3, #28]
    TIM3->CR1 = 0x1 << TIM_CR1_CMS_Pos;
 8003850:	4b13      	ldr	r3, [pc, #76]	; (80038a0 <soundInitTimers+0x68>)
 8003852:	2220      	movs	r2, #32
 8003854:	601a      	str	r2, [r3, #0]
    TIM3->SR = 0;
 8003856:	4b12      	ldr	r3, [pc, #72]	; (80038a0 <soundInitTimers+0x68>)
 8003858:	2200      	movs	r2, #0
 800385a:	611a      	str	r2, [r3, #16]
    TIM3->CCER = TIM_CCER_CC4E;                 //Enable Channel1 output
 800385c:	4b10      	ldr	r3, [pc, #64]	; (80038a0 <soundInitTimers+0x68>)
 800385e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003862:	621a      	str	r2, [r3, #32]
    TIM3->PSC = 0;
 8003864:	4b0e      	ldr	r3, [pc, #56]	; (80038a0 <soundInitTimers+0x68>)
 8003866:	2200      	movs	r2, #0
 8003868:	629a      	str	r2, [r3, #40]	; 0x28
    TIM3->ARR = 0;
 800386a:	4b0d      	ldr	r3, [pc, #52]	; (80038a0 <soundInitTimers+0x68>)
 800386c:	2200      	movs	r2, #0
 800386e:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM3->BDTR |= TIM_BDTR_MOE;
 8003870:	4b0b      	ldr	r3, [pc, #44]	; (80038a0 <soundInitTimers+0x68>)
 8003872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003874:	4a0a      	ldr	r2, [pc, #40]	; (80038a0 <soundInitTimers+0x68>)
 8003876:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800387a:	6453      	str	r3, [r2, #68]	; 0x44

    TIM6->ARR = SystemCoreClock / SOUND_CONTROL_TIMER_FREQ;
 800387c:	4b09      	ldr	r3, [pc, #36]	; (80038a4 <soundInitTimers+0x6c>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a09      	ldr	r2, [pc, #36]	; (80038a8 <soundInitTimers+0x70>)
 8003882:	490a      	ldr	r1, [pc, #40]	; (80038ac <soundInitTimers+0x74>)
 8003884:	fba1 1303 	umull	r1, r3, r1, r3
 8003888:	099b      	lsrs	r3, r3, #6
 800388a:	62d3      	str	r3, [r2, #44]	; 0x2c

    NVIC_EnableIRQ(TIM3_IRQn);
 800388c:	201d      	movs	r0, #29
 800388e:	f7ff ffbb 	bl	8003808 <NVIC_EnableIRQ>
    NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003892:	2036      	movs	r0, #54	; 0x36
 8003894:	f7ff ffb8 	bl	8003808 <NVIC_EnableIRQ>
}
 8003898:	bf00      	nop
 800389a:	bd80      	pop	{r7, pc}
 800389c:	40021000 	.word	0x40021000
 80038a0:	40000400 	.word	0x40000400
 80038a4:	20000048 	.word	0x20000048
 80038a8:	40001000 	.word	0x40001000
 80038ac:	10624dd3 	.word	0x10624dd3

080038b0 <soundSetTimerPeriod>:

static void soundSetTimerPeriod(uint32_t period) {
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
    TIM3->ARR = period;
 80038b8:	4a03      	ldr	r2, [pc, #12]	; (80038c8 <soundSetTimerPeriod+0x18>)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80038be:	bf00      	nop
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bc80      	pop	{r7}
 80038c6:	4770      	bx	lr
 80038c8:	40000400 	.word	0x40000400

080038cc <soundSetTimerDuty>:

static void soundSetTimerDuty(uint32_t duty) {
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
    TIM3->CCR4 = duty;
 80038d4:	4a03      	ldr	r2, [pc, #12]	; (80038e4 <soundSetTimerDuty+0x18>)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	bc80      	pop	{r7}
 80038e2:	4770      	bx	lr
 80038e4:	40000400 	.word	0x40000400

080038e8 <intervalConvert>:

//Convert HCS08 TPM intervals (duty cycle and period) to
//STM32 TIM3 intervals
static uint32_t intervalConvert(uint32_t interval) {
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
    uint32_t sysClkMhz = SystemCoreClock / 1000000;
 80038f0:	4b09      	ldr	r3, [pc, #36]	; (8003918 <intervalConvert+0x30>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a09      	ldr	r2, [pc, #36]	; (800391c <intervalConvert+0x34>)
 80038f6:	fba2 2303 	umull	r2, r3, r2, r3
 80038fa:	0c9b      	lsrs	r3, r3, #18
 80038fc:	60fb      	str	r3, [r7, #12]

    return interval * sysClkMhz / ORIGINAL_FREQUENCY_MHZ;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	fb02 f303 	mul.w	r3, r2, r3
 8003906:	4a06      	ldr	r2, [pc, #24]	; (8003920 <intervalConvert+0x38>)
 8003908:	fba2 2303 	umull	r2, r3, r2, r3
 800390c:	091b      	lsrs	r3, r3, #4
}
 800390e:	4618      	mov	r0, r3
 8003910:	3714      	adds	r7, #20
 8003912:	46bd      	mov	sp, r7
 8003914:	bc80      	pop	{r7}
 8003916:	4770      	bx	lr
 8003918:	20000048 	.word	0x20000048
 800391c:	431bde83 	.word	0x431bde83
 8003920:	cccccccd 	.word	0xcccccccd

08003924 <soundStart>:

static void soundStart() {
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
    toneburst = 0;
 8003928:	4b09      	ldr	r3, [pc, #36]	; (8003950 <soundStart+0x2c>)
 800392a:	2200      	movs	r2, #0
 800392c:	801a      	strh	r2, [r3, #0]
    TIM6->CR1 |= TIM_CR1_CEN;
 800392e:	4b09      	ldr	r3, [pc, #36]	; (8003954 <soundStart+0x30>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a08      	ldr	r2, [pc, #32]	; (8003954 <soundStart+0x30>)
 8003934:	f043 0301 	orr.w	r3, r3, #1
 8003938:	6013      	str	r3, [r2, #0]
    TIM6->DIER |= TIM_DIER_UIE;
 800393a:	4b06      	ldr	r3, [pc, #24]	; (8003954 <soundStart+0x30>)
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	4a05      	ldr	r2, [pc, #20]	; (8003954 <soundStart+0x30>)
 8003940:	f043 0301 	orr.w	r3, r3, #1
 8003944:	60d3      	str	r3, [r2, #12]
}
 8003946:	bf00      	nop
 8003948:	46bd      	mov	sp, r7
 800394a:	bc80      	pop	{r7}
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	20000270 	.word	0x20000270
 8003954:	40001000 	.word	0x40001000

08003958 <soundStop>:

static void soundStop() {
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
    TIM3->CR1 &= ~TIM_CR1_CEN;
 800395c:	4b0f      	ldr	r3, [pc, #60]	; (800399c <soundStop+0x44>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a0e      	ldr	r2, [pc, #56]	; (800399c <soundStop+0x44>)
 8003962:	f023 0301 	bic.w	r3, r3, #1
 8003966:	6013      	str	r3, [r2, #0]
    TIM3->DIER &= ~TIM_DIER_UIE;
 8003968:	4b0c      	ldr	r3, [pc, #48]	; (800399c <soundStop+0x44>)
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	4a0b      	ldr	r2, [pc, #44]	; (800399c <soundStop+0x44>)
 800396e:	f023 0301 	bic.w	r3, r3, #1
 8003972:	60d3      	str	r3, [r2, #12]
    TIM6->CR1 &= ~TIM_CR1_CEN;
 8003974:	4b0a      	ldr	r3, [pc, #40]	; (80039a0 <soundStop+0x48>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a09      	ldr	r2, [pc, #36]	; (80039a0 <soundStop+0x48>)
 800397a:	f023 0301 	bic.w	r3, r3, #1
 800397e:	6013      	str	r3, [r2, #0]
    TIM6->DIER &= ~TIM_DIER_UIE;
 8003980:	4b07      	ldr	r3, [pc, #28]	; (80039a0 <soundStop+0x48>)
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	4a06      	ldr	r2, [pc, #24]	; (80039a0 <soundStop+0x48>)
 8003986:	f023 0301 	bic.w	r3, r3, #1
 800398a:	60d3      	str	r3, [r2, #12]
    currentState = sound_silence;
 800398c:	4b05      	ldr	r3, [pc, #20]	; (80039a4 <soundStop+0x4c>)
 800398e:	2200      	movs	r2, #0
 8003990:	701a      	strb	r2, [r3, #0]
}
 8003992:	bf00      	nop
 8003994:	46bd      	mov	sp, r7
 8003996:	bc80      	pop	{r7}
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	40000400 	.word	0x40000400
 80039a0:	40001000 	.word	0x40001000
 80039a4:	20000285 	.word	0x20000285

080039a8 <soundPlayNote>:

static void soundPlayNote(uint32_t period, uint32_t level) {
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
    soundSetTimerPeriod(intervalConvert(period));
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7ff ff98 	bl	80038e8 <intervalConvert>
 80039b8:	4603      	mov	r3, r0
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7ff ff78 	bl	80038b0 <soundSetTimerPeriod>

    if (level < AUDIOLEVELS_COUNT) {
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	2b07      	cmp	r3, #7
 80039c4:	d81e      	bhi.n	8003a04 <soundPlayNote+0x5c>
        audiohar1 = intervalConvert(audioleveltab[level] *
 80039c6:	4a19      	ldr	r2, [pc, #100]	; (8003a2c <soundPlayNote+0x84>)
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	4413      	add	r3, r2
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	461a      	mov	r2, r3
                                    (period / 512 + 5));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	0a5b      	lsrs	r3, r3, #9
 80039d4:	3305      	adds	r3, #5
        audiohar1 = intervalConvert(audioleveltab[level] *
 80039d6:	fb03 f302 	mul.w	r3, r3, r2
 80039da:	4618      	mov	r0, r3
 80039dc:	f7ff ff84 	bl	80038e8 <intervalConvert>
 80039e0:	4602      	mov	r2, r0
 80039e2:	4b13      	ldr	r3, [pc, #76]	; (8003a30 <soundPlayNote+0x88>)
 80039e4:	601a      	str	r2, [r3, #0]
        audiohar2 = audiohar1 / 8;
 80039e6:	4b12      	ldr	r3, [pc, #72]	; (8003a30 <soundPlayNote+0x88>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	08db      	lsrs	r3, r3, #3
 80039ec:	4a11      	ldr	r2, [pc, #68]	; (8003a34 <soundPlayNote+0x8c>)
 80039ee:	6013      	str	r3, [r2, #0]
        audiohar3 = audiohar2 / 8;
 80039f0:	4b10      	ldr	r3, [pc, #64]	; (8003a34 <soundPlayNote+0x8c>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	08db      	lsrs	r3, r3, #3
 80039f6:	4a10      	ldr	r2, [pc, #64]	; (8003a38 <soundPlayNote+0x90>)
 80039f8:	6013      	str	r3, [r2, #0]
        audiohar4 = audiohar3 / 8;
 80039fa:	4b0f      	ldr	r3, [pc, #60]	; (8003a38 <soundPlayNote+0x90>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	08db      	lsrs	r3, r3, #3
 8003a00:	4a0e      	ldr	r2, [pc, #56]	; (8003a3c <soundPlayNote+0x94>)
 8003a02:	6013      	str	r3, [r2, #0]
    }
    audiophase = 12;
 8003a04:	4b0e      	ldr	r3, [pc, #56]	; (8003a40 <soundPlayNote+0x98>)
 8003a06:	220c      	movs	r2, #12
 8003a08:	701a      	strb	r2, [r3, #0]
    TIM3->CR1 |= TIM_CR1_CEN;
 8003a0a:	4b0e      	ldr	r3, [pc, #56]	; (8003a44 <soundPlayNote+0x9c>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a0d      	ldr	r2, [pc, #52]	; (8003a44 <soundPlayNote+0x9c>)
 8003a10:	f043 0301 	orr.w	r3, r3, #1
 8003a14:	6013      	str	r3, [r2, #0]
    TIM3->DIER |= TIM_DIER_UIE;
 8003a16:	4b0b      	ldr	r3, [pc, #44]	; (8003a44 <soundPlayNote+0x9c>)
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	4a0a      	ldr	r2, [pc, #40]	; (8003a44 <soundPlayNote+0x9c>)
 8003a1c:	f043 0301 	orr.w	r3, r3, #1
 8003a20:	60d3      	str	r3, [r2, #12]
}
 8003a22:	bf00      	nop
 8003a24:	3708      	adds	r7, #8
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	0800bf10 	.word	0x0800bf10
 8003a30:	20000274 	.word	0x20000274
 8003a34:	20000278 	.word	0x20000278
 8003a38:	2000027c 	.word	0x2000027c
 8003a3c:	20000280 	.word	0x20000280
 8003a40:	20000284 	.word	0x20000284
 8003a44:	40000400 	.word	0x40000400

08003a48 <soundStopNote>:

static void soundStopNote() {
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
    TIM3->CR1 &= ~TIM_CR1_CEN;
 8003a4c:	4b07      	ldr	r3, [pc, #28]	; (8003a6c <soundStopNote+0x24>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a06      	ldr	r2, [pc, #24]	; (8003a6c <soundStopNote+0x24>)
 8003a52:	f023 0301 	bic.w	r3, r3, #1
 8003a56:	6013      	str	r3, [r2, #0]
    TIM3->DIER &= ~TIM_DIER_UIE;
 8003a58:	4b04      	ldr	r3, [pc, #16]	; (8003a6c <soundStopNote+0x24>)
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	4a03      	ldr	r2, [pc, #12]	; (8003a6c <soundStopNote+0x24>)
 8003a5e:	f023 0301 	bic.w	r3, r3, #1
 8003a62:	60d3      	str	r3, [r2, #12]
}
 8003a64:	bf00      	nop
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bc80      	pop	{r7}
 8003a6a:	4770      	bx	lr
 8003a6c:	40000400 	.word	0x40000400

08003a70 <initSound>:

void initSound() {
 8003a70:	b580      	push	{r7, lr}
 8003a72:	af00      	add	r7, sp, #0
    toneburst = 0;
 8003a74:	4b06      	ldr	r3, [pc, #24]	; (8003a90 <initSound+0x20>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	801a      	strh	r2, [r3, #0]
    audiolevel = 3;
 8003a7a:	4b06      	ldr	r3, [pc, #24]	; (8003a94 <initSound+0x24>)
 8003a7c:	2203      	movs	r2, #3
 8003a7e:	701a      	strb	r2, [r3, #0]
    currentState = sound_silence;
 8003a80:	4b05      	ldr	r3, [pc, #20]	; (8003a98 <initSound+0x28>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	701a      	strb	r2, [r3, #0]
    soundInitTimers();
 8003a86:	f7ff fed7 	bl	8003838 <soundInitTimers>
}
 8003a8a:	bf00      	nop
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	20000270 	.word	0x20000270
 8003a94:	20000272 	.word	0x20000272
 8003a98:	20000285 	.word	0x20000285

08003a9c <soundSetLevel>:

void soundSetLevel(uint8_t level) {
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	71fb      	strb	r3, [r7, #7]
    if (level < 8) {
 8003aa6:	79fb      	ldrb	r3, [r7, #7]
 8003aa8:	2b07      	cmp	r3, #7
 8003aaa:	d802      	bhi.n	8003ab2 <soundSetLevel+0x16>
        audiolevel = level;
 8003aac:	4a03      	ldr	r2, [pc, #12]	; (8003abc <soundSetLevel+0x20>)
 8003aae:	79fb      	ldrb	r3, [r7, #7]
 8003ab0:	7013      	strb	r3, [r2, #0]
    }
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bc80      	pop	{r7}
 8003aba:	4770      	bx	lr
 8003abc:	20000272 	.word	0x20000272

08003ac0 <soundGetLevel>:

uint8_t soundGetLevel() {
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
    return audiolevel;
 8003ac4:	4b02      	ldr	r3, [pc, #8]	; (8003ad0 <soundGetLevel+0x10>)
 8003ac6:	781b      	ldrb	r3, [r3, #0]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bc80      	pop	{r7}
 8003ace:	4770      	bx	lr
 8003ad0:	20000272 	.word	0x20000272

08003ad4 <soundBeep>:

void soundBeep() {
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
    if (currentState == sound_silence) {
 8003ad8:	4b05      	ldr	r3, [pc, #20]	; (8003af0 <soundBeep+0x1c>)
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d104      	bne.n	8003aea <soundBeep+0x16>
        currentState = sound_beep;
 8003ae0:	4b03      	ldr	r3, [pc, #12]	; (8003af0 <soundBeep+0x1c>)
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	701a      	strb	r2, [r3, #0]
        soundStart();
 8003ae6:	f7ff ff1d 	bl	8003924 <soundStart>
    }
}
 8003aea:	bf00      	nop
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	20000285 	.word	0x20000285

08003af4 <soundKeyBeep>:

void soundKeyBeep() {
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0
    if (currentState == sound_silence) {
 8003af8:	4b05      	ldr	r3, [pc, #20]	; (8003b10 <soundKeyBeep+0x1c>)
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d104      	bne.n	8003b0a <soundKeyBeep+0x16>
        currentState = sound_keybeep;
 8003b00:	4b03      	ldr	r3, [pc, #12]	; (8003b10 <soundKeyBeep+0x1c>)
 8003b02:	2202      	movs	r2, #2
 8003b04:	701a      	strb	r2, [r3, #0]
        soundStart();
 8003b06:	f7ff ff0d 	bl	8003924 <soundStart>
    }
}
 8003b0a:	bf00      	nop
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	20000285 	.word	0x20000285

08003b14 <soundHiAlarm>:
        currentState = sound_alarm;
        soundStart();
    }
}

void soundHiAlarm() {
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
    if (currentState != sound_hialarm) {
 8003b18:	4b05      	ldr	r3, [pc, #20]	; (8003b30 <soundHiAlarm+0x1c>)
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	2b04      	cmp	r3, #4
 8003b1e:	d004      	beq.n	8003b2a <soundHiAlarm+0x16>
        currentState = sound_hialarm;
 8003b20:	4b03      	ldr	r3, [pc, #12]	; (8003b30 <soundHiAlarm+0x1c>)
 8003b22:	2204      	movs	r2, #4
 8003b24:	701a      	strb	r2, [r3, #0]
        soundStart();
 8003b26:	f7ff fefd 	bl	8003924 <soundStart>
    }
}
 8003b2a:	bf00      	nop
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	20000285 	.word	0x20000285

08003b34 <soundStopAlarm>:

void soundStopAlarm() {
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
    switch (currentState) {
 8003b38:	4b05      	ldr	r3, [pc, #20]	; (8003b50 <soundStopAlarm+0x1c>)
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	3b03      	subs	r3, #3
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d802      	bhi.n	8003b48 <soundStopAlarm+0x14>
    case sound_alarm:
    case sound_hialarm:
        soundStop();
 8003b42:	f7ff ff09 	bl	8003958 <soundStop>
        break;
 8003b46:	e000      	b.n	8003b4a <soundStopAlarm+0x16>
    default:
        break;
 8003b48:	bf00      	nop
    }
}
 8003b4a:	bf00      	nop
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	20000285 	.word	0x20000285

08003b54 <beepControlHandler>:

static void beepControlHandler() {
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
    switch (toneburst) {
 8003b58:	4b40      	ldr	r3, [pc, #256]	; (8003c5c <beepControlHandler+0x108>)
 8003b5a:	881b      	ldrh	r3, [r3, #0]
 8003b5c:	f240 1291 	movw	r2, #401	; 0x191
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d04e      	beq.n	8003c02 <beepControlHandler+0xae>
 8003b64:	f5b3 7fc9 	cmp.w	r3, #402	; 0x192
 8003b68:	da0d      	bge.n	8003b86 <beepControlHandler+0x32>
 8003b6a:	2b1f      	cmp	r3, #31
 8003b6c:	d034      	beq.n	8003bd8 <beepControlHandler+0x84>
 8003b6e:	2b1f      	cmp	r3, #31
 8003b70:	dc04      	bgt.n	8003b7c <beepControlHandler+0x28>
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d01e      	beq.n	8003bb4 <beepControlHandler+0x60>
 8003b76:	2b10      	cmp	r3, #16
 8003b78:	d025      	beq.n	8003bc6 <beepControlHandler+0x72>
        break;
    case 800:
        soundStop();
        break;
    }
}
 8003b7a:	e06c      	b.n	8003c56 <beepControlHandler+0x102>
    switch (toneburst) {
 8003b7c:	2be7      	cmp	r3, #231	; 0xe7
 8003b7e:	d034      	beq.n	8003bea <beepControlHandler+0x96>
 8003b80:	2bf6      	cmp	r3, #246	; 0xf6
 8003b82:	d03b      	beq.n	8003bfc <beepControlHandler+0xa8>
}
 8003b84:	e067      	b.n	8003c56 <beepControlHandler+0x102>
    switch (toneburst) {
 8003b86:	f240 2277 	movw	r2, #631	; 0x277
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d054      	beq.n	8003c38 <beepControlHandler+0xe4>
 8003b8e:	f5b3 7f1e 	cmp.w	r3, #632	; 0x278
 8003b92:	da07      	bge.n	8003ba4 <beepControlHandler+0x50>
 8003b94:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 8003b98:	d03c      	beq.n	8003c14 <beepControlHandler+0xc0>
 8003b9a:	f240 12af 	movw	r2, #431	; 0x1af
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d041      	beq.n	8003c26 <beepControlHandler+0xd2>
}
 8003ba2:	e058      	b.n	8003c56 <beepControlHandler+0x102>
    switch (toneburst) {
 8003ba4:	f240 2286 	movw	r2, #646	; 0x286
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d04e      	beq.n	8003c4a <beepControlHandler+0xf6>
 8003bac:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003bb0:	d04e      	beq.n	8003c50 <beepControlHandler+0xfc>
}
 8003bb2:	e050      	b.n	8003c56 <beepControlHandler+0x102>
        soundPlayNote(2485, audiolevel - 4);
 8003bb4:	4b2a      	ldr	r3, [pc, #168]	; (8003c60 <beepControlHandler+0x10c>)
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	3b04      	subs	r3, #4
 8003bba:	4619      	mov	r1, r3
 8003bbc:	f640 10b5 	movw	r0, #2485	; 0x9b5
 8003bc0:	f7ff fef2 	bl	80039a8 <soundPlayNote>
        break;
 8003bc4:	e047      	b.n	8003c56 <beepControlHandler+0x102>
        soundPlayNote(2485, audiolevel - 3);
 8003bc6:	4b26      	ldr	r3, [pc, #152]	; (8003c60 <beepControlHandler+0x10c>)
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	3b03      	subs	r3, #3
 8003bcc:	4619      	mov	r1, r3
 8003bce:	f640 10b5 	movw	r0, #2485	; 0x9b5
 8003bd2:	f7ff fee9 	bl	80039a8 <soundPlayNote>
        break;
 8003bd6:	e03e      	b.n	8003c56 <beepControlHandler+0x102>
        soundPlayNote(2485, audiolevel - 1);
 8003bd8:	4b21      	ldr	r3, [pc, #132]	; (8003c60 <beepControlHandler+0x10c>)
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	4619      	mov	r1, r3
 8003be0:	f640 10b5 	movw	r0, #2485	; 0x9b5
 8003be4:	f7ff fee0 	bl	80039a8 <soundPlayNote>
        break;
 8003be8:	e035      	b.n	8003c56 <beepControlHandler+0x102>
        soundPlayNote(2485, audiolevel - 3);
 8003bea:	4b1d      	ldr	r3, [pc, #116]	; (8003c60 <beepControlHandler+0x10c>)
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	3b03      	subs	r3, #3
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	f640 10b5 	movw	r0, #2485	; 0x9b5
 8003bf6:	f7ff fed7 	bl	80039a8 <soundPlayNote>
        break;
 8003bfa:	e02c      	b.n	8003c56 <beepControlHandler+0x102>
        soundStopNote();
 8003bfc:	f7ff ff24 	bl	8003a48 <soundStopNote>
        break;
 8003c00:	e029      	b.n	8003c56 <beepControlHandler+0x102>
        soundPlayNote(3131, audiolevel - 4);
 8003c02:	4b17      	ldr	r3, [pc, #92]	; (8003c60 <beepControlHandler+0x10c>)
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	3b04      	subs	r3, #4
 8003c08:	4619      	mov	r1, r3
 8003c0a:	f640 403b 	movw	r0, #3131	; 0xc3b
 8003c0e:	f7ff fecb 	bl	80039a8 <soundPlayNote>
        break;
 8003c12:	e020      	b.n	8003c56 <beepControlHandler+0x102>
        soundPlayNote(3131, audiolevel - 3);
 8003c14:	4b12      	ldr	r3, [pc, #72]	; (8003c60 <beepControlHandler+0x10c>)
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	3b03      	subs	r3, #3
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	f640 403b 	movw	r0, #3131	; 0xc3b
 8003c20:	f7ff fec2 	bl	80039a8 <soundPlayNote>
        break;
 8003c24:	e017      	b.n	8003c56 <beepControlHandler+0x102>
        soundPlayNote(3131, audiolevel - 1);
 8003c26:	4b0e      	ldr	r3, [pc, #56]	; (8003c60 <beepControlHandler+0x10c>)
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	f640 403b 	movw	r0, #3131	; 0xc3b
 8003c32:	f7ff feb9 	bl	80039a8 <soundPlayNote>
        break;
 8003c36:	e00e      	b.n	8003c56 <beepControlHandler+0x102>
        soundPlayNote(3131, audiolevel - 3);
 8003c38:	4b09      	ldr	r3, [pc, #36]	; (8003c60 <beepControlHandler+0x10c>)
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	3b03      	subs	r3, #3
 8003c3e:	4619      	mov	r1, r3
 8003c40:	f640 403b 	movw	r0, #3131	; 0xc3b
 8003c44:	f7ff feb0 	bl	80039a8 <soundPlayNote>
        break;
 8003c48:	e005      	b.n	8003c56 <beepControlHandler+0x102>
        soundStopNote();
 8003c4a:	f7ff fefd 	bl	8003a48 <soundStopNote>
        break;
 8003c4e:	e002      	b.n	8003c56 <beepControlHandler+0x102>
        soundStop();
 8003c50:	f7ff fe82 	bl	8003958 <soundStop>
        break;
 8003c54:	bf00      	nop
}
 8003c56:	bf00      	nop
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	20000270 	.word	0x20000270
 8003c60:	20000272 	.word	0x20000272

08003c64 <keybeepControlHandler>:

void keybeepControlHandler() {
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
    switch (toneburst) {
 8003c68:	4b19      	ldr	r3, [pc, #100]	; (8003cd0 <keybeepControlHandler+0x6c>)
 8003c6a:	881b      	ldrh	r3, [r3, #0]
 8003c6c:	2b83      	cmp	r3, #131	; 0x83
 8003c6e:	d01d      	beq.n	8003cac <keybeepControlHandler+0x48>
 8003c70:	2b83      	cmp	r3, #131	; 0x83
 8003c72:	dc04      	bgt.n	8003c7e <keybeepControlHandler+0x1a>
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d007      	beq.n	8003c88 <keybeepControlHandler+0x24>
 8003c78:	2b0b      	cmp	r3, #11
 8003c7a:	d00e      	beq.n	8003c9a <keybeepControlHandler+0x36>
        break;
    case 161:
        soundStop();
        break;
    }
}
 8003c7c:	e025      	b.n	8003cca <keybeepControlHandler+0x66>
    switch (toneburst) {
 8003c7e:	2b8d      	cmp	r3, #141	; 0x8d
 8003c80:	d01d      	beq.n	8003cbe <keybeepControlHandler+0x5a>
 8003c82:	2ba1      	cmp	r3, #161	; 0xa1
 8003c84:	d01e      	beq.n	8003cc4 <keybeepControlHandler+0x60>
}
 8003c86:	e020      	b.n	8003cca <keybeepControlHandler+0x66>
        soundPlayNote(2485, audiolevel - 3);
 8003c88:	4b12      	ldr	r3, [pc, #72]	; (8003cd4 <keybeepControlHandler+0x70>)
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	3b03      	subs	r3, #3
 8003c8e:	4619      	mov	r1, r3
 8003c90:	f640 10b5 	movw	r0, #2485	; 0x9b5
 8003c94:	f7ff fe88 	bl	80039a8 <soundPlayNote>
        break;
 8003c98:	e017      	b.n	8003cca <keybeepControlHandler+0x66>
        soundPlayNote(2485, audiolevel - 1);
 8003c9a:	4b0e      	ldr	r3, [pc, #56]	; (8003cd4 <keybeepControlHandler+0x70>)
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	f640 10b5 	movw	r0, #2485	; 0x9b5
 8003ca6:	f7ff fe7f 	bl	80039a8 <soundPlayNote>
        break;
 8003caa:	e00e      	b.n	8003cca <keybeepControlHandler+0x66>
        soundPlayNote(2485, audiolevel - 3);
 8003cac:	4b09      	ldr	r3, [pc, #36]	; (8003cd4 <keybeepControlHandler+0x70>)
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	3b03      	subs	r3, #3
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	f640 10b5 	movw	r0, #2485	; 0x9b5
 8003cb8:	f7ff fe76 	bl	80039a8 <soundPlayNote>
        break;
 8003cbc:	e005      	b.n	8003cca <keybeepControlHandler+0x66>
        soundStopNote();
 8003cbe:	f7ff fec3 	bl	8003a48 <soundStopNote>
        break;
 8003cc2:	e002      	b.n	8003cca <keybeepControlHandler+0x66>
        soundStop();
 8003cc4:	f7ff fe48 	bl	8003958 <soundStop>
        break;
 8003cc8:	bf00      	nop
}
 8003cca:	bf00      	nop
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	20000270 	.word	0x20000270
 8003cd4:	20000272 	.word	0x20000272

08003cd8 <hialarmControlHandler>:

void hialarmControlHandler() {
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
    uint16_t toneburst_local;

    if (toneburst < 2000) {
 8003cde:	4bb2      	ldr	r3, [pc, #712]	; (8003fa8 <hialarmControlHandler+0x2d0>)
 8003ce0:	881b      	ldrh	r3, [r3, #0]
 8003ce2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003ce6:	d203      	bcs.n	8003cf0 <hialarmControlHandler+0x18>
        toneburst_local = toneburst;
 8003ce8:	4baf      	ldr	r3, [pc, #700]	; (8003fa8 <hialarmControlHandler+0x2d0>)
 8003cea:	881b      	ldrh	r3, [r3, #0]
 8003cec:	80fb      	strh	r3, [r7, #6]
 8003cee:	e004      	b.n	8003cfa <hialarmControlHandler+0x22>
    } else {
        toneburst_local = toneburst - 2000;
 8003cf0:	4bad      	ldr	r3, [pc, #692]	; (8003fa8 <hialarmControlHandler+0x2d0>)
 8003cf2:	881b      	ldrh	r3, [r3, #0]
 8003cf4:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8003cf8:	80fb      	strh	r3, [r7, #6]
    }

    switch (toneburst_local) {
 8003cfa:	88fb      	ldrh	r3, [r7, #6]
 8003cfc:	f240 2209 	movw	r2, #521	; 0x209
 8003d00:	4293      	cmp	r3, r2
 8003d02:	f000 80e9 	beq.w	8003ed8 <hialarmControlHandler+0x200>
 8003d06:	f240 2209 	movw	r2, #521	; 0x209
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	dc38      	bgt.n	8003d80 <hialarmControlHandler+0xa8>
 8003d0e:	2bfb      	cmp	r3, #251	; 0xfb
 8003d10:	f000 80a9 	beq.w	8003e66 <hialarmControlHandler+0x18e>
 8003d14:	2bfb      	cmp	r3, #251	; 0xfb
 8003d16:	dc10      	bgt.n	8003d3a <hialarmControlHandler+0x62>
 8003d18:	2b14      	cmp	r3, #20
 8003d1a:	f000 808f 	beq.w	8003e3c <hialarmControlHandler+0x164>
 8003d1e:	2b14      	cmp	r3, #20
 8003d20:	dc04      	bgt.n	8003d2c <hialarmControlHandler+0x54>
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d078      	beq.n	8003e18 <hialarmControlHandler+0x140>
 8003d26:	2b0a      	cmp	r3, #10
 8003d28:	d07f      	beq.n	8003e2a <hialarmControlHandler+0x152>
        break;
    case    1441:
        soundStopNote();
        break;
    }
}
 8003d2a:	e138      	b.n	8003f9e <hialarmControlHandler+0x2c6>
    switch (toneburst_local) {
 8003d2c:	2bb5      	cmp	r3, #181	; 0xb5
 8003d2e:	f000 808e 	beq.w	8003e4e <hialarmControlHandler+0x176>
 8003d32:	2bbf      	cmp	r3, #191	; 0xbf
 8003d34:	f000 8094 	beq.w	8003e60 <hialarmControlHandler+0x188>
}
 8003d38:	e131      	b.n	8003f9e <hialarmControlHandler+0x2c6>
    switch (toneburst_local) {
 8003d3a:	f240 12af 	movw	r2, #431	; 0x1af
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	f000 80ac 	beq.w	8003e9c <hialarmControlHandler+0x1c4>
 8003d44:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8003d48:	da0a      	bge.n	8003d60 <hialarmControlHandler+0x88>
 8003d4a:	f240 1205 	movw	r2, #261	; 0x105
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	f000 8092 	beq.w	8003e78 <hialarmControlHandler+0x1a0>
 8003d54:	f240 120f 	movw	r2, #271	; 0x10f
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	f000 8096 	beq.w	8003e8a <hialarmControlHandler+0x1b2>
}
 8003d5e:	e11e      	b.n	8003f9e <hialarmControlHandler+0x2c6>
    switch (toneburst_local) {
 8003d60:	f240 12f5 	movw	r2, #501	; 0x1f5
 8003d64:	4293      	cmp	r3, r2
 8003d66:	f000 80a5 	beq.w	8003eb4 <hialarmControlHandler+0x1dc>
 8003d6a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	f000 80a9 	beq.w	8003ec6 <hialarmControlHandler+0x1ee>
 8003d74:	f240 12b9 	movw	r2, #441	; 0x1b9
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	f000 8098 	beq.w	8003eae <hialarmControlHandler+0x1d6>
}
 8003d7e:	e10e      	b.n	8003f9e <hialarmControlHandler+0x2c6>
    switch (toneburst_local) {
 8003d80:	f240 429d 	movw	r2, #1181	; 0x49d
 8003d84:	4293      	cmp	r3, r2
 8003d86:	f000 80d7 	beq.w	8003f38 <hialarmControlHandler+0x260>
 8003d8a:	f240 429d 	movw	r2, #1181	; 0x49d
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	dc1e      	bgt.n	8003dd0 <hialarmControlHandler+0xf8>
 8003d92:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8003d96:	4293      	cmp	r3, r2
 8003d98:	f000 80b3 	beq.w	8003f02 <hialarmControlHandler+0x22a>
 8003d9c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8003da0:	4293      	cmp	r3, r2
 8003da2:	dc0a      	bgt.n	8003dba <hialarmControlHandler+0xe2>
 8003da4:	f240 22a9 	movw	r2, #681	; 0x2a9
 8003da8:	4293      	cmp	r3, r2
 8003daa:	f000 809e 	beq.w	8003eea <hialarmControlHandler+0x212>
 8003dae:	f240 22b3 	movw	r2, #691	; 0x2b3
 8003db2:	4293      	cmp	r3, r2
 8003db4:	f000 80a2 	beq.w	8003efc <hialarmControlHandler+0x224>
}
 8003db8:	e0f1      	b.n	8003f9e <hialarmControlHandler+0x2c6>
    switch (toneburst_local) {
 8003dba:	f240 32f3 	movw	r2, #1011	; 0x3f3
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	f000 80a8 	beq.w	8003f14 <hialarmControlHandler+0x23c>
 8003dc4:	f240 32fd 	movw	r2, #1021	; 0x3fd
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	f000 80ac 	beq.w	8003f26 <hialarmControlHandler+0x24e>
}
 8003dce:	e0e6      	b.n	8003f9e <hialarmControlHandler+0x2c6>
    switch (toneburst_local) {
 8003dd0:	f240 42ec 	movw	r2, #1260	; 0x4ec
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	f000 80c4 	beq.w	8003f62 <hialarmControlHandler+0x28a>
 8003dda:	f240 42ec 	movw	r2, #1260	; 0x4ec
 8003dde:	4293      	cmp	r3, r2
 8003de0:	dc0a      	bgt.n	8003df8 <hialarmControlHandler+0x120>
 8003de2:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8003de6:	4293      	cmp	r3, r2
 8003de8:	f000 80af 	beq.w	8003f4a <hialarmControlHandler+0x272>
 8003dec:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8003df0:	4293      	cmp	r3, r2
 8003df2:	f000 80ad 	beq.w	8003f50 <hialarmControlHandler+0x278>
}
 8003df6:	e0d2      	b.n	8003f9e <hialarmControlHandler+0x2c6>
    switch (toneburst_local) {
 8003df8:	f240 5297 	movw	r2, #1431	; 0x597
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	f000 80c2 	beq.w	8003f86 <hialarmControlHandler+0x2ae>
 8003e02:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8003e06:	4293      	cmp	r3, r2
 8003e08:	f000 80c6 	beq.w	8003f98 <hialarmControlHandler+0x2c0>
 8003e0c:	f240 42f6 	movw	r2, #1270	; 0x4f6
 8003e10:	4293      	cmp	r3, r2
 8003e12:	f000 80af 	beq.w	8003f74 <hialarmControlHandler+0x29c>
}
 8003e16:	e0c2      	b.n	8003f9e <hialarmControlHandler+0x2c6>
        soundPlayNote(1566, audiolevel - 4);
 8003e18:	4b64      	ldr	r3, [pc, #400]	; (8003fac <hialarmControlHandler+0x2d4>)
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	3b04      	subs	r3, #4
 8003e1e:	4619      	mov	r1, r3
 8003e20:	f240 601e 	movw	r0, #1566	; 0x61e
 8003e24:	f7ff fdc0 	bl	80039a8 <soundPlayNote>
        break;
 8003e28:	e0b9      	b.n	8003f9e <hialarmControlHandler+0x2c6>
        soundPlayNote(1566, audiolevel - 3);
 8003e2a:	4b60      	ldr	r3, [pc, #384]	; (8003fac <hialarmControlHandler+0x2d4>)
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	3b03      	subs	r3, #3
 8003e30:	4619      	mov	r1, r3
 8003e32:	f240 601e 	movw	r0, #1566	; 0x61e
 8003e36:	f7ff fdb7 	bl	80039a8 <soundPlayNote>
        break;
 8003e3a:	e0b0      	b.n	8003f9e <hialarmControlHandler+0x2c6>
        soundPlayNote(1566, audiolevel - 1);
 8003e3c:	4b5b      	ldr	r3, [pc, #364]	; (8003fac <hialarmControlHandler+0x2d4>)
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	3b01      	subs	r3, #1
 8003e42:	4619      	mov	r1, r3
 8003e44:	f240 601e 	movw	r0, #1566	; 0x61e
 8003e48:	f7ff fdae 	bl	80039a8 <soundPlayNote>
        break;
 8003e4c:	e0a7      	b.n	8003f9e <hialarmControlHandler+0x2c6>
        soundPlayNote(1566, audiolevel - 3);
 8003e4e:	4b57      	ldr	r3, [pc, #348]	; (8003fac <hialarmControlHandler+0x2d4>)
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	3b03      	subs	r3, #3
 8003e54:	4619      	mov	r1, r3
 8003e56:	f240 601e 	movw	r0, #1566	; 0x61e
 8003e5a:	f7ff fda5 	bl	80039a8 <soundPlayNote>
        break;
 8003e5e:	e09e      	b.n	8003f9e <hialarmControlHandler+0x2c6>
        soundStopNote();
 8003e60:	f7ff fdf2 	bl	8003a48 <soundStopNote>
        break;
 8003e64:	e09b      	b.n	8003f9e <hialarmControlHandler+0x2c6>
        soundPlayNote(2790, audiolevel - 4);
 8003e66:	4b51      	ldr	r3, [pc, #324]	; (8003fac <hialarmControlHandler+0x2d4>)
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	3b04      	subs	r3, #4
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	f640 20e6 	movw	r0, #2790	; 0xae6
 8003e72:	f7ff fd99 	bl	80039a8 <soundPlayNote>
        break;
 8003e76:	e092      	b.n	8003f9e <hialarmControlHandler+0x2c6>
        soundPlayNote(2790, audiolevel - 3);
 8003e78:	4b4c      	ldr	r3, [pc, #304]	; (8003fac <hialarmControlHandler+0x2d4>)
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	3b03      	subs	r3, #3
 8003e7e:	4619      	mov	r1, r3
 8003e80:	f640 20e6 	movw	r0, #2790	; 0xae6
 8003e84:	f7ff fd90 	bl	80039a8 <soundPlayNote>
        break;
 8003e88:	e089      	b.n	8003f9e <hialarmControlHandler+0x2c6>
        soundPlayNote(2790, audiolevel - 1);
 8003e8a:	4b48      	ldr	r3, [pc, #288]	; (8003fac <hialarmControlHandler+0x2d4>)
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	4619      	mov	r1, r3
 8003e92:	f640 20e6 	movw	r0, #2790	; 0xae6
 8003e96:	f7ff fd87 	bl	80039a8 <soundPlayNote>
        break;
 8003e9a:	e080      	b.n	8003f9e <hialarmControlHandler+0x2c6>
        soundPlayNote(2790, audiolevel - 3);
 8003e9c:	4b43      	ldr	r3, [pc, #268]	; (8003fac <hialarmControlHandler+0x2d4>)
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	3b03      	subs	r3, #3
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	f640 20e6 	movw	r0, #2790	; 0xae6
 8003ea8:	f7ff fd7e 	bl	80039a8 <soundPlayNote>
        break;
 8003eac:	e077      	b.n	8003f9e <hialarmControlHandler+0x2c6>
        soundStopNote();
 8003eae:	f7ff fdcb 	bl	8003a48 <soundStopNote>
        break;
 8003eb2:	e074      	b.n	8003f9e <hialarmControlHandler+0x2c6>
        soundPlayNote(2214, audiolevel - 4);
 8003eb4:	4b3d      	ldr	r3, [pc, #244]	; (8003fac <hialarmControlHandler+0x2d4>)
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	3b04      	subs	r3, #4
 8003eba:	4619      	mov	r1, r3
 8003ebc:	f640 00a6 	movw	r0, #2214	; 0x8a6
 8003ec0:	f7ff fd72 	bl	80039a8 <soundPlayNote>
        break;
 8003ec4:	e06b      	b.n	8003f9e <hialarmControlHandler+0x2c6>
        soundPlayNote(2214, audiolevel - 3);
 8003ec6:	4b39      	ldr	r3, [pc, #228]	; (8003fac <hialarmControlHandler+0x2d4>)
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	3b03      	subs	r3, #3
 8003ecc:	4619      	mov	r1, r3
 8003ece:	f640 00a6 	movw	r0, #2214	; 0x8a6
 8003ed2:	f7ff fd69 	bl	80039a8 <soundPlayNote>
        break;
 8003ed6:	e062      	b.n	8003f9e <hialarmControlHandler+0x2c6>
        soundPlayNote(2214, audiolevel - 1);
 8003ed8:	4b34      	ldr	r3, [pc, #208]	; (8003fac <hialarmControlHandler+0x2d4>)
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	3b01      	subs	r3, #1
 8003ede:	4619      	mov	r1, r3
 8003ee0:	f640 00a6 	movw	r0, #2214	; 0x8a6
 8003ee4:	f7ff fd60 	bl	80039a8 <soundPlayNote>
        break;
 8003ee8:	e059      	b.n	8003f9e <hialarmControlHandler+0x2c6>
        soundPlayNote(2214, audiolevel - 3);
 8003eea:	4b30      	ldr	r3, [pc, #192]	; (8003fac <hialarmControlHandler+0x2d4>)
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	3b03      	subs	r3, #3
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	f640 00a6 	movw	r0, #2214	; 0x8a6
 8003ef6:	f7ff fd57 	bl	80039a8 <soundPlayNote>
        break;
 8003efa:	e050      	b.n	8003f9e <hialarmControlHandler+0x2c6>
        soundStopNote();
 8003efc:	f7ff fda4 	bl	8003a48 <soundStopNote>
        break;
 8003f00:	e04d      	b.n	8003f9e <hialarmControlHandler+0x2c6>
        soundPlayNote(1566, audiolevel - 4);
 8003f02:	4b2a      	ldr	r3, [pc, #168]	; (8003fac <hialarmControlHandler+0x2d4>)
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	3b04      	subs	r3, #4
 8003f08:	4619      	mov	r1, r3
 8003f0a:	f240 601e 	movw	r0, #1566	; 0x61e
 8003f0e:	f7ff fd4b 	bl	80039a8 <soundPlayNote>
        break;
 8003f12:	e044      	b.n	8003f9e <hialarmControlHandler+0x2c6>
        soundPlayNote(1566, audiolevel - 3);
 8003f14:	4b25      	ldr	r3, [pc, #148]	; (8003fac <hialarmControlHandler+0x2d4>)
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	3b03      	subs	r3, #3
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	f240 601e 	movw	r0, #1566	; 0x61e
 8003f20:	f7ff fd42 	bl	80039a8 <soundPlayNote>
        break;
 8003f24:	e03b      	b.n	8003f9e <hialarmControlHandler+0x2c6>
        soundPlayNote(1566, audiolevel - 1);
 8003f26:	4b21      	ldr	r3, [pc, #132]	; (8003fac <hialarmControlHandler+0x2d4>)
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	f240 601e 	movw	r0, #1566	; 0x61e
 8003f32:	f7ff fd39 	bl	80039a8 <soundPlayNote>
        break;
 8003f36:	e032      	b.n	8003f9e <hialarmControlHandler+0x2c6>
        soundPlayNote(1566, audiolevel - 3);
 8003f38:	4b1c      	ldr	r3, [pc, #112]	; (8003fac <hialarmControlHandler+0x2d4>)
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	3b03      	subs	r3, #3
 8003f3e:	4619      	mov	r1, r3
 8003f40:	f240 601e 	movw	r0, #1566	; 0x61e
 8003f44:	f7ff fd30 	bl	80039a8 <soundPlayNote>
        break;
 8003f48:	e029      	b.n	8003f9e <hialarmControlHandler+0x2c6>
        soundStopNote();
 8003f4a:	f7ff fd7d 	bl	8003a48 <soundStopNote>
        break;
 8003f4e:	e026      	b.n	8003f9e <hialarmControlHandler+0x2c6>
        soundPlayNote(2790, audiolevel - 4);
 8003f50:	4b16      	ldr	r3, [pc, #88]	; (8003fac <hialarmControlHandler+0x2d4>)
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	3b04      	subs	r3, #4
 8003f56:	4619      	mov	r1, r3
 8003f58:	f640 20e6 	movw	r0, #2790	; 0xae6
 8003f5c:	f7ff fd24 	bl	80039a8 <soundPlayNote>
        break;
 8003f60:	e01d      	b.n	8003f9e <hialarmControlHandler+0x2c6>
        soundPlayNote(2790, audiolevel - 3);
 8003f62:	4b12      	ldr	r3, [pc, #72]	; (8003fac <hialarmControlHandler+0x2d4>)
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	3b03      	subs	r3, #3
 8003f68:	4619      	mov	r1, r3
 8003f6a:	f640 20e6 	movw	r0, #2790	; 0xae6
 8003f6e:	f7ff fd1b 	bl	80039a8 <soundPlayNote>
        break;
 8003f72:	e014      	b.n	8003f9e <hialarmControlHandler+0x2c6>
        soundPlayNote(2790, audiolevel - 1);
 8003f74:	4b0d      	ldr	r3, [pc, #52]	; (8003fac <hialarmControlHandler+0x2d4>)
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	f640 20e6 	movw	r0, #2790	; 0xae6
 8003f80:	f7ff fd12 	bl	80039a8 <soundPlayNote>
        break;
 8003f84:	e00b      	b.n	8003f9e <hialarmControlHandler+0x2c6>
        soundPlayNote(2790, audiolevel - 3);
 8003f86:	4b09      	ldr	r3, [pc, #36]	; (8003fac <hialarmControlHandler+0x2d4>)
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	3b03      	subs	r3, #3
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	f640 20e6 	movw	r0, #2790	; 0xae6
 8003f92:	f7ff fd09 	bl	80039a8 <soundPlayNote>
        break;
 8003f96:	e002      	b.n	8003f9e <hialarmControlHandler+0x2c6>
        soundStopNote();
 8003f98:	f7ff fd56 	bl	8003a48 <soundStopNote>
        break;
 8003f9c:	bf00      	nop
}
 8003f9e:	bf00      	nop
 8003fa0:	3708      	adds	r7, #8
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	20000270 	.word	0x20000270
 8003fac:	20000272 	.word	0x20000272

08003fb0 <soundControlHandler>:

//Sound playback control
//Called by TIM6 interrupt handler
void soundControlHandler() {
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	af00      	add	r7, sp, #0
    switch (currentState) {
 8003fb4:	4b11      	ldr	r3, [pc, #68]	; (8003ffc <soundControlHandler+0x4c>)
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d006      	beq.n	8003fca <soundControlHandler+0x1a>
 8003fbc:	2b04      	cmp	r3, #4
 8003fbe:	d007      	beq.n	8003fd0 <soundControlHandler+0x20>
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d108      	bne.n	8003fd6 <soundControlHandler+0x26>
    case sound_beep:
        beepControlHandler();
 8003fc4:	f7ff fdc6 	bl	8003b54 <beepControlHandler>
        break;
 8003fc8:	e007      	b.n	8003fda <soundControlHandler+0x2a>
    case sound_keybeep:
        keybeepControlHandler();
 8003fca:	f7ff fe4b 	bl	8003c64 <keybeepControlHandler>
        break;
 8003fce:	e004      	b.n	8003fda <soundControlHandler+0x2a>
    case sound_hialarm:
        hialarmControlHandler();
 8003fd0:	f7ff fe82 	bl	8003cd8 <hialarmControlHandler>
        break;
 8003fd4:	e001      	b.n	8003fda <soundControlHandler+0x2a>
    default:
        soundStop();
 8003fd6:	f7ff fcbf 	bl	8003958 <soundStop>
    }

    toneburst++;
 8003fda:	4b09      	ldr	r3, [pc, #36]	; (8004000 <soundControlHandler+0x50>)
 8003fdc:	881b      	ldrh	r3, [r3, #0]
 8003fde:	3301      	adds	r3, #1
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	4b07      	ldr	r3, [pc, #28]	; (8004000 <soundControlHandler+0x50>)
 8003fe4:	801a      	strh	r2, [r3, #0]

    if (toneburst > 10000) {
 8003fe6:	4b06      	ldr	r3, [pc, #24]	; (8004000 <soundControlHandler+0x50>)
 8003fe8:	881b      	ldrh	r3, [r3, #0]
 8003fea:	f242 7210 	movw	r2, #10000	; 0x2710
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d902      	bls.n	8003ff8 <soundControlHandler+0x48>
        toneburst = 0;
 8003ff2:	4b03      	ldr	r3, [pc, #12]	; (8004000 <soundControlHandler+0x50>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	801a      	strh	r2, [r3, #0]
    }
}
 8003ff8:	bf00      	nop
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	20000285 	.word	0x20000285
 8004000:	20000270 	.word	0x20000270

08004004 <soundWaveformHandler>:

//Waveform control
//Called by TIM3 interrupt handler
void soundWaveformHandler() {
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
    uint32_t nextDutyCycle = 0;
 800400a:	2300      	movs	r3, #0
 800400c:	607b      	str	r3, [r7, #4]

    if (audiophase > 0) {
 800400e:	4b16      	ldr	r3, [pc, #88]	; (8004068 <soundWaveformHandler+0x64>)
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d006      	beq.n	8004024 <soundWaveformHandler+0x20>
        audiophase--;
 8004016:	4b14      	ldr	r3, [pc, #80]	; (8004068 <soundWaveformHandler+0x64>)
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	3b01      	subs	r3, #1
 800401c:	b2da      	uxtb	r2, r3
 800401e:	4b12      	ldr	r3, [pc, #72]	; (8004068 <soundWaveformHandler+0x64>)
 8004020:	701a      	strb	r2, [r3, #0]
 8004022:	e002      	b.n	800402a <soundWaveformHandler+0x26>
    } else {
        audiophase = 12;
 8004024:	4b10      	ldr	r3, [pc, #64]	; (8004068 <soundWaveformHandler+0x64>)
 8004026:	220c      	movs	r2, #12
 8004028:	701a      	strb	r2, [r3, #0]
    }

    for (int i = 0; i < WAVEFORM_NUM_STEPS; i++) {
 800402a:	2300      	movs	r3, #0
 800402c:	603b      	str	r3, [r7, #0]
 800402e:	e011      	b.n	8004054 <soundWaveformHandler+0x50>
        if (audiophase == waveformSteps[i].phase) {
 8004030:	4a0e      	ldr	r2, [pc, #56]	; (800406c <soundWaveformHandler+0x68>)
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8004038:	4b0b      	ldr	r3, [pc, #44]	; (8004068 <soundWaveformHandler+0x64>)
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	429a      	cmp	r2, r3
 800403e:	d106      	bne.n	800404e <soundWaveformHandler+0x4a>
            nextDutyCycle = *waveformSteps[i].duty;
 8004040:	4a0a      	ldr	r2, [pc, #40]	; (800406c <soundWaveformHandler+0x68>)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	00db      	lsls	r3, r3, #3
 8004046:	4413      	add	r3, r2
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < WAVEFORM_NUM_STEPS; i++) {
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	3301      	adds	r3, #1
 8004052:	603b      	str	r3, [r7, #0]
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	2b05      	cmp	r3, #5
 8004058:	ddea      	ble.n	8004030 <soundWaveformHandler+0x2c>
        }
    }
    soundSetTimerDuty(nextDutyCycle);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7ff fc36 	bl	80038cc <soundSetTimerDuty>
}
 8004060:	bf00      	nop
 8004062:	3708      	adds	r7, #8
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	20000284 	.word	0x20000284
 800406c:	0800bee0 	.word	0x0800bee0

08004070 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	4603      	mov	r3, r0
 8004078:	6039      	str	r1, [r7, #0]
 800407a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800407c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004080:	2b00      	cmp	r3, #0
 8004082:	da0b      	bge.n	800409c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	b2da      	uxtb	r2, r3
 8004088:	490c      	ldr	r1, [pc, #48]	; (80040bc <NVIC_SetPriority+0x4c>)
 800408a:	79fb      	ldrb	r3, [r7, #7]
 800408c:	f003 030f 	and.w	r3, r3, #15
 8004090:	3b04      	subs	r3, #4
 8004092:	0112      	lsls	r2, r2, #4
 8004094:	b2d2      	uxtb	r2, r2
 8004096:	440b      	add	r3, r1
 8004098:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800409a:	e009      	b.n	80040b0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	b2da      	uxtb	r2, r3
 80040a0:	4907      	ldr	r1, [pc, #28]	; (80040c0 <NVIC_SetPriority+0x50>)
 80040a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040a6:	0112      	lsls	r2, r2, #4
 80040a8:	b2d2      	uxtb	r2, r2
 80040aa:	440b      	add	r3, r1
 80040ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bc80      	pop	{r7}
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	e000ed00 	.word	0xe000ed00
 80040c0:	e000e100 	.word	0xe000e100

080040c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	3b01      	subs	r3, #1
 80040d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040d4:	d301      	bcc.n	80040da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040d6:	2301      	movs	r3, #1
 80040d8:	e00f      	b.n	80040fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040da:	4a0a      	ldr	r2, [pc, #40]	; (8004104 <SysTick_Config+0x40>)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	3b01      	subs	r3, #1
 80040e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040e2:	210f      	movs	r1, #15
 80040e4:	f04f 30ff 	mov.w	r0, #4294967295
 80040e8:	f7ff ffc2 	bl	8004070 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040ec:	4b05      	ldr	r3, [pc, #20]	; (8004104 <SysTick_Config+0x40>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040f2:	4b04      	ldr	r3, [pc, #16]	; (8004104 <SysTick_Config+0x40>)
 80040f4:	2207      	movs	r2, #7
 80040f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	e000e010 	.word	0xe000e010

08004108 <timerInit>:
}timer_t;

static timer_t timer_data;

void timerInit(uint32_t resolution, timerHandler_t handler)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
	timer_data.resolution = 0;
 8004112:	4b0d      	ldr	r3, [pc, #52]	; (8004148 <timerInit+0x40>)
 8004114:	2200      	movs	r2, #0
 8004116:	609a      	str	r2, [r3, #8]
	timer_data.ticks = 0;
 8004118:	4b0b      	ldr	r3, [pc, #44]	; (8004148 <timerInit+0x40>)
 800411a:	2200      	movs	r2, #0
 800411c:	601a      	str	r2, [r3, #0]
	timer_data.lastAskTime = 0;
 800411e:	4b0a      	ldr	r3, [pc, #40]	; (8004148 <timerInit+0x40>)
 8004120:	2200      	movs	r2, #0
 8004122:	605a      	str	r2, [r3, #4]
	timer_data.state = tsActive;
 8004124:	4b08      	ldr	r3, [pc, #32]	; (8004148 <timerInit+0x40>)
 8004126:	2201      	movs	r2, #1
 8004128:	731a      	strb	r2, [r3, #12]
	timer_data.handler = handler;
 800412a:	4a07      	ldr	r2, [pc, #28]	; (8004148 <timerInit+0x40>)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	6113      	str	r3, [r2, #16]
	SysTick_Config(SystemCoreClock/resolution);
 8004130:	4b06      	ldr	r3, [pc, #24]	; (800414c <timerInit+0x44>)
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	fbb2 f3f3 	udiv	r3, r2, r3
 800413a:	4618      	mov	r0, r3
 800413c:	f7ff ffc2 	bl	80040c4 <SysTick_Config>
}
 8004140:	bf00      	nop
 8004142:	3708      	adds	r7, #8
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	20000288 	.word	0x20000288
 800414c:	20000048 	.word	0x20000048

08004150 <timerElapseSinceLastTime>:

/**
 * Функция требует использования только при внешнем отключении прерываний!
*/
TIME_T timerElapseSinceLastTime(void)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
	TIME_T result = timer_data.ticks - timer_data.lastAskTime;
 8004156:	4b08      	ldr	r3, [pc, #32]	; (8004178 <timerElapseSinceLastTime+0x28>)
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	4b07      	ldr	r3, [pc, #28]	; (8004178 <timerElapseSinceLastTime+0x28>)
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	607b      	str	r3, [r7, #4]
	timer_data.lastAskTime = timer_data.ticks;
 8004162:	4b05      	ldr	r3, [pc, #20]	; (8004178 <timerElapseSinceLastTime+0x28>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a04      	ldr	r2, [pc, #16]	; (8004178 <timerElapseSinceLastTime+0x28>)
 8004168:	6053      	str	r3, [r2, #4]
	return result;
 800416a:	687b      	ldr	r3, [r7, #4]
}
 800416c:	4618      	mov	r0, r3
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	bc80      	pop	{r7}
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	20000288 	.word	0x20000288

0800417c <SysTick_Handler>:


void SysTick_Handler(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	af00      	add	r7, sp, #0
	// Check operation. Is it atomic?
	timer_data.ticks++;
 8004180:	4b04      	ldr	r3, [pc, #16]	; (8004194 <SysTick_Handler+0x18>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	3301      	adds	r3, #1
 8004186:	4a03      	ldr	r2, [pc, #12]	; (8004194 <SysTick_Handler+0x18>)
 8004188:	6013      	str	r3, [r2, #0]
	timer_data.handler();
 800418a:	4b02      	ldr	r3, [pc, #8]	; (8004194 <SysTick_Handler+0x18>)
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	4798      	blx	r3
}
 8004190:	bf00      	nop
 8004192:	bd80      	pop	{r7, pc}
 8004194:	20000288 	.word	0x20000288

08004198 <tickHook>:
static task_s tasks[MAX_TASKS];
static bool haveTaskToDo; //TODO search usage of this variable

// TODO Need to implement or do it weak
void tickHook(void)
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
}
 800419c:	bf00      	nop
 800419e:	46bd      	mov	sp, r7
 80041a0:	bc80      	pop	{r7}
 80041a2:	4770      	bx	lr

080041a4 <osInit>:

static timerElapsedTime_t timerElapseSinceLastTimeFunction = NULL;

void osInit(uint32_t resolution, timerInit_t timerInitialization, timerElapsedTime_t timerElapsedTime)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b086      	sub	sp, #24
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
	  uint32_t i;
	  for(i = 0; i < MAX_TASKS; ++i)
 80041b0:	2300      	movs	r3, #0
 80041b2:	617b      	str	r3, [r7, #20]
 80041b4:	e009      	b.n	80041ca <osInit+0x26>
	  {
	    tasks[i].state = tskFree;
 80041b6:	4a0c      	ldr	r2, [pc, #48]	; (80041e8 <osInit+0x44>)
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	011b      	lsls	r3, r3, #4
 80041bc:	4413      	add	r3, r2
 80041be:	330c      	adds	r3, #12
 80041c0:	2200      	movs	r2, #0
 80041c2:	701a      	strb	r2, [r3, #0]
	  for(i = 0; i < MAX_TASKS; ++i)
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	3301      	adds	r3, #1
 80041c8:	617b      	str	r3, [r7, #20]
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	2b13      	cmp	r3, #19
 80041ce:	d9f2      	bls.n	80041b6 <osInit+0x12>
	  }

	timerInitialization(resolution, tickHook);
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	4906      	ldr	r1, [pc, #24]	; (80041ec <osInit+0x48>)
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	4798      	blx	r3
	timerElapseSinceLastTimeFunction = timerElapsedTime;
 80041d8:	4a05      	ldr	r2, [pc, #20]	; (80041f0 <osInit+0x4c>)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6013      	str	r3, [r2, #0]
}
 80041de:	bf00      	nop
 80041e0:	3718      	adds	r7, #24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	2000029c 	.word	0x2000029c
 80041ec:	08004199 	.word	0x08004199
 80041f0:	200003e0 	.word	0x200003e0

080041f4 <osRun>:

void osRun(void){
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
  uint32_t nextTaskTime;
  while(1){
    do{
      recountTasksTime();
 80041fa:	f000 f95f 	bl	80044bc <recountTasksTime>
      for(taskId_t i = 0; i < MAX_TASKS; ++i){
 80041fe:	2300      	movs	r3, #0
 8004200:	60fb      	str	r3, [r7, #12]
 8004202:	e026      	b.n	8004252 <osRun+0x5e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004204:	b672      	cpsid	i
        ENTER_CRITICAL_SECTION();
        if(tasks[i].state == tskReady){
 8004206:	4a17      	ldr	r2, [pc, #92]	; (8004264 <osRun+0x70>)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	011b      	lsls	r3, r3, #4
 800420c:	4413      	add	r3, r2
 800420e:	330c      	adds	r3, #12
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d119      	bne.n	800424a <osRun+0x56>
          task_t task = tasks[i].task;
 8004216:	4a13      	ldr	r2, [pc, #76]	; (8004264 <osRun+0x70>)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	011b      	lsls	r3, r3, #4
 800421c:	4413      	add	r3, r2
 800421e:	3304      	adds	r3, #4
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	607b      	str	r3, [r7, #4]
          uint32_t param = tasks[i].param;
 8004224:	4a0f      	ldr	r2, [pc, #60]	; (8004264 <osRun+0x70>)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	011b      	lsls	r3, r3, #4
 800422a:	4413      	add	r3, r2
 800422c:	3308      	adds	r3, #8
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	603b      	str	r3, [r7, #0]
          tasks[i].state = tskFree;
 8004232:	4a0c      	ldr	r2, [pc, #48]	; (8004264 <osRun+0x70>)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	011b      	lsls	r3, r3, #4
 8004238:	4413      	add	r3, r2
 800423a:	330c      	adds	r3, #12
 800423c:	2200      	movs	r2, #0
 800423e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004240:	b662      	cpsie	i
          EXIT_CRITICAL_SECTION();
          task(param);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6838      	ldr	r0, [r7, #0]
 8004246:	4798      	blx	r3
 8004248:	e000      	b.n	800424c <osRun+0x58>
 800424a:	b662      	cpsie	i
      for(taskId_t i = 0; i < MAX_TASKS; ++i){
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	3301      	adds	r3, #1
 8004250:	60fb      	str	r3, [r7, #12]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2b13      	cmp	r3, #19
 8004256:	d9d5      	bls.n	8004204 <osRun+0x10>
        }
        else{
          EXIT_CRITICAL_SECTION();
        }
      }
      nextTaskTime = nearestTaskTime();
 8004258:	f000 f8ea 	bl	8004430 <nearestTaskTime>
 800425c:	60b8      	str	r0, [r7, #8]
    } while(nextTaskTime == 0);
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	2b00      	cmp	r3, #0
 8004262:	e7ca      	b.n	80041fa <osRun+0x6>
 8004264:	2000029c 	.word	0x2000029c

08004268 <osTaskAdd>:
    }
  }
}


taskId_t osTaskAdd(task_t task, uint32_t param, TIME_T time){
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8004274:	b672      	cpsid	i
  ENTER_CRITICAL_SECTION();
  uint32_t idx = freeSlot();
 8004276:	f000 f8bb 	bl	80043f0 <freeSlot>
 800427a:	6178      	str	r0, [r7, #20]
  if(idx < MAX_TASKS){
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	2b13      	cmp	r3, #19
 8004280:	d825      	bhi.n	80042ce <osTaskAdd+0x66>
    recountTasksTime();
 8004282:	f000 f91b 	bl	80044bc <recountTasksTime>
    tasks[idx].task = task;
 8004286:	4a15      	ldr	r2, [pc, #84]	; (80042dc <osTaskAdd+0x74>)
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	011b      	lsls	r3, r3, #4
 800428c:	4413      	add	r3, r2
 800428e:	3304      	adds	r3, #4
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	601a      	str	r2, [r3, #0]
    tasks[idx].param = param;
 8004294:	4a11      	ldr	r2, [pc, #68]	; (80042dc <osTaskAdd+0x74>)
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	011b      	lsls	r3, r3, #4
 800429a:	4413      	add	r3, r2
 800429c:	3308      	adds	r3, #8
 800429e:	68ba      	ldr	r2, [r7, #8]
 80042a0:	601a      	str	r2, [r3, #0]
    tasks[idx].time = time;
 80042a2:	4a0e      	ldr	r2, [pc, #56]	; (80042dc <osTaskAdd+0x74>)
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	011b      	lsls	r3, r3, #4
 80042a8:	4413      	add	r3, r2
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	601a      	str	r2, [r3, #0]
    tasks[idx].state = time ? tskWait
                            : tskReady, haveTaskToDo = true;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d001      	beq.n	80042b8 <osTaskAdd+0x50>
 80042b4:	2102      	movs	r1, #2
 80042b6:	e000      	b.n	80042ba <osTaskAdd+0x52>
 80042b8:	2101      	movs	r1, #1
    tasks[idx].state = time ? tskWait
 80042ba:	4a08      	ldr	r2, [pc, #32]	; (80042dc <osTaskAdd+0x74>)
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	011b      	lsls	r3, r3, #4
 80042c0:	4413      	add	r3, r2
 80042c2:	330c      	adds	r3, #12
 80042c4:	460a      	mov	r2, r1
 80042c6:	701a      	strb	r2, [r3, #0]
                            : tskReady, haveTaskToDo = true;
 80042c8:	4b05      	ldr	r3, [pc, #20]	; (80042e0 <osTaskAdd+0x78>)
 80042ca:	2201      	movs	r2, #1
 80042cc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80042ce:	b662      	cpsie	i

  }
//  ASSERTEX(idx < MAX_TASKS,46);
  EXIT_CRITICAL_SECTION();
  return idx;
 80042d0:	697b      	ldr	r3, [r7, #20]
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3718      	adds	r7, #24
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	2000029c 	.word	0x2000029c
 80042e0:	200003dc 	.word	0x200003dc

080042e4 <osTaskDelId>:
  osTaskDelHandler(task);
  osTaskAdd(task, param, time);
}


uint32_t osTaskDelId(taskId_t id, task_t handler){
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80042ee:	b672      	cpsid	i
  ENTER_CRITICAL_SECTION();
  uint32_t result = 0;
 80042f0:	2300      	movs	r3, #0
 80042f2:	60fb      	str	r3, [r7, #12]
  if(id < MAX_TASKS && tasks[id].task == handler){
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b13      	cmp	r3, #19
 80042f8:	d826      	bhi.n	8004348 <osTaskDelId+0x64>
 80042fa:	4a17      	ldr	r2, [pc, #92]	; (8004358 <osTaskDelId+0x74>)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	011b      	lsls	r3, r3, #4
 8004300:	4413      	add	r3, r2
 8004302:	3304      	adds	r3, #4
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	683a      	ldr	r2, [r7, #0]
 8004308:	429a      	cmp	r2, r3
 800430a:	d11d      	bne.n	8004348 <osTaskDelId+0x64>
    tasks[id].time = 0;
 800430c:	4a12      	ldr	r2, [pc, #72]	; (8004358 <osTaskDelId+0x74>)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	011b      	lsls	r3, r3, #4
 8004312:	4413      	add	r3, r2
 8004314:	2200      	movs	r2, #0
 8004316:	601a      	str	r2, [r3, #0]
    tasks[id].task = 0;
 8004318:	4a0f      	ldr	r2, [pc, #60]	; (8004358 <osTaskDelId+0x74>)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	011b      	lsls	r3, r3, #4
 800431e:	4413      	add	r3, r2
 8004320:	3304      	adds	r3, #4
 8004322:	2200      	movs	r2, #0
 8004324:	601a      	str	r2, [r3, #0]
    tasks[id].state = tskFree;
 8004326:	4a0c      	ldr	r2, [pc, #48]	; (8004358 <osTaskDelId+0x74>)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	011b      	lsls	r3, r3, #4
 800432c:	4413      	add	r3, r2
 800432e:	330c      	adds	r3, #12
 8004330:	2200      	movs	r2, #0
 8004332:	701a      	strb	r2, [r3, #0]
    tasks[id].param= 0xDE1D;
 8004334:	4a08      	ldr	r2, [pc, #32]	; (8004358 <osTaskDelId+0x74>)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	011b      	lsls	r3, r3, #4
 800433a:	4413      	add	r3, r2
 800433c:	3308      	adds	r3, #8
 800433e:	f64d 621d 	movw	r2, #56861	; 0xde1d
 8004342:	601a      	str	r2, [r3, #0]
    result = 1;
 8004344:	2301      	movs	r3, #1
 8004346:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8004348:	b662      	cpsie	i
  }
  EXIT_CRITICAL_SECTION();
  return result;
 800434a:	68fb      	ldr	r3, [r7, #12]
}
 800434c:	4618      	mov	r0, r3
 800434e:	3714      	adds	r7, #20
 8004350:	46bd      	mov	sp, r7
 8004352:	bc80      	pop	{r7}
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	2000029c 	.word	0x2000029c

0800435c <osTaskDelHandler>:


uint32_t osTaskDelHandler(task_t task){
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8004364:	b672      	cpsid	i
  ENTER_CRITICAL_SECTION();
  uint32_t result = 0;
 8004366:	2300      	movs	r3, #0
 8004368:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < MAX_TASKS; ++i){
 800436a:	2300      	movs	r3, #0
 800436c:	60bb      	str	r3, [r7, #8]
 800436e:	e032      	b.n	80043d6 <osTaskDelHandler+0x7a>
    if(tasks[i].state != tskFree && tasks[i].task == task){
 8004370:	4a1e      	ldr	r2, [pc, #120]	; (80043ec <osTaskDelHandler+0x90>)
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	011b      	lsls	r3, r3, #4
 8004376:	4413      	add	r3, r2
 8004378:	330c      	adds	r3, #12
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d027      	beq.n	80043d0 <osTaskDelHandler+0x74>
 8004380:	4a1a      	ldr	r2, [pc, #104]	; (80043ec <osTaskDelHandler+0x90>)
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	011b      	lsls	r3, r3, #4
 8004386:	4413      	add	r3, r2
 8004388:	3304      	adds	r3, #4
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	429a      	cmp	r2, r3
 8004390:	d11e      	bne.n	80043d0 <osTaskDelHandler+0x74>
      tasks[i].state = tskFree;
 8004392:	4a16      	ldr	r2, [pc, #88]	; (80043ec <osTaskDelHandler+0x90>)
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	011b      	lsls	r3, r3, #4
 8004398:	4413      	add	r3, r2
 800439a:	330c      	adds	r3, #12
 800439c:	2200      	movs	r2, #0
 800439e:	701a      	strb	r2, [r3, #0]
      tasks[i].task = 0;
 80043a0:	4a12      	ldr	r2, [pc, #72]	; (80043ec <osTaskDelHandler+0x90>)
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	011b      	lsls	r3, r3, #4
 80043a6:	4413      	add	r3, r2
 80043a8:	3304      	adds	r3, #4
 80043aa:	2200      	movs	r2, #0
 80043ac:	601a      	str	r2, [r3, #0]
      tasks[i].time = 0;
 80043ae:	4a0f      	ldr	r2, [pc, #60]	; (80043ec <osTaskDelHandler+0x90>)
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	011b      	lsls	r3, r3, #4
 80043b4:	4413      	add	r3, r2
 80043b6:	2200      	movs	r2, #0
 80043b8:	601a      	str	r2, [r3, #0]
      tasks[i].param= 0x0DE1;
 80043ba:	4a0c      	ldr	r2, [pc, #48]	; (80043ec <osTaskDelHandler+0x90>)
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	011b      	lsls	r3, r3, #4
 80043c0:	4413      	add	r3, r2
 80043c2:	3308      	adds	r3, #8
 80043c4:	f640 52e1 	movw	r2, #3553	; 0xde1
 80043c8:	601a      	str	r2, [r3, #0]
      result++;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	3301      	adds	r3, #1
 80043ce:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < MAX_TASKS; ++i){
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	3301      	adds	r3, #1
 80043d4:	60bb      	str	r3, [r7, #8]
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	2b13      	cmp	r3, #19
 80043da:	ddc9      	ble.n	8004370 <osTaskDelHandler+0x14>
  __ASM volatile ("cpsie i" : : : "memory");
 80043dc:	b662      	cpsie	i
    }
  }
  EXIT_CRITICAL_SECTION();
  return result;
 80043de:	68fb      	ldr	r3, [r7, #12]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3714      	adds	r7, #20
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bc80      	pop	{r7}
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	2000029c 	.word	0x2000029c

080043f0 <freeSlot>:
    tasks[i].state = tskFree;
  }
}


static inline uint32_t freeSlot(void){
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
  uint32_t slot = 0;
 80043f6:	2300      	movs	r3, #0
 80043f8:	607b      	str	r3, [r7, #4]
  for(slot = 0; slot < MAX_TASKS; ++slot){
 80043fa:	2300      	movs	r3, #0
 80043fc:	607b      	str	r3, [r7, #4]
 80043fe:	e00a      	b.n	8004416 <freeSlot+0x26>
    if(tasks[slot].state == tskFree){
 8004400:	4a0a      	ldr	r2, [pc, #40]	; (800442c <freeSlot+0x3c>)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	011b      	lsls	r3, r3, #4
 8004406:	4413      	add	r3, r2
 8004408:	330c      	adds	r3, #12
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d006      	beq.n	800441e <freeSlot+0x2e>
  for(slot = 0; slot < MAX_TASKS; ++slot){
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	3301      	adds	r3, #1
 8004414:	607b      	str	r3, [r7, #4]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2b13      	cmp	r3, #19
 800441a:	d9f1      	bls.n	8004400 <freeSlot+0x10>
 800441c:	e000      	b.n	8004420 <freeSlot+0x30>
      break;
 800441e:	bf00      	nop
    }
  }
  return slot;
 8004420:	687b      	ldr	r3, [r7, #4]
}
 8004422:	4618      	mov	r0, r3
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	bc80      	pop	{r7}
 800442a:	4770      	bx	lr
 800442c:	2000029c 	.word	0x2000029c

08004430 <nearestTaskTime>:


static TIME_T nearestTaskTime(void){
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004436:	b672      	cpsid	i
  ENTER_CRITICAL_SECTION();
  TIME_T time = INVALID_TIME;
 8004438:	f04f 33ff 	mov.w	r3, #4294967295
 800443c:	607b      	str	r3, [r7, #4]
  for(taskId_t i = 0; i < MAX_TASKS; ++i){
 800443e:	2300      	movs	r3, #0
 8004440:	603b      	str	r3, [r7, #0]
 8004442:	e024      	b.n	800448e <nearestTaskTime+0x5e>
    if(tasks[i].state == tskWait){
 8004444:	4a1b      	ldr	r2, [pc, #108]	; (80044b4 <nearestTaskTime+0x84>)
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	011b      	lsls	r3, r3, #4
 800444a:	4413      	add	r3, r2
 800444c:	330c      	adds	r3, #12
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	2b02      	cmp	r3, #2
 8004452:	d10e      	bne.n	8004472 <nearestTaskTime+0x42>
      time > tasks[i].time?
 8004454:	4a17      	ldr	r2, [pc, #92]	; (80044b4 <nearestTaskTime+0x84>)
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	011b      	lsls	r3, r3, #4
 800445a:	4413      	add	r3, r2
 800445c:	681b      	ldr	r3, [r3, #0]
        time = tasks[i].time: 0;
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	429a      	cmp	r2, r3
 8004462:	d911      	bls.n	8004488 <nearestTaskTime+0x58>
 8004464:	4a13      	ldr	r2, [pc, #76]	; (80044b4 <nearestTaskTime+0x84>)
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	011b      	lsls	r3, r3, #4
 800446a:	4413      	add	r3, r2
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	607b      	str	r3, [r7, #4]
 8004470:	e00a      	b.n	8004488 <nearestTaskTime+0x58>
    }
    else if(tasks[i].state == tskReady){
 8004472:	4a10      	ldr	r2, [pc, #64]	; (80044b4 <nearestTaskTime+0x84>)
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	011b      	lsls	r3, r3, #4
 8004478:	4413      	add	r3, r2
 800447a:	330c      	adds	r3, #12
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d102      	bne.n	8004488 <nearestTaskTime+0x58>
      time = 0;
 8004482:	2300      	movs	r3, #0
 8004484:	607b      	str	r3, [r7, #4]
      break;
 8004486:	e005      	b.n	8004494 <nearestTaskTime+0x64>
  for(taskId_t i = 0; i < MAX_TASKS; ++i){
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	3301      	adds	r3, #1
 800448c:	603b      	str	r3, [r7, #0]
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	2b13      	cmp	r3, #19
 8004492:	d9d7      	bls.n	8004444 <nearestTaskTime+0x14>
    }
  }
  haveTaskToDo = time == 0;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	bf0c      	ite	eq
 800449a:	2301      	moveq	r3, #1
 800449c:	2300      	movne	r3, #0
 800449e:	b2da      	uxtb	r2, r3
 80044a0:	4b05      	ldr	r3, [pc, #20]	; (80044b8 <nearestTaskTime+0x88>)
 80044a2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80044a4:	b662      	cpsie	i
  EXIT_CRITICAL_SECTION();
  return time;
 80044a6:	687b      	ldr	r3, [r7, #4]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bc80      	pop	{r7}
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	2000029c 	.word	0x2000029c
 80044b8:	200003dc 	.word	0x200003dc

080044bc <recountTasksTime>:


static void recountTasksTime(void){
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80044c2:	b672      	cpsid	i
  ENTER_CRITICAL_SECTION();
  TIME_T value = timerElapseSinceLastTimeFunction();
 80044c4:	4b2b      	ldr	r3, [pc, #172]	; (8004574 <recountTasksTime+0xb8>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4798      	blx	r3
 80044ca:	6038      	str	r0, [r7, #0]
  if(value){
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d04b      	beq.n	800456a <recountTasksTime+0xae>
    for(taskId_t i = 0; i < MAX_TASKS; ++i)
 80044d2:	2300      	movs	r3, #0
 80044d4:	607b      	str	r3, [r7, #4]
 80044d6:	e045      	b.n	8004564 <recountTasksTime+0xa8>
    {
      if(tasks[i].state == tskWait)
 80044d8:	4a27      	ldr	r2, [pc, #156]	; (8004578 <recountTasksTime+0xbc>)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	011b      	lsls	r3, r3, #4
 80044de:	4413      	add	r3, r2
 80044e0:	330c      	adds	r3, #12
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d13a      	bne.n	800455e <recountTasksTime+0xa2>
      {
        if(tasks[i].time > 0){
 80044e8:	4a23      	ldr	r2, [pc, #140]	; (8004578 <recountTasksTime+0xbc>)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	011b      	lsls	r3, r3, #4
 80044ee:	4413      	add	r3, r2
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d01a      	beq.n	800452c <recountTasksTime+0x70>
          if(tasks[i].time > value)
 80044f6:	4a20      	ldr	r2, [pc, #128]	; (8004578 <recountTasksTime+0xbc>)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	011b      	lsls	r3, r3, #4
 80044fc:	4413      	add	r3, r2
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	683a      	ldr	r2, [r7, #0]
 8004502:	429a      	cmp	r2, r3
 8004504:	d20c      	bcs.n	8004520 <recountTasksTime+0x64>
            tasks[i].time -= value;
 8004506:	4a1c      	ldr	r2, [pc, #112]	; (8004578 <recountTasksTime+0xbc>)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	011b      	lsls	r3, r3, #4
 800450c:	4413      	add	r3, r2
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	1ad2      	subs	r2, r2, r3
 8004514:	4918      	ldr	r1, [pc, #96]	; (8004578 <recountTasksTime+0xbc>)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	011b      	lsls	r3, r3, #4
 800451a:	440b      	add	r3, r1
 800451c:	601a      	str	r2, [r3, #0]
 800451e:	e005      	b.n	800452c <recountTasksTime+0x70>
          else
            tasks[i].time = 0;
 8004520:	4a15      	ldr	r2, [pc, #84]	; (8004578 <recountTasksTime+0xbc>)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	011b      	lsls	r3, r3, #4
 8004526:	4413      	add	r3, r2
 8004528:	2200      	movs	r2, #0
 800452a:	601a      	str	r2, [r3, #0]
        }

        if(tasks[i].time == 0 && tasks[i].task){
 800452c:	4a12      	ldr	r2, [pc, #72]	; (8004578 <recountTasksTime+0xbc>)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	011b      	lsls	r3, r3, #4
 8004532:	4413      	add	r3, r2
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d111      	bne.n	800455e <recountTasksTime+0xa2>
 800453a:	4a0f      	ldr	r2, [pc, #60]	; (8004578 <recountTasksTime+0xbc>)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	011b      	lsls	r3, r3, #4
 8004540:	4413      	add	r3, r2
 8004542:	3304      	adds	r3, #4
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d009      	beq.n	800455e <recountTasksTime+0xa2>
          haveTaskToDo = true;
 800454a:	4b0c      	ldr	r3, [pc, #48]	; (800457c <recountTasksTime+0xc0>)
 800454c:	2201      	movs	r2, #1
 800454e:	701a      	strb	r2, [r3, #0]
          tasks[i].state = tskReady;
 8004550:	4a09      	ldr	r2, [pc, #36]	; (8004578 <recountTasksTime+0xbc>)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	011b      	lsls	r3, r3, #4
 8004556:	4413      	add	r3, r2
 8004558:	330c      	adds	r3, #12
 800455a:	2201      	movs	r2, #1
 800455c:	701a      	strb	r2, [r3, #0]
    for(taskId_t i = 0; i < MAX_TASKS; ++i)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	3301      	adds	r3, #1
 8004562:	607b      	str	r3, [r7, #4]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2b13      	cmp	r3, #19
 8004568:	d9b6      	bls.n	80044d8 <recountTasksTime+0x1c>
  __ASM volatile ("cpsie i" : : : "memory");
 800456a:	b662      	cpsie	i
        }
      }
    }
  }
  EXIT_CRITICAL_SECTION();
}
 800456c:	bf00      	nop
 800456e:	3708      	adds	r7, #8
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	200003e0 	.word	0x200003e0
 8004578:	2000029c 	.word	0x2000029c
 800457c:	200003dc 	.word	0x200003dc

08004580 <getButtonsConfig>:
    {buttonOkInit, buttonOkGetState, buttonOkHandler, Button_Ok},
    {buttonNoInit, buttonNoGetState, buttonNoHandler, Button_No},
    {buttonPowerInit, buttonPowerGetState, buttonPowerHandler, Button_Power},
};

const buttonInitStruct_t *getButtonsConfig(void) {
 8004580:	b480      	push	{r7}
 8004582:	af00      	add	r7, sp, #0
    return buttonsConfig;
 8004584:	4b02      	ldr	r3, [pc, #8]	; (8004590 <getButtonsConfig+0x10>)
}
 8004586:	4618      	mov	r0, r3
 8004588:	46bd      	mov	sp, r7
 800458a:	bc80      	pop	{r7}
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	0800bf18 	.word	0x0800bf18

08004594 <buttonInitCommon>:

static void buttonInitCommon(buttonInitState_t state, buttonName_t buttonId) {
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	4603      	mov	r3, r0
 800459c:	460a      	mov	r2, r1
 800459e:	71fb      	strb	r3, [r7, #7]
 80045a0:	4613      	mov	r3, r2
 80045a2:	71bb      	strb	r3, [r7, #6]
        break;
    case btON:
        buttonsState |= 1 << buttonId;
        break;
    }*/
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bc80      	pop	{r7}
 80045ac:	4770      	bx	lr

080045ae <buttonGetState>:

static buttonState_t buttonGetState(buttonName_t buttonId) {
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b082      	sub	sp, #8
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	4603      	mov	r3, r0
 80045b6:	71fb      	strb	r3, [r7, #7]
    return (buttonsGetState() & (1 << buttonId))? BUTTON_PRESSED: BUTTON_NOT_PRESSED;
 80045b8:	f000 fa74 	bl	8004aa4 <buttonsGetState>
 80045bc:	4601      	mov	r1, r0
 80045be:	79fb      	ldrb	r3, [r7, #7]
 80045c0:	2201      	movs	r2, #1
 80045c2:	fa02 f303 	lsl.w	r3, r2, r3
 80045c6:	400b      	ands	r3, r1
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	bf14      	ite	ne
 80045cc:	2301      	movne	r3, #1
 80045ce:	2300      	moveq	r3, #0
 80045d0:	b2db      	uxtb	r3, r3
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3708      	adds	r7, #8
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <button6Init>:

static void button6Init(buttonInitState_t state) {
 80045da:	b580      	push	{r7, lr}
 80045dc:	b082      	sub	sp, #8
 80045de:	af00      	add	r7, sp, #0
 80045e0:	4603      	mov	r3, r0
 80045e2:	71fb      	strb	r3, [r7, #7]
    buttonInitCommon(state, Button_6);
 80045e4:	79fb      	ldrb	r3, [r7, #7]
 80045e6:	2100      	movs	r1, #0
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7ff ffd3 	bl	8004594 <buttonInitCommon>
}
 80045ee:	bf00      	nop
 80045f0:	3708      	adds	r7, #8
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <button7Init>:

static void button7Init(buttonInitState_t state) {
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b082      	sub	sp, #8
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	4603      	mov	r3, r0
 80045fe:	71fb      	strb	r3, [r7, #7]
    buttonInitCommon(state, Button_7);
 8004600:	79fb      	ldrb	r3, [r7, #7]
 8004602:	2101      	movs	r1, #1
 8004604:	4618      	mov	r0, r3
 8004606:	f7ff ffc5 	bl	8004594 <buttonInitCommon>
}
 800460a:	bf00      	nop
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <button8Init>:

static void button8Init(buttonInitState_t state) {
 8004612:	b580      	push	{r7, lr}
 8004614:	b082      	sub	sp, #8
 8004616:	af00      	add	r7, sp, #0
 8004618:	4603      	mov	r3, r0
 800461a:	71fb      	strb	r3, [r7, #7]
    buttonInitCommon(state, Button_8);
 800461c:	79fb      	ldrb	r3, [r7, #7]
 800461e:	2102      	movs	r1, #2
 8004620:	4618      	mov	r0, r3
 8004622:	f7ff ffb7 	bl	8004594 <buttonInitCommon>
}
 8004626:	bf00      	nop
 8004628:	3708      	adds	r7, #8
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <button9Init>:

static void button9Init(buttonInitState_t state) {
 800462e:	b580      	push	{r7, lr}
 8004630:	b082      	sub	sp, #8
 8004632:	af00      	add	r7, sp, #0
 8004634:	4603      	mov	r3, r0
 8004636:	71fb      	strb	r3, [r7, #7]
    buttonInitCommon(state, Button_9);
 8004638:	79fb      	ldrb	r3, [r7, #7]
 800463a:	2103      	movs	r1, #3
 800463c:	4618      	mov	r0, r3
 800463e:	f7ff ffa9 	bl	8004594 <buttonInitCommon>
}
 8004642:	bf00      	nop
 8004644:	3708      	adds	r7, #8
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <button0Init>:

static void button0Init(buttonInitState_t state) {
 800464a:	b580      	push	{r7, lr}
 800464c:	b082      	sub	sp, #8
 800464e:	af00      	add	r7, sp, #0
 8004650:	4603      	mov	r3, r0
 8004652:	71fb      	strb	r3, [r7, #7]
    buttonInitCommon(state, Button_0);
 8004654:	79fb      	ldrb	r3, [r7, #7]
 8004656:	2104      	movs	r1, #4
 8004658:	4618      	mov	r0, r3
 800465a:	f7ff ff9b 	bl	8004594 <buttonInitCommon>
}
 800465e:	bf00      	nop
 8004660:	3708      	adds	r7, #8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <buttonInfoInit>:

static void buttonInfoInit(buttonInitState_t state) {
 8004666:	b580      	push	{r7, lr}
 8004668:	b082      	sub	sp, #8
 800466a:	af00      	add	r7, sp, #0
 800466c:	4603      	mov	r3, r0
 800466e:	71fb      	strb	r3, [r7, #7]
    buttonInitCommon(state, Button_Info);
 8004670:	79fb      	ldrb	r3, [r7, #7]
 8004672:	2105      	movs	r1, #5
 8004674:	4618      	mov	r0, r3
 8004676:	f7ff ff8d 	bl	8004594 <buttonInitCommon>
}
 800467a:	bf00      	nop
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <buttonPrimeInit>:

static void buttonPrimeInit(buttonInitState_t state) {
 8004682:	b580      	push	{r7, lr}
 8004684:	b082      	sub	sp, #8
 8004686:	af00      	add	r7, sp, #0
 8004688:	4603      	mov	r3, r0
 800468a:	71fb      	strb	r3, [r7, #7]
    buttonInitCommon(state, Button_Prime);
 800468c:	79fb      	ldrb	r3, [r7, #7]
 800468e:	2106      	movs	r1, #6
 8004690:	4618      	mov	r0, r3
 8004692:	f7ff ff7f 	bl	8004594 <buttonInitCommon>
}
 8004696:	bf00      	nop
 8004698:	3708      	adds	r7, #8
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <buttonLockInit>:

static void buttonLockInit(buttonInitState_t state) {
 800469e:	b580      	push	{r7, lr}
 80046a0:	b082      	sub	sp, #8
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	4603      	mov	r3, r0
 80046a6:	71fb      	strb	r3, [r7, #7]
    buttonInitCommon(state, Button_Lock);
 80046a8:	79fb      	ldrb	r3, [r7, #7]
 80046aa:	2107      	movs	r1, #7
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7ff ff71 	bl	8004594 <buttonInitCommon>
}
 80046b2:	bf00      	nop
 80046b4:	3708      	adds	r7, #8
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}

080046ba <button1Init>:

static void button1Init(buttonInitState_t state) {
 80046ba:	b580      	push	{r7, lr}
 80046bc:	b082      	sub	sp, #8
 80046be:	af00      	add	r7, sp, #0
 80046c0:	4603      	mov	r3, r0
 80046c2:	71fb      	strb	r3, [r7, #7]
    buttonInitCommon(state, Button_1);
 80046c4:	79fb      	ldrb	r3, [r7, #7]
 80046c6:	2108      	movs	r1, #8
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7ff ff63 	bl	8004594 <buttonInitCommon>
}
 80046ce:	bf00      	nop
 80046d0:	3708      	adds	r7, #8
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <button2Init>:

static void button2Init(buttonInitState_t state) {
 80046d6:	b580      	push	{r7, lr}
 80046d8:	b082      	sub	sp, #8
 80046da:	af00      	add	r7, sp, #0
 80046dc:	4603      	mov	r3, r0
 80046de:	71fb      	strb	r3, [r7, #7]
    buttonInitCommon(state, Button_2);
 80046e0:	79fb      	ldrb	r3, [r7, #7]
 80046e2:	2109      	movs	r1, #9
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7ff ff55 	bl	8004594 <buttonInitCommon>
}
 80046ea:	bf00      	nop
 80046ec:	3708      	adds	r7, #8
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <button3Init>:

static void button3Init(buttonInitState_t state) {
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b082      	sub	sp, #8
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	4603      	mov	r3, r0
 80046fa:	71fb      	strb	r3, [r7, #7]
    buttonInitCommon(state, Button_3);
 80046fc:	79fb      	ldrb	r3, [r7, #7]
 80046fe:	210a      	movs	r1, #10
 8004700:	4618      	mov	r0, r3
 8004702:	f7ff ff47 	bl	8004594 <buttonInitCommon>
}
 8004706:	bf00      	nop
 8004708:	3708      	adds	r7, #8
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <button4Init>:

static void button4Init(buttonInitState_t state) {
 800470e:	b580      	push	{r7, lr}
 8004710:	b082      	sub	sp, #8
 8004712:	af00      	add	r7, sp, #0
 8004714:	4603      	mov	r3, r0
 8004716:	71fb      	strb	r3, [r7, #7]
    buttonInitCommon(state, Button_4);
 8004718:	79fb      	ldrb	r3, [r7, #7]
 800471a:	210b      	movs	r1, #11
 800471c:	4618      	mov	r0, r3
 800471e:	f7ff ff39 	bl	8004594 <buttonInitCommon>
}
 8004722:	bf00      	nop
 8004724:	3708      	adds	r7, #8
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <button5Init>:

static void button5Init(buttonInitState_t state) {
 800472a:	b580      	push	{r7, lr}
 800472c:	b082      	sub	sp, #8
 800472e:	af00      	add	r7, sp, #0
 8004730:	4603      	mov	r3, r0
 8004732:	71fb      	strb	r3, [r7, #7]
    buttonInitCommon(state, Button_5);
 8004734:	79fb      	ldrb	r3, [r7, #7]
 8004736:	210c      	movs	r1, #12
 8004738:	4618      	mov	r0, r3
 800473a:	f7ff ff2b 	bl	8004594 <buttonInitCommon>
}
 800473e:	bf00      	nop
 8004740:	3708      	adds	r7, #8
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <buttonPointInit>:

static void buttonPointInit(buttonInitState_t state) {
 8004746:	b580      	push	{r7, lr}
 8004748:	b082      	sub	sp, #8
 800474a:	af00      	add	r7, sp, #0
 800474c:	4603      	mov	r3, r0
 800474e:	71fb      	strb	r3, [r7, #7]
    buttonInitCommon(state, Button_Point);
 8004750:	79fb      	ldrb	r3, [r7, #7]
 8004752:	210d      	movs	r1, #13
 8004754:	4618      	mov	r0, r3
 8004756:	f7ff ff1d 	bl	8004594 <buttonInitCommon>
}
 800475a:	bf00      	nop
 800475c:	3708      	adds	r7, #8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <buttonOkInit>:

static void buttonOkInit(buttonInitState_t state) {
 8004762:	b580      	push	{r7, lr}
 8004764:	b082      	sub	sp, #8
 8004766:	af00      	add	r7, sp, #0
 8004768:	4603      	mov	r3, r0
 800476a:	71fb      	strb	r3, [r7, #7]
    buttonInitCommon(state, Button_Ok);
 800476c:	79fb      	ldrb	r3, [r7, #7]
 800476e:	210e      	movs	r1, #14
 8004770:	4618      	mov	r0, r3
 8004772:	f7ff ff0f 	bl	8004594 <buttonInitCommon>
}
 8004776:	bf00      	nop
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <buttonNoInit>:

static void buttonNoInit(buttonInitState_t state) {
 800477e:	b580      	push	{r7, lr}
 8004780:	b082      	sub	sp, #8
 8004782:	af00      	add	r7, sp, #0
 8004784:	4603      	mov	r3, r0
 8004786:	71fb      	strb	r3, [r7, #7]
    buttonInitCommon(state, Button_No);
 8004788:	79fb      	ldrb	r3, [r7, #7]
 800478a:	210f      	movs	r1, #15
 800478c:	4618      	mov	r0, r3
 800478e:	f7ff ff01 	bl	8004594 <buttonInitCommon>
}
 8004792:	bf00      	nop
 8004794:	3708      	adds	r7, #8
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <buttonPowerInit>:

static void buttonPowerInit(buttonInitState_t state) {
 800479a:	b580      	push	{r7, lr}
 800479c:	b082      	sub	sp, #8
 800479e:	af00      	add	r7, sp, #0
 80047a0:	4603      	mov	r3, r0
 80047a2:	71fb      	strb	r3, [r7, #7]
    buttonInitCommon(state, Button_Power);
 80047a4:	79fb      	ldrb	r3, [r7, #7]
 80047a6:	2110      	movs	r1, #16
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7ff fef3 	bl	8004594 <buttonInitCommon>
}
 80047ae:	bf00      	nop
 80047b0:	3708      	adds	r7, #8
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <button6GetState>:

static buttonState_t button6GetState(void) {
 80047b6:	b580      	push	{r7, lr}
 80047b8:	af00      	add	r7, sp, #0
    return buttonGetState(Button_6);
 80047ba:	2000      	movs	r0, #0
 80047bc:	f7ff fef7 	bl	80045ae <buttonGetState>
 80047c0:	4603      	mov	r3, r0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <button7GetState>:

static buttonState_t button7GetState(void) {
 80047c6:	b580      	push	{r7, lr}
 80047c8:	af00      	add	r7, sp, #0
    return buttonGetState(Button_7);
 80047ca:	2001      	movs	r0, #1
 80047cc:	f7ff feef 	bl	80045ae <buttonGetState>
 80047d0:	4603      	mov	r3, r0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <button8GetState>:

static buttonState_t button8GetState(void) {
 80047d6:	b580      	push	{r7, lr}
 80047d8:	af00      	add	r7, sp, #0
    return buttonGetState(Button_8);
 80047da:	2002      	movs	r0, #2
 80047dc:	f7ff fee7 	bl	80045ae <buttonGetState>
 80047e0:	4603      	mov	r3, r0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <button9GetState>:

static buttonState_t button9GetState(void) {
 80047e6:	b580      	push	{r7, lr}
 80047e8:	af00      	add	r7, sp, #0
    return buttonGetState(Button_9);
 80047ea:	2003      	movs	r0, #3
 80047ec:	f7ff fedf 	bl	80045ae <buttonGetState>
 80047f0:	4603      	mov	r3, r0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	bd80      	pop	{r7, pc}

080047f6 <button0GetState>:

static buttonState_t button0GetState(void) {
 80047f6:	b580      	push	{r7, lr}
 80047f8:	af00      	add	r7, sp, #0
    return buttonGetState(Button_0);
 80047fa:	2004      	movs	r0, #4
 80047fc:	f7ff fed7 	bl	80045ae <buttonGetState>
 8004800:	4603      	mov	r3, r0
}
 8004802:	4618      	mov	r0, r3
 8004804:	bd80      	pop	{r7, pc}

08004806 <buttonInfoGetState>:

static buttonState_t buttonInfoGetState(void) {
 8004806:	b580      	push	{r7, lr}
 8004808:	af00      	add	r7, sp, #0
    return buttonGetState(Button_Info);
 800480a:	2005      	movs	r0, #5
 800480c:	f7ff fecf 	bl	80045ae <buttonGetState>
 8004810:	4603      	mov	r3, r0
}
 8004812:	4618      	mov	r0, r3
 8004814:	bd80      	pop	{r7, pc}

08004816 <buttonPrimeGetState>:

static buttonState_t buttonPrimeGetState(void) {
 8004816:	b580      	push	{r7, lr}
 8004818:	af00      	add	r7, sp, #0
    return buttonGetState(Button_Prime);
 800481a:	2006      	movs	r0, #6
 800481c:	f7ff fec7 	bl	80045ae <buttonGetState>
 8004820:	4603      	mov	r3, r0
}
 8004822:	4618      	mov	r0, r3
 8004824:	bd80      	pop	{r7, pc}

08004826 <buttonLockGetState>:

static buttonState_t buttonLockGetState(void) {
 8004826:	b580      	push	{r7, lr}
 8004828:	af00      	add	r7, sp, #0
    return buttonGetState(Button_Lock);
 800482a:	2007      	movs	r0, #7
 800482c:	f7ff febf 	bl	80045ae <buttonGetState>
 8004830:	4603      	mov	r3, r0
}
 8004832:	4618      	mov	r0, r3
 8004834:	bd80      	pop	{r7, pc}

08004836 <button1GetState>:

static buttonState_t button1GetState(void) {
 8004836:	b580      	push	{r7, lr}
 8004838:	af00      	add	r7, sp, #0
    return buttonGetState(Button_1);
 800483a:	2008      	movs	r0, #8
 800483c:	f7ff feb7 	bl	80045ae <buttonGetState>
 8004840:	4603      	mov	r3, r0
}
 8004842:	4618      	mov	r0, r3
 8004844:	bd80      	pop	{r7, pc}

08004846 <button2GetState>:

static buttonState_t button2GetState(void) {
 8004846:	b580      	push	{r7, lr}
 8004848:	af00      	add	r7, sp, #0
    return buttonGetState(Button_2);
 800484a:	2009      	movs	r0, #9
 800484c:	f7ff feaf 	bl	80045ae <buttonGetState>
 8004850:	4603      	mov	r3, r0
}
 8004852:	4618      	mov	r0, r3
 8004854:	bd80      	pop	{r7, pc}

08004856 <button3GetState>:

static buttonState_t button3GetState(void) {
 8004856:	b580      	push	{r7, lr}
 8004858:	af00      	add	r7, sp, #0
    return buttonGetState(Button_3);
 800485a:	200a      	movs	r0, #10
 800485c:	f7ff fea7 	bl	80045ae <buttonGetState>
 8004860:	4603      	mov	r3, r0
}
 8004862:	4618      	mov	r0, r3
 8004864:	bd80      	pop	{r7, pc}

08004866 <button4GetState>:

static buttonState_t button4GetState(void) {
 8004866:	b580      	push	{r7, lr}
 8004868:	af00      	add	r7, sp, #0
    return buttonGetState(Button_4);
 800486a:	200b      	movs	r0, #11
 800486c:	f7ff fe9f 	bl	80045ae <buttonGetState>
 8004870:	4603      	mov	r3, r0
}
 8004872:	4618      	mov	r0, r3
 8004874:	bd80      	pop	{r7, pc}

08004876 <button5GetState>:

static buttonState_t button5GetState(void) {
 8004876:	b580      	push	{r7, lr}
 8004878:	af00      	add	r7, sp, #0
    return buttonGetState(Button_5);
 800487a:	200c      	movs	r0, #12
 800487c:	f7ff fe97 	bl	80045ae <buttonGetState>
 8004880:	4603      	mov	r3, r0
}
 8004882:	4618      	mov	r0, r3
 8004884:	bd80      	pop	{r7, pc}

08004886 <buttonPointGetState>:

static buttonState_t buttonPointGetState(void) {
 8004886:	b580      	push	{r7, lr}
 8004888:	af00      	add	r7, sp, #0
    return buttonGetState(Button_Point);
 800488a:	200d      	movs	r0, #13
 800488c:	f7ff fe8f 	bl	80045ae <buttonGetState>
 8004890:	4603      	mov	r3, r0
}
 8004892:	4618      	mov	r0, r3
 8004894:	bd80      	pop	{r7, pc}

08004896 <buttonOkGetState>:

static buttonState_t buttonOkGetState(void) {
 8004896:	b580      	push	{r7, lr}
 8004898:	af00      	add	r7, sp, #0
    return buttonGetState(Button_Ok);
 800489a:	200e      	movs	r0, #14
 800489c:	f7ff fe87 	bl	80045ae <buttonGetState>
 80048a0:	4603      	mov	r3, r0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <buttonNoGetState>:

static buttonState_t buttonNoGetState(void) {
 80048a6:	b580      	push	{r7, lr}
 80048a8:	af00      	add	r7, sp, #0
    return buttonGetState(Button_No);
 80048aa:	200f      	movs	r0, #15
 80048ac:	f7ff fe7f 	bl	80045ae <buttonGetState>
 80048b0:	4603      	mov	r3, r0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <buttonPowerGetState>:

static buttonState_t buttonPowerGetState(void) {
 80048b6:	b580      	push	{r7, lr}
 80048b8:	af00      	add	r7, sp, #0
    return buttonGetState(Button_Power);
 80048ba:	2010      	movs	r0, #16
 80048bc:	f7ff fe77 	bl	80045ae <buttonGetState>
 80048c0:	4603      	mov	r3, r0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	bd80      	pop	{r7, pc}
	...

080048c8 <button6Handler>:

static void button6Handler(uint32_t pressType) {
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
    osTaskDelHandler(button6Handler);
 80048d0:	4803      	ldr	r0, [pc, #12]	; (80048e0 <button6Handler+0x18>)
 80048d2:	f7ff fd43 	bl	800435c <osTaskDelHandler>
}
 80048d6:	bf00      	nop
 80048d8:	3708      	adds	r7, #8
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	080048c9 	.word	0x080048c9

080048e4 <button7Handler>:

static void button7Handler(uint32_t pressType) {
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
    osTaskDelHandler(button7Handler);
 80048ec:	4803      	ldr	r0, [pc, #12]	; (80048fc <button7Handler+0x18>)
 80048ee:	f7ff fd35 	bl	800435c <osTaskDelHandler>
}
 80048f2:	bf00      	nop
 80048f4:	3708      	adds	r7, #8
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	080048e5 	.word	0x080048e5

08004900 <button8Handler>:

static void button8Handler(uint32_t pressType) {
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
    osTaskDelHandler(button8Handler);
 8004908:	4803      	ldr	r0, [pc, #12]	; (8004918 <button8Handler+0x18>)
 800490a:	f7ff fd27 	bl	800435c <osTaskDelHandler>
}
 800490e:	bf00      	nop
 8004910:	3708      	adds	r7, #8
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	08004901 	.word	0x08004901

0800491c <button9Handler>:

static void button9Handler(uint32_t pressType) {
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
    osTaskDelHandler(button9Handler);
 8004924:	4803      	ldr	r0, [pc, #12]	; (8004934 <button9Handler+0x18>)
 8004926:	f7ff fd19 	bl	800435c <osTaskDelHandler>
}
 800492a:	bf00      	nop
 800492c:	3708      	adds	r7, #8
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	0800491d 	.word	0x0800491d

08004938 <button0Handler>:

static void button0Handler(uint32_t pressType) {
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
    osTaskDelHandler(button0Handler);
 8004940:	4803      	ldr	r0, [pc, #12]	; (8004950 <button0Handler+0x18>)
 8004942:	f7ff fd0b 	bl	800435c <osTaskDelHandler>
}
 8004946:	bf00      	nop
 8004948:	3708      	adds	r7, #8
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	08004939 	.word	0x08004939

08004954 <buttonInfoHandler>:

static void buttonInfoHandler(uint32_t pressType) {
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
    osTaskDelHandler(buttonInfoHandler);
 800495c:	4803      	ldr	r0, [pc, #12]	; (800496c <buttonInfoHandler+0x18>)
 800495e:	f7ff fcfd 	bl	800435c <osTaskDelHandler>
}
 8004962:	bf00      	nop
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	08004955 	.word	0x08004955

08004970 <buttonPrimeHandler>:

static void buttonPrimeHandler(uint32_t pressType) {
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
    osTaskDelHandler(buttonPrimeHandler);
 8004978:	4803      	ldr	r0, [pc, #12]	; (8004988 <buttonPrimeHandler+0x18>)
 800497a:	f7ff fcef 	bl	800435c <osTaskDelHandler>
}
 800497e:	bf00      	nop
 8004980:	3708      	adds	r7, #8
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	08004971 	.word	0x08004971

0800498c <buttonLockHandler>:

static void buttonLockHandler(uint32_t pressType) {
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
    osTaskDelHandler(buttonLockHandler);
 8004994:	4803      	ldr	r0, [pc, #12]	; (80049a4 <buttonLockHandler+0x18>)
 8004996:	f7ff fce1 	bl	800435c <osTaskDelHandler>
}
 800499a:	bf00      	nop
 800499c:	3708      	adds	r7, #8
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	0800498d 	.word	0x0800498d

080049a8 <button1Handler>:

static void button1Handler(uint32_t pressType) {
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
    osTaskDelHandler(button1Handler);
 80049b0:	4803      	ldr	r0, [pc, #12]	; (80049c0 <button1Handler+0x18>)
 80049b2:	f7ff fcd3 	bl	800435c <osTaskDelHandler>
}
 80049b6:	bf00      	nop
 80049b8:	3708      	adds	r7, #8
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	080049a9 	.word	0x080049a9

080049c4 <button2Handler>:

static void button2Handler(uint32_t pressType) {
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
    osTaskDelHandler(button2Handler);
 80049cc:	4803      	ldr	r0, [pc, #12]	; (80049dc <button2Handler+0x18>)
 80049ce:	f7ff fcc5 	bl	800435c <osTaskDelHandler>
}
 80049d2:	bf00      	nop
 80049d4:	3708      	adds	r7, #8
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	080049c5 	.word	0x080049c5

080049e0 <button3Handler>:

static void button3Handler(uint32_t pressType) {
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
    osTaskDelHandler(button3Handler);
 80049e8:	4803      	ldr	r0, [pc, #12]	; (80049f8 <button3Handler+0x18>)
 80049ea:	f7ff fcb7 	bl	800435c <osTaskDelHandler>
}
 80049ee:	bf00      	nop
 80049f0:	3708      	adds	r7, #8
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	080049e1 	.word	0x080049e1

080049fc <button4Handler>:

static void button4Handler(uint32_t pressType) {
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
    osTaskDelHandler(button4Handler);
 8004a04:	4803      	ldr	r0, [pc, #12]	; (8004a14 <button4Handler+0x18>)
 8004a06:	f7ff fca9 	bl	800435c <osTaskDelHandler>
}
 8004a0a:	bf00      	nop
 8004a0c:	3708      	adds	r7, #8
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	080049fd 	.word	0x080049fd

08004a18 <button5Handler>:

static void button5Handler(uint32_t pressType) {
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
    osTaskDelHandler(button5Handler);
 8004a20:	4803      	ldr	r0, [pc, #12]	; (8004a30 <button5Handler+0x18>)
 8004a22:	f7ff fc9b 	bl	800435c <osTaskDelHandler>
}
 8004a26:	bf00      	nop
 8004a28:	3708      	adds	r7, #8
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	08004a19 	.word	0x08004a19

08004a34 <buttonPointHandler>:

static void buttonPointHandler(uint32_t pressType) {
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
    osTaskDelHandler(buttonPointHandler);
 8004a3c:	4803      	ldr	r0, [pc, #12]	; (8004a4c <buttonPointHandler+0x18>)
 8004a3e:	f7ff fc8d 	bl	800435c <osTaskDelHandler>
}
 8004a42:	bf00      	nop
 8004a44:	3708      	adds	r7, #8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	08004a35 	.word	0x08004a35

08004a50 <buttonOkHandler>:

static void buttonOkHandler(uint32_t pressType) {
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
    osTaskDelHandler(buttonOkHandler);
 8004a58:	4803      	ldr	r0, [pc, #12]	; (8004a68 <buttonOkHandler+0x18>)
 8004a5a:	f7ff fc7f 	bl	800435c <osTaskDelHandler>
}
 8004a5e:	bf00      	nop
 8004a60:	3708      	adds	r7, #8
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	08004a51 	.word	0x08004a51

08004a6c <buttonNoHandler>:

static void buttonNoHandler(uint32_t pressType) {
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
    osTaskDelHandler(buttonNoHandler);
 8004a74:	4803      	ldr	r0, [pc, #12]	; (8004a84 <buttonNoHandler+0x18>)
 8004a76:	f7ff fc71 	bl	800435c <osTaskDelHandler>
}
 8004a7a:	bf00      	nop
 8004a7c:	3708      	adds	r7, #8
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	08004a6d 	.word	0x08004a6d

08004a88 <buttonPowerHandler>:

static void buttonPowerHandler(uint32_t pressType) {
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
    osTaskDelHandler(buttonPowerHandler);
 8004a90:	4803      	ldr	r0, [pc, #12]	; (8004aa0 <buttonPowerHandler+0x18>)
 8004a92:	f7ff fc63 	bl	800435c <osTaskDelHandler>
}
 8004a96:	bf00      	nop
 8004a98:	3708      	adds	r7, #8
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	08004a89 	.word	0x08004a89

08004aa4 <buttonsGetState>:
#include "button_config.h"
#include "button_hal.h"

static uint32_t buttonsState;

uint32_t buttonsGetState(void) {
 8004aa4:	b480      	push	{r7}
 8004aa6:	af00      	add	r7, sp, #0
    return buttonsState;
 8004aa8:	4b02      	ldr	r3, [pc, #8]	; (8004ab4 <buttonsGetState+0x10>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bc80      	pop	{r7}
 8004ab2:	4770      	bx	lr
 8004ab4:	200003e4 	.word	0x200003e4

08004ab8 <getRawButtonsState>:

uint32_t getRawButtonsState() {
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
    volatile uint32_t tmp = GPIOE->IDR & 0xFF;
 8004abe:	4b05      	ldr	r3, [pc, #20]	; (8004ad4 <getRawButtonsState+0x1c>)
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	607b      	str	r3, [r7, #4]
    return tmp;
 8004ac6:	687b      	ldr	r3, [r7, #4]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bc80      	pop	{r7}
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	48001000 	.word	0x48001000

08004ad8 <getPwrButtonState>:

uint32_t getPwrButtonState() {
 8004ad8:	b480      	push	{r7}
 8004ada:	af00      	add	r7, sp, #0
    if ((GPIOB->IDR & (1 << 5)) != 0) {
 8004adc:	4b06      	ldr	r3, [pc, #24]	; (8004af8 <getPwrButtonState+0x20>)
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	f003 0320 	and.w	r3, r3, #32
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d001      	beq.n	8004aec <getPwrButtonState+0x14>
        return 0;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	e000      	b.n	8004aee <getPwrButtonState+0x16>
    } else {
        return 1;
 8004aec:	2301      	movs	r3, #1
    }
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bc80      	pop	{r7}
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	48000400 	.word	0x48000400

08004afc <activateButtonColumn>:

void activateButtonColumn(uint8_t column) {
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	4603      	mov	r3, r0
 8004b04:	71fb      	strb	r3, [r7, #7]
    switch (column) {
 8004b06:	79fb      	ldrb	r3, [r7, #7]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d002      	beq.n	8004b12 <activateButtonColumn+0x16>
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d004      	beq.n	8004b1a <activateButtonColumn+0x1e>
    case 1:
        //Activate KEYS1
        GPIOB->BSRR = (1 << (3 + 16)) | (1 << 4); //Set PB4 clear PB3;
        break;
    }
}
 8004b10:	e007      	b.n	8004b22 <activateButtonColumn+0x26>
        GPIOB->BSRR = (1 << (4 + 16)) | (1 << 3); //Set PB3 clear PB4
 8004b12:	4b06      	ldr	r3, [pc, #24]	; (8004b2c <activateButtonColumn+0x30>)
 8004b14:	4a06      	ldr	r2, [pc, #24]	; (8004b30 <activateButtonColumn+0x34>)
 8004b16:	619a      	str	r2, [r3, #24]
        break;
 8004b18:	e003      	b.n	8004b22 <activateButtonColumn+0x26>
        GPIOB->BSRR = (1 << (3 + 16)) | (1 << 4); //Set PB4 clear PB3;
 8004b1a:	4b04      	ldr	r3, [pc, #16]	; (8004b2c <activateButtonColumn+0x30>)
 8004b1c:	4a05      	ldr	r2, [pc, #20]	; (8004b34 <activateButtonColumn+0x38>)
 8004b1e:	619a      	str	r2, [r3, #24]
        break;
 8004b20:	bf00      	nop
}
 8004b22:	bf00      	nop
 8004b24:	370c      	adds	r7, #12
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bc80      	pop	{r7}
 8004b2a:	4770      	bx	lr
 8004b2c:	48000400 	.word	0x48000400
 8004b30:	00100008 	.word	0x00100008
 8004b34:	00080010 	.word	0x00080010

08004b38 <handleChangedButtons>:

void handleChangedButtons(uint32_t newButtonsState) {
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
    uint32_t changes = buttonsState ^ newButtonsState;
 8004b40:	4b10      	ldr	r3, [pc, #64]	; (8004b84 <handleChangedButtons+0x4c>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	4053      	eors	r3, r2
 8004b48:	60bb      	str	r3, [r7, #8]

    buttonsState = newButtonsState;
 8004b4a:	4a0e      	ldr	r2, [pc, #56]	; (8004b84 <handleChangedButtons+0x4c>)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6013      	str	r3, [r2, #0]
    for (buttonName_t btn = Button_6; btn < Button_Last; btn++) {
 8004b50:	2300      	movs	r3, #0
 8004b52:	73fb      	strb	r3, [r7, #15]
 8004b54:	e00f      	b.n	8004b76 <handleChangedButtons+0x3e>
        if (changes & (1 << btn)) {
 8004b56:	7bfb      	ldrb	r3, [r7, #15]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5e:	461a      	mov	r2, r3
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	4013      	ands	r3, r2
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d003      	beq.n	8004b70 <handleChangedButtons+0x38>
            buttonInterruptHandler(btn);
 8004b68:	7bfb      	ldrb	r3, [r7, #15]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f000 f93e 	bl	8004dec <buttonInterruptHandler>
    for (buttonName_t btn = Button_6; btn < Button_Last; btn++) {
 8004b70:	7bfb      	ldrb	r3, [r7, #15]
 8004b72:	3301      	adds	r3, #1
 8004b74:	73fb      	strb	r3, [r7, #15]
 8004b76:	7bfb      	ldrb	r3, [r7, #15]
 8004b78:	2b10      	cmp	r3, #16
 8004b7a:	d9ec      	bls.n	8004b56 <handleChangedButtons+0x1e>
        }
    }
}
 8004b7c:	bf00      	nop
 8004b7e:	3710      	adds	r7, #16
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	200003e4 	.word	0x200003e4

08004b88 <buttonsPollTask>:

void buttonsPollTask(uint32_t parameter) {
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
    static uint8_t btn_poll_stage = 0;
    static uint32_t rawButtonState;

    switch (btn_poll_stage) {
 8004b90:	4b2a      	ldr	r3, [pc, #168]	; (8004c3c <buttonsPollTask+0xb4>)
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d016      	beq.n	8004bc6 <buttonsPollTask+0x3e>
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d028      	beq.n	8004bee <buttonsPollTask+0x66>
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d000      	beq.n	8004ba2 <buttonsPollTask+0x1a>
        handleChangedButtons((~rawButtonState) & 0x1FFFF);
        btn_poll_stage = 0;
        osTaskAdd(buttonsPollTask, 0, 5);
        break;
    }
}
 8004ba0:	e048      	b.n	8004c34 <buttonsPollTask+0xac>
        rawButtonState = 0;
 8004ba2:	4b27      	ldr	r3, [pc, #156]	; (8004c40 <buttonsPollTask+0xb8>)
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	601a      	str	r2, [r3, #0]
        activateButtonColumn(0);
 8004ba8:	2000      	movs	r0, #0
 8004baa:	f7ff ffa7 	bl	8004afc <activateButtonColumn>
        btn_poll_stage++;
 8004bae:	4b23      	ldr	r3, [pc, #140]	; (8004c3c <buttonsPollTask+0xb4>)
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	b2da      	uxtb	r2, r3
 8004bb6:	4b21      	ldr	r3, [pc, #132]	; (8004c3c <buttonsPollTask+0xb4>)
 8004bb8:	701a      	strb	r2, [r3, #0]
        osTaskAdd(buttonsPollTask, 0, 5);
 8004bba:	2205      	movs	r2, #5
 8004bbc:	2100      	movs	r1, #0
 8004bbe:	4821      	ldr	r0, [pc, #132]	; (8004c44 <buttonsPollTask+0xbc>)
 8004bc0:	f7ff fb52 	bl	8004268 <osTaskAdd>
        break;
 8004bc4:	e036      	b.n	8004c34 <buttonsPollTask+0xac>
        rawButtonState = getRawButtonsState();
 8004bc6:	f7ff ff77 	bl	8004ab8 <getRawButtonsState>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	4b1c      	ldr	r3, [pc, #112]	; (8004c40 <buttonsPollTask+0xb8>)
 8004bce:	601a      	str	r2, [r3, #0]
        activateButtonColumn(1);
 8004bd0:	2001      	movs	r0, #1
 8004bd2:	f7ff ff93 	bl	8004afc <activateButtonColumn>
        btn_poll_stage++;
 8004bd6:	4b19      	ldr	r3, [pc, #100]	; (8004c3c <buttonsPollTask+0xb4>)
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	3301      	adds	r3, #1
 8004bdc:	b2da      	uxtb	r2, r3
 8004bde:	4b17      	ldr	r3, [pc, #92]	; (8004c3c <buttonsPollTask+0xb4>)
 8004be0:	701a      	strb	r2, [r3, #0]
        osTaskAdd(buttonsPollTask, 0, 5);
 8004be2:	2205      	movs	r2, #5
 8004be4:	2100      	movs	r1, #0
 8004be6:	4817      	ldr	r0, [pc, #92]	; (8004c44 <buttonsPollTask+0xbc>)
 8004be8:	f7ff fb3e 	bl	8004268 <osTaskAdd>
        break;
 8004bec:	e022      	b.n	8004c34 <buttonsPollTask+0xac>
        rawButtonState |= getRawButtonsState() << 8;
 8004bee:	f7ff ff63 	bl	8004ab8 <getRawButtonsState>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	021a      	lsls	r2, r3, #8
 8004bf6:	4b12      	ldr	r3, [pc, #72]	; (8004c40 <buttonsPollTask+0xb8>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	4a10      	ldr	r2, [pc, #64]	; (8004c40 <buttonsPollTask+0xb8>)
 8004bfe:	6013      	str	r3, [r2, #0]
        rawButtonState |= getPwrButtonState() << 16;
 8004c00:	f7ff ff6a 	bl	8004ad8 <getPwrButtonState>
 8004c04:	4603      	mov	r3, r0
 8004c06:	041a      	lsls	r2, r3, #16
 8004c08:	4b0d      	ldr	r3, [pc, #52]	; (8004c40 <buttonsPollTask+0xb8>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	4a0c      	ldr	r2, [pc, #48]	; (8004c40 <buttonsPollTask+0xb8>)
 8004c10:	6013      	str	r3, [r2, #0]
        handleChangedButtons((~rawButtonState) & 0x1FFFF);
 8004c12:	4b0b      	ldr	r3, [pc, #44]	; (8004c40 <buttonsPollTask+0xb8>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	43db      	mvns	r3, r3
 8004c18:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7ff ff8b 	bl	8004b38 <handleChangedButtons>
        btn_poll_stage = 0;
 8004c22:	4b06      	ldr	r3, [pc, #24]	; (8004c3c <buttonsPollTask+0xb4>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	701a      	strb	r2, [r3, #0]
        osTaskAdd(buttonsPollTask, 0, 5);
 8004c28:	2205      	movs	r2, #5
 8004c2a:	2100      	movs	r1, #0
 8004c2c:	4805      	ldr	r0, [pc, #20]	; (8004c44 <buttonsPollTask+0xbc>)
 8004c2e:	f7ff fb1b 	bl	8004268 <osTaskAdd>
        break;
 8004c32:	bf00      	nop
}
 8004c34:	bf00      	nop
 8004c36:	3708      	adds	r7, #8
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	200003e8 	.word	0x200003e8
 8004c40:	200003ec 	.word	0x200003ec
 8004c44:	08004b89 	.word	0x08004b89

08004c48 <powerOff>:
#include "power_hal.h"
#include <stm32l4xx.h>

void powerOff() {
 8004c48:	b480      	push	{r7}
 8004c4a:	af00      	add	r7, sp, #0
    GPIOC->ODR &= ~(1 << 2);
 8004c4c:	4b04      	ldr	r3, [pc, #16]	; (8004c60 <powerOff+0x18>)
 8004c4e:	695b      	ldr	r3, [r3, #20]
 8004c50:	4a03      	ldr	r2, [pc, #12]	; (8004c60 <powerOff+0x18>)
 8004c52:	f023 0304 	bic.w	r3, r3, #4
 8004c56:	6153      	str	r3, [r2, #20]
}
 8004c58:	bf00      	nop
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bc80      	pop	{r7}
 8004c5e:	4770      	bx	lr
 8004c60:	48000800 	.word	0x48000800

08004c64 <buttonInit>:

static void buttonTaskProcess(uint32_t parameter);
static void buttonPressTask(uint32_t parameter);

// Функция инциализации модуля
void buttonInit(const buttonInitStruct_t *buttonInitData, uint8_t buttonNumber){
 8004c64:	b590      	push	{r4, r7, lr}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	70fb      	strb	r3, [r7, #3]
	memset(button, 0, sizeof(button));
 8004c70:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8004c74:	2100      	movs	r1, #0
 8004c76:	484f      	ldr	r0, [pc, #316]	; (8004db4 <buttonInit+0x150>)
 8004c78:	f000 fab0 	bl	80051dc <memset>

	for(uint8_t i = 0; i < buttonNumber; ++i)
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	73fb      	strb	r3, [r7, #15]
 8004c80:	e08e      	b.n	8004da0 <buttonInit+0x13c>
	{
		uint8_t buttonId = buttonInitData[i].name;
 8004c82:	7bfb      	ldrb	r3, [r7, #15]
 8004c84:	011b      	lsls	r3, r3, #4
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	4413      	add	r3, r2
 8004c8a:	7b1b      	ldrb	r3, [r3, #12]
 8004c8c:	73bb      	strb	r3, [r7, #14]
		if(button[buttonId].callBack == 0)
 8004c8e:	7bba      	ldrb	r2, [r7, #14]
 8004c90:	4948      	ldr	r1, [pc, #288]	; (8004db4 <buttonInit+0x150>)
 8004c92:	4613      	mov	r3, r2
 8004c94:	005b      	lsls	r3, r3, #1
 8004c96:	4413      	add	r3, r2
 8004c98:	00db      	lsls	r3, r3, #3
 8004c9a:	440b      	add	r3, r1
 8004c9c:	3308      	adds	r3, #8
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d17a      	bne.n	8004d9a <buttonInit+0x136>
		{
			button[buttonId].state = BUTTON_STATE_UNDEFINED;
 8004ca4:	7bba      	ldrb	r2, [r7, #14]
 8004ca6:	4943      	ldr	r1, [pc, #268]	; (8004db4 <buttonInit+0x150>)
 8004ca8:	4613      	mov	r3, r2
 8004caa:	005b      	lsls	r3, r3, #1
 8004cac:	4413      	add	r3, r2
 8004cae:	00db      	lsls	r3, r3, #3
 8004cb0:	440b      	add	r3, r1
 8004cb2:	2202      	movs	r2, #2
 8004cb4:	701a      	strb	r2, [r3, #0]
			button[buttonId].tempState = BUTTON_STATE_UNDEFINED;
 8004cb6:	7bba      	ldrb	r2, [r7, #14]
 8004cb8:	493e      	ldr	r1, [pc, #248]	; (8004db4 <buttonInit+0x150>)
 8004cba:	4613      	mov	r3, r2
 8004cbc:	005b      	lsls	r3, r3, #1
 8004cbe:	4413      	add	r3, r2
 8004cc0:	00db      	lsls	r3, r3, #3
 8004cc2:	440b      	add	r3, r1
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	2202      	movs	r2, #2
 8004cc8:	701a      	strb	r2, [r3, #0]
			button[buttonId].pressType = BUTTON_PRESS_NONE;
 8004cca:	7bba      	ldrb	r2, [r7, #14]
 8004ccc:	4939      	ldr	r1, [pc, #228]	; (8004db4 <buttonInit+0x150>)
 8004cce:	4613      	mov	r3, r2
 8004cd0:	005b      	lsls	r3, r3, #1
 8004cd2:	4413      	add	r3, r2
 8004cd4:	00db      	lsls	r3, r3, #3
 8004cd6:	440b      	add	r3, r1
 8004cd8:	3302      	adds	r3, #2
 8004cda:	2200      	movs	r2, #0
 8004cdc:	701a      	strb	r2, [r3, #0]
			button[buttonId].antiBounceAttempts = 0;
 8004cde:	7bba      	ldrb	r2, [r7, #14]
 8004ce0:	4934      	ldr	r1, [pc, #208]	; (8004db4 <buttonInit+0x150>)
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	005b      	lsls	r3, r3, #1
 8004ce6:	4413      	add	r3, r2
 8004ce8:	00db      	lsls	r3, r3, #3
 8004cea:	440b      	add	r3, r1
 8004cec:	3303      	adds	r3, #3
 8004cee:	2200      	movs	r2, #0
 8004cf0:	701a      	strb	r2, [r3, #0]
			button[buttonId].antiBounceSummary = 0;
 8004cf2:	7bba      	ldrb	r2, [r7, #14]
 8004cf4:	492f      	ldr	r1, [pc, #188]	; (8004db4 <buttonInit+0x150>)
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	005b      	lsls	r3, r3, #1
 8004cfa:	4413      	add	r3, r2
 8004cfc:	00db      	lsls	r3, r3, #3
 8004cfe:	440b      	add	r3, r1
 8004d00:	3304      	adds	r3, #4
 8004d02:	2200      	movs	r2, #0
 8004d04:	701a      	strb	r2, [r3, #0]

			button[buttonId].callBack = buttonInitData[i].callBack;
 8004d06:	7bfb      	ldrb	r3, [r7, #15]
 8004d08:	011b      	lsls	r3, r3, #4
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	7bba      	ldrb	r2, [r7, #14]
 8004d10:	6899      	ldr	r1, [r3, #8]
 8004d12:	4828      	ldr	r0, [pc, #160]	; (8004db4 <buttonInit+0x150>)
 8004d14:	4613      	mov	r3, r2
 8004d16:	005b      	lsls	r3, r3, #1
 8004d18:	4413      	add	r3, r2
 8004d1a:	00db      	lsls	r3, r3, #3
 8004d1c:	4403      	add	r3, r0
 8004d1e:	3308      	adds	r3, #8
 8004d20:	6019      	str	r1, [r3, #0]
			button[buttonId].init = buttonInitData[i].init;
 8004d22:	7bfb      	ldrb	r3, [r7, #15]
 8004d24:	011b      	lsls	r3, r3, #4
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	4413      	add	r3, r2
 8004d2a:	7bba      	ldrb	r2, [r7, #14]
 8004d2c:	6819      	ldr	r1, [r3, #0]
 8004d2e:	4821      	ldr	r0, [pc, #132]	; (8004db4 <buttonInit+0x150>)
 8004d30:	4613      	mov	r3, r2
 8004d32:	005b      	lsls	r3, r3, #1
 8004d34:	4413      	add	r3, r2
 8004d36:	00db      	lsls	r3, r3, #3
 8004d38:	4403      	add	r3, r0
 8004d3a:	330c      	adds	r3, #12
 8004d3c:	6019      	str	r1, [r3, #0]
			button[buttonId].getState = buttonInitData[i].getState;
 8004d3e:	7bfb      	ldrb	r3, [r7, #15]
 8004d40:	011b      	lsls	r3, r3, #4
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	4413      	add	r3, r2
 8004d46:	7bba      	ldrb	r2, [r7, #14]
 8004d48:	6859      	ldr	r1, [r3, #4]
 8004d4a:	481a      	ldr	r0, [pc, #104]	; (8004db4 <buttonInit+0x150>)
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	005b      	lsls	r3, r3, #1
 8004d50:	4413      	add	r3, r2
 8004d52:	00db      	lsls	r3, r3, #3
 8004d54:	4403      	add	r3, r0
 8004d56:	3310      	adds	r3, #16
 8004d58:	6019      	str	r1, [r3, #0]

			// Вопрос корректности. Надо подумать, что должно быть при включении устройства.
			//
			button[buttonId].init(btON);
 8004d5a:	7bba      	ldrb	r2, [r7, #14]
 8004d5c:	4915      	ldr	r1, [pc, #84]	; (8004db4 <buttonInit+0x150>)
 8004d5e:	4613      	mov	r3, r2
 8004d60:	005b      	lsls	r3, r3, #1
 8004d62:	4413      	add	r3, r2
 8004d64:	00db      	lsls	r3, r3, #3
 8004d66:	440b      	add	r3, r1
 8004d68:	330c      	adds	r3, #12
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2001      	movs	r0, #1
 8004d6e:	4798      	blx	r3
			button[buttonId].state = button[buttonId].getState();
 8004d70:	7bba      	ldrb	r2, [r7, #14]
 8004d72:	4910      	ldr	r1, [pc, #64]	; (8004db4 <buttonInit+0x150>)
 8004d74:	4613      	mov	r3, r2
 8004d76:	005b      	lsls	r3, r3, #1
 8004d78:	4413      	add	r3, r2
 8004d7a:	00db      	lsls	r3, r3, #3
 8004d7c:	440b      	add	r3, r1
 8004d7e:	3310      	adds	r3, #16
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	7bbc      	ldrb	r4, [r7, #14]
 8004d84:	4798      	blx	r3
 8004d86:	4603      	mov	r3, r0
 8004d88:	4619      	mov	r1, r3
 8004d8a:	4a0a      	ldr	r2, [pc, #40]	; (8004db4 <buttonInit+0x150>)
 8004d8c:	4623      	mov	r3, r4
 8004d8e:	005b      	lsls	r3, r3, #1
 8004d90:	4423      	add	r3, r4
 8004d92:	00db      	lsls	r3, r3, #3
 8004d94:	4413      	add	r3, r2
 8004d96:	460a      	mov	r2, r1
 8004d98:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < buttonNumber; ++i)
 8004d9a:	7bfb      	ldrb	r3, [r7, #15]
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	73fb      	strb	r3, [r7, #15]
 8004da0:	7bfa      	ldrb	r2, [r7, #15]
 8004da2:	78fb      	ldrb	r3, [r7, #3]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	f4ff af6c 	bcc.w	8004c82 <buttonInit+0x1e>
		else
		{
			// TODO generate assert
		}
	}
}
 8004daa:	bf00      	nop
 8004dac:	3714      	adds	r7, #20
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd90      	pop	{r4, r7, pc}
 8004db2:	bf00      	nop
 8004db4:	200003f0 	.word	0x200003f0

08004db8 <setButtonHandler>:

void setButtonHandler(uint8_t buttonId, task_t callBack) {
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	6039      	str	r1, [r7, #0]
 8004dc2:	71fb      	strb	r3, [r7, #7]
    if (callBack) {
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d009      	beq.n	8004dde <setButtonHandler+0x26>
        button[buttonId].callBack = callBack;
 8004dca:	79fa      	ldrb	r2, [r7, #7]
 8004dcc:	4906      	ldr	r1, [pc, #24]	; (8004de8 <setButtonHandler+0x30>)
 8004dce:	4613      	mov	r3, r2
 8004dd0:	005b      	lsls	r3, r3, #1
 8004dd2:	4413      	add	r3, r2
 8004dd4:	00db      	lsls	r3, r3, #3
 8004dd6:	440b      	add	r3, r1
 8004dd8:	3308      	adds	r3, #8
 8004dda:	683a      	ldr	r2, [r7, #0]
 8004ddc:	601a      	str	r2, [r3, #0]
    }
}
 8004dde:	bf00      	nop
 8004de0:	370c      	adds	r7, #12
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bc80      	pop	{r7}
 8004de6:	4770      	bx	lr
 8004de8:	200003f0 	.word	0x200003f0

08004dec <buttonInterruptHandler>:
void buttonInterruptHandler(uint8_t buttonId){
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	4603      	mov	r3, r0
 8004df4:	71fb      	strb	r3, [r7, #7]
// Выключили прерывания кнопочки
  button[buttonId].init(btOFF);
 8004df6:	79fa      	ldrb	r2, [r7, #7]
 8004df8:	4909      	ldr	r1, [pc, #36]	; (8004e20 <buttonInterruptHandler+0x34>)
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	005b      	lsls	r3, r3, #1
 8004dfe:	4413      	add	r3, r2
 8004e00:	00db      	lsls	r3, r3, #3
 8004e02:	440b      	add	r3, r1
 8004e04:	330c      	adds	r3, #12
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2000      	movs	r0, #0
 8004e0a:	4798      	blx	r3
  // С отлюченными прерываниями можно и обработать антидребезг. Сделано для уменьшения сработки прерываний
  osTaskAdd(buttonTaskProcess, buttonId, 0);
 8004e0c:	79fb      	ldrb	r3, [r7, #7]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	4619      	mov	r1, r3
 8004e12:	4804      	ldr	r0, [pc, #16]	; (8004e24 <buttonInterruptHandler+0x38>)
 8004e14:	f7ff fa28 	bl	8004268 <osTaskAdd>
}
 8004e18:	bf00      	nop
 8004e1a:	3708      	adds	r7, #8
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	200003f0 	.word	0x200003f0
 8004e24:	08004f91 	.word	0x08004f91

08004e28 <antiBounce>:


static antiBounse_t antiBounce(uint8_t buttonId) {
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	4603      	mov	r3, r0
 8004e30:	71fb      	strb	r3, [r7, #7]
	antiBounse_t result = antiBounceFail;
 8004e32:	2301      	movs	r3, #1
 8004e34:	73fb      	strb	r3, [r7, #15]
	buttonState_t state = button[buttonId].getState();
 8004e36:	79fa      	ldrb	r2, [r7, #7]
 8004e38:	4954      	ldr	r1, [pc, #336]	; (8004f8c <antiBounce+0x164>)
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	005b      	lsls	r3, r3, #1
 8004e3e:	4413      	add	r3, r2
 8004e40:	00db      	lsls	r3, r3, #3
 8004e42:	440b      	add	r3, r1
 8004e44:	3310      	adds	r3, #16
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4798      	blx	r3
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	73bb      	strb	r3, [r7, #14]

	if(button[buttonId].tempState == BUTTON_STATE_UNDEFINED)
 8004e4e:	79fa      	ldrb	r2, [r7, #7]
 8004e50:	494e      	ldr	r1, [pc, #312]	; (8004f8c <antiBounce+0x164>)
 8004e52:	4613      	mov	r3, r2
 8004e54:	005b      	lsls	r3, r3, #1
 8004e56:	4413      	add	r3, r2
 8004e58:	00db      	lsls	r3, r3, #3
 8004e5a:	440b      	add	r3, r1
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d113      	bne.n	8004e8c <antiBounce+0x64>
	{
		button[buttonId].antiBounceSummary = 0;
 8004e64:	79fa      	ldrb	r2, [r7, #7]
 8004e66:	4949      	ldr	r1, [pc, #292]	; (8004f8c <antiBounce+0x164>)
 8004e68:	4613      	mov	r3, r2
 8004e6a:	005b      	lsls	r3, r3, #1
 8004e6c:	4413      	add	r3, r2
 8004e6e:	00db      	lsls	r3, r3, #3
 8004e70:	440b      	add	r3, r1
 8004e72:	3304      	adds	r3, #4
 8004e74:	2200      	movs	r2, #0
 8004e76:	701a      	strb	r2, [r3, #0]
		button[buttonId].tempState = state;
 8004e78:	79fa      	ldrb	r2, [r7, #7]
 8004e7a:	4944      	ldr	r1, [pc, #272]	; (8004f8c <antiBounce+0x164>)
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	005b      	lsls	r3, r3, #1
 8004e80:	4413      	add	r3, r2
 8004e82:	00db      	lsls	r3, r3, #3
 8004e84:	440b      	add	r3, r1
 8004e86:	3301      	adds	r3, #1
 8004e88:	7bba      	ldrb	r2, [r7, #14]
 8004e8a:	701a      	strb	r2, [r3, #0]
	}
	//TODO check current state and compare

	if(state == button[buttonId].tempState){
 8004e8c:	79fa      	ldrb	r2, [r7, #7]
 8004e8e:	493f      	ldr	r1, [pc, #252]	; (8004f8c <antiBounce+0x164>)
 8004e90:	4613      	mov	r3, r2
 8004e92:	005b      	lsls	r3, r3, #1
 8004e94:	4413      	add	r3, r2
 8004e96:	00db      	lsls	r3, r3, #3
 8004e98:	440b      	add	r3, r1
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	7bba      	ldrb	r2, [r7, #14]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d164      	bne.n	8004f6e <antiBounce+0x146>
		button[buttonId].antiBounceAttempts++;
 8004ea4:	79fa      	ldrb	r2, [r7, #7]
 8004ea6:	4939      	ldr	r1, [pc, #228]	; (8004f8c <antiBounce+0x164>)
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	005b      	lsls	r3, r3, #1
 8004eac:	4413      	add	r3, r2
 8004eae:	00db      	lsls	r3, r3, #3
 8004eb0:	440b      	add	r3, r1
 8004eb2:	3303      	adds	r3, #3
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	b2d8      	uxtb	r0, r3
 8004eba:	4934      	ldr	r1, [pc, #208]	; (8004f8c <antiBounce+0x164>)
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	005b      	lsls	r3, r3, #1
 8004ec0:	4413      	add	r3, r2
 8004ec2:	00db      	lsls	r3, r3, #3
 8004ec4:	440b      	add	r3, r1
 8004ec6:	3303      	adds	r3, #3
 8004ec8:	4602      	mov	r2, r0
 8004eca:	701a      	strb	r2, [r3, #0]
		button[buttonId].antiBounceSummary++;
 8004ecc:	79fa      	ldrb	r2, [r7, #7]
 8004ece:	492f      	ldr	r1, [pc, #188]	; (8004f8c <antiBounce+0x164>)
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	005b      	lsls	r3, r3, #1
 8004ed4:	4413      	add	r3, r2
 8004ed6:	00db      	lsls	r3, r3, #3
 8004ed8:	440b      	add	r3, r1
 8004eda:	3304      	adds	r3, #4
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	3301      	adds	r3, #1
 8004ee0:	b2d8      	uxtb	r0, r3
 8004ee2:	492a      	ldr	r1, [pc, #168]	; (8004f8c <antiBounce+0x164>)
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	005b      	lsls	r3, r3, #1
 8004ee8:	4413      	add	r3, r2
 8004eea:	00db      	lsls	r3, r3, #3
 8004eec:	440b      	add	r3, r1
 8004eee:	3304      	adds	r3, #4
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	701a      	strb	r2, [r3, #0]
		if(button[buttonId].antiBounceAttempts >= normalAntiBounceAttempts){
 8004ef4:	79fa      	ldrb	r2, [r7, #7]
 8004ef6:	4925      	ldr	r1, [pc, #148]	; (8004f8c <antiBounce+0x164>)
 8004ef8:	4613      	mov	r3, r2
 8004efa:	005b      	lsls	r3, r3, #1
 8004efc:	4413      	add	r3, r2
 8004efe:	00db      	lsls	r3, r3, #3
 8004f00:	440b      	add	r3, r1
 8004f02:	3303      	adds	r3, #3
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	2205      	movs	r2, #5
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d328      	bcc.n	8004f5e <antiBounce+0x136>
			result = antiBounceOk;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	73fb      	strb	r3, [r7, #15]
			button[buttonId].antiBounceAttempts = 0;
 8004f10:	79fa      	ldrb	r2, [r7, #7]
 8004f12:	491e      	ldr	r1, [pc, #120]	; (8004f8c <antiBounce+0x164>)
 8004f14:	4613      	mov	r3, r2
 8004f16:	005b      	lsls	r3, r3, #1
 8004f18:	4413      	add	r3, r2
 8004f1a:	00db      	lsls	r3, r3, #3
 8004f1c:	440b      	add	r3, r1
 8004f1e:	3303      	adds	r3, #3
 8004f20:	2200      	movs	r2, #0
 8004f22:	701a      	strb	r2, [r3, #0]
			button[buttonId].state = button[buttonId].tempState;
 8004f24:	79f9      	ldrb	r1, [r7, #7]
 8004f26:	79fa      	ldrb	r2, [r7, #7]
 8004f28:	4818      	ldr	r0, [pc, #96]	; (8004f8c <antiBounce+0x164>)
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	005b      	lsls	r3, r3, #1
 8004f2e:	440b      	add	r3, r1
 8004f30:	00db      	lsls	r3, r3, #3
 8004f32:	4403      	add	r3, r0
 8004f34:	3301      	adds	r3, #1
 8004f36:	7818      	ldrb	r0, [r3, #0]
 8004f38:	4914      	ldr	r1, [pc, #80]	; (8004f8c <antiBounce+0x164>)
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	005b      	lsls	r3, r3, #1
 8004f3e:	4413      	add	r3, r2
 8004f40:	00db      	lsls	r3, r3, #3
 8004f42:	440b      	add	r3, r1
 8004f44:	4602      	mov	r2, r0
 8004f46:	701a      	strb	r2, [r3, #0]
			button[buttonId].tempState = BUTTON_STATE_UNDEFINED;
 8004f48:	79fa      	ldrb	r2, [r7, #7]
 8004f4a:	4910      	ldr	r1, [pc, #64]	; (8004f8c <antiBounce+0x164>)
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	005b      	lsls	r3, r3, #1
 8004f50:	4413      	add	r3, r2
 8004f52:	00db      	lsls	r3, r3, #3
 8004f54:	440b      	add	r3, r1
 8004f56:	3301      	adds	r3, #1
 8004f58:	2202      	movs	r2, #2
 8004f5a:	701a      	strb	r2, [r3, #0]
 8004f5c:	e001      	b.n	8004f62 <antiBounce+0x13a>
		}
		else{
			result = antiBounceNext;
 8004f5e:	2302      	movs	r3, #2
 8004f60:	73fb      	strb	r3, [r7, #15]
		}
		if(button[buttonId].antiBounceSummary >= maxAntiBounceAttempt){
 8004f62:	79fa      	ldrb	r2, [r7, #7]
 8004f64:	4613      	mov	r3, r2
 8004f66:	005b      	lsls	r3, r3, #1
 8004f68:	4413      	add	r3, r2
 8004f6a:	00db      	lsls	r3, r3, #3
 8004f6c:	e009      	b.n	8004f82 <antiBounce+0x15a>
			// TODO add assert for mechanical noise
		}
	}
	else{
		button[buttonId].antiBounceAttempts = 0;
 8004f6e:	79fa      	ldrb	r2, [r7, #7]
 8004f70:	4906      	ldr	r1, [pc, #24]	; (8004f8c <antiBounce+0x164>)
 8004f72:	4613      	mov	r3, r2
 8004f74:	005b      	lsls	r3, r3, #1
 8004f76:	4413      	add	r3, r2
 8004f78:	00db      	lsls	r3, r3, #3
 8004f7a:	440b      	add	r3, r1
 8004f7c:	3303      	adds	r3, #3
 8004f7e:	2200      	movs	r2, #0
 8004f80:	701a      	strb	r2, [r3, #0]
	}
	return result;
 8004f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3710      	adds	r7, #16
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	200003f0 	.word	0x200003f0

08004f90 <buttonTaskProcess>:


static void buttonTaskProcess(uint32_t parameter){
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
	uint8_t buttonId = (uint8_t)parameter;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	73fb      	strb	r3, [r7, #15]

	antiBounse_t antiBounceState = antiBounce(buttonId);
 8004f9c:	7bfb      	ldrb	r3, [r7, #15]
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f7ff ff42 	bl	8004e28 <antiBounce>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	73bb      	strb	r3, [r7, #14]
	if(antiBounceState == antiBounceNext){
 8004fa8:	7bbb      	ldrb	r3, [r7, #14]
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d106      	bne.n	8004fbc <buttonTaskProcess+0x2c>
		osTaskAdd(buttonTaskProcess, buttonId, timeBetweenChecks);
 8004fae:	7bfb      	ldrb	r3, [r7, #15]
 8004fb0:	2205      	movs	r2, #5
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	483b      	ldr	r0, [pc, #236]	; (80050a4 <buttonTaskProcess+0x114>)
 8004fb6:	f7ff f957 	bl	8004268 <osTaskAdd>
			osTaskAdd(button[buttonId].callBack, (uint32_t)button[buttonId].pressType, 0);
			button[buttonId].pressType = BUTTON_PRESS_NONE;

		}
	}
}
 8004fba:	e06f      	b.n	800509c <buttonTaskProcess+0x10c>
	else if(antiBounceState == antiBounceOk){
 8004fbc:	7bbb      	ldrb	r3, [r7, #14]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d16c      	bne.n	800509c <buttonTaskProcess+0x10c>
		button[buttonId].init(btON);
 8004fc2:	7bfa      	ldrb	r2, [r7, #15]
 8004fc4:	4938      	ldr	r1, [pc, #224]	; (80050a8 <buttonTaskProcess+0x118>)
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	005b      	lsls	r3, r3, #1
 8004fca:	4413      	add	r3, r2
 8004fcc:	00db      	lsls	r3, r3, #3
 8004fce:	440b      	add	r3, r1
 8004fd0:	330c      	adds	r3, #12
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2001      	movs	r0, #1
 8004fd6:	4798      	blx	r3
		if(button[buttonId].state == BUTTON_PRESSED){
 8004fd8:	7bfa      	ldrb	r2, [r7, #15]
 8004fda:	4933      	ldr	r1, [pc, #204]	; (80050a8 <buttonTaskProcess+0x118>)
 8004fdc:	4613      	mov	r3, r2
 8004fde:	005b      	lsls	r3, r3, #1
 8004fe0:	4413      	add	r3, r2
 8004fe2:	00db      	lsls	r3, r3, #3
 8004fe4:	440b      	add	r3, r1
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d11f      	bne.n	800502c <buttonTaskProcess+0x9c>
			button[buttonId].pressType = BUTTON_PRESS_SHORT;
 8004fec:	7bfa      	ldrb	r2, [r7, #15]
 8004fee:	492e      	ldr	r1, [pc, #184]	; (80050a8 <buttonTaskProcess+0x118>)
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	005b      	lsls	r3, r3, #1
 8004ff4:	4413      	add	r3, r2
 8004ff6:	00db      	lsls	r3, r3, #3
 8004ff8:	440b      	add	r3, r1
 8004ffa:	3302      	adds	r3, #2
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	701a      	strb	r2, [r3, #0]
			TIME_T taskTime = BUTTON_PRESS_TIME - (button[buttonId].antiBounceSummary * timeBetweenChecks); // TODO check validity
 8005000:	7bfa      	ldrb	r2, [r7, #15]
 8005002:	4929      	ldr	r1, [pc, #164]	; (80050a8 <buttonTaskProcess+0x118>)
 8005004:	4613      	mov	r3, r2
 8005006:	005b      	lsls	r3, r3, #1
 8005008:	4413      	add	r3, r2
 800500a:	00db      	lsls	r3, r3, #3
 800500c:	440b      	add	r3, r1
 800500e:	3304      	adds	r3, #4
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	2205      	movs	r2, #5
 8005014:	fb02 f303 	mul.w	r3, r2, r3
 8005018:	f5c3 73c8 	rsb	r3, r3, #400	; 0x190
 800501c:	60bb      	str	r3, [r7, #8]
			osTaskAdd(buttonPressTask, buttonId, taskTime);
 800501e:	7bfb      	ldrb	r3, [r7, #15]
 8005020:	68ba      	ldr	r2, [r7, #8]
 8005022:	4619      	mov	r1, r3
 8005024:	4821      	ldr	r0, [pc, #132]	; (80050ac <buttonTaskProcess+0x11c>)
 8005026:	f7ff f91f 	bl	8004268 <osTaskAdd>
}
 800502a:	e037      	b.n	800509c <buttonTaskProcess+0x10c>
			if(button[buttonId].pressType != BUTTON_PRESS_NONE){
 800502c:	7bfa      	ldrb	r2, [r7, #15]
 800502e:	491e      	ldr	r1, [pc, #120]	; (80050a8 <buttonTaskProcess+0x118>)
 8005030:	4613      	mov	r3, r2
 8005032:	005b      	lsls	r3, r3, #1
 8005034:	4413      	add	r3, r2
 8005036:	00db      	lsls	r3, r3, #3
 8005038:	440b      	add	r3, r1
 800503a:	3302      	adds	r3, #2
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00c      	beq.n	800505c <buttonTaskProcess+0xcc>
				osTaskDelId(button[buttonId].taskId, buttonPressTask);
 8005042:	7bfa      	ldrb	r2, [r7, #15]
 8005044:	4918      	ldr	r1, [pc, #96]	; (80050a8 <buttonTaskProcess+0x118>)
 8005046:	4613      	mov	r3, r2
 8005048:	005b      	lsls	r3, r3, #1
 800504a:	4413      	add	r3, r2
 800504c:	00db      	lsls	r3, r3, #3
 800504e:	440b      	add	r3, r1
 8005050:	3314      	adds	r3, #20
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4915      	ldr	r1, [pc, #84]	; (80050ac <buttonTaskProcess+0x11c>)
 8005056:	4618      	mov	r0, r3
 8005058:	f7ff f944 	bl	80042e4 <osTaskDelId>
			osTaskAdd(button[buttonId].callBack, (uint32_t)button[buttonId].pressType, 0);
 800505c:	7bfa      	ldrb	r2, [r7, #15]
 800505e:	4912      	ldr	r1, [pc, #72]	; (80050a8 <buttonTaskProcess+0x118>)
 8005060:	4613      	mov	r3, r2
 8005062:	005b      	lsls	r3, r3, #1
 8005064:	4413      	add	r3, r2
 8005066:	00db      	lsls	r3, r3, #3
 8005068:	440b      	add	r3, r1
 800506a:	3308      	adds	r3, #8
 800506c:	6818      	ldr	r0, [r3, #0]
 800506e:	7bfa      	ldrb	r2, [r7, #15]
 8005070:	490d      	ldr	r1, [pc, #52]	; (80050a8 <buttonTaskProcess+0x118>)
 8005072:	4613      	mov	r3, r2
 8005074:	005b      	lsls	r3, r3, #1
 8005076:	4413      	add	r3, r2
 8005078:	00db      	lsls	r3, r3, #3
 800507a:	440b      	add	r3, r1
 800507c:	3302      	adds	r3, #2
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	2200      	movs	r2, #0
 8005082:	4619      	mov	r1, r3
 8005084:	f7ff f8f0 	bl	8004268 <osTaskAdd>
			button[buttonId].pressType = BUTTON_PRESS_NONE;
 8005088:	7bfa      	ldrb	r2, [r7, #15]
 800508a:	4907      	ldr	r1, [pc, #28]	; (80050a8 <buttonTaskProcess+0x118>)
 800508c:	4613      	mov	r3, r2
 800508e:	005b      	lsls	r3, r3, #1
 8005090:	4413      	add	r3, r2
 8005092:	00db      	lsls	r3, r3, #3
 8005094:	440b      	add	r3, r1
 8005096:	3302      	adds	r3, #2
 8005098:	2200      	movs	r2, #0
 800509a:	701a      	strb	r2, [r3, #0]
}
 800509c:	bf00      	nop
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	08004f91 	.word	0x08004f91
 80050a8:	200003f0 	.word	0x200003f0
 80050ac:	080050b1 	.word	0x080050b1

080050b0 <buttonPressTask>:

static void buttonPressTask(uint32_t parameter){
 80050b0:	b590      	push	{r4, r7, lr}
 80050b2:	b087      	sub	sp, #28
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
	uint8_t buttonId = (uint8_t)parameter;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	75fb      	strb	r3, [r7, #23]
	if(button[buttonId].pressType == BUTTON_PRESS_SHORT){
 80050bc:	7dfa      	ldrb	r2, [r7, #23]
 80050be:	4935      	ldr	r1, [pc, #212]	; (8005194 <buttonPressTask+0xe4>)
 80050c0:	4613      	mov	r3, r2
 80050c2:	005b      	lsls	r3, r3, #1
 80050c4:	4413      	add	r3, r2
 80050c6:	00db      	lsls	r3, r3, #3
 80050c8:	440b      	add	r3, r1
 80050ca:	3302      	adds	r3, #2
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d11d      	bne.n	800510e <buttonPressTask+0x5e>
		button[buttonId].pressType = BUTTON_PRESS_LONG;
 80050d2:	7dfa      	ldrb	r2, [r7, #23]
 80050d4:	492f      	ldr	r1, [pc, #188]	; (8005194 <buttonPressTask+0xe4>)
 80050d6:	4613      	mov	r3, r2
 80050d8:	005b      	lsls	r3, r3, #1
 80050da:	4413      	add	r3, r2
 80050dc:	00db      	lsls	r3, r3, #3
 80050de:	440b      	add	r3, r1
 80050e0:	3302      	adds	r3, #2
 80050e2:	2202      	movs	r2, #2
 80050e4:	701a      	strb	r2, [r3, #0]
		TIME_T taskTime = BUTTON_LONG_PRESS_TIME - BUTTON_PRESS_TIME;
 80050e6:	f240 434c 	movw	r3, #1100	; 0x44c
 80050ea:	60fb      	str	r3, [r7, #12]
		button[buttonId].taskId = osTaskAdd(buttonPressTask, buttonId, taskTime);
 80050ec:	7dfb      	ldrb	r3, [r7, #23]
 80050ee:	7dfc      	ldrb	r4, [r7, #23]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	4619      	mov	r1, r3
 80050f4:	4828      	ldr	r0, [pc, #160]	; (8005198 <buttonPressTask+0xe8>)
 80050f6:	f7ff f8b7 	bl	8004268 <osTaskAdd>
 80050fa:	4601      	mov	r1, r0
 80050fc:	4a25      	ldr	r2, [pc, #148]	; (8005194 <buttonPressTask+0xe4>)
 80050fe:	4623      	mov	r3, r4
 8005100:	005b      	lsls	r3, r3, #1
 8005102:	4423      	add	r3, r4
 8005104:	00db      	lsls	r3, r3, #3
 8005106:	4413      	add	r3, r2
 8005108:	3314      	adds	r3, #20
 800510a:	6019      	str	r1, [r3, #0]
		TIME_T taskTime = BUTTON_LONG_PRESS_TIME - BUTTON_PRESS_TIME;
		button[buttonId].taskId = osTaskAdd(buttonPressTask, buttonId, taskTime);

		osTaskAdd(button[buttonId].callBack, (uint32_t)button[buttonId].pressType, 0);
	}
}
 800510c:	e03d      	b.n	800518a <buttonPressTask+0xda>
	else if(button[buttonId].pressType == BUTTON_PRESS_LONG){
 800510e:	7dfa      	ldrb	r2, [r7, #23]
 8005110:	4920      	ldr	r1, [pc, #128]	; (8005194 <buttonPressTask+0xe4>)
 8005112:	4613      	mov	r3, r2
 8005114:	005b      	lsls	r3, r3, #1
 8005116:	4413      	add	r3, r2
 8005118:	00db      	lsls	r3, r3, #3
 800511a:	440b      	add	r3, r1
 800511c:	3302      	adds	r3, #2
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	2b02      	cmp	r3, #2
 8005122:	d132      	bne.n	800518a <buttonPressTask+0xda>
		button[buttonId].pressType = BUTTON_PRESS_STICK;
 8005124:	7dfa      	ldrb	r2, [r7, #23]
 8005126:	491b      	ldr	r1, [pc, #108]	; (8005194 <buttonPressTask+0xe4>)
 8005128:	4613      	mov	r3, r2
 800512a:	005b      	lsls	r3, r3, #1
 800512c:	4413      	add	r3, r2
 800512e:	00db      	lsls	r3, r3, #3
 8005130:	440b      	add	r3, r1
 8005132:	3302      	adds	r3, #2
 8005134:	2203      	movs	r2, #3
 8005136:	701a      	strb	r2, [r3, #0]
		TIME_T taskTime = BUTTON_LONG_PRESS_TIME - BUTTON_PRESS_TIME;
 8005138:	f240 434c 	movw	r3, #1100	; 0x44c
 800513c:	613b      	str	r3, [r7, #16]
		button[buttonId].taskId = osTaskAdd(buttonPressTask, buttonId, taskTime);
 800513e:	7dfb      	ldrb	r3, [r7, #23]
 8005140:	7dfc      	ldrb	r4, [r7, #23]
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	4619      	mov	r1, r3
 8005146:	4814      	ldr	r0, [pc, #80]	; (8005198 <buttonPressTask+0xe8>)
 8005148:	f7ff f88e 	bl	8004268 <osTaskAdd>
 800514c:	4601      	mov	r1, r0
 800514e:	4a11      	ldr	r2, [pc, #68]	; (8005194 <buttonPressTask+0xe4>)
 8005150:	4623      	mov	r3, r4
 8005152:	005b      	lsls	r3, r3, #1
 8005154:	4423      	add	r3, r4
 8005156:	00db      	lsls	r3, r3, #3
 8005158:	4413      	add	r3, r2
 800515a:	3314      	adds	r3, #20
 800515c:	6019      	str	r1, [r3, #0]
		osTaskAdd(button[buttonId].callBack, (uint32_t)button[buttonId].pressType, 0);
 800515e:	7dfa      	ldrb	r2, [r7, #23]
 8005160:	490c      	ldr	r1, [pc, #48]	; (8005194 <buttonPressTask+0xe4>)
 8005162:	4613      	mov	r3, r2
 8005164:	005b      	lsls	r3, r3, #1
 8005166:	4413      	add	r3, r2
 8005168:	00db      	lsls	r3, r3, #3
 800516a:	440b      	add	r3, r1
 800516c:	3308      	adds	r3, #8
 800516e:	6818      	ldr	r0, [r3, #0]
 8005170:	7dfa      	ldrb	r2, [r7, #23]
 8005172:	4908      	ldr	r1, [pc, #32]	; (8005194 <buttonPressTask+0xe4>)
 8005174:	4613      	mov	r3, r2
 8005176:	005b      	lsls	r3, r3, #1
 8005178:	4413      	add	r3, r2
 800517a:	00db      	lsls	r3, r3, #3
 800517c:	440b      	add	r3, r1
 800517e:	3302      	adds	r3, #2
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	2200      	movs	r2, #0
 8005184:	4619      	mov	r1, r3
 8005186:	f7ff f86f 	bl	8004268 <osTaskAdd>
}
 800518a:	bf00      	nop
 800518c:	371c      	adds	r7, #28
 800518e:	46bd      	mov	sp, r7
 8005190:	bd90      	pop	{r4, r7, pc}
 8005192:	bf00      	nop
 8005194:	200003f0 	.word	0x200003f0
 8005198:	080050b1 	.word	0x080050b1

0800519c <__errno>:
 800519c:	4b01      	ldr	r3, [pc, #4]	; (80051a4 <__errno+0x8>)
 800519e:	6818      	ldr	r0, [r3, #0]
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	20000090 	.word	0x20000090

080051a8 <__itoa>:
 80051a8:	1e93      	subs	r3, r2, #2
 80051aa:	2b22      	cmp	r3, #34	; 0x22
 80051ac:	b510      	push	{r4, lr}
 80051ae:	460c      	mov	r4, r1
 80051b0:	d904      	bls.n	80051bc <__itoa+0x14>
 80051b2:	2300      	movs	r3, #0
 80051b4:	700b      	strb	r3, [r1, #0]
 80051b6:	461c      	mov	r4, r3
 80051b8:	4620      	mov	r0, r4
 80051ba:	bd10      	pop	{r4, pc}
 80051bc:	2a0a      	cmp	r2, #10
 80051be:	d109      	bne.n	80051d4 <__itoa+0x2c>
 80051c0:	2800      	cmp	r0, #0
 80051c2:	da07      	bge.n	80051d4 <__itoa+0x2c>
 80051c4:	232d      	movs	r3, #45	; 0x2d
 80051c6:	700b      	strb	r3, [r1, #0]
 80051c8:	4240      	negs	r0, r0
 80051ca:	2101      	movs	r1, #1
 80051cc:	4421      	add	r1, r4
 80051ce:	f000 f865 	bl	800529c <__utoa>
 80051d2:	e7f1      	b.n	80051b8 <__itoa+0x10>
 80051d4:	2100      	movs	r1, #0
 80051d6:	e7f9      	b.n	80051cc <__itoa+0x24>

080051d8 <itoa>:
 80051d8:	f7ff bfe6 	b.w	80051a8 <__itoa>

080051dc <memset>:
 80051dc:	4402      	add	r2, r0
 80051de:	4603      	mov	r3, r0
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d100      	bne.n	80051e6 <memset+0xa>
 80051e4:	4770      	bx	lr
 80051e6:	f803 1b01 	strb.w	r1, [r3], #1
 80051ea:	e7f9      	b.n	80051e0 <memset+0x4>

080051ec <srand>:
 80051ec:	b538      	push	{r3, r4, r5, lr}
 80051ee:	4b0d      	ldr	r3, [pc, #52]	; (8005224 <srand+0x38>)
 80051f0:	681c      	ldr	r4, [r3, #0]
 80051f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80051f4:	4605      	mov	r5, r0
 80051f6:	b97b      	cbnz	r3, 8005218 <srand+0x2c>
 80051f8:	2018      	movs	r0, #24
 80051fa:	f000 f8c7 	bl	800538c <malloc>
 80051fe:	4a0a      	ldr	r2, [pc, #40]	; (8005228 <srand+0x3c>)
 8005200:	4b0a      	ldr	r3, [pc, #40]	; (800522c <srand+0x40>)
 8005202:	63a0      	str	r0, [r4, #56]	; 0x38
 8005204:	e9c0 2300 	strd	r2, r3, [r0]
 8005208:	4b09      	ldr	r3, [pc, #36]	; (8005230 <srand+0x44>)
 800520a:	6083      	str	r3, [r0, #8]
 800520c:	230b      	movs	r3, #11
 800520e:	8183      	strh	r3, [r0, #12]
 8005210:	2201      	movs	r2, #1
 8005212:	2300      	movs	r3, #0
 8005214:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8005218:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800521a:	2200      	movs	r2, #0
 800521c:	611d      	str	r5, [r3, #16]
 800521e:	615a      	str	r2, [r3, #20]
 8005220:	bd38      	pop	{r3, r4, r5, pc}
 8005222:	bf00      	nop
 8005224:	20000090 	.word	0x20000090
 8005228:	abcd330e 	.word	0xabcd330e
 800522c:	e66d1234 	.word	0xe66d1234
 8005230:	0005deec 	.word	0x0005deec

08005234 <rand>:
 8005234:	b538      	push	{r3, r4, r5, lr}
 8005236:	4b13      	ldr	r3, [pc, #76]	; (8005284 <rand+0x50>)
 8005238:	681c      	ldr	r4, [r3, #0]
 800523a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800523c:	b97b      	cbnz	r3, 800525e <rand+0x2a>
 800523e:	2018      	movs	r0, #24
 8005240:	f000 f8a4 	bl	800538c <malloc>
 8005244:	4a10      	ldr	r2, [pc, #64]	; (8005288 <rand+0x54>)
 8005246:	4b11      	ldr	r3, [pc, #68]	; (800528c <rand+0x58>)
 8005248:	63a0      	str	r0, [r4, #56]	; 0x38
 800524a:	e9c0 2300 	strd	r2, r3, [r0]
 800524e:	4b10      	ldr	r3, [pc, #64]	; (8005290 <rand+0x5c>)
 8005250:	6083      	str	r3, [r0, #8]
 8005252:	230b      	movs	r3, #11
 8005254:	8183      	strh	r3, [r0, #12]
 8005256:	2201      	movs	r2, #1
 8005258:	2300      	movs	r3, #0
 800525a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800525e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005260:	480c      	ldr	r0, [pc, #48]	; (8005294 <rand+0x60>)
 8005262:	690a      	ldr	r2, [r1, #16]
 8005264:	694b      	ldr	r3, [r1, #20]
 8005266:	4c0c      	ldr	r4, [pc, #48]	; (8005298 <rand+0x64>)
 8005268:	4350      	muls	r0, r2
 800526a:	fb04 0003 	mla	r0, r4, r3, r0
 800526e:	fba2 2304 	umull	r2, r3, r2, r4
 8005272:	4403      	add	r3, r0
 8005274:	1c54      	adds	r4, r2, #1
 8005276:	f143 0500 	adc.w	r5, r3, #0
 800527a:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800527e:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8005282:	bd38      	pop	{r3, r4, r5, pc}
 8005284:	20000090 	.word	0x20000090
 8005288:	abcd330e 	.word	0xabcd330e
 800528c:	e66d1234 	.word	0xe66d1234
 8005290:	0005deec 	.word	0x0005deec
 8005294:	5851f42d 	.word	0x5851f42d
 8005298:	4c957f2d 	.word	0x4c957f2d

0800529c <__utoa>:
 800529c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800529e:	4b1d      	ldr	r3, [pc, #116]	; (8005314 <__utoa+0x78>)
 80052a0:	b08b      	sub	sp, #44	; 0x2c
 80052a2:	4605      	mov	r5, r0
 80052a4:	460c      	mov	r4, r1
 80052a6:	466e      	mov	r6, sp
 80052a8:	f103 0c20 	add.w	ip, r3, #32
 80052ac:	6818      	ldr	r0, [r3, #0]
 80052ae:	6859      	ldr	r1, [r3, #4]
 80052b0:	4637      	mov	r7, r6
 80052b2:	c703      	stmia	r7!, {r0, r1}
 80052b4:	3308      	adds	r3, #8
 80052b6:	4563      	cmp	r3, ip
 80052b8:	463e      	mov	r6, r7
 80052ba:	d1f7      	bne.n	80052ac <__utoa+0x10>
 80052bc:	6818      	ldr	r0, [r3, #0]
 80052be:	791b      	ldrb	r3, [r3, #4]
 80052c0:	713b      	strb	r3, [r7, #4]
 80052c2:	1e93      	subs	r3, r2, #2
 80052c4:	2b22      	cmp	r3, #34	; 0x22
 80052c6:	6038      	str	r0, [r7, #0]
 80052c8:	f04f 0300 	mov.w	r3, #0
 80052cc:	d904      	bls.n	80052d8 <__utoa+0x3c>
 80052ce:	7023      	strb	r3, [r4, #0]
 80052d0:	461c      	mov	r4, r3
 80052d2:	4620      	mov	r0, r4
 80052d4:	b00b      	add	sp, #44	; 0x2c
 80052d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052d8:	1e66      	subs	r6, r4, #1
 80052da:	fbb5 f0f2 	udiv	r0, r5, r2
 80052de:	af0a      	add	r7, sp, #40	; 0x28
 80052e0:	fb02 5510 	mls	r5, r2, r0, r5
 80052e4:	443d      	add	r5, r7
 80052e6:	1c59      	adds	r1, r3, #1
 80052e8:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 80052ec:	f806 5f01 	strb.w	r5, [r6, #1]!
 80052f0:	4605      	mov	r5, r0
 80052f2:	b968      	cbnz	r0, 8005310 <__utoa+0x74>
 80052f4:	5460      	strb	r0, [r4, r1]
 80052f6:	4423      	add	r3, r4
 80052f8:	4622      	mov	r2, r4
 80052fa:	1b19      	subs	r1, r3, r4
 80052fc:	1b10      	subs	r0, r2, r4
 80052fe:	4281      	cmp	r1, r0
 8005300:	dde7      	ble.n	80052d2 <__utoa+0x36>
 8005302:	7811      	ldrb	r1, [r2, #0]
 8005304:	7818      	ldrb	r0, [r3, #0]
 8005306:	f802 0b01 	strb.w	r0, [r2], #1
 800530a:	f803 1901 	strb.w	r1, [r3], #-1
 800530e:	e7f4      	b.n	80052fa <__utoa+0x5e>
 8005310:	460b      	mov	r3, r1
 8005312:	e7e2      	b.n	80052da <__utoa+0x3e>
 8005314:	0800c028 	.word	0x0800c028

08005318 <_vsniprintf_r>:
 8005318:	b530      	push	{r4, r5, lr}
 800531a:	1e14      	subs	r4, r2, #0
 800531c:	4605      	mov	r5, r0
 800531e:	b09b      	sub	sp, #108	; 0x6c
 8005320:	4618      	mov	r0, r3
 8005322:	da05      	bge.n	8005330 <_vsniprintf_r+0x18>
 8005324:	238b      	movs	r3, #139	; 0x8b
 8005326:	602b      	str	r3, [r5, #0]
 8005328:	f04f 30ff 	mov.w	r0, #4294967295
 800532c:	b01b      	add	sp, #108	; 0x6c
 800532e:	bd30      	pop	{r4, r5, pc}
 8005330:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005334:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005338:	bf14      	ite	ne
 800533a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800533e:	4623      	moveq	r3, r4
 8005340:	9302      	str	r3, [sp, #8]
 8005342:	9305      	str	r3, [sp, #20]
 8005344:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005348:	9100      	str	r1, [sp, #0]
 800534a:	9104      	str	r1, [sp, #16]
 800534c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005350:	4602      	mov	r2, r0
 8005352:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005354:	4669      	mov	r1, sp
 8005356:	4628      	mov	r0, r5
 8005358:	f000 f922 	bl	80055a0 <_svfiprintf_r>
 800535c:	1c43      	adds	r3, r0, #1
 800535e:	bfbc      	itt	lt
 8005360:	238b      	movlt	r3, #139	; 0x8b
 8005362:	602b      	strlt	r3, [r5, #0]
 8005364:	2c00      	cmp	r4, #0
 8005366:	d0e1      	beq.n	800532c <_vsniprintf_r+0x14>
 8005368:	9b00      	ldr	r3, [sp, #0]
 800536a:	2200      	movs	r2, #0
 800536c:	701a      	strb	r2, [r3, #0]
 800536e:	e7dd      	b.n	800532c <_vsniprintf_r+0x14>

08005370 <vsniprintf>:
 8005370:	b507      	push	{r0, r1, r2, lr}
 8005372:	9300      	str	r3, [sp, #0]
 8005374:	4613      	mov	r3, r2
 8005376:	460a      	mov	r2, r1
 8005378:	4601      	mov	r1, r0
 800537a:	4803      	ldr	r0, [pc, #12]	; (8005388 <vsniprintf+0x18>)
 800537c:	6800      	ldr	r0, [r0, #0]
 800537e:	f7ff ffcb 	bl	8005318 <_vsniprintf_r>
 8005382:	b003      	add	sp, #12
 8005384:	f85d fb04 	ldr.w	pc, [sp], #4
 8005388:	20000090 	.word	0x20000090

0800538c <malloc>:
 800538c:	4b02      	ldr	r3, [pc, #8]	; (8005398 <malloc+0xc>)
 800538e:	4601      	mov	r1, r0
 8005390:	6818      	ldr	r0, [r3, #0]
 8005392:	f000 b851 	b.w	8005438 <_malloc_r>
 8005396:	bf00      	nop
 8005398:	20000090 	.word	0x20000090

0800539c <_free_r>:
 800539c:	b538      	push	{r3, r4, r5, lr}
 800539e:	4605      	mov	r5, r0
 80053a0:	2900      	cmp	r1, #0
 80053a2:	d045      	beq.n	8005430 <_free_r+0x94>
 80053a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053a8:	1f0c      	subs	r4, r1, #4
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	bfb8      	it	lt
 80053ae:	18e4      	addlt	r4, r4, r3
 80053b0:	f000 fbfa 	bl	8005ba8 <__malloc_lock>
 80053b4:	4a1f      	ldr	r2, [pc, #124]	; (8005434 <_free_r+0x98>)
 80053b6:	6813      	ldr	r3, [r2, #0]
 80053b8:	4610      	mov	r0, r2
 80053ba:	b933      	cbnz	r3, 80053ca <_free_r+0x2e>
 80053bc:	6063      	str	r3, [r4, #4]
 80053be:	6014      	str	r4, [r2, #0]
 80053c0:	4628      	mov	r0, r5
 80053c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053c6:	f000 bbf0 	b.w	8005baa <__malloc_unlock>
 80053ca:	42a3      	cmp	r3, r4
 80053cc:	d90c      	bls.n	80053e8 <_free_r+0x4c>
 80053ce:	6821      	ldr	r1, [r4, #0]
 80053d0:	1862      	adds	r2, r4, r1
 80053d2:	4293      	cmp	r3, r2
 80053d4:	bf04      	itt	eq
 80053d6:	681a      	ldreq	r2, [r3, #0]
 80053d8:	685b      	ldreq	r3, [r3, #4]
 80053da:	6063      	str	r3, [r4, #4]
 80053dc:	bf04      	itt	eq
 80053de:	1852      	addeq	r2, r2, r1
 80053e0:	6022      	streq	r2, [r4, #0]
 80053e2:	6004      	str	r4, [r0, #0]
 80053e4:	e7ec      	b.n	80053c0 <_free_r+0x24>
 80053e6:	4613      	mov	r3, r2
 80053e8:	685a      	ldr	r2, [r3, #4]
 80053ea:	b10a      	cbz	r2, 80053f0 <_free_r+0x54>
 80053ec:	42a2      	cmp	r2, r4
 80053ee:	d9fa      	bls.n	80053e6 <_free_r+0x4a>
 80053f0:	6819      	ldr	r1, [r3, #0]
 80053f2:	1858      	adds	r0, r3, r1
 80053f4:	42a0      	cmp	r0, r4
 80053f6:	d10b      	bne.n	8005410 <_free_r+0x74>
 80053f8:	6820      	ldr	r0, [r4, #0]
 80053fa:	4401      	add	r1, r0
 80053fc:	1858      	adds	r0, r3, r1
 80053fe:	4282      	cmp	r2, r0
 8005400:	6019      	str	r1, [r3, #0]
 8005402:	d1dd      	bne.n	80053c0 <_free_r+0x24>
 8005404:	6810      	ldr	r0, [r2, #0]
 8005406:	6852      	ldr	r2, [r2, #4]
 8005408:	605a      	str	r2, [r3, #4]
 800540a:	4401      	add	r1, r0
 800540c:	6019      	str	r1, [r3, #0]
 800540e:	e7d7      	b.n	80053c0 <_free_r+0x24>
 8005410:	d902      	bls.n	8005418 <_free_r+0x7c>
 8005412:	230c      	movs	r3, #12
 8005414:	602b      	str	r3, [r5, #0]
 8005416:	e7d3      	b.n	80053c0 <_free_r+0x24>
 8005418:	6820      	ldr	r0, [r4, #0]
 800541a:	1821      	adds	r1, r4, r0
 800541c:	428a      	cmp	r2, r1
 800541e:	bf04      	itt	eq
 8005420:	6811      	ldreq	r1, [r2, #0]
 8005422:	6852      	ldreq	r2, [r2, #4]
 8005424:	6062      	str	r2, [r4, #4]
 8005426:	bf04      	itt	eq
 8005428:	1809      	addeq	r1, r1, r0
 800542a:	6021      	streq	r1, [r4, #0]
 800542c:	605c      	str	r4, [r3, #4]
 800542e:	e7c7      	b.n	80053c0 <_free_r+0x24>
 8005430:	bd38      	pop	{r3, r4, r5, pc}
 8005432:	bf00      	nop
 8005434:	20000588 	.word	0x20000588

08005438 <_malloc_r>:
 8005438:	b570      	push	{r4, r5, r6, lr}
 800543a:	1ccd      	adds	r5, r1, #3
 800543c:	f025 0503 	bic.w	r5, r5, #3
 8005440:	3508      	adds	r5, #8
 8005442:	2d0c      	cmp	r5, #12
 8005444:	bf38      	it	cc
 8005446:	250c      	movcc	r5, #12
 8005448:	2d00      	cmp	r5, #0
 800544a:	4606      	mov	r6, r0
 800544c:	db01      	blt.n	8005452 <_malloc_r+0x1a>
 800544e:	42a9      	cmp	r1, r5
 8005450:	d903      	bls.n	800545a <_malloc_r+0x22>
 8005452:	230c      	movs	r3, #12
 8005454:	6033      	str	r3, [r6, #0]
 8005456:	2000      	movs	r0, #0
 8005458:	bd70      	pop	{r4, r5, r6, pc}
 800545a:	f000 fba5 	bl	8005ba8 <__malloc_lock>
 800545e:	4a21      	ldr	r2, [pc, #132]	; (80054e4 <_malloc_r+0xac>)
 8005460:	6814      	ldr	r4, [r2, #0]
 8005462:	4621      	mov	r1, r4
 8005464:	b991      	cbnz	r1, 800548c <_malloc_r+0x54>
 8005466:	4c20      	ldr	r4, [pc, #128]	; (80054e8 <_malloc_r+0xb0>)
 8005468:	6823      	ldr	r3, [r4, #0]
 800546a:	b91b      	cbnz	r3, 8005474 <_malloc_r+0x3c>
 800546c:	4630      	mov	r0, r6
 800546e:	f000 fb15 	bl	8005a9c <_sbrk_r>
 8005472:	6020      	str	r0, [r4, #0]
 8005474:	4629      	mov	r1, r5
 8005476:	4630      	mov	r0, r6
 8005478:	f000 fb10 	bl	8005a9c <_sbrk_r>
 800547c:	1c43      	adds	r3, r0, #1
 800547e:	d124      	bne.n	80054ca <_malloc_r+0x92>
 8005480:	230c      	movs	r3, #12
 8005482:	6033      	str	r3, [r6, #0]
 8005484:	4630      	mov	r0, r6
 8005486:	f000 fb90 	bl	8005baa <__malloc_unlock>
 800548a:	e7e4      	b.n	8005456 <_malloc_r+0x1e>
 800548c:	680b      	ldr	r3, [r1, #0]
 800548e:	1b5b      	subs	r3, r3, r5
 8005490:	d418      	bmi.n	80054c4 <_malloc_r+0x8c>
 8005492:	2b0b      	cmp	r3, #11
 8005494:	d90f      	bls.n	80054b6 <_malloc_r+0x7e>
 8005496:	600b      	str	r3, [r1, #0]
 8005498:	50cd      	str	r5, [r1, r3]
 800549a:	18cc      	adds	r4, r1, r3
 800549c:	4630      	mov	r0, r6
 800549e:	f000 fb84 	bl	8005baa <__malloc_unlock>
 80054a2:	f104 000b 	add.w	r0, r4, #11
 80054a6:	1d23      	adds	r3, r4, #4
 80054a8:	f020 0007 	bic.w	r0, r0, #7
 80054ac:	1ac3      	subs	r3, r0, r3
 80054ae:	d0d3      	beq.n	8005458 <_malloc_r+0x20>
 80054b0:	425a      	negs	r2, r3
 80054b2:	50e2      	str	r2, [r4, r3]
 80054b4:	e7d0      	b.n	8005458 <_malloc_r+0x20>
 80054b6:	428c      	cmp	r4, r1
 80054b8:	684b      	ldr	r3, [r1, #4]
 80054ba:	bf16      	itet	ne
 80054bc:	6063      	strne	r3, [r4, #4]
 80054be:	6013      	streq	r3, [r2, #0]
 80054c0:	460c      	movne	r4, r1
 80054c2:	e7eb      	b.n	800549c <_malloc_r+0x64>
 80054c4:	460c      	mov	r4, r1
 80054c6:	6849      	ldr	r1, [r1, #4]
 80054c8:	e7cc      	b.n	8005464 <_malloc_r+0x2c>
 80054ca:	1cc4      	adds	r4, r0, #3
 80054cc:	f024 0403 	bic.w	r4, r4, #3
 80054d0:	42a0      	cmp	r0, r4
 80054d2:	d005      	beq.n	80054e0 <_malloc_r+0xa8>
 80054d4:	1a21      	subs	r1, r4, r0
 80054d6:	4630      	mov	r0, r6
 80054d8:	f000 fae0 	bl	8005a9c <_sbrk_r>
 80054dc:	3001      	adds	r0, #1
 80054de:	d0cf      	beq.n	8005480 <_malloc_r+0x48>
 80054e0:	6025      	str	r5, [r4, #0]
 80054e2:	e7db      	b.n	800549c <_malloc_r+0x64>
 80054e4:	20000588 	.word	0x20000588
 80054e8:	2000058c 	.word	0x2000058c

080054ec <__ssputs_r>:
 80054ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054f0:	688e      	ldr	r6, [r1, #8]
 80054f2:	429e      	cmp	r6, r3
 80054f4:	4682      	mov	sl, r0
 80054f6:	460c      	mov	r4, r1
 80054f8:	4690      	mov	r8, r2
 80054fa:	4699      	mov	r9, r3
 80054fc:	d837      	bhi.n	800556e <__ssputs_r+0x82>
 80054fe:	898a      	ldrh	r2, [r1, #12]
 8005500:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005504:	d031      	beq.n	800556a <__ssputs_r+0x7e>
 8005506:	6825      	ldr	r5, [r4, #0]
 8005508:	6909      	ldr	r1, [r1, #16]
 800550a:	1a6f      	subs	r7, r5, r1
 800550c:	6965      	ldr	r5, [r4, #20]
 800550e:	2302      	movs	r3, #2
 8005510:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005514:	fb95 f5f3 	sdiv	r5, r5, r3
 8005518:	f109 0301 	add.w	r3, r9, #1
 800551c:	443b      	add	r3, r7
 800551e:	429d      	cmp	r5, r3
 8005520:	bf38      	it	cc
 8005522:	461d      	movcc	r5, r3
 8005524:	0553      	lsls	r3, r2, #21
 8005526:	d530      	bpl.n	800558a <__ssputs_r+0x9e>
 8005528:	4629      	mov	r1, r5
 800552a:	f7ff ff85 	bl	8005438 <_malloc_r>
 800552e:	4606      	mov	r6, r0
 8005530:	b950      	cbnz	r0, 8005548 <__ssputs_r+0x5c>
 8005532:	230c      	movs	r3, #12
 8005534:	f8ca 3000 	str.w	r3, [sl]
 8005538:	89a3      	ldrh	r3, [r4, #12]
 800553a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800553e:	81a3      	strh	r3, [r4, #12]
 8005540:	f04f 30ff 	mov.w	r0, #4294967295
 8005544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005548:	463a      	mov	r2, r7
 800554a:	6921      	ldr	r1, [r4, #16]
 800554c:	f000 fb08 	bl	8005b60 <memcpy>
 8005550:	89a3      	ldrh	r3, [r4, #12]
 8005552:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005556:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800555a:	81a3      	strh	r3, [r4, #12]
 800555c:	6126      	str	r6, [r4, #16]
 800555e:	6165      	str	r5, [r4, #20]
 8005560:	443e      	add	r6, r7
 8005562:	1bed      	subs	r5, r5, r7
 8005564:	6026      	str	r6, [r4, #0]
 8005566:	60a5      	str	r5, [r4, #8]
 8005568:	464e      	mov	r6, r9
 800556a:	454e      	cmp	r6, r9
 800556c:	d900      	bls.n	8005570 <__ssputs_r+0x84>
 800556e:	464e      	mov	r6, r9
 8005570:	4632      	mov	r2, r6
 8005572:	4641      	mov	r1, r8
 8005574:	6820      	ldr	r0, [r4, #0]
 8005576:	f000 fafe 	bl	8005b76 <memmove>
 800557a:	68a3      	ldr	r3, [r4, #8]
 800557c:	1b9b      	subs	r3, r3, r6
 800557e:	60a3      	str	r3, [r4, #8]
 8005580:	6823      	ldr	r3, [r4, #0]
 8005582:	441e      	add	r6, r3
 8005584:	6026      	str	r6, [r4, #0]
 8005586:	2000      	movs	r0, #0
 8005588:	e7dc      	b.n	8005544 <__ssputs_r+0x58>
 800558a:	462a      	mov	r2, r5
 800558c:	f000 fb0e 	bl	8005bac <_realloc_r>
 8005590:	4606      	mov	r6, r0
 8005592:	2800      	cmp	r0, #0
 8005594:	d1e2      	bne.n	800555c <__ssputs_r+0x70>
 8005596:	6921      	ldr	r1, [r4, #16]
 8005598:	4650      	mov	r0, sl
 800559a:	f7ff feff 	bl	800539c <_free_r>
 800559e:	e7c8      	b.n	8005532 <__ssputs_r+0x46>

080055a0 <_svfiprintf_r>:
 80055a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055a4:	b09d      	sub	sp, #116	; 0x74
 80055a6:	4680      	mov	r8, r0
 80055a8:	9303      	str	r3, [sp, #12]
 80055aa:	898b      	ldrh	r3, [r1, #12]
 80055ac:	061d      	lsls	r5, r3, #24
 80055ae:	460c      	mov	r4, r1
 80055b0:	4616      	mov	r6, r2
 80055b2:	d50f      	bpl.n	80055d4 <_svfiprintf_r+0x34>
 80055b4:	690b      	ldr	r3, [r1, #16]
 80055b6:	b96b      	cbnz	r3, 80055d4 <_svfiprintf_r+0x34>
 80055b8:	2140      	movs	r1, #64	; 0x40
 80055ba:	f7ff ff3d 	bl	8005438 <_malloc_r>
 80055be:	6020      	str	r0, [r4, #0]
 80055c0:	6120      	str	r0, [r4, #16]
 80055c2:	b928      	cbnz	r0, 80055d0 <_svfiprintf_r+0x30>
 80055c4:	230c      	movs	r3, #12
 80055c6:	f8c8 3000 	str.w	r3, [r8]
 80055ca:	f04f 30ff 	mov.w	r0, #4294967295
 80055ce:	e0c7      	b.n	8005760 <_svfiprintf_r+0x1c0>
 80055d0:	2340      	movs	r3, #64	; 0x40
 80055d2:	6163      	str	r3, [r4, #20]
 80055d4:	2300      	movs	r3, #0
 80055d6:	9309      	str	r3, [sp, #36]	; 0x24
 80055d8:	2320      	movs	r3, #32
 80055da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80055de:	2330      	movs	r3, #48	; 0x30
 80055e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80055e4:	f04f 0b01 	mov.w	fp, #1
 80055e8:	4637      	mov	r7, r6
 80055ea:	463d      	mov	r5, r7
 80055ec:	f815 3b01 	ldrb.w	r3, [r5], #1
 80055f0:	b10b      	cbz	r3, 80055f6 <_svfiprintf_r+0x56>
 80055f2:	2b25      	cmp	r3, #37	; 0x25
 80055f4:	d13e      	bne.n	8005674 <_svfiprintf_r+0xd4>
 80055f6:	ebb7 0a06 	subs.w	sl, r7, r6
 80055fa:	d00b      	beq.n	8005614 <_svfiprintf_r+0x74>
 80055fc:	4653      	mov	r3, sl
 80055fe:	4632      	mov	r2, r6
 8005600:	4621      	mov	r1, r4
 8005602:	4640      	mov	r0, r8
 8005604:	f7ff ff72 	bl	80054ec <__ssputs_r>
 8005608:	3001      	adds	r0, #1
 800560a:	f000 80a4 	beq.w	8005756 <_svfiprintf_r+0x1b6>
 800560e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005610:	4453      	add	r3, sl
 8005612:	9309      	str	r3, [sp, #36]	; 0x24
 8005614:	783b      	ldrb	r3, [r7, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	f000 809d 	beq.w	8005756 <_svfiprintf_r+0x1b6>
 800561c:	2300      	movs	r3, #0
 800561e:	f04f 32ff 	mov.w	r2, #4294967295
 8005622:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005626:	9304      	str	r3, [sp, #16]
 8005628:	9307      	str	r3, [sp, #28]
 800562a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800562e:	931a      	str	r3, [sp, #104]	; 0x68
 8005630:	462f      	mov	r7, r5
 8005632:	2205      	movs	r2, #5
 8005634:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005638:	484f      	ldr	r0, [pc, #316]	; (8005778 <_svfiprintf_r+0x1d8>)
 800563a:	f000 fa41 	bl	8005ac0 <memchr>
 800563e:	9b04      	ldr	r3, [sp, #16]
 8005640:	b9d0      	cbnz	r0, 8005678 <_svfiprintf_r+0xd8>
 8005642:	06d9      	lsls	r1, r3, #27
 8005644:	bf44      	itt	mi
 8005646:	2220      	movmi	r2, #32
 8005648:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800564c:	071a      	lsls	r2, r3, #28
 800564e:	bf44      	itt	mi
 8005650:	222b      	movmi	r2, #43	; 0x2b
 8005652:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005656:	782a      	ldrb	r2, [r5, #0]
 8005658:	2a2a      	cmp	r2, #42	; 0x2a
 800565a:	d015      	beq.n	8005688 <_svfiprintf_r+0xe8>
 800565c:	9a07      	ldr	r2, [sp, #28]
 800565e:	462f      	mov	r7, r5
 8005660:	2000      	movs	r0, #0
 8005662:	250a      	movs	r5, #10
 8005664:	4639      	mov	r1, r7
 8005666:	f811 3b01 	ldrb.w	r3, [r1], #1
 800566a:	3b30      	subs	r3, #48	; 0x30
 800566c:	2b09      	cmp	r3, #9
 800566e:	d94d      	bls.n	800570c <_svfiprintf_r+0x16c>
 8005670:	b1b8      	cbz	r0, 80056a2 <_svfiprintf_r+0x102>
 8005672:	e00f      	b.n	8005694 <_svfiprintf_r+0xf4>
 8005674:	462f      	mov	r7, r5
 8005676:	e7b8      	b.n	80055ea <_svfiprintf_r+0x4a>
 8005678:	4a3f      	ldr	r2, [pc, #252]	; (8005778 <_svfiprintf_r+0x1d8>)
 800567a:	1a80      	subs	r0, r0, r2
 800567c:	fa0b f000 	lsl.w	r0, fp, r0
 8005680:	4318      	orrs	r0, r3
 8005682:	9004      	str	r0, [sp, #16]
 8005684:	463d      	mov	r5, r7
 8005686:	e7d3      	b.n	8005630 <_svfiprintf_r+0x90>
 8005688:	9a03      	ldr	r2, [sp, #12]
 800568a:	1d11      	adds	r1, r2, #4
 800568c:	6812      	ldr	r2, [r2, #0]
 800568e:	9103      	str	r1, [sp, #12]
 8005690:	2a00      	cmp	r2, #0
 8005692:	db01      	blt.n	8005698 <_svfiprintf_r+0xf8>
 8005694:	9207      	str	r2, [sp, #28]
 8005696:	e004      	b.n	80056a2 <_svfiprintf_r+0x102>
 8005698:	4252      	negs	r2, r2
 800569a:	f043 0302 	orr.w	r3, r3, #2
 800569e:	9207      	str	r2, [sp, #28]
 80056a0:	9304      	str	r3, [sp, #16]
 80056a2:	783b      	ldrb	r3, [r7, #0]
 80056a4:	2b2e      	cmp	r3, #46	; 0x2e
 80056a6:	d10c      	bne.n	80056c2 <_svfiprintf_r+0x122>
 80056a8:	787b      	ldrb	r3, [r7, #1]
 80056aa:	2b2a      	cmp	r3, #42	; 0x2a
 80056ac:	d133      	bne.n	8005716 <_svfiprintf_r+0x176>
 80056ae:	9b03      	ldr	r3, [sp, #12]
 80056b0:	1d1a      	adds	r2, r3, #4
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	9203      	str	r2, [sp, #12]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	bfb8      	it	lt
 80056ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80056be:	3702      	adds	r7, #2
 80056c0:	9305      	str	r3, [sp, #20]
 80056c2:	4d2e      	ldr	r5, [pc, #184]	; (800577c <_svfiprintf_r+0x1dc>)
 80056c4:	7839      	ldrb	r1, [r7, #0]
 80056c6:	2203      	movs	r2, #3
 80056c8:	4628      	mov	r0, r5
 80056ca:	f000 f9f9 	bl	8005ac0 <memchr>
 80056ce:	b138      	cbz	r0, 80056e0 <_svfiprintf_r+0x140>
 80056d0:	2340      	movs	r3, #64	; 0x40
 80056d2:	1b40      	subs	r0, r0, r5
 80056d4:	fa03 f000 	lsl.w	r0, r3, r0
 80056d8:	9b04      	ldr	r3, [sp, #16]
 80056da:	4303      	orrs	r3, r0
 80056dc:	3701      	adds	r7, #1
 80056de:	9304      	str	r3, [sp, #16]
 80056e0:	7839      	ldrb	r1, [r7, #0]
 80056e2:	4827      	ldr	r0, [pc, #156]	; (8005780 <_svfiprintf_r+0x1e0>)
 80056e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80056e8:	2206      	movs	r2, #6
 80056ea:	1c7e      	adds	r6, r7, #1
 80056ec:	f000 f9e8 	bl	8005ac0 <memchr>
 80056f0:	2800      	cmp	r0, #0
 80056f2:	d038      	beq.n	8005766 <_svfiprintf_r+0x1c6>
 80056f4:	4b23      	ldr	r3, [pc, #140]	; (8005784 <_svfiprintf_r+0x1e4>)
 80056f6:	bb13      	cbnz	r3, 800573e <_svfiprintf_r+0x19e>
 80056f8:	9b03      	ldr	r3, [sp, #12]
 80056fa:	3307      	adds	r3, #7
 80056fc:	f023 0307 	bic.w	r3, r3, #7
 8005700:	3308      	adds	r3, #8
 8005702:	9303      	str	r3, [sp, #12]
 8005704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005706:	444b      	add	r3, r9
 8005708:	9309      	str	r3, [sp, #36]	; 0x24
 800570a:	e76d      	b.n	80055e8 <_svfiprintf_r+0x48>
 800570c:	fb05 3202 	mla	r2, r5, r2, r3
 8005710:	2001      	movs	r0, #1
 8005712:	460f      	mov	r7, r1
 8005714:	e7a6      	b.n	8005664 <_svfiprintf_r+0xc4>
 8005716:	2300      	movs	r3, #0
 8005718:	3701      	adds	r7, #1
 800571a:	9305      	str	r3, [sp, #20]
 800571c:	4619      	mov	r1, r3
 800571e:	250a      	movs	r5, #10
 8005720:	4638      	mov	r0, r7
 8005722:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005726:	3a30      	subs	r2, #48	; 0x30
 8005728:	2a09      	cmp	r2, #9
 800572a:	d903      	bls.n	8005734 <_svfiprintf_r+0x194>
 800572c:	2b00      	cmp	r3, #0
 800572e:	d0c8      	beq.n	80056c2 <_svfiprintf_r+0x122>
 8005730:	9105      	str	r1, [sp, #20]
 8005732:	e7c6      	b.n	80056c2 <_svfiprintf_r+0x122>
 8005734:	fb05 2101 	mla	r1, r5, r1, r2
 8005738:	2301      	movs	r3, #1
 800573a:	4607      	mov	r7, r0
 800573c:	e7f0      	b.n	8005720 <_svfiprintf_r+0x180>
 800573e:	ab03      	add	r3, sp, #12
 8005740:	9300      	str	r3, [sp, #0]
 8005742:	4622      	mov	r2, r4
 8005744:	4b10      	ldr	r3, [pc, #64]	; (8005788 <_svfiprintf_r+0x1e8>)
 8005746:	a904      	add	r1, sp, #16
 8005748:	4640      	mov	r0, r8
 800574a:	f3af 8000 	nop.w
 800574e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005752:	4681      	mov	r9, r0
 8005754:	d1d6      	bne.n	8005704 <_svfiprintf_r+0x164>
 8005756:	89a3      	ldrh	r3, [r4, #12]
 8005758:	065b      	lsls	r3, r3, #25
 800575a:	f53f af36 	bmi.w	80055ca <_svfiprintf_r+0x2a>
 800575e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005760:	b01d      	add	sp, #116	; 0x74
 8005762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005766:	ab03      	add	r3, sp, #12
 8005768:	9300      	str	r3, [sp, #0]
 800576a:	4622      	mov	r2, r4
 800576c:	4b06      	ldr	r3, [pc, #24]	; (8005788 <_svfiprintf_r+0x1e8>)
 800576e:	a904      	add	r1, sp, #16
 8005770:	4640      	mov	r0, r8
 8005772:	f000 f881 	bl	8005878 <_printf_i>
 8005776:	e7ea      	b.n	800574e <_svfiprintf_r+0x1ae>
 8005778:	0800c04d 	.word	0x0800c04d
 800577c:	0800c053 	.word	0x0800c053
 8005780:	0800c057 	.word	0x0800c057
 8005784:	00000000 	.word	0x00000000
 8005788:	080054ed 	.word	0x080054ed

0800578c <_printf_common>:
 800578c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005790:	4691      	mov	r9, r2
 8005792:	461f      	mov	r7, r3
 8005794:	688a      	ldr	r2, [r1, #8]
 8005796:	690b      	ldr	r3, [r1, #16]
 8005798:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800579c:	4293      	cmp	r3, r2
 800579e:	bfb8      	it	lt
 80057a0:	4613      	movlt	r3, r2
 80057a2:	f8c9 3000 	str.w	r3, [r9]
 80057a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80057aa:	4606      	mov	r6, r0
 80057ac:	460c      	mov	r4, r1
 80057ae:	b112      	cbz	r2, 80057b6 <_printf_common+0x2a>
 80057b0:	3301      	adds	r3, #1
 80057b2:	f8c9 3000 	str.w	r3, [r9]
 80057b6:	6823      	ldr	r3, [r4, #0]
 80057b8:	0699      	lsls	r1, r3, #26
 80057ba:	bf42      	ittt	mi
 80057bc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80057c0:	3302      	addmi	r3, #2
 80057c2:	f8c9 3000 	strmi.w	r3, [r9]
 80057c6:	6825      	ldr	r5, [r4, #0]
 80057c8:	f015 0506 	ands.w	r5, r5, #6
 80057cc:	d107      	bne.n	80057de <_printf_common+0x52>
 80057ce:	f104 0a19 	add.w	sl, r4, #25
 80057d2:	68e3      	ldr	r3, [r4, #12]
 80057d4:	f8d9 2000 	ldr.w	r2, [r9]
 80057d8:	1a9b      	subs	r3, r3, r2
 80057da:	42ab      	cmp	r3, r5
 80057dc:	dc28      	bgt.n	8005830 <_printf_common+0xa4>
 80057de:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80057e2:	6822      	ldr	r2, [r4, #0]
 80057e4:	3300      	adds	r3, #0
 80057e6:	bf18      	it	ne
 80057e8:	2301      	movne	r3, #1
 80057ea:	0692      	lsls	r2, r2, #26
 80057ec:	d42d      	bmi.n	800584a <_printf_common+0xbe>
 80057ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057f2:	4639      	mov	r1, r7
 80057f4:	4630      	mov	r0, r6
 80057f6:	47c0      	blx	r8
 80057f8:	3001      	adds	r0, #1
 80057fa:	d020      	beq.n	800583e <_printf_common+0xb2>
 80057fc:	6823      	ldr	r3, [r4, #0]
 80057fe:	68e5      	ldr	r5, [r4, #12]
 8005800:	f8d9 2000 	ldr.w	r2, [r9]
 8005804:	f003 0306 	and.w	r3, r3, #6
 8005808:	2b04      	cmp	r3, #4
 800580a:	bf08      	it	eq
 800580c:	1aad      	subeq	r5, r5, r2
 800580e:	68a3      	ldr	r3, [r4, #8]
 8005810:	6922      	ldr	r2, [r4, #16]
 8005812:	bf0c      	ite	eq
 8005814:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005818:	2500      	movne	r5, #0
 800581a:	4293      	cmp	r3, r2
 800581c:	bfc4      	itt	gt
 800581e:	1a9b      	subgt	r3, r3, r2
 8005820:	18ed      	addgt	r5, r5, r3
 8005822:	f04f 0900 	mov.w	r9, #0
 8005826:	341a      	adds	r4, #26
 8005828:	454d      	cmp	r5, r9
 800582a:	d11a      	bne.n	8005862 <_printf_common+0xd6>
 800582c:	2000      	movs	r0, #0
 800582e:	e008      	b.n	8005842 <_printf_common+0xb6>
 8005830:	2301      	movs	r3, #1
 8005832:	4652      	mov	r2, sl
 8005834:	4639      	mov	r1, r7
 8005836:	4630      	mov	r0, r6
 8005838:	47c0      	blx	r8
 800583a:	3001      	adds	r0, #1
 800583c:	d103      	bne.n	8005846 <_printf_common+0xba>
 800583e:	f04f 30ff 	mov.w	r0, #4294967295
 8005842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005846:	3501      	adds	r5, #1
 8005848:	e7c3      	b.n	80057d2 <_printf_common+0x46>
 800584a:	18e1      	adds	r1, r4, r3
 800584c:	1c5a      	adds	r2, r3, #1
 800584e:	2030      	movs	r0, #48	; 0x30
 8005850:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005854:	4422      	add	r2, r4
 8005856:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800585a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800585e:	3302      	adds	r3, #2
 8005860:	e7c5      	b.n	80057ee <_printf_common+0x62>
 8005862:	2301      	movs	r3, #1
 8005864:	4622      	mov	r2, r4
 8005866:	4639      	mov	r1, r7
 8005868:	4630      	mov	r0, r6
 800586a:	47c0      	blx	r8
 800586c:	3001      	adds	r0, #1
 800586e:	d0e6      	beq.n	800583e <_printf_common+0xb2>
 8005870:	f109 0901 	add.w	r9, r9, #1
 8005874:	e7d8      	b.n	8005828 <_printf_common+0x9c>
	...

08005878 <_printf_i>:
 8005878:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800587c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005880:	460c      	mov	r4, r1
 8005882:	7e09      	ldrb	r1, [r1, #24]
 8005884:	b085      	sub	sp, #20
 8005886:	296e      	cmp	r1, #110	; 0x6e
 8005888:	4617      	mov	r7, r2
 800588a:	4606      	mov	r6, r0
 800588c:	4698      	mov	r8, r3
 800588e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005890:	f000 80b3 	beq.w	80059fa <_printf_i+0x182>
 8005894:	d822      	bhi.n	80058dc <_printf_i+0x64>
 8005896:	2963      	cmp	r1, #99	; 0x63
 8005898:	d036      	beq.n	8005908 <_printf_i+0x90>
 800589a:	d80a      	bhi.n	80058b2 <_printf_i+0x3a>
 800589c:	2900      	cmp	r1, #0
 800589e:	f000 80b9 	beq.w	8005a14 <_printf_i+0x19c>
 80058a2:	2958      	cmp	r1, #88	; 0x58
 80058a4:	f000 8083 	beq.w	80059ae <_printf_i+0x136>
 80058a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058ac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80058b0:	e032      	b.n	8005918 <_printf_i+0xa0>
 80058b2:	2964      	cmp	r1, #100	; 0x64
 80058b4:	d001      	beq.n	80058ba <_printf_i+0x42>
 80058b6:	2969      	cmp	r1, #105	; 0x69
 80058b8:	d1f6      	bne.n	80058a8 <_printf_i+0x30>
 80058ba:	6820      	ldr	r0, [r4, #0]
 80058bc:	6813      	ldr	r3, [r2, #0]
 80058be:	0605      	lsls	r5, r0, #24
 80058c0:	f103 0104 	add.w	r1, r3, #4
 80058c4:	d52a      	bpl.n	800591c <_printf_i+0xa4>
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	6011      	str	r1, [r2, #0]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	da03      	bge.n	80058d6 <_printf_i+0x5e>
 80058ce:	222d      	movs	r2, #45	; 0x2d
 80058d0:	425b      	negs	r3, r3
 80058d2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80058d6:	486f      	ldr	r0, [pc, #444]	; (8005a94 <_printf_i+0x21c>)
 80058d8:	220a      	movs	r2, #10
 80058da:	e039      	b.n	8005950 <_printf_i+0xd8>
 80058dc:	2973      	cmp	r1, #115	; 0x73
 80058de:	f000 809d 	beq.w	8005a1c <_printf_i+0x1a4>
 80058e2:	d808      	bhi.n	80058f6 <_printf_i+0x7e>
 80058e4:	296f      	cmp	r1, #111	; 0x6f
 80058e6:	d020      	beq.n	800592a <_printf_i+0xb2>
 80058e8:	2970      	cmp	r1, #112	; 0x70
 80058ea:	d1dd      	bne.n	80058a8 <_printf_i+0x30>
 80058ec:	6823      	ldr	r3, [r4, #0]
 80058ee:	f043 0320 	orr.w	r3, r3, #32
 80058f2:	6023      	str	r3, [r4, #0]
 80058f4:	e003      	b.n	80058fe <_printf_i+0x86>
 80058f6:	2975      	cmp	r1, #117	; 0x75
 80058f8:	d017      	beq.n	800592a <_printf_i+0xb2>
 80058fa:	2978      	cmp	r1, #120	; 0x78
 80058fc:	d1d4      	bne.n	80058a8 <_printf_i+0x30>
 80058fe:	2378      	movs	r3, #120	; 0x78
 8005900:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005904:	4864      	ldr	r0, [pc, #400]	; (8005a98 <_printf_i+0x220>)
 8005906:	e055      	b.n	80059b4 <_printf_i+0x13c>
 8005908:	6813      	ldr	r3, [r2, #0]
 800590a:	1d19      	adds	r1, r3, #4
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	6011      	str	r1, [r2, #0]
 8005910:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005914:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005918:	2301      	movs	r3, #1
 800591a:	e08c      	b.n	8005a36 <_printf_i+0x1be>
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	6011      	str	r1, [r2, #0]
 8005920:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005924:	bf18      	it	ne
 8005926:	b21b      	sxthne	r3, r3
 8005928:	e7cf      	b.n	80058ca <_printf_i+0x52>
 800592a:	6813      	ldr	r3, [r2, #0]
 800592c:	6825      	ldr	r5, [r4, #0]
 800592e:	1d18      	adds	r0, r3, #4
 8005930:	6010      	str	r0, [r2, #0]
 8005932:	0628      	lsls	r0, r5, #24
 8005934:	d501      	bpl.n	800593a <_printf_i+0xc2>
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	e002      	b.n	8005940 <_printf_i+0xc8>
 800593a:	0668      	lsls	r0, r5, #25
 800593c:	d5fb      	bpl.n	8005936 <_printf_i+0xbe>
 800593e:	881b      	ldrh	r3, [r3, #0]
 8005940:	4854      	ldr	r0, [pc, #336]	; (8005a94 <_printf_i+0x21c>)
 8005942:	296f      	cmp	r1, #111	; 0x6f
 8005944:	bf14      	ite	ne
 8005946:	220a      	movne	r2, #10
 8005948:	2208      	moveq	r2, #8
 800594a:	2100      	movs	r1, #0
 800594c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005950:	6865      	ldr	r5, [r4, #4]
 8005952:	60a5      	str	r5, [r4, #8]
 8005954:	2d00      	cmp	r5, #0
 8005956:	f2c0 8095 	blt.w	8005a84 <_printf_i+0x20c>
 800595a:	6821      	ldr	r1, [r4, #0]
 800595c:	f021 0104 	bic.w	r1, r1, #4
 8005960:	6021      	str	r1, [r4, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d13d      	bne.n	80059e2 <_printf_i+0x16a>
 8005966:	2d00      	cmp	r5, #0
 8005968:	f040 808e 	bne.w	8005a88 <_printf_i+0x210>
 800596c:	4665      	mov	r5, ip
 800596e:	2a08      	cmp	r2, #8
 8005970:	d10b      	bne.n	800598a <_printf_i+0x112>
 8005972:	6823      	ldr	r3, [r4, #0]
 8005974:	07db      	lsls	r3, r3, #31
 8005976:	d508      	bpl.n	800598a <_printf_i+0x112>
 8005978:	6923      	ldr	r3, [r4, #16]
 800597a:	6862      	ldr	r2, [r4, #4]
 800597c:	429a      	cmp	r2, r3
 800597e:	bfde      	ittt	le
 8005980:	2330      	movle	r3, #48	; 0x30
 8005982:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005986:	f105 35ff 	addle.w	r5, r5, #4294967295
 800598a:	ebac 0305 	sub.w	r3, ip, r5
 800598e:	6123      	str	r3, [r4, #16]
 8005990:	f8cd 8000 	str.w	r8, [sp]
 8005994:	463b      	mov	r3, r7
 8005996:	aa03      	add	r2, sp, #12
 8005998:	4621      	mov	r1, r4
 800599a:	4630      	mov	r0, r6
 800599c:	f7ff fef6 	bl	800578c <_printf_common>
 80059a0:	3001      	adds	r0, #1
 80059a2:	d14d      	bne.n	8005a40 <_printf_i+0x1c8>
 80059a4:	f04f 30ff 	mov.w	r0, #4294967295
 80059a8:	b005      	add	sp, #20
 80059aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80059ae:	4839      	ldr	r0, [pc, #228]	; (8005a94 <_printf_i+0x21c>)
 80059b0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80059b4:	6813      	ldr	r3, [r2, #0]
 80059b6:	6821      	ldr	r1, [r4, #0]
 80059b8:	1d1d      	adds	r5, r3, #4
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	6015      	str	r5, [r2, #0]
 80059be:	060a      	lsls	r2, r1, #24
 80059c0:	d50b      	bpl.n	80059da <_printf_i+0x162>
 80059c2:	07ca      	lsls	r2, r1, #31
 80059c4:	bf44      	itt	mi
 80059c6:	f041 0120 	orrmi.w	r1, r1, #32
 80059ca:	6021      	strmi	r1, [r4, #0]
 80059cc:	b91b      	cbnz	r3, 80059d6 <_printf_i+0x15e>
 80059ce:	6822      	ldr	r2, [r4, #0]
 80059d0:	f022 0220 	bic.w	r2, r2, #32
 80059d4:	6022      	str	r2, [r4, #0]
 80059d6:	2210      	movs	r2, #16
 80059d8:	e7b7      	b.n	800594a <_printf_i+0xd2>
 80059da:	064d      	lsls	r5, r1, #25
 80059dc:	bf48      	it	mi
 80059de:	b29b      	uxthmi	r3, r3
 80059e0:	e7ef      	b.n	80059c2 <_printf_i+0x14a>
 80059e2:	4665      	mov	r5, ip
 80059e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80059e8:	fb02 3311 	mls	r3, r2, r1, r3
 80059ec:	5cc3      	ldrb	r3, [r0, r3]
 80059ee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80059f2:	460b      	mov	r3, r1
 80059f4:	2900      	cmp	r1, #0
 80059f6:	d1f5      	bne.n	80059e4 <_printf_i+0x16c>
 80059f8:	e7b9      	b.n	800596e <_printf_i+0xf6>
 80059fa:	6813      	ldr	r3, [r2, #0]
 80059fc:	6825      	ldr	r5, [r4, #0]
 80059fe:	6961      	ldr	r1, [r4, #20]
 8005a00:	1d18      	adds	r0, r3, #4
 8005a02:	6010      	str	r0, [r2, #0]
 8005a04:	0628      	lsls	r0, r5, #24
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	d501      	bpl.n	8005a0e <_printf_i+0x196>
 8005a0a:	6019      	str	r1, [r3, #0]
 8005a0c:	e002      	b.n	8005a14 <_printf_i+0x19c>
 8005a0e:	066a      	lsls	r2, r5, #25
 8005a10:	d5fb      	bpl.n	8005a0a <_printf_i+0x192>
 8005a12:	8019      	strh	r1, [r3, #0]
 8005a14:	2300      	movs	r3, #0
 8005a16:	6123      	str	r3, [r4, #16]
 8005a18:	4665      	mov	r5, ip
 8005a1a:	e7b9      	b.n	8005990 <_printf_i+0x118>
 8005a1c:	6813      	ldr	r3, [r2, #0]
 8005a1e:	1d19      	adds	r1, r3, #4
 8005a20:	6011      	str	r1, [r2, #0]
 8005a22:	681d      	ldr	r5, [r3, #0]
 8005a24:	6862      	ldr	r2, [r4, #4]
 8005a26:	2100      	movs	r1, #0
 8005a28:	4628      	mov	r0, r5
 8005a2a:	f000 f849 	bl	8005ac0 <memchr>
 8005a2e:	b108      	cbz	r0, 8005a34 <_printf_i+0x1bc>
 8005a30:	1b40      	subs	r0, r0, r5
 8005a32:	6060      	str	r0, [r4, #4]
 8005a34:	6863      	ldr	r3, [r4, #4]
 8005a36:	6123      	str	r3, [r4, #16]
 8005a38:	2300      	movs	r3, #0
 8005a3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a3e:	e7a7      	b.n	8005990 <_printf_i+0x118>
 8005a40:	6923      	ldr	r3, [r4, #16]
 8005a42:	462a      	mov	r2, r5
 8005a44:	4639      	mov	r1, r7
 8005a46:	4630      	mov	r0, r6
 8005a48:	47c0      	blx	r8
 8005a4a:	3001      	adds	r0, #1
 8005a4c:	d0aa      	beq.n	80059a4 <_printf_i+0x12c>
 8005a4e:	6823      	ldr	r3, [r4, #0]
 8005a50:	079b      	lsls	r3, r3, #30
 8005a52:	d413      	bmi.n	8005a7c <_printf_i+0x204>
 8005a54:	68e0      	ldr	r0, [r4, #12]
 8005a56:	9b03      	ldr	r3, [sp, #12]
 8005a58:	4298      	cmp	r0, r3
 8005a5a:	bfb8      	it	lt
 8005a5c:	4618      	movlt	r0, r3
 8005a5e:	e7a3      	b.n	80059a8 <_printf_i+0x130>
 8005a60:	2301      	movs	r3, #1
 8005a62:	464a      	mov	r2, r9
 8005a64:	4639      	mov	r1, r7
 8005a66:	4630      	mov	r0, r6
 8005a68:	47c0      	blx	r8
 8005a6a:	3001      	adds	r0, #1
 8005a6c:	d09a      	beq.n	80059a4 <_printf_i+0x12c>
 8005a6e:	3501      	adds	r5, #1
 8005a70:	68e3      	ldr	r3, [r4, #12]
 8005a72:	9a03      	ldr	r2, [sp, #12]
 8005a74:	1a9b      	subs	r3, r3, r2
 8005a76:	42ab      	cmp	r3, r5
 8005a78:	dcf2      	bgt.n	8005a60 <_printf_i+0x1e8>
 8005a7a:	e7eb      	b.n	8005a54 <_printf_i+0x1dc>
 8005a7c:	2500      	movs	r5, #0
 8005a7e:	f104 0919 	add.w	r9, r4, #25
 8005a82:	e7f5      	b.n	8005a70 <_printf_i+0x1f8>
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1ac      	bne.n	80059e2 <_printf_i+0x16a>
 8005a88:	7803      	ldrb	r3, [r0, #0]
 8005a8a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a8e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a92:	e76c      	b.n	800596e <_printf_i+0xf6>
 8005a94:	0800c05e 	.word	0x0800c05e
 8005a98:	0800c06f 	.word	0x0800c06f

08005a9c <_sbrk_r>:
 8005a9c:	b538      	push	{r3, r4, r5, lr}
 8005a9e:	4c06      	ldr	r4, [pc, #24]	; (8005ab8 <_sbrk_r+0x1c>)
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	4605      	mov	r5, r0
 8005aa4:	4608      	mov	r0, r1
 8005aa6:	6023      	str	r3, [r4, #0]
 8005aa8:	f7fc f990 	bl	8001dcc <_sbrk>
 8005aac:	1c43      	adds	r3, r0, #1
 8005aae:	d102      	bne.n	8005ab6 <_sbrk_r+0x1a>
 8005ab0:	6823      	ldr	r3, [r4, #0]
 8005ab2:	b103      	cbz	r3, 8005ab6 <_sbrk_r+0x1a>
 8005ab4:	602b      	str	r3, [r5, #0]
 8005ab6:	bd38      	pop	{r3, r4, r5, pc}
 8005ab8:	2000059c 	.word	0x2000059c
 8005abc:	00000000 	.word	0x00000000

08005ac0 <memchr>:
 8005ac0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8005ac4:	2a10      	cmp	r2, #16
 8005ac6:	db2b      	blt.n	8005b20 <memchr+0x60>
 8005ac8:	f010 0f07 	tst.w	r0, #7
 8005acc:	d008      	beq.n	8005ae0 <memchr+0x20>
 8005ace:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005ad2:	3a01      	subs	r2, #1
 8005ad4:	428b      	cmp	r3, r1
 8005ad6:	d02d      	beq.n	8005b34 <memchr+0x74>
 8005ad8:	f010 0f07 	tst.w	r0, #7
 8005adc:	b342      	cbz	r2, 8005b30 <memchr+0x70>
 8005ade:	d1f6      	bne.n	8005ace <memchr+0xe>
 8005ae0:	b4f0      	push	{r4, r5, r6, r7}
 8005ae2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8005ae6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8005aea:	f022 0407 	bic.w	r4, r2, #7
 8005aee:	f07f 0700 	mvns.w	r7, #0
 8005af2:	2300      	movs	r3, #0
 8005af4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8005af8:	3c08      	subs	r4, #8
 8005afa:	ea85 0501 	eor.w	r5, r5, r1
 8005afe:	ea86 0601 	eor.w	r6, r6, r1
 8005b02:	fa85 f547 	uadd8	r5, r5, r7
 8005b06:	faa3 f587 	sel	r5, r3, r7
 8005b0a:	fa86 f647 	uadd8	r6, r6, r7
 8005b0e:	faa5 f687 	sel	r6, r5, r7
 8005b12:	b98e      	cbnz	r6, 8005b38 <memchr+0x78>
 8005b14:	d1ee      	bne.n	8005af4 <memchr+0x34>
 8005b16:	bcf0      	pop	{r4, r5, r6, r7}
 8005b18:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8005b1c:	f002 0207 	and.w	r2, r2, #7
 8005b20:	b132      	cbz	r2, 8005b30 <memchr+0x70>
 8005b22:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005b26:	3a01      	subs	r2, #1
 8005b28:	ea83 0301 	eor.w	r3, r3, r1
 8005b2c:	b113      	cbz	r3, 8005b34 <memchr+0x74>
 8005b2e:	d1f8      	bne.n	8005b22 <memchr+0x62>
 8005b30:	2000      	movs	r0, #0
 8005b32:	4770      	bx	lr
 8005b34:	3801      	subs	r0, #1
 8005b36:	4770      	bx	lr
 8005b38:	2d00      	cmp	r5, #0
 8005b3a:	bf06      	itte	eq
 8005b3c:	4635      	moveq	r5, r6
 8005b3e:	3803      	subeq	r0, #3
 8005b40:	3807      	subne	r0, #7
 8005b42:	f015 0f01 	tst.w	r5, #1
 8005b46:	d107      	bne.n	8005b58 <memchr+0x98>
 8005b48:	3001      	adds	r0, #1
 8005b4a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8005b4e:	bf02      	ittt	eq
 8005b50:	3001      	addeq	r0, #1
 8005b52:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8005b56:	3001      	addeq	r0, #1
 8005b58:	bcf0      	pop	{r4, r5, r6, r7}
 8005b5a:	3801      	subs	r0, #1
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop

08005b60 <memcpy>:
 8005b60:	b510      	push	{r4, lr}
 8005b62:	1e43      	subs	r3, r0, #1
 8005b64:	440a      	add	r2, r1
 8005b66:	4291      	cmp	r1, r2
 8005b68:	d100      	bne.n	8005b6c <memcpy+0xc>
 8005b6a:	bd10      	pop	{r4, pc}
 8005b6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b74:	e7f7      	b.n	8005b66 <memcpy+0x6>

08005b76 <memmove>:
 8005b76:	4288      	cmp	r0, r1
 8005b78:	b510      	push	{r4, lr}
 8005b7a:	eb01 0302 	add.w	r3, r1, r2
 8005b7e:	d807      	bhi.n	8005b90 <memmove+0x1a>
 8005b80:	1e42      	subs	r2, r0, #1
 8005b82:	4299      	cmp	r1, r3
 8005b84:	d00a      	beq.n	8005b9c <memmove+0x26>
 8005b86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b8a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005b8e:	e7f8      	b.n	8005b82 <memmove+0xc>
 8005b90:	4283      	cmp	r3, r0
 8005b92:	d9f5      	bls.n	8005b80 <memmove+0xa>
 8005b94:	1881      	adds	r1, r0, r2
 8005b96:	1ad2      	subs	r2, r2, r3
 8005b98:	42d3      	cmn	r3, r2
 8005b9a:	d100      	bne.n	8005b9e <memmove+0x28>
 8005b9c:	bd10      	pop	{r4, pc}
 8005b9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ba2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005ba6:	e7f7      	b.n	8005b98 <memmove+0x22>

08005ba8 <__malloc_lock>:
 8005ba8:	4770      	bx	lr

08005baa <__malloc_unlock>:
 8005baa:	4770      	bx	lr

08005bac <_realloc_r>:
 8005bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bae:	4607      	mov	r7, r0
 8005bb0:	4614      	mov	r4, r2
 8005bb2:	460e      	mov	r6, r1
 8005bb4:	b921      	cbnz	r1, 8005bc0 <_realloc_r+0x14>
 8005bb6:	4611      	mov	r1, r2
 8005bb8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005bbc:	f7ff bc3c 	b.w	8005438 <_malloc_r>
 8005bc0:	b922      	cbnz	r2, 8005bcc <_realloc_r+0x20>
 8005bc2:	f7ff fbeb 	bl	800539c <_free_r>
 8005bc6:	4625      	mov	r5, r4
 8005bc8:	4628      	mov	r0, r5
 8005bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bcc:	f000 f814 	bl	8005bf8 <_malloc_usable_size_r>
 8005bd0:	42a0      	cmp	r0, r4
 8005bd2:	d20f      	bcs.n	8005bf4 <_realloc_r+0x48>
 8005bd4:	4621      	mov	r1, r4
 8005bd6:	4638      	mov	r0, r7
 8005bd8:	f7ff fc2e 	bl	8005438 <_malloc_r>
 8005bdc:	4605      	mov	r5, r0
 8005bde:	2800      	cmp	r0, #0
 8005be0:	d0f2      	beq.n	8005bc8 <_realloc_r+0x1c>
 8005be2:	4631      	mov	r1, r6
 8005be4:	4622      	mov	r2, r4
 8005be6:	f7ff ffbb 	bl	8005b60 <memcpy>
 8005bea:	4631      	mov	r1, r6
 8005bec:	4638      	mov	r0, r7
 8005bee:	f7ff fbd5 	bl	800539c <_free_r>
 8005bf2:	e7e9      	b.n	8005bc8 <_realloc_r+0x1c>
 8005bf4:	4635      	mov	r5, r6
 8005bf6:	e7e7      	b.n	8005bc8 <_realloc_r+0x1c>

08005bf8 <_malloc_usable_size_r>:
 8005bf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bfc:	1f18      	subs	r0, r3, #4
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	bfbc      	itt	lt
 8005c02:	580b      	ldrlt	r3, [r1, r0]
 8005c04:	18c0      	addlt	r0, r0, r3
 8005c06:	4770      	bx	lr

08005c08 <handlers>:
 8005c08:	0841 0800 0841 0800 0841 0800 0841 0800     A...A...A...A...
 8005c18:	0841 0800 0841 0800 0841 0800 0841 0800     A...A...A...A...
 8005c28:	0841 0800 0841 0800 0841 0800 0841 0800     A...A...A...A...
 8005c38:	0841 0800 0841 0800 0841 0800 084d 0800     A...A...A...M...
 8005c48:	0841 0800                                   A...

08005c4c <buttonsTestOrder>:
 8005c4c:	0008 0109 020a 030b 040c 070d 0f05 060e     ................
 8005c5c:	1110 0000                                   ....

08005c60 <handlers>:
 8005c60:	0905 0800 0939 0800 096d 0800 09a1 0800     ....9...m.......
 8005c70:	09d5 0800 0a09 0800 0a3d 0800 0a71 0800     ........=...q...
 8005c80:	0aa5 0800 0ad9 0800 0b0d 0800 0b41 0800     ............A...
 8005c90:	0b75 0800 0ba9 0800 0bdd 0800 0c29 0800     u...........)...
 8005ca0:	0c5d 0800                                   ]...

08005ca4 <handlers>:
 8005ca4:	0d21 0800 0d21 0800 0d21 0800 0d21 0800     !...!...!...!...
 8005cb4:	0d21 0800 0d21 0800 0d21 0800 0d21 0800     !...!...!...!...
 8005cc4:	0d21 0800 0d21 0800 0d21 0800 0d21 0800     !...!...!...!...
 8005cd4:	0d21 0800 0d21 0800 0d21 0800 0d2d 0800     !...!...!...-...
 8005ce4:	0d21 0800                                   !...

08005ce8 <handlers>:
 8005ce8:	0e11 0800 0e11 0800 0e11 0800 0e11 0800     ................
 8005cf8:	0e11 0800 0e11 0800 0e11 0800 0e11 0800     ................
 8005d08:	0e11 0800 0e11 0800 0e11 0800 0e11 0800     ................
 8005d18:	0e11 0800 0e11 0800 0e1d 0800 0e11 0800     ................
 8005d28:	0e11 0800                                   ....

08005d2c <tetrominos>:
 8005d2c:	0001 0101 0201 0301 0200 0201 0202 0203     ................
 8005d3c:	0003 0103 0203 0303 0100 0101 0102 0103     ................
 8005d4c:	0000 0001 0101 0201 0100 0200 0101 0102     ................
 8005d5c:	0001 0101 0201 0202 0100 0101 0002 0102     ................
 8005d6c:	0200 0001 0101 0201 0100 0101 0102 0202     ................
 8005d7c:	0001 0101 0201 0002 0000 0100 0101 0102     ................
 8005d8c:	0100 0200 0101 0201 0100 0200 0101 0201     ................
 8005d9c:	0100 0200 0101 0201 0100 0200 0101 0201     ................
 8005dac:	0100 0200 0001 0101 0100 0101 0201 0202     ................
 8005dbc:	0101 0201 0002 0102 0000 0001 0101 0102     ................
 8005dcc:	0100 0001 0101 0201 0100 0101 0201 0102     ................
 8005ddc:	0001 0101 0201 0102 0100 0001 0101 0102     ................
 8005dec:	0000 0100 0101 0201 0200 0101 0201 0102     ................
 8005dfc:	0001 0101 0102 0202 0100 0001 0101 0002     ................
 8005e0c:	0105 0000 6f44 726f 7420 7365 0074 0000     ....Door test...
 8005e1c:	654b 6279 616f 6472 7420 7365 0074 0000     Keyboard test...
 8005e2c:	7541 6972 6167 5420 7465 6972 0073 0000     Auriga Tetris...
 8005e3c:	6944 7073 616c 2079 6574 7473 0000 0000     Display test....
 8005e4c:	6f4d 6f74 2072 6574 7473 0000 6f53 6e75     Motor test..Soun
 8005e5c:	2064 6574 7473 0000 6c41 7261 206d 6574     d test..Alarm te
 8005e6c:	7473 0000                                   st..

08005e70 <handlers>:
 8005e70:	1985 0800 1985 0800 1985 0800 1985 0800     ................
 8005e80:	1991 0800 1985 0800 1985 0800 1985 0800     ................
 8005e90:	1985 0800 1985 0800 1985 0800 1985 0800     ................
 8005ea0:	19c5 0800 1985 0800 19f9 0800 1985 0800     ................
 8005eb0:	1a3d 0800                                   =...

08005eb4 <handlers>:
 8005eb4:	1ae1 0800 1ae1 0800 1ae1 0800 1ae1 0800     ................
 8005ec4:	1b07 0800 1ae1 0800 1ae1 0800 1ae1 0800     ................
 8005ed4:	1ae1 0800 1ae1 0800 1ae1 0800 1ae1 0800     ................
 8005ee4:	1aed 0800 1ae1 0800 1ae1 0800 1b21 0800     ............!...
 8005ef4:	1ae1 0800                                   ....

08005ef8 <handlers>:
 8005ef8:	1bb5 0800 1bb5 0800 1bb5 0800 1bb5 0800     ................
 8005f08:	1bb5 0800 1bb5 0800 1bb5 0800 1bb5 0800     ................
 8005f18:	1bb5 0800 1bb5 0800 1bb5 0800 1bb5 0800     ................
 8005f28:	1bb5 0800 1bb5 0800 1bb5 0800 1bc1 0800     ................
 8005f38:	1bb5 0800                                   ....

08005f3c <handlers>:
 8005f3c:	1cbd 0800 1cbd 0800 1cbd 0800 1cbd 0800     ................
 8005f4c:	1cbd 0800 1cbd 0800 1d29 0800 1cbd 0800     ........).......
 8005f5c:	1cbd 0800 1cbd 0800 1cbd 0800 1d15 0800     ................
 8005f6c:	1d01 0800 1ced 0800 1d3d 0800 1cc9 0800     ........=.......
 8005f7c:	1cbd 0800 7453 6361 206b 7266 6d61 3a65     ....Stack frame:
 8005f8c:	000a 0000 5220 2030 203d 2520 3830 0a58     .... R0 =  %08X.
 8005f9c:	0000 0000 5220 2031 203d 2520 3830 0a58     .... R1 =  %08X.
 8005fac:	0000 0000 5220 2032 203d 2520 3830 0a58     .... R2 =  %08X.
 8005fbc:	0000 0000 5220 2033 203d 2520 3830 0a58     .... R3 =  %08X.
 8005fcc:	0000 0000 5220 3231 3d20 2520 3830 0a58     .... R12 = %08X.
 8005fdc:	0000 0000 4c20 2052 203d 2520 3830 0a58     .... LR =  %08X.
 8005fec:	0000 0000 5020 2043 203d 2520 3830 0a58     .... PC =  %08X.
 8005ffc:	0000 0000 5020 5253 3d20 2520 3830 0a58     .... PSR = %08X.
 800600c:	0000 0000 5346 2f52 4146 3a52 000a 0000     ....FSR/FAR:....
 800601c:	4320 5346 2052 203d 2520 3830 0a58 0000      CFSR =  %08X...
 800602c:	4820 5346 2052 203d 2520 3830 0a58 0000      HFSR =  %08X...
 800603c:	4420 5346 2052 203d 2520 3830 0a58 0000      DFSR =  %08X...
 800604c:	4120 5346 2052 203d 2520 3830 0a58 0000      AFSR =  %08X...
 800605c:	4d20 464d 5241 3d20 2520 3830 0a58 0000      MMFAR = %08X...
 800606c:	4220 4146 2052 203d 2520 3830 0a58 0000      BFAR =  %08X...
 800607c:	694d 6373 000a 0000 4c20 2f52 5845 5f43     Misc.... LR/EXC_
 800608c:	4552 5554 4e52 203d 3025 5838 000a 0000     RETURN= %08X....
 800609c:	485b 7261 4664 7561 746c 0a5d 0000 0000     [HardFault].....
 80060ac:	425b 7375 6146 6c75 5d74 000a 555b 6173     [BusFault]..[Usa
 80060bc:	6567 6146 6c75 5d74 000a 0000               geFault]....

080060c8 <AHBPrescTable>:
	...
 80060d0:	0201 0403 0706 0908                         ........

080060d8 <MSIRangeTable>:
 80060d8:	86a0 0001 0d40 0003 1a80 0006 3500 000c     ....@........5..
 80060e8:	4240 000f 8480 001e 0900 003d 1200 007a     @B........=...z.
 80060f8:	2400 00f4 3600 016e 4800 01e8 6c00 02dc     .$...6n..H...l..

08006108 <DisplayInitSequence>:
 8006108:	1100 3a00 0501 3600 0001 b200 0001 0001     ...:...6........
 8006118:	0001 3301 3301 b700 3501 b800 2f01 2b01     ...3.3...5.../.+
 8006128:	2f01 bb00 2401 c000 2c01 c300 0b01 c400     ./...$...,......
 8006138:	2001 c600 1101 d000 a401 a101 e800 0301     . ..............
 8006148:	e900 0d01 1201 0001 e000 d001 0001 0001     ................
 8006158:	0801 1101 1a01 2b01 3301 4201 2601 1201     .......+.3.B.&..
 8006168:	2101 2f01 1101 e100 d001 0201 0901 0d01     .!./............
 8006178:	0d01 2701 2b01 3301 4201 1701 1201 1101     ...'.+.3.B......
 8006188:	2f01 3101 2100 2a00 0001 0001 0001 ef01     ./.1.!.*........
 8006198:	2b00 0001 0001 0101 3f01 2900 6f42 7964     .+.......?.)Body
 80061a8:	7547 7261 0064 0000 4d54 0000 4120 4d52     Guard...TM.. ARM
 80061b8:	4320 726f 6574 2d78 344d 6920 736e 6469      Cortex-M4 insid
 80061c8:	0065 0000 6f53 7466 6177 6572 5620 7265     e...Software Ver
 80061d8:	6973 6e6f 203a 0000 654e 7478 6547 206e     sion: ..NextGen 
 80061e8:	6544 6f6d 7620 7265 6973 6e6f 0000 0000     Demo version....
 80061f8:	694c 7262 7261 0079 2d2d 2d2d 2d2d 2d2d     Library.--------
 8006208:	2d2d 002d 6553 6972 6c61 4e20 6d75 6562     ---.Serial Numbe
 8006218:	3a72 0020 2054 2020 2020 2031 2020 0020     r: .T     1    .
 8006228:	7250 646f 6375 6974 6e6f 4420 7461 3a65     Production Date:
 8006238:	0020 0000 3231 4e2d 766f 322d 3130 0039      ...12-Nov-2019.
 8006248:	6f53 6e75 2064 6c61 7261 206d 6574 7473     Sound alarm test
 8006258:	0000 0000 7543 7272 6e65 2074 6f73 6e75     ....Current soun
 8006268:	2064 656c 6576 3a6c 0020 0000 6f44 726f     d level: ...Door
 8006278:	5320 6e65 6f73 2072 6554 7473 0020 0000      Sensor Test ...
 8006288:	704f 6e65 0000 0000 6c43 736f 0065 0000     Open....Close...
 8006298:	7250 7365 2073 0000 4b20 7965 7420 206f     Press .. Key to 
 80062a8:	6f43 746e 6e69 6575 0000 0000 6f4d 6f74     Continue....Moto
 80062b8:	2072 6f72 6174 6974 6e6f 7420 7365 0074     r rotation test.
 80062c8:	6c50 6165 6573 6320 6568 6b63 6d20 746f     Please check mot
 80062d8:	726f 7220 746f 7461 6f69 006e 7420 206f     or rotation. to 
 80062e8:	6e69 7263 6165 6573 6120 646e 0020 0000     increase and ...
 80062f8:	6f74 6420 6365 6572 7361 2065 6874 2065     to decrease the 
 8006308:	6f6d 6f74 2072 7073 6565 0064 7420 206f     motor speed. to 
 8006318:	7865 7469 0000 0000 654b 7079 6461 5420     exit....Keypad T
 8006328:	7365 2074 0000 0000 4b20 7965 0000 0000     est .... Key....
 8006338:	6554 7473 4f20 214b 5020 6572 7373 0020     Test OK! Press .
 8006348:	7420 206f 6f63 746e 6e69 6575 002e 0000      to continue....
 8006358:	6554 6863 696e 6963 6e61 6f20 7470 6f69     Technician optio
 8006368:	736e 203a 0000 0000 6553 656c 7463 0020     ns: ....Select .
 8006378:	202c 0000 6120 646e 7020 6572 7373 0020     , .. and press .
 8006388:	6353 726f 7365 0000 6147 656d 0000 0000     Scores..Game....
 8006398:	764f 7265 0000 0000 654e 7478 003a 0000     Over....Next:...
 80063a8:	2d20 4c20 6665 0074 2d20 5220 6769 7468      - Left. - Right
 80063b8:	0000 0000 2d20 5220 746f 7461 0065 0000     .... - Rotate...
 80063c8:	2d20 4420 776f 006e 2d20 4e20 7765 0000      - Down. - New..
 80063d8:	6948 6867 7020 6972 726f 7469 2079 6c61     High priority al
 80063e8:	7261 006d                                   arm.

080063ec <fonts8_20>:
 80063ec:	0000 0000                                   ....

080063f0 <fonts8_21>:
 80063f0:	0000 4f00 0000 0000                         ...O....

080063f8 <fonts8_22>:
 80063f8:	0000 0007 0007 0000                         ........

08006400 <fonts8_23>:
 8006400:	1400 147f 147f 0000                         ........

08006408 <fonts8_24>:
 8006408:	2400 7f2a 122a 0000                         .$*.*...

08006410 <fonts8_25>:
 8006410:	2300 0813 6264 0000                         .#..db..

08006418 <fonts8_26>:
 8006418:	3600 5549 5022 0000                         .6IU"P..

08006420 <fonts8_27>:
 8006420:	0000 0305 0000 0000                         ........

08006428 <fonts8_28>:
 8006428:	0000 221c 0041 0000                         ..."A...

08006430 <fonts8_29>:
 8006430:	0000 2241 001c 0000                         ..A"....

08006438 <fonts8_2A>:
 8006438:	1400 3e08 1408 0000                         ...>....

08006440 <fonts8_2B>:
 8006440:	0800 3e08 0808 0000                         ...>....

08006448 <fonts8_2C>:
 8006448:	0000 3050 0000 0000                         ..P0....

08006450 <fonts8_2D>:
 8006450:	0800 0808 0808 0000                         ........

08006458 <fonts8_2E>:
 8006458:	0000 6060 0000 0000                         ..``....

08006460 <fonts8_2F>:
 8006460:	2000 0810 0204 0000                         . ......

08006468 <fonts8_30>:
 8006468:	3e00 4941 3e41 0000                         .>AIA>..

08006470 <fonts8_31>:
 8006470:	0000 7f42 0040 0000                         ..B.@...

08006478 <fonts8_32>:
 8006478:	4200 5161 4649 0000                         .BaQIF..

08006480 <fonts8_33>:
 8006480:	2100 4541 314b 0000                         .!AEK1..

08006488 <fonts8_34>:
 8006488:	1800 1214 107f 0000                         ........

08006490 <fonts8_35>:
 8006490:	2700 4545 3945 0000                         .'EEE9..

08006498 <fonts8_36>:
 8006498:	3c00 494a 3049 0000                         .<JII0..

080064a0 <fonts8_37>:
 80064a0:	0100 0971 0305 0000                         ..q.....

080064a8 <fonts8_38>:
 80064a8:	3600 4949 3649 0000                         .6III6..

080064b0 <fonts8_39>:
 80064b0:	0600 4949 1e29 0000                         ..II)...

080064b8 <fonts8_3A>:
 80064b8:	0000 3636 0000 0000                         ..66....

080064c0 <fonts8_3B>:
 80064c0:	0000 3656 0000 0000                         ..V6....

080064c8 <fonts8_3C>:
 80064c8:	0800 2214 0841 0000                         ..."A...

080064d0 <fonts8_3D>:
 80064d0:	1400 1414 1414 0000                         ........

080064d8 <fonts8_3E>:
 80064d8:	0000 2241 0814 0000                         ..A"....

080064e0 <fonts8_3F>:
 80064e0:	0200 5101 0609 0000                         ...Q....

080064e8 <fonts8_40>:
 80064e8:	fe00 2020 3e10 0000                         ..  .>..

080064f0 <fonts8_41>:
 80064f0:	7e00 1111 7e11 0000                         .~...~..

080064f8 <fonts8_42>:
 80064f8:	7f00 4949 3649 0000                         ..III6..

08006500 <fonts8_43>:
 8006500:	3e00 4141 2241 0000                         .>AAA"..

08006508 <fonts8_44>:
 8006508:	7f00 4141 1c22 0000                         ..AA"...

08006510 <fonts8_45>:
 8006510:	7f00 4949 4149 0000                         ..IIIA..

08006518 <fonts8_46>:
 8006518:	7f00 0909 0109 0000                         ........

08006520 <fonts8_47>:
 8006520:	3e00 4941 7a49 0000                         .>AIIz..

08006528 <fonts8_48>:
 8006528:	7f00 0808 7f08 0000                         ........

08006530 <fonts8_49>:
 8006530:	0000 7f41 0041 0000                         ..A.A...

08006538 <fonts8_4A>:
 8006538:	2000 4140 013f 0000                         . @A?...

08006540 <fonts8_4B>:
 8006540:	7f00 1408 4122 0000                         ...."A..

08006548 <fonts8_4C>:
 8006548:	7f00 4040 4040 0000                         ..@@@@..

08006550 <fonts8_4D>:
 8006550:	7f00 0c02 7f02 0000                         ........

08006558 <fonts8_4E>:
 8006558:	7f00 0804 7f10 0000                         ........

08006560 <fonts8_4F>:
 8006560:	3e00 4141 3e41 0000                         .>AAA>..

08006568 <fonts8_50>:
 8006568:	7f00 0909 0609 0000                         ........

08006570 <fonts8_51>:
 8006570:	3e00 5141 5e21 0000                         .>AQ!^..

08006578 <fonts8_52>:
 8006578:	7f00 1909 4629 0000                         ....)F..

08006580 <fonts8_53>:
 8006580:	4600 4949 3149 0000                         .FIII1..

08006588 <fonts8_54>:
 8006588:	0100 7f01 0101 0000                         ........

08006590 <fonts8_55>:
 8006590:	3f00 4040 3f40 0000                         .?@@@?..

08006598 <fonts8_56>:
 8006598:	1f00 4020 1f20 0000                         .. @ ...

080065a0 <fonts8_57>:
 80065a0:	3f00 3840 3f40 0000                         .?@8@?..

080065a8 <fonts8_58>:
 80065a8:	6300 0814 6314 0000                         .c...c..

080065b0 <fonts8_59>:
 80065b0:	0700 7008 0708 0000                         ...p....

080065b8 <fonts8_5A>:
 80065b8:	6100 4951 4345 0000                         .aQIEC..

080065c0 <fonts8_5B>:
 80065c0:	fe00 8183 fe83 0000                         ........

080065c8 <fonts8_5C>:
 80065c8:	0200 0804 2010 0000                         ..... ..

080065d0 <fonts8_5D>:
 80065d0:	fe00 f9f3 feff 0000                         ........

080065d8 <fonts8_5E>:
 80065d8:	fe00 ffff feff 0000                         ........

080065e0 <fonts8_5F>:
 80065e0:	c000 c0c0 c0c0 0000                         ........

080065e8 <fonts8_60>:
 80065e8:	fe00 e1c3 fef3 0000                         ........

080065f0 <fonts8_61>:
 80065f0:	2000 5454 7854 0000                         . TTTx..

080065f8 <fonts8_62>:
 80065f8:	7f00 4448 3844 0000                         ..HDD8..

08006600 <fonts8_63>:
 8006600:	3800 4444 2044 0000                         .8DDD ..

08006608 <fonts8_64>:
 8006608:	3800 4444 7f48 0000                         .8DDH...

08006610 <fonts8_65>:
 8006610:	3800 5454 1854 0000                         .8TTT...

08006618 <fonts8_66>:
 8006618:	0800 097e 0201 0000                         ..~.....

08006620 <fonts8_67>:
 8006620:	1800 a4a4 7ca4 0000                         .....|..

08006628 <fonts8_68>:
 8006628:	7f00 0408 7804 0000                         .....x..

08006630 <fonts8_69>:
 8006630:	0000 7d44 0040 0000                         ..D}@...

08006638 <fonts8_6A>:
 8006638:	2000 4440 003d 0000                         . @D=...

08006640 <fonts8_6B>:
 8006640:	7f00 2810 0044 0000                         ...(D...

08006648 <fonts8_6C>:
 8006648:	0000 7f41 0040 0000                         ..A.@...

08006650 <fonts8_6D>:
 8006650:	7c00 1804 7804 0000                         .|...x..

08006658 <fonts8_6E>:
 8006658:	7c00 0408 7804 0000                         .|...x..

08006660 <fonts8_6F>:
 8006660:	3800 4444 3844 0000                         .8DDD8..

08006668 <fonts8_70>:
 8006668:	7c00 1414 0814 0000                         .|......

08006670 <fonts8_71>:
 8006670:	0800 1414 7c18 0000                         .....|..

08006678 <fonts8_72>:
 8006678:	7c00 0408 0804 0000                         .|......

08006680 <fonts8_73>:
 8006680:	4800 5454 2054 0000                         .HTTT ..

08006688 <fonts8_74>:
 8006688:	0400 443f 2040 0000                         ..?D@ ..

08006690 <fonts8_75>:
 8006690:	3c00 4040 7c20 0000                         .<@@ |..

08006698 <fonts8_76>:
 8006698:	1c00 4020 1c20 0000                         .. @ ...

080066a0 <fonts8_77>:
 80066a0:	3c00 3040 3c40 0000                         .<@0@<..

080066a8 <fonts8_78>:
 80066a8:	4400 1028 4428 0000                         .D(.(D..

080066b0 <fonts8_79>:
 80066b0:	0c00 5050 3c50 0000                         ..PPP<..

080066b8 <fonts8_7A>:
 80066b8:	4400 5464 444c 0000                         .DdTLD..

080066c0 <fonts8_7B>:
 80066c0:	0400 7f02 0402 0000                         ........

080066c8 <fonts8_7C>:
 80066c8:	0000 00ff                                   ....

080066cc <fonts8_7D>:
 80066cc:	1000 7f20 1020 0000                         .. . ...

080066d4 <fonts8_7E_C1>:
 80066d4:	7e00 1111 7e11 0000                         .~...~..

080066dc <fonts8_C2_C4>:
 80066dc:	7e00 1111 7e11 0000                         .~...~..

080066e4 <fonts8_C5>:
 80066e4:	7e00 1111 7e11 0000                         .~...~..

080066ec <fonts8_C6_E1>:
 80066ec:	2000 5554 7854 0000                         . TUTx..

080066f4 <fonts8_E2_E4>:
 80066f4:	3800 5454 1854 0000                         .8TTT...

080066fc <fonts8_E5_E9>:
 80066fc:	3800 5554 1854 0000                         .8TUT...

08006704 <fonts8_EA_ED>:
 8006704:	0000 7d44 0040 0000                         ..D}@...

0800670c <fonts8_EE_F1>:
 800670c:	7c00 0509 7805 0000                         .|...x..

08006714 <fonts8_F2_F3>:
 8006714:	3800 4544 3844 0000                         .8DED8..

0800671c <fonts8_F4_F6>:
 800671c:	3800 4445 3845 0000                         .8EDE8..

08006724 <fonts8_F7_FA>:
 8006724:	3c00 4140 7c20 0000                         .<@A |..

0800672c <fonts8_FB_FC>:
 800672c:	3c00 4041 7c21 0000                         .<A@!|..

08006734 <fonts8_FD_FF>:
 8006734:	0000 0000                                   ....

08006738 <fonts8_20_char>:
 8006738:	0004 0000 63ec 0800                         .....c..

08006740 <fonts8_21_char>:
 8006740:	0006 0000 63f0 0800                         .....c..

08006748 <fonts8_22_char>:
 8006748:	0006 0000 63f8 0800                         .....c..

08006750 <fonts8_23_char>:
 8006750:	0006 0000 6400 0800                         .....d..

08006758 <fonts8_24_char>:
 8006758:	0006 0000 6408 0800                         .....d..

08006760 <fonts8_25_char>:
 8006760:	0006 0000 6410 0800                         .....d..

08006768 <fonts8_26_char>:
 8006768:	0006 0000 6418 0800                         .....d..

08006770 <fonts8_27_char>:
 8006770:	0006 0000 6420 0800                         .... d..

08006778 <fonts8_28_char>:
 8006778:	0006 0000 6428 0800                         ....(d..

08006780 <fonts8_29_char>:
 8006780:	0006 0000 6430 0800                         ....0d..

08006788 <fonts8_2A_char>:
 8006788:	0006 0000 6438 0800                         ....8d..

08006790 <fonts8_2B_char>:
 8006790:	0006 0000 6440 0800                         ....@d..

08006798 <fonts8_2C_char>:
 8006798:	0006 0000 6448 0800                         ....Hd..

080067a0 <fonts8_2D_char>:
 80067a0:	0006 0000 6450 0800                         ....Pd..

080067a8 <fonts8_2E_char>:
 80067a8:	0006 0000 6458 0800                         ....Xd..

080067b0 <fonts8_2F_char>:
 80067b0:	0006 0000 6460 0800                         ....`d..

080067b8 <fonts8_30_char>:
 80067b8:	0006 0000 6468 0800                         ....hd..

080067c0 <fonts8_31_char>:
 80067c0:	0006 0000 6470 0800                         ....pd..

080067c8 <fonts8_32_char>:
 80067c8:	0006 0000 6478 0800                         ....xd..

080067d0 <fonts8_33_char>:
 80067d0:	0006 0000 6480 0800                         .....d..

080067d8 <fonts8_34_char>:
 80067d8:	0006 0000 6488 0800                         .....d..

080067e0 <fonts8_35_char>:
 80067e0:	0006 0000 6490 0800                         .....d..

080067e8 <fonts8_36_char>:
 80067e8:	0006 0000 6498 0800                         .....d..

080067f0 <fonts8_37_char>:
 80067f0:	0006 0000 64a0 0800                         .....d..

080067f8 <fonts8_38_char>:
 80067f8:	0006 0000 64a8 0800                         .....d..

08006800 <fonts8_39_char>:
 8006800:	0006 0000 64b0 0800                         .....d..

08006808 <fonts8_3A_char>:
 8006808:	0006 0000 64b8 0800                         .....d..

08006810 <fonts8_3B_char>:
 8006810:	0006 0000 64c0 0800                         .....d..

08006818 <fonts8_3C_char>:
 8006818:	0006 0000 64c8 0800                         .....d..

08006820 <fonts8_3D_char>:
 8006820:	0006 0000 64d0 0800                         .....d..

08006828 <fonts8_3E_char>:
 8006828:	0006 0000 64d8 0800                         .....d..

08006830 <fonts8_3F_char>:
 8006830:	0006 0000 64e0 0800                         .....d..

08006838 <fonts8_40_char>:
 8006838:	0006 0000 64e8 0800                         .....d..

08006840 <fonts8_41_char>:
 8006840:	0006 0000 64f0 0800                         .....d..

08006848 <fonts8_42_char>:
 8006848:	0006 0000 64f8 0800                         .....d..

08006850 <fonts8_43_char>:
 8006850:	0006 0000 6500 0800                         .....e..

08006858 <fonts8_44_char>:
 8006858:	0006 0000 6508 0800                         .....e..

08006860 <fonts8_45_char>:
 8006860:	0006 0000 6510 0800                         .....e..

08006868 <fonts8_46_char>:
 8006868:	0006 0000 6518 0800                         .....e..

08006870 <fonts8_47_char>:
 8006870:	0006 0000 6520 0800                         .... e..

08006878 <fonts8_48_char>:
 8006878:	0006 0000 6528 0800                         ....(e..

08006880 <fonts8_49_char>:
 8006880:	0006 0000 6530 0800                         ....0e..

08006888 <fonts8_4A_char>:
 8006888:	0006 0000 6538 0800                         ....8e..

08006890 <fonts8_4B_char>:
 8006890:	0006 0000 6540 0800                         ....@e..

08006898 <fonts8_4C_char>:
 8006898:	0006 0000 6548 0800                         ....He..

080068a0 <fonts8_4D_char>:
 80068a0:	0006 0000 6550 0800                         ....Pe..

080068a8 <fonts8_4E_char>:
 80068a8:	0006 0000 6558 0800                         ....Xe..

080068b0 <fonts8_4F_char>:
 80068b0:	0006 0000 6560 0800                         ....`e..

080068b8 <fonts8_50_char>:
 80068b8:	0006 0000 6568 0800                         ....he..

080068c0 <fonts8_51_char>:
 80068c0:	0006 0000 6570 0800                         ....pe..

080068c8 <fonts8_52_char>:
 80068c8:	0006 0000 6578 0800                         ....xe..

080068d0 <fonts8_53_char>:
 80068d0:	0006 0000 6580 0800                         .....e..

080068d8 <fonts8_54_char>:
 80068d8:	0006 0000 6588 0800                         .....e..

080068e0 <fonts8_55_char>:
 80068e0:	0006 0000 6590 0800                         .....e..

080068e8 <fonts8_56_char>:
 80068e8:	0006 0000 6598 0800                         .....e..

080068f0 <fonts8_57_char>:
 80068f0:	0006 0000 65a0 0800                         .....e..

080068f8 <fonts8_58_char>:
 80068f8:	0006 0000 65a8 0800                         .....e..

08006900 <fonts8_59_char>:
 8006900:	0006 0000 65b0 0800                         .....e..

08006908 <fonts8_5A_char>:
 8006908:	0006 0000 65b8 0800                         .....e..

08006910 <fonts8_5B_char>:
 8006910:	0006 0000 65c0 0800                         .....e..

08006918 <fonts8_5C_char>:
 8006918:	0006 0000 65c8 0800                         .....e..

08006920 <fonts8_5D_char>:
 8006920:	0006 0000 65d0 0800                         .....e..

08006928 <fonts8_5E_char>:
 8006928:	0006 0000 65d8 0800                         .....e..

08006930 <fonts8_5F_char>:
 8006930:	0006 0000 65e0 0800                         .....e..

08006938 <fonts8_60_char>:
 8006938:	0006 0000 65e8 0800                         .....e..

08006940 <fonts8_61_char>:
 8006940:	0006 0000 65f0 0800                         .....e..

08006948 <fonts8_62_char>:
 8006948:	0006 0000 65f8 0800                         .....e..

08006950 <fonts8_63_char>:
 8006950:	0006 0000 6600 0800                         .....f..

08006958 <fonts8_64_char>:
 8006958:	0006 0000 6608 0800                         .....f..

08006960 <fonts8_65_char>:
 8006960:	0006 0000 6610 0800                         .....f..

08006968 <fonts8_66_char>:
 8006968:	0006 0000 6618 0800                         .....f..

08006970 <fonts8_67_char>:
 8006970:	0006 0000 6620 0800                         .... f..

08006978 <fonts8_68_char>:
 8006978:	0006 0000 6628 0800                         ....(f..

08006980 <fonts8_69_char>:
 8006980:	0005 0000 6630 0800                         ....0f..

08006988 <fonts8_6A_char>:
 8006988:	0006 0000 6638 0800                         ....8f..

08006990 <fonts8_6B_char>:
 8006990:	0006 0000 6640 0800                         ....@f..

08006998 <fonts8_6C_char>:
 8006998:	0005 0000 6648 0800                         ....Hf..

080069a0 <fonts8_6D_char>:
 80069a0:	0006 0000 6650 0800                         ....Pf..

080069a8 <fonts8_6E_char>:
 80069a8:	0006 0000 6658 0800                         ....Xf..

080069b0 <fonts8_6F_char>:
 80069b0:	0006 0000 6660 0800                         ....`f..

080069b8 <fonts8_70_char>:
 80069b8:	0006 0000 6668 0800                         ....hf..

080069c0 <fonts8_71_char>:
 80069c0:	0006 0000 6670 0800                         ....pf..

080069c8 <fonts8_72_char>:
 80069c8:	0006 0000 6678 0800                         ....xf..

080069d0 <fonts8_73_char>:
 80069d0:	0006 0000 6680 0800                         .....f..

080069d8 <fonts8_74_char>:
 80069d8:	0006 0000 6688 0800                         .....f..

080069e0 <fonts8_75_char>:
 80069e0:	0006 0000 6690 0800                         .....f..

080069e8 <fonts8_76_char>:
 80069e8:	0006 0000 6698 0800                         .....f..

080069f0 <fonts8_77_char>:
 80069f0:	0006 0000 66a0 0800                         .....f..

080069f8 <fonts8_78_char>:
 80069f8:	0006 0000 66a8 0800                         .....f..

08006a00 <fonts8_79_char>:
 8006a00:	0006 0000 66b0 0800                         .....f..

08006a08 <fonts8_7A_char>:
 8006a08:	0006 0000 66b8 0800                         .....f..

08006a10 <fonts8_7B_char>:
 8006a10:	0006 0000 66c0 0800                         .....f..

08006a18 <fonts8_7C_char>:
 8006a18:	0004 0000 66c8 0800                         .....f..

08006a20 <fonts8_7D_char>:
 8006a20:	0006 0000 66cc 0800                         .....f..

08006a28 <fonts8_7E_C1_char>:
 8006a28:	0006 0000 66d4 0800                         .....f..

08006a30 <fonts8_C2_C4_char>:
 8006a30:	0006 0000 66dc 0800                         .....f..

08006a38 <fonts8_C5_char>:
 8006a38:	0006 0000 66e4 0800                         .....f..

08006a40 <fonts8_C6_E1_char>:
 8006a40:	0006 0000 66ec 0800                         .....f..

08006a48 <fonts8_E2_E4_char>:
 8006a48:	0006 0000 66f4 0800                         .....f..

08006a50 <fonts8_E5_E9_char>:
 8006a50:	0006 0000 66fc 0800                         .....f..

08006a58 <fonts8_EA_ED_char>:
 8006a58:	0006 0000 6704 0800                         .....g..

08006a60 <fonts8_EE_F1_char>:
 8006a60:	0006 0000 670c 0800                         .....g..

08006a68 <fonts8_F2_F3_char>:
 8006a68:	0006 0000 6714 0800                         .....g..

08006a70 <fonts8_F4_F6_char>:
 8006a70:	0006 0000 671c 0800                         .....g..

08006a78 <fonts8_F7_FA_char>:
 8006a78:	0006 0000 6724 0800                         ....$g..

08006a80 <fonts8_FB_FC_char>:
 8006a80:	0006 0000 672c 0800                         ....,g..

08006a88 <fonts8_FD_FF_char>:
 8006a88:	0004 0000 6734 0800                         ....4g..

08006a90 <font8>:
 8006a90:	0808 0000 6738 0800 6740 0800 6748 0800     ....8g..@g..Hg..
 8006aa0:	6750 0800 6758 0800 6760 0800 6768 0800     Pg..Xg..`g..hg..
 8006ab0:	6770 0800 6778 0800 6780 0800 6788 0800     pg..xg...g...g..
 8006ac0:	6790 0800 6798 0800 67a0 0800 67a8 0800     .g...g...g...g..
 8006ad0:	67b0 0800 67b8 0800 67c0 0800 67c8 0800     .g...g...g...g..
 8006ae0:	67d0 0800 67d8 0800 67e0 0800 67e8 0800     .g...g...g...g..
 8006af0:	67f0 0800 67f8 0800 6800 0800 6808 0800     .g...g...h...h..
 8006b00:	6810 0800 6818 0800 6820 0800 6828 0800     .h...h.. h..(h..
 8006b10:	6830 0800 6838 0800 6840 0800 6848 0800     0h..8h..@h..Hh..
 8006b20:	6850 0800 6858 0800 6860 0800 6868 0800     Ph..Xh..`h..hh..
 8006b30:	6870 0800 6878 0800 6880 0800 6888 0800     ph..xh...h...h..
 8006b40:	6890 0800 6898 0800 68a0 0800 68a8 0800     .h...h...h...h..
 8006b50:	68b0 0800 68b8 0800 68c0 0800 68c8 0800     .h...h...h...h..
 8006b60:	68d0 0800 68d8 0800 68e0 0800 68e8 0800     .h...h...h...h..
 8006b70:	68f0 0800 68f8 0800 6900 0800 6908 0800     .h...h...i...i..
 8006b80:	6910 0800 6918 0800 6920 0800 6928 0800     .i...i.. i..(i..
 8006b90:	6930 0800 6938 0800 6940 0800 6948 0800     0i..8i..@i..Hi..
 8006ba0:	6950 0800 6958 0800 6960 0800 6968 0800     Pi..Xi..`i..hi..
 8006bb0:	6970 0800 6978 0800 6980 0800 6988 0800     pi..xi...i...i..
 8006bc0:	6990 0800 6998 0800 69a0 0800 69a8 0800     .i...i...i...i..
 8006bd0:	69b0 0800 69b8 0800 69c0 0800 69c8 0800     .i...i...i...i..
 8006be0:	69d0 0800 69d8 0800 69e0 0800 69e8 0800     .i...i...i...i..
 8006bf0:	69f0 0800 69f8 0800 6a00 0800 6a08 0800     .i...i...j...j..
 8006c00:	6a10 0800 6a18 0800 6a20 0800 6a28 0800     .j...j.. j..(j..
 8006c10:	6a28 0800 6a28 0800 6a28 0800 6a28 0800     (j..(j..(j..(j..
 8006c20:	6a28 0800 6a28 0800 6a28 0800 6a28 0800     (j..(j..(j..(j..
 8006c30:	6a28 0800 6a28 0800 6a28 0800 6a28 0800     (j..(j..(j..(j..
 8006c40:	6a28 0800 6a28 0800 6a28 0800 6a28 0800     (j..(j..(j..(j..
 8006c50:	6a28 0800 6a28 0800 6a28 0800 6a28 0800     (j..(j..(j..(j..
 8006c60:	6a28 0800 6a28 0800 6a28 0800 6a28 0800     (j..(j..(j..(j..
 8006c70:	6a28 0800 6a28 0800 6a28 0800 6a28 0800     (j..(j..(j..(j..
 8006c80:	6a28 0800 6a28 0800 6a28 0800 6a28 0800     (j..(j..(j..(j..
 8006c90:	6a28 0800 6a28 0800 6a28 0800 6a28 0800     (j..(j..(j..(j..
 8006ca0:	6a28 0800 6a28 0800 6a28 0800 6a28 0800     (j..(j..(j..(j..
 8006cb0:	6a28 0800 6a28 0800 6a28 0800 6a28 0800     (j..(j..(j..(j..
 8006cc0:	6a28 0800 6a28 0800 6a28 0800 6a28 0800     (j..(j..(j..(j..
 8006cd0:	6a28 0800 6a28 0800 6a28 0800 6a28 0800     (j..(j..(j..(j..
 8006ce0:	6a28 0800 6a28 0800 6a28 0800 6a28 0800     (j..(j..(j..(j..
 8006cf0:	6a28 0800 6a28 0800 6a28 0800 6a28 0800     (j..(j..(j..(j..
 8006d00:	6a28 0800 6a28 0800 6a28 0800 6a28 0800     (j..(j..(j..(j..
 8006d10:	6a28 0800 6a28 0800 6a28 0800 6a30 0800     (j..(j..(j..0j..
 8006d20:	6a30 0800 6a30 0800 6a38 0800 6a40 0800     0j..0j..8j..@j..
 8006d30:	6a40 0800 6a40 0800 6a40 0800 6a40 0800     @j..@j..@j..@j..
 8006d40:	6a40 0800 6a40 0800 6a40 0800 6a40 0800     @j..@j..@j..@j..
 8006d50:	6a40 0800 6a40 0800 6a40 0800 6a40 0800     @j..@j..@j..@j..
 8006d60:	6a40 0800 6a40 0800 6a40 0800 6a40 0800     @j..@j..@j..@j..
 8006d70:	6a40 0800 6a40 0800 6a40 0800 6a40 0800     @j..@j..@j..@j..
 8006d80:	6a40 0800 6a40 0800 6a40 0800 6a40 0800     @j..@j..@j..@j..
 8006d90:	6a40 0800 6a40 0800 6a40 0800 6a48 0800     @j..@j..@j..Hj..
 8006da0:	6a48 0800 6a48 0800 6a50 0800 6a50 0800     Hj..Hj..Pj..Pj..
 8006db0:	6a50 0800 6a50 0800 6a50 0800 6a58 0800     Pj..Pj..Pj..Xj..
 8006dc0:	6a58 0800 6a58 0800 6a58 0800 6a60 0800     Xj..Xj..Xj..`j..
 8006dd0:	6a60 0800 6a60 0800 6a60 0800 6a68 0800     `j..`j..`j..hj..
 8006de0:	6a68 0800 6a70 0800 6a70 0800 6a70 0800     hj..pj..pj..pj..
 8006df0:	6a78 0800 6a78 0800 6a78 0800 6a78 0800     xj..xj..xj..xj..
 8006e00:	6a80 0800 6a80 0800 6a88 0800 6a88 0800     .j...j...j...j..
 8006e10:	6a88 0800                                   .j..

08006e14 <fonts16_20>:
	...

08006e24 <fonts16_21>:
 8006e24:	0000 0000 0000 33fe 33fe 0000 0000 0000     .......3.3......

08006e34 <fonts16_22>:
 8006e34:	0000 0000 0007 0000 0000 0007 0000 0000     ................

08006e44 <fonts16_23>:
 8006e44:	0000 0410 3ffe 0410 0410 3ffe 0410 0000     .....?.....?....

08006e54 <fonts16_24>:
 8006e54:	0000 0470 0888 0888 3ffe 0888 0888 0710     ..p......?......

08006e64 <fonts16_25>:
 8006e64:	0000 301c 0c22 0322 1c9c 2260 2218 1c06     ...0"."...`"."..

08006e74 <fonts16_26>:
 8006e74:	0000 1e00 217c 2082 2142 163c 0800 1600     ....|!. B!<.....

08006e84 <fonts16_27>:
 8006e84:	0000 0000 0000 0004 0002 0001 0000 0000     ................

08006e94 <fonts16_28>:
 8006e94:	0000 0000 0000 07f0 180c 2002 4001 0000     ........... .@..

08006ea4 <fonts16_29>:
 8006ea4:	0000 0000 4001 2002 180c 07f0 0000 0000     .....@. ........

08006eb4 <fonts16_2A>:
 8006eb4:	0000 0110 00a0 0040 07fc 0040 00a0 0110     ......@...@.....

08006ec4 <fonts16_2B>:
 8006ec4:	0000 0040 0040 0040 07fc 0040 0040 0040     ..@.@.@...@.@.@.

08006ed4 <fonts16_2C>:
 8006ed4:	0000 0000 4c00 3c00 0000 0000 0000 0000     .....L.<........

08006ee4 <fonts16_2D>:
 8006ee4:	0000 0040 0040 0040 0040 0040 0040 0040     ..@.@.@.@.@.@.@.

08006ef4 <fonts16_2E>:
 8006ef4:	0000 0000 0000 3000 3000 0000 0000 0000     .......0.0......

08006f04 <fonts16_2F>:
 8006f04:	0000 6000 1800 0600 0180 0060 0018 0006     ...`......`.....

08006f14 <fonts16_30>:
 8006f14:	0000 07f0 180c 2002 2002 2002 180c 07f0     ....... . . ....

08006f24 <fonts16_31>:
 8006f24:	0000 0000 2008 200c 3ffe 2000 2000 0000     ..... . .?. . ..

08006f34 <fonts16_32>:
 8006f34:	0000 3008 2c04 2202 2102 2082 2044 2038     ...0.,.".!. D 8 

08006f44 <fonts16_33>:
 8006f44:	0000 2008 2004 2082 2082 2082 1144 0e38     ... . . . . D.8.

08006f54 <fonts16_34>:
 8006f54:	0000 0400 0700 04c0 0430 240c 3ffe 2400     ........0..$.?.$

08006f64 <fonts16_35>:
 8006f64:	0000 20fe 2042 2022 1022 1022 0842 0782     ... B " ".".B...

08006f74 <fonts16_36>:
 8006f74:	0000 0fe0 1098 2044 2042 2042 1082 0f00     ......D B B ....

08006f84 <fonts16_37>:
 8006f84:	0000 001e 0002 0002 3c02 03c2 003a 0006     .........<..:...

08006f94 <fonts16_38>:
 8006f94:	0000 0e38 1144 2082 2082 2082 1144 0e38     ..8.D.. . . D.8.

08006fa4 <fonts16_39>:
 8006fa4:	0000 0078 0084 2102 2102 1102 0c84 03f8     ..x....!.!......

08006fb4 <fonts16_3A>:
 8006fb4:	0000 0000 0000 1860 1860 0000 0000 0000     ......`.`.......

08006fc4 <fonts16_3B>:
 8006fc4:	0000 0000 0000 4c60 3c60 0000 0000 0000     ......`L`<......

08006fd4 <fonts16_3C>:
 8006fd4:	0000 0080 0140 0220 0410 0808 1004 2002     ....@. ........ 

08006fe4 <fonts16_3D>:
 8006fe4:	0000 0120 0120 0120 0120 0120 0120 0120     .. . . . . . . .

08006ff4 <fonts16_3E>:
 8006ff4:	0000 4004 2008 1010 0820 0440 0280 0100     ...@. .. .@.....

08007004 <fonts16_3F>:
 8007004:	0000 0008 0004 0002 3302 0082 0044 0038     .........3..D.8.

08007014 <fonts16_40>:
 8007014:	0000 4000 3fe0 0400 0400 0400 03e0 0400     ...@.?..........

08007024 <fonts16_41>:
 8007024:	0000 3800 0780 0270 020e 0270 0780 3800     ...8..p...p....8

08007034 <fonts16_42>:
 8007034:	0000 3ffe 2082 2082 2082 2082 1144 0e38     ...?. . . . D.8.

08007044 <fonts16_43>:
 8007044:	0000 0ff8 1004 2002 2002 2002 1004 0808     ....... . . ....

08007054 <fonts16_44>:
 8007054:	0000 3ffe 2002 2002 2002 1004 0808 07f0     ...?. . . ......

08007064 <fonts16_45>:
 8007064:	0000 3ffe 2082 2082 2082 2082 2082 2002     ...?. . . . . . 

08007074 <fonts16_46>:
 8007074:	0000 3ffe 0082 0082 0082 0082 0082 0002     ...?............

08007084 <fonts16_47>:
 8007084:	0000 0ff8 1004 2002 2082 2082 1084 3f88     ....... . . ...?

08007094 <fonts16_48>:
 8007094:	0000 3ffe 0080 0080 0080 0080 0080 3ffe     ...?...........?

080070a4 <fonts16_49>:
 80070a4:	0000 0000 0000 2002 3ffe 2002 0000 0000     ....... .?. ....

080070b4 <fonts16_4A>:
 80070b4:	0000 0800 1000 2000 2000 2000 1000 0ffe     ....... . . ....

080070c4 <fonts16_4B>:
 80070c4:	0000 3ffe 0180 0240 0420 0810 1008 2004     ...?..@. ...... 

080070d4 <fonts16_4C>:
 80070d4:	0000 3ffe 2000 2000 2000 2000 2000 2000     ...?. . . . . . 

080070e4 <fonts16_4D>:
 80070e4:	0000 3ffe 0018 0060 0180 0060 0018 3ffe     ...?..`...`....?

080070f4 <fonts16_4E>:
 80070f4:	0000 3ffe 000c 0030 00c0 0300 0c00 3ffe     ...?..0........?

08007104 <fonts16_4F>:
 8007104:	0000 0ff8 1004 2002 2002 2002 1004 0ff8     ....... . . ....

08007114 <fonts16_50>:
 8007114:	0000 3ffe 0102 0102 0102 0102 0084 0078     ...?..........x.

08007124 <fonts16_51>:
 8007124:	0000 0ff8 1004 2802 2402 2802 1004 2ff8     .......(.$.(.../

08007134 <fonts16_52>:
 8007134:	0000 3ffe 0102 0102 0102 0302 0c84 3078     ...?..........x0

08007144 <fonts16_53>:
 8007144:	0000 0838 1044 2082 2082 2082 1104 0e08     ..8.D.. . . ....

08007154 <fonts16_54>:
 8007154:	0000 0002 0002 0002 3ffe 0002 0002 0002     .........?......

08007164 <fonts16_55>:
 8007164:	0000 0ffe 1000 2000 2000 2000 1000 0ffe     ....... . . ....

08007174 <fonts16_56>:
 8007174:	0000 001e 01e0 0e00 3000 0e00 01e0 001e     .........0......

08007184 <fonts16_57>:
 8007184:	0000 0ffe 3000 0e00 01c0 0e00 3000 0ffe     .....0.......0..

08007194 <fonts16_58>:
 8007194:	0000 3002 0c0c 0330 00c0 0330 0c0c 3002     ...0..0...0....0

080071a4 <fonts16_59>:
 80071a4:	0000 000e 0030 00c0 3f00 00c0 0030 000e     ....0....?..0...

080071b4 <fonts16_5A>:
 80071b4:	0000 3002 2c02 2302 20c2 2032 200a 2006     ...0.,.#. 2 . . 

080071c4 <fonts16_5B>:
	...

080071d4 <fonts16_5C>:
 80071d4:	0000 0006 0018 0060 0180 0600 1800 6000     ......`........`

080071e4 <fonts16_5D>:
	...

080071f4 <fonts16_5E>:
	...

08007204 <fonts16_5F>:
 8007204:	0000 4000 4000 4000 4000 4000 4000 4000     ...@.@.@.@.@.@.@

08007214 <fonts16_60>:
	...

08007224 <fonts16_61>:
 8007224:	0000 1880 2440 2240 2240 1240 3f80 0000     ....@$@"@"@..?..

08007234 <fonts16_62>:
 8007234:	0000 3ffc 1080 2040 2040 2040 1f80 0000     ...?..@ @ @ ....

08007244 <fonts16_63>:
 8007244:	0000 1f80 2040 2040 2040 2040 1080 0000     ....@ @ @ @ ....

08007254 <fonts16_64>:
 8007254:	0000 1f80 2040 2040 2040 1080 3ffc 0000     ....@ @ @ ...?..

08007264 <fonts16_65>:
 8007264:	0000 1f80 2240 2240 2240 2240 1380 0000     ....@"@"@"@"....

08007274 <fonts16_66>:
 8007274:	0000 0040 0040 3ff8 0044 0044 0044 0000     ..@.@..?D.D.D...

08007284 <fonts16_67>:
 8007284:	0000 2780 4840 4840 4840 4480 3fc0 0000     ...'@H@H@H.D.?..

08007294 <fonts16_68>:
 8007294:	0000 3ffc 0080 0040 0040 0040 3f80 0000     ...?..@.@.@..?..

080072a4 <fonts16_69>:
 80072a4:	0000 0000 0000 2040 3fcc 2000 0000 0000     ......@ .?. ....

080072b4 <fonts16_6A>:
 80072b4:	0000 2000 4000 4000 4040 3fcc 0000 0000     ... .@.@@@.?....

080072c4 <fonts16_6B>:
 80072c4:	0000 3ffc 0200 0500 0880 1040 2000 0000     ...?......@.. ..

080072d4 <fonts16_6C>:
 80072d4:	0000 0000 0000 0004 3ffc 2000 0000 0000     .........?. ....

080072e4 <fonts16_6D>:
 80072e4:	0000 3fc0 0040 0040 3f80 0040 0040 3f80     ...?@.@..?@.@..?

080072f4 <fonts16_6E>:
 80072f4:	0000 3fc0 0080 0040 0040 0040 3f80 0000     ...?..@.@.@..?..

08007304 <fonts16_6F>:
 8007304:	0000 1f80 2040 2040 2040 2040 1f80 0000     ....@ @ @ @ ....

08007314 <fonts16_70>:
 8007314:	0000 7fc0 0840 0840 0840 0840 0780 0000     ....@.@.@.@.....

08007324 <fonts16_71>:
 8007324:	0000 0780 0840 0840 0840 0840 7fc0 0000     ....@.@.@.@.....

08007334 <fonts16_72>:
 8007334:	0000 0000 3fc0 0100 0080 0080 0040 0040     .....?......@.@.

08007344 <fonts16_73>:
 8007344:	0000 1180 2240 2240 2440 2440 1880 0000     ....@"@"@$@$....

08007354 <fonts16_74>:
 8007354:	0000 0040 0040 1ff8 2040 2040 2040 0000     ..@.@...@ @ @ ..

08007364 <fonts16_75>:
 8007364:	0000 1fc0 2000 2000 2000 1000 3fc0 0000     ..... . . ...?..

08007374 <fonts16_76>:
 8007374:	0000 00c0 0300 0c00 3000 0c00 0300 00c0     .........0......

08007384 <fonts16_77>:
 8007384:	0000 0fc0 3000 0c00 0300 0c00 3000 0fc0     .....0.......0..

08007394 <fonts16_78>:
 8007394:	0000 2040 1080 0900 0600 0900 1080 2040     ..@ ..........@ 

080073a4 <fonts16_79>:
 80073a4:	0000 0040 4180 2600 1800 0600 0180 0040     ..@..A.&......@.

080073b4 <fonts16_7A>:
 80073b4:	0000 3040 2840 2440 2240 2140 20c0 0000     ..@0@(@$@"@!. ..

080073c4 <fonts16_7B>:
	...

080073d4 <fonts16_7C>:
	...
 80073dc:	ffff 0000 0000 0000                         ........

080073e4 <fonts16_7D>:
	...

080073f4 <fonts16_7E_92>:
 80073f4:	0000 0000 0000 0004 0002 0001 0000 0000     ................

08007404 <fonts16_93_B0>:
 8007404:	0000 0006 0009 0009 0006 0000 0000 0000     ................

08007414 <fonts16_B1_BF>:
 8007414:	0000 1c00 2200 4100 40cc 4000 2000 1000     .....".A.@.@. ..

08007424 <fonts16_C0_C1>:
 8007424:	0000 3800 0780 0274 020e 0271 0780 3800     ...8..t...q....8

08007434 <fonts16_C2_C4>:
 8007434:	0000 3800 0782 0270 020e 0270 0782 3800     ...8..p...p....8

08007444 <fonts16_C5>:
 8007444:	0000 3800 0780 0273 020f 0273 0780 3800     ...8..s...s....8

08007454 <fonts16_C6_E0>:
 8007454:	0000 1880 2440 2244 2248 1240 3f80 0000     ....@$D"H"@..?..

08007464 <fonts16_E1>:
 8007464:	0000 1880 2440 2248 2244 1242 3f80 0000     ....@$H"D"B..?..

08007474 <fonts16_E2_E4>:
 8007474:	0000 1880 244c 2240 2240 124c 3f80 0000     ....L$@"@"L..?..

08007484 <fonts16_E5_E9>:
 8007484:	0000 1f80 2240 2248 2244 2242 1380 0000     ....@"H"D"B"....

08007494 <fonts16_EA_ED>:
 8007494:	0000 0000 0000 2048 3fc4 2002 0000 0000     ......H .?. ....

080074a4 <fonts16_EE_F1>:
 80074a4:	0000 3fc0 0084 0042 0044 0042 3f80 0000     ...?..B.D.B..?..

080074b4 <fonts16_F2_F3>:
 80074b4:	0000 1f80 2040 2048 2044 2042 1f80 0000     ....@ H D B ....

080074c4 <fonts16_F4_F6>:
 80074c4:	0000 1f80 204c 2040 2040 204c 1f80 0000     ....L @ @ L ....

080074d4 <fonts16_F7_F9>:
 80074d4:	0000 1fc0 2000 2004 2002 1000 3fc0 0000     ..... . . ...?..

080074e4 <fonts16_FA>:
 80074e4:	0000 1fc0 2000 2008 2004 1002 3fc0 0000     ..... . . ...?..

080074f4 <fonts16_FB_FC>:
 80074f4:	0000 1fc0 200c 2000 2000 100c 3fc0 0000     ..... . . ...?..

08007504 <fonts16_FD_FF>:
	...

08007514 <fonts16_20_char>:
 8007514:	0008 0000 6e14 0800                         .....n..

0800751c <fonts16_21_char>:
 800751c:	0008 0000 6e24 0800                         ....$n..

08007524 <fonts16_22_char>:
 8007524:	0008 0000 6e34 0800                         ....4n..

0800752c <fonts16_23_char>:
 800752c:	0008 0000 6e44 0800                         ....Dn..

08007534 <fonts16_24_char>:
 8007534:	0008 0000 6e54 0800                         ....Tn..

0800753c <fonts16_25_char>:
 800753c:	0008 0000 6e64 0800                         ....dn..

08007544 <fonts16_26_char>:
 8007544:	0008 0000 6e74 0800                         ....tn..

0800754c <fonts16_27_char>:
 800754c:	0008 0000 6e84 0800                         .....n..

08007554 <fonts16_28_char>:
 8007554:	0008 0000 6e94 0800                         .....n..

0800755c <fonts16_29_char>:
 800755c:	0008 0000 6ea4 0800                         .....n..

08007564 <fonts16_2A_char>:
 8007564:	0008 0000 6eb4 0800                         .....n..

0800756c <fonts16_2B_char>:
 800756c:	0008 0000 6ec4 0800                         .....n..

08007574 <fonts16_2C_char>:
 8007574:	0008 0000 6ed4 0800                         .....n..

0800757c <fonts16_2D_char>:
 800757c:	0008 0000 6ee4 0800                         .....n..

08007584 <fonts16_2E_char>:
 8007584:	0008 0000 6ef4 0800                         .....n..

0800758c <fonts16_2F_char>:
 800758c:	0008 0000 6f04 0800                         .....o..

08007594 <fonts16_30_char>:
 8007594:	0008 0000 6f14 0800                         .....o..

0800759c <fonts16_31_char>:
 800759c:	0008 0000 6f24 0800                         ....$o..

080075a4 <fonts16_32_char>:
 80075a4:	0008 0000 6f34 0800                         ....4o..

080075ac <fonts16_33_char>:
 80075ac:	0008 0000 6f44 0800                         ....Do..

080075b4 <fonts16_34_char>:
 80075b4:	0008 0000 6f54 0800                         ....To..

080075bc <fonts16_35_char>:
 80075bc:	0008 0000 6f64 0800                         ....do..

080075c4 <fonts16_36_char>:
 80075c4:	0008 0000 6f74 0800                         ....to..

080075cc <fonts16_37_char>:
 80075cc:	0008 0000 6f84 0800                         .....o..

080075d4 <fonts16_38_char>:
 80075d4:	0008 0000 6f94 0800                         .....o..

080075dc <fonts16_39_char>:
 80075dc:	0008 0000 6fa4 0800                         .....o..

080075e4 <fonts16_3A_char>:
 80075e4:	0008 0000 6fb4 0800                         .....o..

080075ec <fonts16_3B_char>:
 80075ec:	0008 0000 6fc4 0800                         .....o..

080075f4 <fonts16_3C_char>:
 80075f4:	0008 0000 6fd4 0800                         .....o..

080075fc <fonts16_3D_char>:
 80075fc:	0008 0000 6fe4 0800                         .....o..

08007604 <fonts16_3E_char>:
 8007604:	0008 0000 6ff4 0800                         .....o..

0800760c <fonts16_3F_char>:
 800760c:	0008 0000 7004 0800                         .....p..

08007614 <fonts16_40_char>:
 8007614:	0008 0000 7014 0800                         .....p..

0800761c <fonts16_41_char>:
 800761c:	0008 0000 7024 0800                         ....$p..

08007624 <fonts16_42_char>:
 8007624:	0008 0000 7034 0800                         ....4p..

0800762c <fonts16_43_char>:
 800762c:	0008 0000 7044 0800                         ....Dp..

08007634 <fonts16_44_char>:
 8007634:	0008 0000 7054 0800                         ....Tp..

0800763c <fonts16_45_char>:
 800763c:	0008 0000 7064 0800                         ....dp..

08007644 <fonts16_46_char>:
 8007644:	0008 0000 7074 0800                         ....tp..

0800764c <fonts16_47_char>:
 800764c:	0008 0000 7084 0800                         .....p..

08007654 <fonts16_48_char>:
 8007654:	0008 0000 7094 0800                         .....p..

0800765c <fonts16_49_char>:
 800765c:	0008 0000 70a4 0800                         .....p..

08007664 <fonts16_4A_char>:
 8007664:	0008 0000 70b4 0800                         .....p..

0800766c <fonts16_4B_char>:
 800766c:	0008 0000 70c4 0800                         .....p..

08007674 <fonts16_4C_char>:
 8007674:	0008 0000 70d4 0800                         .....p..

0800767c <fonts16_4D_char>:
 800767c:	0008 0000 70e4 0800                         .....p..

08007684 <fonts16_4E_char>:
 8007684:	0008 0000 70f4 0800                         .....p..

0800768c <fonts16_4F_char>:
 800768c:	0008 0000 7104 0800                         .....q..

08007694 <fonts16_50_char>:
 8007694:	0008 0000 7114 0800                         .....q..

0800769c <fonts16_51_char>:
 800769c:	0008 0000 7124 0800                         ....$q..

080076a4 <fonts16_52_char>:
 80076a4:	0008 0000 7134 0800                         ....4q..

080076ac <fonts16_53_char>:
 80076ac:	0008 0000 7144 0800                         ....Dq..

080076b4 <fonts16_54_char>:
 80076b4:	0008 0000 7154 0800                         ....Tq..

080076bc <fonts16_55_char>:
 80076bc:	0008 0000 7164 0800                         ....dq..

080076c4 <fonts16_56_char>:
 80076c4:	0008 0000 7174 0800                         ....tq..

080076cc <fonts16_57_char>:
 80076cc:	0008 0000 7184 0800                         .....q..

080076d4 <fonts16_58_char>:
 80076d4:	0008 0000 7194 0800                         .....q..

080076dc <fonts16_59_char>:
 80076dc:	0008 0000 71a4 0800                         .....q..

080076e4 <fonts16_5A_char>:
 80076e4:	0008 0000 71b4 0800                         .....q..

080076ec <fonts16_5B_char>:
 80076ec:	0008 0000 71c4 0800                         .....q..

080076f4 <fonts16_5C_char>:
 80076f4:	0008 0000 71d4 0800                         .....q..

080076fc <fonts16_5D_char>:
 80076fc:	0008 0000 71e4 0800                         .....q..

08007704 <fonts16_5E_char>:
 8007704:	0008 0000 71f4 0800                         .....q..

0800770c <fonts16_5F_char>:
 800770c:	0008 0000 7204 0800                         .....r..

08007714 <fonts16_60_char>:
 8007714:	0008 0000 7214 0800                         .....r..

0800771c <fonts16_61_char>:
 800771c:	0008 0000 7224 0800                         ....$r..

08007724 <fonts16_62_char>:
 8007724:	0008 0000 7234 0800                         ....4r..

0800772c <fonts16_63_char>:
 800772c:	0008 0000 7244 0800                         ....Dr..

08007734 <fonts16_64_char>:
 8007734:	0008 0000 7254 0800                         ....Tr..

0800773c <fonts16_65_char>:
 800773c:	0008 0000 7264 0800                         ....dr..

08007744 <fonts16_66_char>:
 8007744:	0008 0000 7274 0800                         ....tr..

0800774c <fonts16_67_char>:
 800774c:	0008 0000 7284 0800                         .....r..

08007754 <fonts16_68_char>:
 8007754:	0008 0000 7294 0800                         .....r..

0800775c <fonts16_69_char>:
 800775c:	0008 0000 72a4 0800                         .....r..

08007764 <fonts16_6A_char>:
 8007764:	0008 0000 72b4 0800                         .....r..

0800776c <fonts16_6B_char>:
 800776c:	0008 0000 72c4 0800                         .....r..

08007774 <fonts16_6C_char>:
 8007774:	0008 0000 72d4 0800                         .....r..

0800777c <fonts16_6D_char>:
 800777c:	0008 0000 72e4 0800                         .....r..

08007784 <fonts16_6E_char>:
 8007784:	0008 0000 72f4 0800                         .....r..

0800778c <fonts16_6F_char>:
 800778c:	0008 0000 7304 0800                         .....s..

08007794 <fonts16_70_char>:
 8007794:	0008 0000 7314 0800                         .....s..

0800779c <fonts16_71_char>:
 800779c:	0008 0000 7324 0800                         ....$s..

080077a4 <fonts16_72_char>:
 80077a4:	0008 0000 7334 0800                         ....4s..

080077ac <fonts16_73_char>:
 80077ac:	0008 0000 7344 0800                         ....Ds..

080077b4 <fonts16_74_char>:
 80077b4:	0008 0000 7354 0800                         ....Ts..

080077bc <fonts16_75_char>:
 80077bc:	0008 0000 7364 0800                         ....ds..

080077c4 <fonts16_76_char>:
 80077c4:	0008 0000 7374 0800                         ....ts..

080077cc <fonts16_77_char>:
 80077cc:	0008 0000 7384 0800                         .....s..

080077d4 <fonts16_78_char>:
 80077d4:	0008 0000 7394 0800                         .....s..

080077dc <fonts16_79_char>:
 80077dc:	0008 0000 73a4 0800                         .....s..

080077e4 <fonts16_7A_char>:
 80077e4:	0008 0000 73b4 0800                         .....s..

080077ec <fonts16_7B_char>:
 80077ec:	0008 0000 73c4 0800                         .....s..

080077f4 <fonts16_7C_char>:
 80077f4:	0008 0000 73d4 0800                         .....s..

080077fc <fonts16_7D_char>:
 80077fc:	0008 0000 73e4 0800                         .....s..

08007804 <fonts16_7E_92_char>:
 8007804:	0008 0000 73f4 0800                         .....s..

0800780c <fonts16_93_B0_char>:
 800780c:	0008 0000 7404 0800                         .....t..

08007814 <fonts16_B1_BF_char>:
 8007814:	0008 0000 7414 0800                         .....t..

0800781c <fonts16_C0_C1_char>:
 800781c:	0008 0000 7424 0800                         ....$t..

08007824 <fonts16_C2_C4_char>:
 8007824:	0008 0000 7434 0800                         ....4t..

0800782c <fonts16_C5_char>:
 800782c:	0008 0000 7444 0800                         ....Dt..

08007834 <fonts16_C6_E0_char>:
 8007834:	0008 0000 7454 0800                         ....Tt..

0800783c <fonts16_E1_char>:
 800783c:	0008 0000 7464 0800                         ....dt..

08007844 <fonts16_E2_E4_char>:
 8007844:	0008 0000 7474 0800                         ....tt..

0800784c <fonts16_E5_E9_char>:
 800784c:	0008 0000 7484 0800                         .....t..

08007854 <fonts16_EA_ED_char>:
 8007854:	0008 0000 7494 0800                         .....t..

0800785c <fonts16_EE_F1_char>:
 800785c:	0008 0000 74a4 0800                         .....t..

08007864 <fonts16_F2_F3_char>:
 8007864:	0008 0000 74b4 0800                         .....t..

0800786c <fonts16_F4_F6_char>:
 800786c:	0008 0000 74c4 0800                         .....t..

08007874 <fonts16_F7_F9_char>:
 8007874:	0008 0000 74d4 0800                         .....t..

0800787c <fonts16_FA_char>:
 800787c:	0008 0000 74e4 0800                         .....t..

08007884 <fonts16_FB_FC_char>:
 8007884:	0008 0000 74f4 0800                         .....t..

0800788c <fonts16_FD_FF_char>:
 800788c:	0008 0000 7504 0800                         .....u..

08007894 <font16>:
 8007894:	1010 0000 7514 0800 751c 0800 7524 0800     .....u...u..$u..
 80078a4:	752c 0800 7534 0800 753c 0800 7544 0800     ,u..4u..<u..Du..
 80078b4:	754c 0800 7554 0800 755c 0800 7564 0800     Lu..Tu..\u..du..
 80078c4:	756c 0800 7574 0800 757c 0800 7584 0800     lu..tu..|u...u..
 80078d4:	758c 0800 7594 0800 759c 0800 75a4 0800     .u...u...u...u..
 80078e4:	75ac 0800 75b4 0800 75bc 0800 75c4 0800     .u...u...u...u..
 80078f4:	75cc 0800 75d4 0800 75dc 0800 75e4 0800     .u...u...u...u..
 8007904:	75ec 0800 75f4 0800 75fc 0800 7604 0800     .u...u...u...v..
 8007914:	760c 0800 7614 0800 761c 0800 7624 0800     .v...v...v..$v..
 8007924:	762c 0800 7634 0800 763c 0800 7644 0800     ,v..4v..<v..Dv..
 8007934:	764c 0800 7654 0800 765c 0800 7664 0800     Lv..Tv..\v..dv..
 8007944:	766c 0800 7674 0800 767c 0800 7684 0800     lv..tv..|v...v..
 8007954:	768c 0800 7694 0800 769c 0800 76a4 0800     .v...v...v...v..
 8007964:	76ac 0800 76b4 0800 76bc 0800 76c4 0800     .v...v...v...v..
 8007974:	76cc 0800 76d4 0800 76dc 0800 76e4 0800     .v...v...v...v..
 8007984:	76ec 0800 76f4 0800 76fc 0800 7704 0800     .v...v...v...w..
 8007994:	770c 0800 7714 0800 771c 0800 7724 0800     .w...w...w..$w..
 80079a4:	772c 0800 7734 0800 773c 0800 7744 0800     ,w..4w..<w..Dw..
 80079b4:	774c 0800 7754 0800 775c 0800 7764 0800     Lw..Tw..\w..dw..
 80079c4:	776c 0800 7774 0800 777c 0800 7784 0800     lw..tw..|w...w..
 80079d4:	778c 0800 7794 0800 779c 0800 77a4 0800     .w...w...w...w..
 80079e4:	77ac 0800 77b4 0800 77bc 0800 77c4 0800     .w...w...w...w..
 80079f4:	77cc 0800 77d4 0800 77dc 0800 77e4 0800     .w...w...w...w..
 8007a04:	77ec 0800 77f4 0800 77fc 0800 7804 0800     .w...w...w...x..
 8007a14:	7804 0800 7804 0800 7804 0800 7804 0800     .x...x...x...x..
 8007a24:	7804 0800 7804 0800 7804 0800 7804 0800     .x...x...x...x..
 8007a34:	7804 0800 7804 0800 7804 0800 7804 0800     .x...x...x...x..
 8007a44:	7804 0800 7804 0800 7804 0800 7804 0800     .x...x...x...x..
 8007a54:	7804 0800 7804 0800 7804 0800 7804 0800     .x...x...x...x..
 8007a64:	780c 0800 780c 0800 780c 0800 780c 0800     .x...x...x...x..
 8007a74:	780c 0800 780c 0800 780c 0800 780c 0800     .x...x...x...x..
 8007a84:	780c 0800 780c 0800 780c 0800 780c 0800     .x...x...x...x..
 8007a94:	780c 0800 780c 0800 780c 0800 780c 0800     .x...x...x...x..
 8007aa4:	780c 0800 780c 0800 780c 0800 780c 0800     .x...x...x...x..
 8007ab4:	780c 0800 780c 0800 780c 0800 780c 0800     .x...x...x...x..
 8007ac4:	780c 0800 780c 0800 780c 0800 780c 0800     .x...x...x...x..
 8007ad4:	780c 0800 7814 0800 7814 0800 7814 0800     .x...x...x...x..
 8007ae4:	7814 0800 7814 0800 7814 0800 7814 0800     .x...x...x...x..
 8007af4:	7814 0800 7814 0800 7814 0800 7814 0800     .x...x...x...x..
 8007b04:	7814 0800 7814 0800 7814 0800 7814 0800     .x...x...x...x..
 8007b14:	781c 0800 781c 0800 7824 0800 7824 0800     .x...x..$x..$x..
 8007b24:	7824 0800 782c 0800 7834 0800 7834 0800     $x..,x..4x..4x..
 8007b34:	7834 0800 7834 0800 7834 0800 7834 0800     4x..4x..4x..4x..
 8007b44:	7834 0800 7834 0800 7834 0800 7834 0800     4x..4x..4x..4x..
 8007b54:	7834 0800 7834 0800 7834 0800 7834 0800     4x..4x..4x..4x..
 8007b64:	7834 0800 7834 0800 7834 0800 7834 0800     4x..4x..4x..4x..
 8007b74:	7834 0800 7834 0800 7834 0800 7834 0800     4x..4x..4x..4x..
 8007b84:	7834 0800 7834 0800 7834 0800 7834 0800     4x..4x..4x..4x..
 8007b94:	7834 0800 783c 0800 7844 0800 7844 0800     4x..<x..Dx..Dx..
 8007ba4:	7844 0800 784c 0800 784c 0800 784c 0800     Dx..Lx..Lx..Lx..
 8007bb4:	784c 0800 784c 0800 7854 0800 7854 0800     Lx..Lx..Tx..Tx..
 8007bc4:	7854 0800 7854 0800 785c 0800 785c 0800     Tx..Tx..\x..\x..
 8007bd4:	785c 0800 785c 0800 785c 0800 7864 0800     \x..\x..\x..dx..
 8007be4:	7864 0800 786c 0800 786c 0800 786c 0800     dx..lx..lx..lx..
 8007bf4:	7874 0800 7874 0800 7874 0800 787c 0800     tx..tx..tx..|x..
 8007c04:	7884 0800 7884 0800 788c 0800 788c 0800     .x...x...x...x..
 8007c14:	788c 0800                                   .x..

08007c18 <fonts24_20>:
	...

08007c2c <fonts24_21>:
 8007c2c:	0000 0000 0000 ff0c 0cf0 f0ff 0000 0000     ................
 8007c3c:	0000 0000                                   ....

08007c40 <fonts24_22>:
 8007c40:	0000 0000 f001 0100 00f0 0000 0000 0000     ................
 8007c50:	f001 0100 00f0 0000                         ........

08007c58 <fonts24_23>:
 8007c58:	c300 0e00 00c3 f30f 0100 80ff cf00 00f0     ................
 8007c68:	70c3 c30e 0f00 00f3 ff01 0080 f0cf c300     .p..............
 8007c78:	0070 00c3                                   p...

08007c7c <fonts24_24>:
 8007c7c:	0000 0100 c081 8307 06e0 3006 0c0c 3f18     ...........0...?
 8007c8c:	fcff ff3f 0cfc 1818 1806 0730 e0f0 e003     ..?.......0.....
 8007c9c:	0040 0000                                   @...

08007ca0 <fonts24_25>:
 8007ca0:	0000 0000 c003 0700 00e0 300c 0c00 0c30     ...........0..0.
 8007cb0:	300c 070f 03e0 c083 e000 0000 007c 1e00     .0..........|...
 8007cc0:	0300 80c3 e107 0ce0 7030 300c 0c10 0030     ........0p.0..0.
 8007cd0:	e007 0300 00c0 0000 0000 0000               ............

08007cdc <fonts24_26>:
 8007cdc:	0000 0300 00e0 f007 0600 c01b 0f0c 0ce0     ................
 8007cec:	300c 0c0c 0c30 700e 1b06 07e0 8071 e003     .0..0..p....q...
 8007cfc:	0100 00c0 6007 0e00 0020 0004 0000 0000     .....`.. .......

08007d0c <fonts24_27>:
 8007d0c:	0000 0000 f003 0300 00f0 0000               ............

08007d18 <fonts24_28>:
 8007d18:	0000 0100 00f8 ff0f 3e00 c007 00f0 c0f0     .........>......
 8007d28:	3000 0000 0000 0000                         .0......

08007d30 <fonts24_29>:
 8007d30:	0000 8000 1000 00c0 7870 e003 ff3f 0780     ........px..?...
 8007d40:	00fc 0000 0000 0000                         ........

08007d48 <fonts24_2A>:
 8007d48:	0000 0000 4000 0200 0040 c001 0000 00f0     .....@..@.......
 8007d58:	c001 0200 0040 4000 0000 0000               ....@..@....

08007d64 <fonts24_2B>:
 8007d64:	0000 0000 0018 1800 0000 0018 1800 0100     ................
 8007d74:	80ff ff01 0080 0018 1800 0000 0018 1800     ................
 8007d84:	0000 0000                                   ....

08007d88 <fonts24_2C>:
 8007d88:	0000 0000 0000 006c 3c00 0000 0000 0000     ......l..<......
 8007d98:	0000 0000                                   ....

08007d9c <fonts24_2D>:
 8007d9c:	0000 0000 0060 6000 0000 0060 6000 0000     ....`..`..`..`..
 8007dac:	0060 0000 0000 0000                         `.......

08007db4 <fonts24_2E>:
 8007db4:	0000 0000 0000 000c 0c00 0000 0000 0000     ................
 8007dc4:	0000 0000                                   ....

08007dc8 <fonts24_2F>:
 8007dc8:	000e 0f00 00c0 fc01 0000 803f 0300 00f0     ..........?.....
 8007dd8:	7000 0000                                   .p..

08007ddc <fonts24_30>:
 8007ddc:	0000 0000 00ff ff03 07c0 e000 000c 0c30     ..............0.
 8007dec:	3000 000c 0c30 3000 0007 03e0 c0ff ff00     .0..0..0........
 8007dfc:	0000 0000                                   ....

08007e00 <fonts24_31>:
 8007e00:	0000 0000 0000 0100 0000 8001 0000 00c0     ................
 8007e10:	6000 ff0f 0ff0 f0ff 0000 0000 0000 0000     .`..............
 8007e20:	0000 0000                                   ....

08007e24 <fonts24_32>:
 8007e24:	0000 0e00 c001 010f 0de0 3080 c00c 0c30     ...........0..0.
 8007e34:	3060 300c 0c30 3018 0c0c 0ce0 c007 030c     `0.00..0........
 8007e44:	0000 0000                                   ....

08007e48 <fonts24_33>:
 8007e48:	0000 0100 8080 8003 06e0 7000 000c 0c30     ...........p..0.
 8007e58:	300c 0c0c 0c30 300c 1f0c 07e0 c0f3 e003     .0..0..0........
 8007e68:	0000 0000                                   ....

08007e6c <fonts24_34>:
 8007e6c:	c000 0000 00f0 f800 0000 00ce c700 0000     ................
 8007e7c:	80c1 c000 0fc0 f0ff ff0f 00f0 00c0 c000     ................
 8007e8c:	0000 0000                                   ....

08007e90 <fonts24_35>:
 8007e90:	0000 0100 0080 8f03 06e0 f00f 0c0c 0c30     ..............0.
 8007ea0:	3006 060c 0c30 3006 0c0e 0730 30fc f001     .0..0..0..0..0..
 8007eb0:	0000 0000                                   ....

08007eb4 <fonts24_36>:
 8007eb4:	0000 0100 80ff ff03 06e0 7008 0c0c 0c30     ...........p..0.
 8007ec4:	3006 060c 0c30 3006 0c0e 0770 e0fc f001     .0..0..0..p.....
 8007ed4:	0080 0000                                   ....

08007ed8 <fonts24_37>:
 8007ed8:	0000 0000 3000 0000 0e30 3000 e00f 0130     .....0..0..0..0.
 8007ee8:	30f8 1e00 0030 3007 0100 00f0 f000 0000     .0..0..0........
 8007ef8:	0030 0000                                   0...

08007efc <fonts24_38>:
 8007efc:	0000 0300 00e0 f307 06c0 e01f 0c0c 0c30     ..............0.
 8007f0c:	300c 0c0c 0c30 300c 1e06 0770 e0f7 e303     .0..0..0..p.....
 8007f1c:	0080 0000                                   ....

08007f20 <fonts24_39>:
 8007f20:	0000 0100 800f 1f07 06c0 6030 300c 0c30     ..........0`.00.
 8007f30:	3030 300c 0c30 3030 1807 0360 c0ff ff00     00.00.00..`.....
 8007f40:	0080 0000                                   ....

08007f44 <fonts24_3A>:
 8007f44:	0000 0000 0000 030c 0c00 0003 0000 0000     ................
 8007f54:	0000 0000                                   ....

08007f58 <fonts24_3B>:
 8007f58:	0000 0000 0000 034c 3c00 0003 0000 0000     ......L..<......
 8007f68:	0000 0000                                   ....

08007f6c <fonts24_3C>:
 8007f6c:	0000 0000 0018 3c00 0000 003c 3c00 0000     .......<..<..<..
 8007f7c:	0066 6600 0000 0063 c300 0000 80c1 8101     f..f..c.........
 8007f8c:	0180 8081 0000 0000                         ........

08007f94 <fonts24_3D>:
 8007f94:	0000 0000 0063 6300 0000 0063 6300 0000     ....c..c..c..c..
 8007fa4:	0063 6300 0000 0063 6300 0000 0063 6300     c..c..c..c..c..c
 8007fb4:	0000 0063 0000 0000                         ..c.....

08007fbc <fonts24_3E>:
 8007fbc:	0000 0100 8081 8101 0180 0083 c300 0000     ................
 8007fcc:	0063 6600 0000 0066 3c00 0000 0038 1800     c..f..f..<..8...
 8007fdc:	0000 0018 0000 0000                         ........

08007fe4 <fonts24_3F>:
 8007fe4:	0000 0000 8001 0100 00c0 6000 0000 0c30     ...........`..0.
 8007ff4:	30e0 f00c 0030 3018 0c00 0030 e007 0300     .0..0..0..0.....
 8008004:	00c0 0000                                   ....

08008008 <fonts24_40>:
 8008008:	0000 0100 00fc ff0f 1e00 8003 0030 30c0     ............0..0
 8008018:	60e0 fc61 6330 301e 03c6 c630 3003 03c2     .`a.0c.0..0..0..
 8008028:	c330 3003 c3c3 c730 30fe 3fc6 c630 3001     0..0..0..0.?0..0
 8008038:	0066 3360 c000 ff11 1880 00ff 0008 0000     f.`3............
 8008048:	0000 0000                                   ....

0800804c <fonts24_41>:
 800804c:	0004 0700 0080 f003 0000 007e 6f00 00c0     ..........~..o..
 800805c:	e061 6000 0030 f060 6700 00e0 007f f800     a..`0.`..g......
 800806c:	0300 00e0 0007 0400 0000 0000               ............

08008078 <fonts24_42>:
 8008078:	0000 0700 f0ff ff07 06f0 300c 0c06 0630     ...........0..0.
 8008088:	300c 0c06 0630 300c 0c06 0630 300c 1f03     .0..0..0..0..0..
 8008098:	01f0 e0f3 e000 0000 0000 0000               ............

080080a4 <fonts24_43>:
 80080a4:	0000 0000 007f ff01 03c0 e080 0006 0c60     ..............`.
 80080b4:	3000 000c 0c30 3000 000c 0c30 3000 0006     .0..0..0..0..0..
 80080c4:	0730 7000 8003 01e0 c0c0 c000 0000 0000     0..p............

080080d4 <fonts24_44>:
 80080d4:	0000 0f00 f0ff ff0f 0cf0 3000 000c 0c30     ...........0..0.
 80080e4:	3000 000c 0c30 3000 000c 0c30 3000 0006     .0..0..0..0..0..
 80080f4:	0770 e000 ff03 01c0 80ff 0000 0000 0000     p...............

08008104 <fonts24_45>:
 8008104:	0000 0f00 f0ff ff0f 0cf0 300c 0c0c 0c30     ...........0..0.
 8008114:	300c 0c0c 0c30 300c 0c0c 0c30 300c 0c0c     .0..0..0..0..0..
 8008124:	0c30 300c 0c0c 0c30 0000 0000 0000 0000     0..0..0.........

08008134 <fonts24_46>:
 8008134:	0000 0f00 f0ff ff0f 00f0 300c 0c00 0030     ...........0..0.
 8008144:	300c 0c00 0030 300c 0c00 0030 300c 0c00     .0..0..0..0..0..
 8008154:	0030 3000 0000 0030 0000 0000               0..0..0.....

08008160 <fonts24_47>:
 8008160:	0000 0000 007e ff00 01c0 e081 0003 0670     ....~.........p.
 8008170:	3000 0006 0c30 3000 000c 0c30 3018 180c     .0..0..0..0..0..
 8008180:	0e30 3018 1806 0670 c018 f803 01c0 00f8     0..0..p.........
 8008190:	0000 0000                                   ....

08008194 <fonts24_48>:
 8008194:	0000 0f00 f0ff ff0f 00f0 000c 0c00 0000     ................
 80081a4:	000c 0c00 0000 000c 0c00 0000 000c 0c00     ................
 80081b4:	0f00 f0ff ff0f 00f0 0000 0000               ............

080081c0 <fonts24_49>:
 80081c0:	0000 0000 0000 ff0f 0ff0 f0ff 0000 0000     ................
 80081d0:	0000 0000                                   ....

080081d4 <fonts24_4A>:
 80081d4:	0000 0300 0080 8007 0600 0000 000c 0c00     ................
 80081e4:	0000 0006 0700 f0ff ff03 00f0 0000 0000     ................

080081f4 <fonts24_4B>:
 80081f4:	0000 0f00 f0ff ff0f 00f0 0030 1800 0000     ..........0.....
 8008204:	000c 0e00 0000 001f 3900 0080 c0e0 c001     .........9......
 8008214:	0760 3000 000e 0810 0000 0000 0000 0000     `..0............

08008224 <fonts24_4C>:
 8008224:	0000 0f00 f0ff ff0f 0cf0 0000 000c 0c00     ................
 8008234:	0000 000c 0c00 0000 000c 0c00 0000 000c     ................
 8008244:	0000 0000                                   ....

08008248 <fonts24_4D>:
 8008248:	0000 0f00 f0ff ff0f 00f0 3000 0100 00e0     ...........0....
 8008258:	c00f fe00 0300 00f0 0007 0700 0000 e003     ................
 8008268:	0000 00fe 1f00 00c0 e001 0000 0f30 f0ff     ............0...
 8008278:	ff0f 00f0 0000 0000                         ........

08008280 <fonts24_4E>:
 8008280:	0000 0f00 f0ff ff0f 00f0 3000 0000 0060     ...........0..`.
 8008290:	c001 0700 0080 001e 7800 0100 00e0 8003     .........x......
 80082a0:	0600 0000 ff0f 0ff0 f0ff 0000 0000 0000     ................

080082b0 <fonts24_4F>:
 80082b0:	0000 0000 80ff ff01 03c0 e080 0007 0670     ..............p.
 80082c0:	3000 000c 0c30 3000 000c 0c30 3000 000c     .0..0..0..0..0..
 80082d0:	0630 7000 0007 03e0 c0c3 ff01 0080 003c     0..p..........<.
 80082e0:	0000 0000                                   ....

080082e4 <fonts24_50>:
 80082e4:	0000 0f00 f0ff ff0f 00f0 3018 1800 0030     ...........0..0.
 80082f4:	3018 1800 0030 3018 1800 0030 3018 1c00     .0..0..0..0..0..
 8008304:	0070 e00f 0700 00c0 0000 0000               p...........

08008310 <fonts24_51>:
 8008310:	0000 0000 00ff ff01 0380 c080 0007 0660     ..............`.
 8008320:	3000 000c 0c30 3000 000d 0d30 3080 800f     .0..0..0..0..0..
 8008330:	0730 3000 0007 0f60 c0ff ff0c 1880 0000     0..0..`.........
 8008340:	0000 0000                                   ....

08008344 <fonts24_52>:
 8008344:	0000 0f00 f0ff ff0f 00f0 3018 1800 0030     ...........0..0.
 8008354:	3018 1800 0030 3018 1800 0030 3038 6c00     .0..0..0..0.80.l
 8008364:	0130 70ce 8707 0ee0 c001 0008 0000 0000     0..p............

08008374 <fonts24_53>:
 8008374:	0000 0100 00c0 c303 07c0 e007 0e06 0c30     ..............0.
 8008384:	300c 0c0c 0c30 300c 180c 0c30 3018 3806     .0..0..0..0..0.8
 8008394:	0770 e0f0 e003 00c0 0000 0000               p...........

080083a0 <fonts24_54>:
 80083a0:	0000 0000 3000 0000 0030 3000 0000 0030     .....0..0..0..0.
 80083b0:	3000 ff0f 0ff0 f0ff 0000 0030 3000 0000     .0........0..0..
 80083c0:	0030 3000 0000 0030 0000 0000               0..0..0.....

080083cc <fonts24_55>:
 80083cc:	0000 0100 f0ff ff03 06f0 0000 0006 0c00     ................
 80083dc:	0000 000c 0c00 0000 000c 0600 0000 0006     ................
 80083ec:	0300 f0ff ff01 00f0 0000 0000               ............

080083f8 <fonts24_56>:
 80083f8:	0000 0010 7000 0300 00f0 800f 7c00 0300     .....p.......|..
 8008408:	00f0 800f 0e00 0000 c007 0100 00f8 3e00     ...............>
 8008418:	0000 8007 0100 00e0 7000 0000 0010 0000     .........p......

08008428 <fonts24_57>:
 8008428:	0000 0030 f003 3f00 03c0 00fc c00f 0c00     ..0....?........
 8008438:	0000 c00f 0300 00fc 3f00 00c0 f003 0000     .........?......
 8008448:	0030 f003 3f00 03c0 00fc c00f 0c00 0000     0....?..........
 8008458:	c00f 0300 00fc 3f00 00c0 f003 0000 0030     .......?......0.
 8008468:	0000 0000                                   ....

0800846c <fonts24_58>:
 800846c:	0008 0c00 1000 0006 0330 6000 e001 00c0     ........0..`....
 800847c:	80f3 1f00 0000 001e f300 0100 80e1 0003     ................
 800848c:	06c0 6000 000c 0830 1000 0000               ...`..0.....

08008498 <fonts24_59>:
 8008498:	0000 0000 1000 0000 0070 e001 0700 0080     ........p.......
 80084a8:	000f fc0f 0f00 00fc 0e00 0000 0007 0100     ................
 80084b8:	00c0 e000 0000 0030 1000 0000               ......0.....

080084c4 <fonts24_5A>:
 80084c4:	000c 0e00 3000 000f 0d30 3080 e00c 0c30     .....0..0..0..0.
 80084d4:	3078 1c0c 0c30 3006 030c 0c30 b001 000c     x0..0..0..0.....
 80084e4:	0cf0 7000 000c 0000                         ...p....

080084ec <fonts24_5B>:
	...

08008500 <fonts24_5C>:
 8008500:	0000 0030 f003 3f00 03c0 00fc c00f 0c00     ..0....?........
 8008510:	0000 0000                                   ....

08008514 <fonts24_5D>:
 8008514:	00e0 ff00 0000 c0ff ff00 00f0 fcff ff00     ................
 8008524:	00ff 7fff fe00 c0ff fffc fcc0 e0ff fff8     ................
 8008534:	f1f0 f8ff fff1 61f8 7cff fc41 03fc fee1     .......a.|A.....
 8008544:	0303 00fe fe07 0f00 00ff ff1f 3f00 00ff     .............?..
 8008554:	ff7f 0700 00ff 1f00 0000 000f ff07 7f00     ................
 8008564:	00ff ff3f 1f00 00ff ff0f 0700 03fe fe03     ..?.............
 8008574:	e103 41fe fcfc ff61 f17c f8ff fff1 f8f8     ...A..a.|.......
 8008584:	f0ff fffc fce0 c0ff fffe ffc0 007f ffff     ................
 8008594:	ff00 00fc f0ff ff00 00c0 00ff e000 0000     ................

080085a4 <fonts24_5E>:
 80085a4:	0000 0007 7f00 0300 00ff ff0f 3f00 00fb     .............?..
 80085b4:	f37f ff00 01f3 f1ff ff03 07f1 f1ff ff0f     ................
 80085c4:	0fe0 80ff fe1f 1f00 00fc f83f 3f00 00f8     ..........?..?..
 80085d4:	f07f 7f00 00e0 cf7f 7fe0 f0df ffff fff8     ................
 80085e4:	f8ff ffff fff8 f8ff ffff fff8 f8ff ffff     ................
 80085f4:	fff8 f8ff df7f 7ff0 e0cf e07f 7f00 00f0     ................
 8008604:	f83f 3f00 00f8 fc1f 1f00 00fe ff0f 0f80     ?..?............
 8008614:	e0ff ff07 03f1 f1ff ff01 00f1 f3ff 7f00     ................
 8008624:	00f3 fb3f 0f00 00ff ff03 0000 007f 0700     ..?.............

08008634 <fonts24_5F>:
 8008634:	00c0 c000 0000 00c0 c000 0000 00c0 c000     ................
 8008644:	0000 00c0 c000 0000 00c0 c000 0000 00c0     ................
 8008654:	c000 0000                                   ....

08008658 <fonts24_60>:
	...

0800866c <fonts24_61>:
 800866c:	0000 0300 00cc ee07 0e00 0067 630c 0c00     ..........g..c..
 800867c:	0063 630c 0600 0033 3703 0f00 00fe fc0f     c..c..3..7......
 800868c:	0000 0000                                   ....

08008690 <fonts24_62>:
 8008690:	0000 0f00 f0ff ff0f 03f0 000c 0606 0c00     ................
 80086a0:	0003 030c 0c00 0003 0706 0300 00fe fc01     ................
 80086b0:	0000 0000                                   ....

080086b4 <fonts24_63>:
 80086b4:	0000 0100 00f8 fc07 0e00 0006 030c 0c00     ................
 80086c4:	0003 030c 0e00 0003 0707 0300 008e 8801     ................
 80086d4:	0000 0000                                   ....

080086d8 <fonts24_64>:
 80086d8:	0000 0100 00f8 fc07 0e00 0006 030c 0c00     ................
 80086e8:	0003 030c 0e00 0003 0e07 0f00 f0ff ff0f     ................
 80086f8:	00f0 0000                                   ....

080086fc <fonts24_65>:
 80086fc:	0000 0100 00f8 fc07 0e00 0036 330c 0c00     ..........6..3..
 800870c:	0033 330c 0e00 0033 3607 0300 003e 3c01     3..3..3..6..>..<
 800871c:	0000 0000                                   ....

08008720 <fonts24_66>:
 8008720:	0300 0000 0003 ff0f 0fe0 f0ff 0300 0030     ..............0.
 8008730:	3003 0000 0030 0000                         .0..0...

08008738 <fonts24_67>:
 8008738:	0000 3100 00fc fe73 e700 0007 03c6 c600     ...1..s.........
 8008748:	0003 03c6 c300 0006 ff7f 3f00 00ff 0000     ...........?....
 8008758:	0000 0000                                   ....

0800875c <fonts24_68>:
 800875c:	0000 0f00 f0ff ff0f 00f0 000c 0600 0000     ................
 800876c:	0003 0300 0000 0003 0700 0f00 00fe fc0f     ................
 800877c:	0000 0000                                   ....

08008780 <fonts24_69>:
 8008780:	0000 0f00 30ff ff0f 0030 0000 0000 0000     .....0..0.......

08008790 <fonts24_6A>:
 8008790:	00c0 ff00 30ff ff7f 0030 0000 0000 0000     .....0..0.......

080087a0 <fonts24_6B>:
 80087a0:	0000 0f00 f0ff ff0f 00f0 0060 3000 0000     ..........`..0..
 80087b0:	0078 ec01 0300 0086 030e 0c00 0001 0000     x...............

080087c0 <fonts24_6C>:
 80087c0:	0000 0f00 f0ff ff0f 00f0 0000               ............

080087cc <fonts24_6D>:
 80087cc:	0000 0f00 00ff ff0f 0000 000c 0600 0000     ................
 80087dc:	0003 0300 0000 0003 ff0f 0f00 00fe 0600     ................
 80087ec:	0000 0003 0300 0000 0003 0700 0f00 00fe     ................
 80087fc:	fc0f 0000 0000 0000                         ........

08008804 <fonts24_6E>:
 8008804:	0000 0f00 00ff ff0f 0000 000c 0600 0000     ................
 8008814:	0003 0300 0000 0003 ff0f 0f00 00fe 0000     ................
 8008824:	0000 0000                                   ....

08008828 <fonts24_6F>:
 8008828:	0000 0100 00f8 fc03 0600 0006 030c 0c00     ................
 8008838:	0003 030c 0c00 0003 0606 0300 00fc f801     ................
 8008848:	0000 0000                                   ....

0800884c <fonts24_70>:
 800884c:	0000 ff00 00ff ffff 0600 0006 030c 0c00     ................
 800885c:	0003 030c 0c00 0003 0606 0300 00fc f801     ................
 800886c:	0000 0000                                   ....

08008870 <fonts24_71>:
 8008870:	0000 0100 00fc fe03 0600 0006 030c 0c00     ................
 8008880:	0003 030c 0c00 0003 0606 ff00 00ff ffff     ................
 8008890:	0000 0000                                   ....

08008894 <fonts24_72>:
 8008894:	0000 0f00 00ff ff0f 0000 0006 0300 0000     ................
 80088a4:	0003 0300 0000 0000                         ........

080088ac <fonts24_73>:
 80088ac:	0000 0300 000c 3e07 0e00 0033 330c 0c00     .......>..3..3..
 80088bc:	0063 630c 0e00 006f ce07 0300 0080 0000     c..c..o.........
 80088cc:	0000 0000                                   ....

080088d0 <fonts24_74>:
 80088d0:	0300 0000 0003 ff07 0fe0 e0ff 030c 0c00     ................
 80088e0:	0003 0000 0000 0000                         ........

080088e8 <fonts24_75>:
 80088e8:	0000 0100 00ff ff03 0600 0000 000c 0c00     ................
 80088f8:	0000 000c 0600 0000 0003 0f00 00ff ff0f     ................
 8008908:	0000 0000                                   ....

0800890c <fonts24_76>:
 800890c:	0100 0000 0007 3e00 0100 00f8 c007 0600     .......>........
 800891c:	0000 c007 0100 00f8 3e00 0000 0007 0100     .........>......
 800892c:	0000 0000                                   ....

08008930 <fonts24_77>:
 8008930:	0300 0000 001f fc01 0700 00e0 000e 0700     ................
 8008940:	00f0 fe01 0000 000f fe01 0700 00f0 000e     ................
 8008950:	0700 00e0 fc01 0000 001f 0300 0000 0000     ................

08008960 <fonts24_78>:
 8008960:	0008 0e00 0001 0707 0100 009e f800 0000     ................
 8008970:	0070 dc00 0100 008e 0307 0e00 0001 0008     p...............
 8008980:	0000 0000                                   ....

08008984 <fonts24_79>:
 8008984:	0000 c000 000f 7fc0 c100 00f0 8067 3e00     ............g..>
 8008994:	0000 801f 0300 00f0 7f00 0000 000f 0000     ................
 80089a4:	0000 0000                                   ....

080089a8 <fonts24_7A>:
 80089a8:	000c 0e00 0003 030f 0d00 0083 e30c 0c00     ................
 80089b8:	0073 1b0c 0c00 000f 070c 0c00 0003 0000     s...............
 80089c8:	0000 0000                                   ....

080089cc <fonts24_7B>:
 80089cc:	0000 0000 0003 0100 0080 c000 0000 0f60     ..............`.
 80089dc:	f0ff ff0f 00f0 6000 0000 00c0 8001 0300     .......`........
 80089ec:	0000 0000                                   ....

080089f0 <fonts24_7C>:
 80089f0:	0000 0000 0000 ffff fff0 f0ff 0000 0000     ................
 8008a00:	0000 0000                                   ....

08008a04 <fonts24_7D>:
 8008a04:	0000 0000 00c0 8001 0300 0000 0006 0f00     ................
 8008a14:	f0ff ff0f 06f0 0000 0003 0100 0080 c000     ................
 8008a24:	0000 0000                                   ....

08008a28 <fonts24_7E_92>:
 8008a28:	0000 0000 3001 0000 00f0 0000 0000 0000     .....0..........

08008a38 <fonts24_93_B0>:
 8008a38:	0000 0000 e000 0100 0010 1001 0100 0010     ................
 8008a48:	e000 0000 0000 0000                         ........

08008a50 <fonts24_B1_BF>:
 8008a50:	000c 0e00 0003 030f 0d00 0083 e30c 0cc0     ................
 8008a60:	c073 1b0c 0c00 000f 070c 0c00 0003 0000     s...............
 8008a70:	0000 0000                                   ....

08008a74 <fonts24_C0_C1>:
 8008a74:	0004 0700 0080 f003 0000 007e 6f00 00c0     ..........~..o..
 8008a84:	e061 6000 0038 f460 6700 00e2 017f f800     a..`8.`..g......
 8008a94:	0300 00e0 0007 0400 0000 0000               ............

08008aa0 <fonts24_C2_C4>:
 8008aa0:	0004 0700 0080 f003 0000 007e 6f00 00c6     ..........~..o..
 8008ab0:	e661 6000 0030 f060 6700 00e6 067f f800     a..`0.`..g......
 8008ac0:	0300 00e0 0007 0400 0000 0000               ............

08008acc <fonts24_C5>:
 8008acc:	0004 0700 0080 f003 0000 007e 6f00 00c0     ..........~..o..
 8008adc:	ec61 6000 0032 f260 6700 00ec 007f f800     a..`2.`..g......
 8008aec:	0300 00e0 0007 0400 0000 0000               ............

08008af8 <fonts24_C6_E0>:
 8008af8:	0000 0300 00cc ee07 0e00 0067 630c 0c10     ..........g..c..
 8008b08:	3063 630c 0660 4033 3703 0f00 00fe fc0f     c0.c`.3@.7......
 8008b18:	0000 0000                                   ....

08008b1c <fonts24_E1>:
 8008b1c:	0000 0700 0088 cc07 0c00 0066 630c 0c40     ..........f..c@.
 8008b2c:	6063 330c 0630 1033 3702 0f00 00fe f80f     c`.30.3..7......
 8008b3c:	0000 0000                                   ....

08008b40 <fonts24_E2_E4>:
 8008b40:	0000 0300 00cc ee07 0e00 6067 630c 0c60     ..........g`.c`.
 8008b50:	0063 630c 0600 6033 3703 0f60 00fe fc0f     c..c..3`.7`.....
 8008b60:	0000 0000                                   ....

08008b64 <fonts24_E5>:
 8008b64:	0000 0300 00cc ee07 0e00 0067 630c 0c30     ..........g..c0.
 8008b74:	4863 630c 0648 3033 3703 0f00 00fe fc0f     cH.cH.30.7......
 8008b84:	0000 0000                                   ....

08008b88 <fonts24_E6_E9>:
 8008b88:	0000 0300 00f8 fc07 0600 0066 630c 0c40     ..........f..c@.
 8008b98:	6063 630c 0630 1063 6706 0300 007e 7803     c`.c0.c..g..~..x
 8008ba8:	0000 0000                                   ....

08008bac <fonts24_EA_ED>:
 8008bac:	0000 0000 4000 ff0f 0f60 30ff 0000 0010     .....@..`..0....
 8008bbc:	0000 0000                                   ....

08008bc0 <fonts24_EE_F1>:
 8008bc0:	0000 0000 0000 ff0f 0f00 60ff 0600 0030     ...........`..0.
 8008bd0:	3003 0300 0060 6003 0700 0f60 30fe fc0f     .0..`..`..`..0..
 8008be0:	0000 0000                                   ....

08008be4 <fonts24_F2_F3>:
 8008be4:	0000 0100 00f8 fc07 0e00 0006 030c 0c40     ..............@.
 8008bf4:	6003 030c 0e30 1003 0706 0300 00fe f801     .`..0...........
 8008c04:	0000 0000                                   ....

08008c08 <fonts24_F4_F6>:
 8008c08:	0000 0100 00f8 fc03 0600 6006 030c 0c60     ...........`..`.
 8008c18:	0003 030c 0c00 6003 0606 0360 00fc f801     .......`..`.....
 8008c28:	0000 0000                                   ....

08008c2c <fonts24_F7_F9>:
 8008c2c:	0000 0100 00ff ff03 0600 0000 000c 0c10     ................
 8008c3c:	3000 000c 0660 4000 0003 0f00 00ff ff0f     .0..`..@........
 8008c4c:	0000 0000                                   ....

08008c50 <fonts24_FA>:
 8008c50:	0000 0100 00ff ff07 0e00 0000 000c 0c40     ..............@.
 8008c60:	6000 000c 0e30 1000 0006 0f00 00ff ff0f     .`..0...........
 8008c70:	0000 0000                                   ....

08008c74 <fonts24_FB_FC>:
 8008c74:	0000 0100 00ff ff03 0600 6000 000c 0c60     ...........`..`.
 8008c84:	0000 000c 0600 6000 0003 0f60 00ff ff0f     .......`..`.....
 8008c94:	0000 0000                                   ....

08008c98 <fonts24_FD_FF>:
	...

08008cac <fonts24_20_char>:
 8008cac:	0006 0000 7c18 0800                         .....|..

08008cb4 <fonts24_21_char>:
 8008cb4:	0006 0000 7c2c 0800                         ....,|..

08008cbc <fonts24_22_char>:
 8008cbc:	0008 0000 7c40 0800                         ....@|..

08008cc4 <fonts24_23_char>:
 8008cc4:	000c 0000 7c58 0800                         ....X|..

08008ccc <fonts24_24_char>:
 8008ccc:	000c 0000 7c7c 0800                         ....||..

08008cd4 <fonts24_25_char>:
 8008cd4:	0014 0000 7ca0 0800                         .....|..

08008cdc <fonts24_26_char>:
 8008cdc:	0010 0000 7cdc 0800                         .....|..

08008ce4 <fonts24_27_char>:
 8008ce4:	0004 0000 7d0c 0800                         .....}..

08008cec <fonts24_28_char>:
 8008cec:	0007 0000 7d18 0800                         .....}..

08008cf4 <fonts24_29_char>:
 8008cf4:	0007 0000 7d30 0800                         ....0}..

08008cfc <fonts24_2A_char>:
 8008cfc:	0009 0000 7d48 0800                         ....H}..

08008d04 <fonts24_2B_char>:
 8008d04:	000c 0000 7d64 0800                         ....d}..

08008d0c <fonts24_2C_char>:
 8008d0c:	0006 0000 7d88 0800                         .....}..

08008d14 <fonts24_2D_char>:
 8008d14:	0007 0000 7d9c 0800                         .....}..

08008d1c <fonts24_2E_char>:
 8008d1c:	0006 0000 7db4 0800                         .....}..

08008d24 <fonts24_2F_char>:
 8008d24:	0006 0000 7dc8 0800                         .....}..

08008d2c <fonts24_30_char>:
 8008d2c:	000c 0000 7ddc 0800                         .....}..

08008d34 <fonts24_31_char>:
 8008d34:	000c 0000 7e00 0800                         .....~..

08008d3c <fonts24_32_char>:
 8008d3c:	000c 0000 7e24 0800                         ....$~..

08008d44 <fonts24_33_char>:
 8008d44:	000c 0000 7e48 0800                         ....H~..

08008d4c <fonts24_34_char>:
 8008d4c:	000c 0000 7e6c 0800                         ....l~..

08008d54 <fonts24_35_char>:
 8008d54:	000c 0000 7e90 0800                         .....~..

08008d5c <fonts24_36_char>:
 8008d5c:	000c 0000 7eb4 0800                         .....~..

08008d64 <fonts24_37_char>:
 8008d64:	000c 0000 7ed8 0800                         .....~..

08008d6c <fonts24_38_char>:
 8008d6c:	000c 0000 7efc 0800                         .....~..

08008d74 <fonts24_39_char>:
 8008d74:	000c 0000 7f20 0800                         .... ...

08008d7c <fonts24_3A_char>:
 8008d7c:	0006 0000 7f44 0800                         ....D...

08008d84 <fonts24_3B_char>:
 8008d84:	0006 0000 7f58 0800                         ....X...

08008d8c <fonts24_3C_char>:
 8008d8c:	000d 0000 7f6c 0800                         ....l...

08008d94 <fonts24_3D_char>:
 8008d94:	000d 0000 7f94 0800                         ........

08008d9c <fonts24_3E_char>:
 8008d9c:	000d 0000 7fbc 0800                         ........

08008da4 <fonts24_3F_char>:
 8008da4:	000c 0000 7fe4 0800                         ........

08008dac <fonts24_40_char>:
 8008dac:	0016 0000 8008 0800                         ........

08008db4 <fonts24_41_char>:
 8008db4:	000e 0000 804c 0800                         ....L...

08008dbc <fonts24_42_char>:
 8008dbc:	000e 0000 8078 0800                         ....x...

08008dc4 <fonts24_43_char>:
 8008dc4:	0010 0000 80a4 0800                         ........

08008dcc <fonts24_44_char>:
 8008dcc:	000f 0000 80d4 0800                         ........

08008dd4 <fonts24_45_char>:
 8008dd4:	000f 0000 8104 0800                         ........

08008ddc <fonts24_46_char>:
 8008ddc:	000e 0000 8134 0800                         ....4...

08008de4 <fonts24_47_char>:
 8008de4:	0011 0000 8160 0800                         ....`...

08008dec <fonts24_48_char>:
 8008dec:	000e 0000 8194 0800                         ........

08008df4 <fonts24_49_char>:
 8008df4:	0006 0000 81c0 0800                         ........

08008dfc <fonts24_4A_char>:
 8008dfc:	000a 0000 81d4 0800                         ........

08008e04 <fonts24_4B_char>:
 8008e04:	000f 0000 81f4 0800                         ........

08008e0c <fonts24_4C_char>:
 8008e0c:	000c 0000 8224 0800                         ....$...

08008e14 <fonts24_4D_char>:
 8008e14:	0012 0000 8248 0800                         ....H...

08008e1c <fonts24_4E_char>:
 8008e1c:	000f 0000 8280 0800                         ........

08008e24 <fonts24_4F_char>:
 8008e24:	0011 0000 82b0 0800                         ........

08008e2c <fonts24_50_char>:
 8008e2c:	000e 0000 82e4 0800                         ........

08008e34 <fonts24_51_char>:
 8008e34:	0011 0000 8310 0800                         ........

08008e3c <fonts24_52_char>:
 8008e3c:	0010 0000 8344 0800                         ....D...

08008e44 <fonts24_53_char>:
 8008e44:	000e 0000 8374 0800                         ....t...

08008e4c <fonts24_54_char>:
 8008e4c:	000e 0000 83a0 0800                         ........

08008e54 <fonts24_55_char>:
 8008e54:	000e 0000 83cc 0800                         ........

08008e5c <fonts24_56_char>:
 8008e5c:	000f 0000 83f8 0800                         ........

08008e64 <fonts24_57_char>:
 8008e64:	0016 0000 8428 0800                         ....(...

08008e6c <fonts24_58_char>:
 8008e6c:	000e 0000 846c 0800                         ....l...

08008e74 <fonts24_59_char>:
 8008e74:	000e 0000 8498 0800                         ........

08008e7c <fonts24_5A_char>:
 8008e7c:	000d 0000 84c4 0800                         ........

08008e84 <fonts24_5B_char>:
 8008e84:	0006 0000 84ec 0800                         ........

08008e8c <fonts24_5C_char>:
 8008e8c:	0006 0000 8500 0800                         ........

08008e94 <fonts24_5D_char>:
 8008e94:	0030 0000 8514 0800                         0.......

08008e9c <fonts24_5E_char>:
 8008e9c:	0030 0000 85a4 0800                         0.......

08008ea4 <fonts24_5F_char>:
 8008ea4:	000c 0000 8634 0800                         ....4...

08008eac <fonts24_60_char>:
 8008eac:	0006 0000 8658 0800                         ....X...

08008eb4 <fonts24_61_char>:
 8008eb4:	000c 0000 866c 0800                         ....l...

08008ebc <fonts24_62_char>:
 8008ebc:	000c 0000 8690 0800                         ........

08008ec4 <fonts24_63_char>:
 8008ec4:	000c 0000 86b4 0800                         ........

08008ecc <fonts24_64_char>:
 8008ecc:	000c 0000 86d8 0800                         ........

08008ed4 <fonts24_65_char>:
 8008ed4:	000c 0000 86fc 0800                         ........

08008edc <fonts24_66_char>:
 8008edc:	0007 0000 8720 0800                         .... ...

08008ee4 <fonts24_67_char>:
 8008ee4:	000b 0000 8738 0800                         ....8...

08008eec <fonts24_68_char>:
 8008eec:	000c 0000 875c 0800                         ....\...

08008ef4 <fonts24_69_char>:
 8008ef4:	0005 0000 8780 0800                         ........

08008efc <fonts24_6A_char>:
 8008efc:	0005 0000 8790 0800                         ........

08008f04 <fonts24_6B_char>:
 8008f04:	000a 0000 87a0 0800                         ........

08008f0c <fonts24_6C_char>:
 8008f0c:	0004 0000 87c0 0800                         ........

08008f14 <fonts24_6D_char>:
 8008f14:	0012 0000 87cc 0800                         ........

08008f1c <fonts24_6E_char>:
 8008f1c:	000b 0000 8804 0800                         ........

08008f24 <fonts24_6F_char>:
 8008f24:	000c 0000 8828 0800                         ....(...

08008f2c <fonts24_70_char>:
 8008f2c:	000c 0000 884c 0800                         ....L...

08008f34 <fonts24_71_char>:
 8008f34:	000c 0000 8870 0800                         ....p...

08008f3c <fonts24_72_char>:
 8008f3c:	0008 0000 8894 0800                         ........

08008f44 <fonts24_73_char>:
 8008f44:	000b 0000 88ac 0800                         ........

08008f4c <fonts24_74_char>:
 8008f4c:	0007 0000 88d0 0800                         ........

08008f54 <fonts24_75_char>:
 8008f54:	000c 0000 88e8 0800                         ........

08008f5c <fonts24_76_char>:
 8008f5c:	000b 0000 890c 0800                         ........

08008f64 <fonts24_77_char>:
 8008f64:	000f 0000 8930 0800                         ....0...

08008f6c <fonts24_78_char>:
 8008f6c:	000c 0000 8960 0800                         ....`...

08008f74 <fonts24_79_char>:
 8008f74:	000b 0000 8984 0800                         ........

08008f7c <fonts24_7A_char>:
 8008f7c:	000b 0000 89a8 0800                         ........

08008f84 <fonts24_7B_char>:
 8008f84:	000c 0000 89cc 0800                         ........

08008f8c <fonts24_7C_char>:
 8008f8c:	0006 0000 89f0 0800                         ........

08008f94 <fonts24_7D_char>:
 8008f94:	000c 0000 8a04 0800                         ........

08008f9c <fonts24_7E_92_char>:
 8008f9c:	0005 0000 8a28 0800                         ....(...

08008fa4 <fonts24_93_B0_char>:
 8008fa4:	0007 0000 8a38 0800                         ....8...

08008fac <fonts24_B1_BF_char>:
 8008fac:	000b 0000 8a50 0800                         ....P...

08008fb4 <fonts24_C0_C1_char>:
 8008fb4:	000e 0000 8a74 0800                         ....t...

08008fbc <fonts24_C2_C4_char>:
 8008fbc:	000e 0000 8aa0 0800                         ........

08008fc4 <fonts24_C5_char>:
 8008fc4:	000e 0000 8acc 0800                         ........

08008fcc <fonts24_C6_E0_char>:
 8008fcc:	000c 0000 8af8 0800                         ........

08008fd4 <fonts24_E1_char>:
 8008fd4:	000c 0000 8b1c 0800                         ........

08008fdc <fonts24_E2_E4_char>:
 8008fdc:	000c 0000 8b40 0800                         ....@...

08008fe4 <fonts24_E5_char>:
 8008fe4:	000c 0000 8b64 0800                         ....d...

08008fec <fonts24_E6_E9_char>:
 8008fec:	000c 0000 8b88 0800                         ........

08008ff4 <fonts24_EA_ED_char>:
 8008ff4:	0006 0000 8bac 0800                         ........

08008ffc <fonts24_EE_F1_char>:
 8008ffc:	000c 0000 8bc0 0800                         ........

08009004 <fonts24_F2_F3_char>:
 8009004:	000c 0000 8be4 0800                         ........

0800900c <fonts24_F4_F6_char>:
 800900c:	000c 0000 8c08 0800                         ........

08009014 <fonts24_F7_F9_char>:
 8009014:	000c 0000 8c2c 0800                         ....,...

0800901c <fonts24_FA_char>:
 800901c:	000c 0000 8c50 0800                         ....P...

08009024 <fonts24_FB_FC_char>:
 8009024:	000c 0000 8c74 0800                         ....t...

0800902c <fonts24_FD_FF_char>:
 800902c:	0006 0000 8c98 0800                         ........

08009034 <font24>:
 8009034:	0818 0000 8cac 0800 8cb4 0800 8cbc 0800     ................
 8009044:	8cc4 0800 8ccc 0800 8cd4 0800 8cdc 0800     ................
 8009054:	8ce4 0800 8cec 0800 8cf4 0800 8cfc 0800     ................
 8009064:	8d04 0800 8d0c 0800 8d14 0800 8d1c 0800     ................
 8009074:	8d24 0800 8d2c 0800 8d34 0800 8d3c 0800     $...,...4...<...
 8009084:	8d44 0800 8d4c 0800 8d54 0800 8d5c 0800     D...L...T...\...
 8009094:	8d64 0800 8d6c 0800 8d74 0800 8d7c 0800     d...l...t...|...
 80090a4:	8d84 0800 8d8c 0800 8d94 0800 8d9c 0800     ................
 80090b4:	8da4 0800 8dac 0800 8db4 0800 8dbc 0800     ................
 80090c4:	8dc4 0800 8dcc 0800 8dd4 0800 8ddc 0800     ................
 80090d4:	8de4 0800 8dec 0800 8df4 0800 8dfc 0800     ................
 80090e4:	8e04 0800 8e0c 0800 8e14 0800 8e1c 0800     ................
 80090f4:	8e24 0800 8e2c 0800 8e34 0800 8e3c 0800     $...,...4...<...
 8009104:	8e44 0800 8e4c 0800 8e54 0800 8e5c 0800     D...L...T...\...
 8009114:	8e64 0800 8e6c 0800 8e74 0800 8e7c 0800     d...l...t...|...
 8009124:	8e84 0800 8e8c 0800 8e94 0800 8e9c 0800     ................
 8009134:	8ea4 0800 8eac 0800 8eb4 0800 8ebc 0800     ................
 8009144:	8ec4 0800 8ecc 0800 8ed4 0800 8edc 0800     ................
 8009154:	8ee4 0800 8eec 0800 8ef4 0800 8efc 0800     ................
 8009164:	8f04 0800 8f0c 0800 8f14 0800 8f1c 0800     ................
 8009174:	8f24 0800 8f2c 0800 8f34 0800 8f3c 0800     $...,...4...<...
 8009184:	8f44 0800 8f4c 0800 8f54 0800 8f5c 0800     D...L...T...\...
 8009194:	8f64 0800 8f6c 0800 8f74 0800 8f7c 0800     d...l...t...|...
 80091a4:	8f84 0800 8f8c 0800 8f94 0800 8f9c 0800     ................
 80091b4:	8f9c 0800 8f9c 0800 8f9c 0800 8f9c 0800     ................
 80091c4:	8f9c 0800 8f9c 0800 8f9c 0800 8f9c 0800     ................
 80091d4:	8f9c 0800 8f9c 0800 8f9c 0800 8f9c 0800     ................
 80091e4:	8f9c 0800 8f9c 0800 8f9c 0800 8f9c 0800     ................
 80091f4:	8f9c 0800 8f9c 0800 8f9c 0800 8f9c 0800     ................
 8009204:	8fa4 0800 8fa4 0800 8fa4 0800 8fa4 0800     ................
 8009214:	8fa4 0800 8fa4 0800 8fa4 0800 8fa4 0800     ................
 8009224:	8fa4 0800 8fa4 0800 8fa4 0800 8fa4 0800     ................
 8009234:	8fa4 0800 8fa4 0800 8fa4 0800 8fa4 0800     ................
 8009244:	8fa4 0800 8fa4 0800 8fa4 0800 8fa4 0800     ................
 8009254:	8fa4 0800 8fa4 0800 8fa4 0800 8fa4 0800     ................
 8009264:	8fa4 0800 8fa4 0800 8fa4 0800 8fa4 0800     ................
 8009274:	8fa4 0800 8fa4 0800 8fac 0800 8fac 0800     ................
 8009284:	8fac 0800 8fac 0800 8fac 0800 8fac 0800     ................
 8009294:	8fac 0800 8fac 0800 8fac 0800 8fac 0800     ................
 80092a4:	8fac 0800 8fac 0800 8fac 0800 8fac 0800     ................
 80092b4:	8fac 0800 8fb4 0800 8fb4 0800 8fbc 0800     ................
 80092c4:	8fbc 0800 8fbc 0800 8fc4 0800 8fcc 0800     ................
 80092d4:	8fcc 0800 8fcc 0800 8fcc 0800 8fcc 0800     ................
 80092e4:	8fcc 0800 8fcc 0800 8fcc 0800 8fcc 0800     ................
 80092f4:	8fcc 0800 8fcc 0800 8fcc 0800 8fcc 0800     ................
 8009304:	8fcc 0800 8fcc 0800 8fcc 0800 8fcc 0800     ................
 8009314:	8fcc 0800 8fcc 0800 8fcc 0800 8fcc 0800     ................
 8009324:	8fcc 0800 8fcc 0800 8fcc 0800 8fcc 0800     ................
 8009334:	8fcc 0800 8fcc 0800 8fd4 0800 8fdc 0800     ................
 8009344:	8fdc 0800 8fdc 0800 8fe4 0800 8fec 0800     ................
 8009354:	8fec 0800 8fec 0800 8fec 0800 8ff4 0800     ................
 8009364:	8ff4 0800 8ff4 0800 8ff4 0800 8ffc 0800     ................
 8009374:	8ffc 0800 8ffc 0800 8ffc 0800 9004 0800     ................
 8009384:	9004 0800 900c 0800 900c 0800 900c 0800     ................
 8009394:	9014 0800 9014 0800 9014 0800 901c 0800     ................
 80093a4:	9024 0800 9024 0800 902c 0800 902c 0800     $...$...,...,...
 80093b4:	902c 0800                                   ,...

080093b8 <fonts32_20>:
	...

080093d4 <fonts32_21>:
	...
 80093dc:	ffe0 039f ffe0 039f ffe0 039f 0000 0000     ................
	...

080093f4 <fonts32_22>:
 80093f4:	0000 0000 0fe0 0000 1fe0 0000 0fe0 0000     ................
	...
 800940c:	0fe0 0000 1fe0 0000 0fe0 0000 0000 0000     ................

0800941c <fonts32_23>:
 800941c:	3800 001c 3800 071c 3800 07fc f800 07ff     .8...8...8......
 800942c:	fe00 01ff ffe0 001f 7fe0 001c 3be0 001c     .............;..
 800943c:	3800 07fc 3800 07fe f800 07ff ff80 003f     .8...8........?.
 800944c:	ffe0 001f 3fe0 001c 38e0 001c 3800 001c     .....?...8...8..
	...

08009464 <fonts32_24>:
 8009464:	0000 0000 3f00 00f0 7f80 01f0 ffc0 03f0     .....?..........
 8009474:	f0e0 07c0 e0e0 0781 e0e0 0701 fff8 3fff     ...............?
 8009484:	fff8 3fff c0e0 0703 c0e0 0783 83e0 07c7     ...?............
 8009494:	83c0 03ff 0380 01ff 0000 00fe 0000 0000     ................
	...

080094ac <fonts32_25>:
 80094ac:	0000 0000 1f00 0000 7fc0 0000 ffe0 0000     ................
 80094bc:	e1e0 0000 c0e0 0000 c0e0 0600 e1e0 0780     ................
 80094cc:	ffe0 07e0 7fc0 03f8 1f00 00fe 8000 003f     ..............?.
 80094dc:	c000 000f f000 0003 fc00 0000 3f00 01fc     .............?..
 80094ec:	0fc0 03fe 03e0 07ff 00e0 0603 0060 0603     ............`...
 80094fc:	0000 0603 0000 07ff 0000 03fe 0000 01fc     ................
	...

08009514 <fonts32_26>:
 8009514:	0000 0000 0000 007c 0000 01fe 0000 03ff     ......|.........
 8009524:	9f80 03ff ffc0 0783 ffe0 0701 f8e0 0700     ................
 8009534:	f0e0 0701 f0e0 0707 f8e0 038f 3fe0 03ff     .............?..
 8009544:	1fc0 01fe 0f80 00f8 0000 01fe 0000 03fe     ................
 8009554:	0000 038e 0000 0380 0000 0000 0000 0000     ................

08009564 <fonts32_27>:
 8009564:	0000 0000 07e0 0000 1fe0 0000 1fe0 0000     ................
 8009574:	07e0 0000 0000 0000 0000 0000 0000 0000     ................

08009584 <fonts32_28>:
 8009584:	0000 0000 0000 003f f000 03ff fc00 0fff     ......?.........
 8009594:	ff00 3fff 1fc0 7f00 03e0 f800 00e0 c000     ...?............
 80095a4:	0020 8000 0000 0000 0000 0000 0000 0000      ...............

080095b4 <fonts32_29>:
 80095b4:	0000 0000 0020 0000 00e0 c000 03e0 f000     .... ...........
 80095c4:	0fc0 fe00 ff80 7fff fe00 1fff f800 07ff     ................
 80095d4:	c000 00ff 0000 0000 0000 0000               ............

080095e0 <fonts32_2A>:
 80095e0:	0380 0000 0380 0000 3b80 0000 3f00 0000     .........;...?..
 80095f0:	3fe0 0000 0fe0 0000 3fe0 0000 3f00 0000     .?.......?...?..
 8009600:	3b80 0000 0380 0000 0380 0000 0000 0000     .;..............
	...

08009618 <fonts32_2B>:
 8009618:	0000 0000 8000 0003 8000 0003 8000 0003     ................
 8009628:	8000 0003 8000 0003 8000 0003 fe00 007f     ................
 8009638:	fe00 007f fe00 007f 8000 0003 8000 0003     ................
 8009648:	8000 0003 8000 0003 8000 0003 8000 0003     ................
	...

08009660 <fonts32_2C>:
	...
 8009668:	0000 2780 0000 3f80 0000 3f80 0000 1f80     ...'...?...?....
	...

08009680 <fonts32_2D>:
 8009680:	0000 000e 0000 000e 0000 000e 0000 000e     ................
 8009690:	0000 000e 0000 000e 0000 000e 0000 000e     ................
 80096a0:	0000 000e 0000 0000                         ........

080096a8 <fonts32_2E>:
	...
 80096b0:	0000 0780 0000 0780 0000 0780 0000 0780     ................
	...

080096c8 <fonts32_2F>:
 80096c8:	0000 0780 0000 07f8 8000 07ff f000 00ff     ................
 80096d8:	ff00 000f ffe0 0000 1fe0 0000 01e0 0000     ................
 80096e8:	0000 0000                                   ....

080096ec <fonts32_30>:
 80096ec:	0000 0000 fc00 003f ff00 00ff ff80 01ff     ......?.........
 80096fc:	0fc0 03e0 01e0 0780 00e0 0700 00e0 0700     ................
 800970c:	00e0 0700 00e0 0700 01e0 0380 0fc0 03e0     ................
 800971c:	ff80 01ff ff00 00ff fc00 003f 0000 0000     ..........?.....
 800972c:	0000 0000                                   ....

08009730 <fonts32_31>:
	...
 800973c:	1800 0000 1c00 0000 0e00 0000 0f00 0000     ................
 800974c:	0780 0000 ffc0 07ff ffe0 07ff ffe0 07ff     ................
	...

08009770 <fonts32_32>:
 8009770:	0000 0000 0c00 0380 0f80 03c0 0fc0 03e0     ................
 8009780:	03c0 03f0 00e0 0378 00e0 033c 00e0 031e     ......x...<.....
 8009790:	00e0 030f 80e0 0307 c0e0 0303 f3c0 0301     ................
 80097a0:	ff80 0300 3f00 0300 0c00 0300 0000 0000     .....?..........
 80097b0:	0000 0000                                   ....

080097b4 <fonts32_33>:
 80097b4:	0000 0000 0700 0070 0780 00f0 07c0 01f0     ......p.........
 80097c4:	03c0 03e0 01e0 0780 c0e0 0701 c0e0 0701     ................
 80097d4:	c0e0 0701 c1e0 0701 e3e0 0781 ffc0 07c7     ................
 80097e4:	3f80 03ff 1f00 01fe 0000 00fc 0000 0000     .?..............
 80097f4:	0000 0000                                   ....

080097f8 <fonts32_34>:
 80097f8:	0000 003e 0000 003f 8000 003f c000 003b     ..>...?...?...;.
 8009808:	e000 0039 f000 0038 7c00 0038 3e00 0038     ..9...8..|8..>8.
 8009818:	1f80 0038 ffc0 07ff ffe0 07ff ffe0 07ff     ..8.............
 8009828:	0000 0038 0000 0038 0000 0038 0000 0000     ..8...8...8.....

08009838 <fonts32_35>:
 8009838:	0000 0000 c000 0071 fe00 00f1 ffc0 01f1     ......q.........
 8009848:	ffc0 03c1 e3c0 0780 f1c0 0700 71c0 0700     .............q..
 8009858:	71c0 0700 71c0 0700 f1c0 0780 f1c0 03c1     .q...q..........
 8009868:	e1c0 01ff c1c0 00ff 8000 007f 0000 0000     ................

08009878 <fonts32_36>:
 8009878:	0000 0000 fc00 007f ff00 00ff ff80 01ff     ................
 8009888:	c7c0 03f7 e1e0 0781 e0e0 0700 e0e0 0700     ................
 8009898:	e0e0 0700 e0e0 0700 e0e0 0780 e3e0 03c1     ................
 80098a8:	c7c0 01ff 8780 00ff 0700 007f 0000 0000     ................

080098b8 <fonts32_37>:
 80098b8:	0000 0000 01e0 0000 01e0 0000 01e0 0000     ................
 80098c8:	01e0 07e0 01e0 07fc 81e0 07ff e1e0 07ff     ................
 80098d8:	f9e0 001f fde0 0003 7fe0 0000 1fe0 0000     ................
 80098e8:	07e0 0000 03e0 0000 01e0 0000 0000 0000     ................

080098f8 <fonts32_38>:
 80098f8:	0000 0000 0000 007e 1f80 01ff bfc0 03ff     ......~.........
 8009908:	ffc0 03e7 f1e0 0781 e0e0 0701 e0e0 0701     ................
 8009918:	e0e0 0701 e0e0 0701 f1e0 0781 ffc0 03e7     ................
 8009928:	bfc0 01ff 1f00 00ff 0000 007e 0000 0000     ..........~.....
 8009938:	0000 0000                                   ....

0800993c <fonts32_39>:
 800993c:	0000 0000 fc00 0060 ff00 01e1 ff80 03e3     ......`.........
 800994c:	efc0 03e7 81e0 0787 00e0 0707 00e0 0707     ................
 800995c:	00e0 0707 00e0 0787 81e0 03c7 efc0 03f3     ................
 800996c:	ff80 01ff ff00 00ff fc00 003f 0000 0000     ..........?.....

0800997c <fonts32_3A>:
	...
 8009984:	3800 0780 3800 0780 3800 0780 3800 0780     .8...8...8...8..
	...

0800999c <fonts32_3B>:
	...
 80099a4:	3800 6780 3800 7f80 3800 3f80 3800 1f80     .8.g.8...8.?.8..
	...

080099bc <fonts32_3C>:
 80099bc:	0000 0000 c000 0003 c000 0003 e000 0007     ................
 80099cc:	e000 0007 e000 0007 f000 000f 7000 000e     .............p..
 80099dc:	7800 001e 7800 001e 3800 001c 3c00 003c     .x...x...8...<<.
 80099ec:	1c00 0038 1e00 0078 0e00 0070 0e00 0070     ..8...x...p...p.
	...

08009a04 <fonts32_3D>:
 8009a04:	0000 0000 3800 001e 3800 001e 3800 001e     .....8...8...8..
 8009a14:	3800 001e 3800 001e 3800 001e 3800 001e     .8...8...8...8..
 8009a24:	3800 001e 3800 001e 3800 001e 3800 001e     .8...8...8...8..
 8009a34:	3800 001e 3800 001e 3800 001e 3800 001e     .8...8...8...8..
	...

08009a4c <fonts32_3E>:
 8009a4c:	0000 0000 0e00 0070 1e00 0078 1e00 0078     ......p...x...x.
 8009a5c:	1c00 0038 3c00 003c 3800 001c 3800 001c     ..8..<<..8...8..
 8009a6c:	7800 001e 7000 000e f000 000f e000 0007     .x...p..........
 8009a7c:	e000 0007 e000 0007 c000 0003 c000 0003     ................
	...

08009a94 <fonts32_3F>:
 8009a94:	0000 0000 0f00 0000 0f80 0000 0fc0 0000     ................
 8009aa4:	07e0 0000 01e0 0000 00e0 079e 00e0 079f     ................
 8009ab4:	80e0 079f c0e0 079f e1e0 0003 fbe0 0000     ................
 8009ac4:	ffc0 0000 7f80 0000 1f00 0000 0000 0000     ................

08009ad4 <fonts32_40>:
 8009ad4:	0000 0000 8000 007f e000 03ff f800 0fff     ................
 8009ae4:	fc00 1f81 3e00 3e00 0f00 3c00 0780 787f     .....>.>...<...x
 8009af4:	c3c0 f1ff e1c0 f1ff f1e0 e3c1 78e0 e780     .............x..
 8009b04:	38e0 e700 38e0 c780 38e0 c380 38e0 c1c0     .8...8...8...8..
 8009b14:	78e0 c1f0 f8e0 c3ff c0e0 c7ff f8e0 e7ff     .x..............
 8009b24:	f9e0 e783 39c0 e380 03c0 f3c0 0780 71e0     .....9.........q
 8009b34:	1f00 78f8 fe00 3c7f fc00 1c3f f000 0c0f     ...x...<..?.....
 8009b44:	0000 0400 0000 0000 0000 0000               ............

08009b50 <fonts32_41>:
 8009b50:	0000 0780 0000 07e0 0000 07fc 0000 03ff     ................
 8009b60:	e000 007f f800 000f ff00 000d 7fe0 000c     ................
 8009b70:	0fe0 000c 01e0 000c 1fe0 000c 7fe0 000c     ................
 8009b80:	ff00 000f f800 000f e000 007f 0000 03ff     ................
 8009b90:	0000 07fc 0000 07e0 0000 0780 0000 0600     ................
 8009ba0:	0000 0000                                   ....

08009ba4 <fonts32_42>:
	...
 8009bac:	ffe0 07ff ffe0 07ff ffe0 07ff c0e0 0701     ................
 8009bbc:	c0e0 0701 c0e0 0701 c0e0 0701 c0e0 0701     ................
 8009bcc:	c0e0 0701 c0e0 0701 e1e0 0701 f3e0 0783     ................
 8009bdc:	ffc0 03c7 bf80 03ff 1f00 01ff 0000 00fe     ................
 8009bec:	0000 0000                                   ....

08009bf0 <fonts32_43>:
 8009bf0:	0000 0000 f800 000f fe00 003f ff00 00ff     ..........?.....
 8009c00:	ff80 01ff 0fc0 03f0 03e0 03c0 01e0 0780     ................
 8009c10:	01e0 0780 00e0 0700 00e0 0700 00e0 0700     ................
 8009c20:	00e0 0700 01e0 0780 01e0 0780 07c0 03e0     ................
 8009c30:	0fc0 01f8 0f80 00f8 0f00 0078 0c00 0038     ..........x...8.
 8009c40:	0000 0000                                   ....

08009c44 <fonts32_44>:
	...
 8009c4c:	ffe0 03ff ffe0 03ff ffe0 03ff 00e0 0380     ................
 8009c5c:	00e0 0380 00e0 0380 00e0 0380 00e0 0380     ................
 8009c6c:	00e0 0380 00e0 0380 01e0 0380 01e0 0380     ................
 8009c7c:	03c0 03c0 0fc0 01f0 ff80 00ff ff00 007f     ................
 8009c8c:	fc00 003f f000 000f 0000 0000               ..?.........

08009c98 <fonts32_45>:
	...
 8009ca0:	ffe0 03ff ffe0 03ff ffe0 03ff c0e0 0381     ................
 8009cb0:	c0e0 0381 c0e0 0381 c0e0 0381 c0e0 0381     ................
 8009cc0:	c0e0 0381 c0e0 0381 c0e0 0381 c0e0 0381     ................
 8009cd0:	c0e0 0381 c0e0 0381 c0e0 0381 00e0 0380     ................
 8009ce0:	0000 0000                                   ....

08009ce4 <fonts32_46>:
	...
 8009cec:	ffe0 07ff ffe0 07ff ffe0 07ff c0e0 0001     ................
 8009cfc:	c0e0 0001 c0e0 0001 c0e0 0001 c0e0 0001     ................
 8009d0c:	c0e0 0001 c0e0 0001 c0e0 0001 c0e0 0001     ................
 8009d1c:	c0e0 0001 00e0 0000 00e0 0000 0000 0000     ................

08009d2c <fonts32_47>:
 8009d2c:	0000 0000 f000 000f fc00 003f ff00 007f     ..........?.....
 8009d3c:	ff80 01ff 07c0 01f0 01c0 03e0 01e0 03c0     ................
 8009d4c:	00e0 0780 00e0 0780 00e0 0700 00e0 0700     ................
 8009d5c:	00e0 0707 00e0 0707 01e0 0787 01e0 0787     ................
 8009d6c:	03c0 03c7 0fc0 03c7 0f80 01ff 0f00 01ff     ................
 8009d7c:	0c00 00ff 0000 0000                         ........

08009d84 <fonts32_48>:
	...
 8009d8c:	ffe0 07ff ffe0 07ff ffe0 07ff c000 0001     ................
 8009d9c:	c000 0001 c000 0001 c000 0001 c000 0001     ................
 8009dac:	c000 0001 c000 0001 c000 0001 c000 0001     ................
 8009dbc:	c000 0001 c000 0001 ffe0 07ff ffe0 07ff     ................
 8009dcc:	ffe0 07ff 0000 0000                         ........

08009dd4 <fonts32_49>:
	...
 8009ddc:	ffe0 07ff ffe0 07ff ffe0 07ff ffe0 07ff     ................
 8009dec:	0000 0000                                   ....

08009df0 <fonts32_4A>:
 8009df0:	0000 00f0 0000 01f0 0000 03f0 0000 07f0     ................
 8009e00:	0000 07c0 0000 0780 0000 0780 0000 0780     ................
 8009e10:	0000 07c0 ffe0 07ff ffe0 03ff ffe0 01ff     ................
 8009e20:	ffe0 007f 0000 0000                         ........

08009e28 <fonts32_4B>:
	...
 8009e30:	ffe0 07ff ffe0 07ff ffe0 07ff c000 0007     ................
 8009e40:	e000 0003 f000 0001 f800 0001 fc00 0007     ................
 8009e50:	fe00 000f 9f00 001f 0f80 007f 07c0 00fc     ................
 8009e60:	03e0 01f8 01e0 07f0 00e0 07c0 0060 0780     ............`...
 8009e70:	0020 0700 0000 0600 0000 0000                ...........

08009e7c <fonts32_4C>:
	...
 8009e84:	ffe0 07ff ffe0 07ff ffe0 07ff 0000 0780     ................
 8009e94:	0000 0780 0000 0780 0000 0780 0000 0780     ................
 8009ea4:	0000 0780 0000 0780 0000 0780 0000 0780     ................
 8009eb4:	0000 0780 0000 0780 0000 0000               ............

08009ec0 <fonts32_4D>:
	...
 8009ec8:	ffe0 07ff ffe0 07ff ffe0 07ff 0fe0 0000     ................
 8009ed8:	7fe0 0000 ff00 0003 f800 001f e000 00ff     ................
 8009ee8:	0000 07fe 0000 07f0 0000 07f0 0000 07fc     ................
 8009ef8:	8000 00ff f000 003f fe00 0003 ffc0 0000     ......?.........
 8009f08:	0fe0 0000 ffe0 07ff ffe0 07ff ffe0 07ff     ................
 8009f18:	0000 0000                                   ....

08009f1c <fonts32_4E>:
	...
 8009f24:	ffe0 07ff ffe0 07ff ffe0 07ff 07e0 0000     ................
 8009f34:	1fc0 0000 7f00 0000 fc00 0000 f800 0003     ................
 8009f44:	f000 0007 c000 001f 8000 003f 0000 007e     ..........?...~.
 8009f54:	0000 01f8 0000 03f0 ffe0 07ff ffe0 07ff     ................
 8009f64:	ffe0 07ff 0000 0000                         ........

08009f6c <fonts32_4F>:
 8009f6c:	e000 0007 f800 000f fe00 003f ff00 007f     ..........?.....
 8009f7c:	1f80 01f8 07c0 03f0 03c0 03c0 01e0 0780     ................
 8009f8c:	01e0 0780 00e0 0700 00e0 0700 00e0 0700     ................
 8009f9c:	00e0 0700 00e0 0700 01e0 0780 03e0 03c0     ................
 8009fac:	07c0 03e0 1f80 01f8 ff00 00ff fe00 007f     ................
 8009fbc:	fc00 001f e000 0007 0000 0000               ............

08009fc8 <fonts32_50>:
	...
 8009fd0:	ffe0 07ff ffe0 07ff ffe0 07ff 80e0 0003     ................
 8009fe0:	80e0 0003 80e0 0003 80e0 0003 80e0 0003     ................
 8009ff0:	80e0 0003 80e0 0003 80e0 0003 c1e0 0003     ................
 800a000:	e3e0 0003 ffc0 0001 ff80 0000 7f00 0000     ................
 800a010:	0000 0000                                   ....

0800a014 <fonts32_51>:
 800a014:	e000 0007 f800 000f fe00 003f ff00 007f     ..........?.....
 800a024:	1f80 01f8 07c0 03f0 03c0 03c0 01e0 0780     ................
 800a034:	01e0 0780 00e0 0700 00e0 0700 00e0 0770     ..............p.
 800a044:	00e0 07f0 00e0 07f0 01e0 07e0 03e0 03c0     ................
 800a054:	07c0 03e0 1f80 07f8 ff00 0fff fe00 0f7f     ................
 800a064:	fc00 0e1f e000 0c07 0000 0000               ............

0800a070 <fonts32_52>:
	...
 800a078:	ffe0 07ff ffe0 07ff ffe0 07ff c0e0 0001     ................
 800a088:	c0e0 0001 c0e0 0001 c0e0 0001 c0e0 0001     ................
 800a098:	c0e0 0003 c0e0 0007 c0e0 000f c0e0 001f     ................
 800a0a8:	c0e0 007f ffe0 01fd ffc0 03f8 7f80 07e0     ................
 800a0b8:	0000 07c0 0000 0700 0000 0600 0000 0000     ................

0800a0c8 <fonts32_53>:
 800a0c8:	0000 0000 0000 0078 3f00 00f8 7f80 01f8     ......x..?......
 800a0d8:	ffc0 03f0 f3e0 03c0 e1e0 0781 e0e0 0781     ................
 800a0e8:	e0e0 0701 c0e0 0701 c0e0 0703 c0e0 0703     ................
 800a0f8:	c1e0 0783 83e0 0787 8fc0 03ff 0f80 01ff     ................
 800a108:	0f00 00fe 0e00 007c 0000 0000               ......|.....

0800a114 <fonts32_54>:
 800a114:	00e0 0000 00e0 0000 00e0 0000 00e0 0000     ................
 800a124:	00e0 0000 00e0 0000 00e0 0000 ffe0 07ff     ................
 800a134:	ffe0 07ff ffe0 07ff ffe0 07ff 00e0 0000     ................
 800a144:	00e0 0000 00e0 0000 00e0 0000 00e0 0000     ................
 800a154:	00e0 0000 00e0 0000 0000 0000               ............

0800a160 <fonts32_55>:
	...
 800a168:	ffe0 007f ffe0 00ff ffe0 03ff 0000 03f0     ................
 800a178:	0000 03c0 0000 0780 0000 0780 0000 0780     ................
 800a188:	0000 0780 0000 0780 0000 0780 0000 0780     ................
 800a198:	0000 03c0 0000 03f0 ffe0 03ff ffe0 00ff     ................
 800a1a8:	ffe0 007f 0000 0000                         ........

0800a1b0 <fonts32_56>:
 800a1b0:	00e0 0000 03e0 0000 1fe0 0000 7fe0 0000     ................
 800a1c0:	ff00 0003 f800 000f c000 007f 0000 03fe     ................
 800a1d0:	0000 07f0 0000 0780 0000 07e0 0000 03fc     ................
 800a1e0:	8000 00ff f000 001f fc00 0007 ff80 0000     ................
 800a1f0:	3fe0 0000 07e0 0000 01e0 0000 0060 0000     .?..........`...
 800a200:	0000 0000                                   ....

0800a204 <fonts32_57>:
 800a204:	00e0 0000 0fe0 0000 ffe0 0000 ffe0 000f     ................
 800a214:	fe00 007f e000 07ff 0000 07fc 0000 07f8     ................
 800a224:	0000 07ff e000 01ff fe00 003f ffc0 0003     ..........?.....
 800a234:	3fe0 0000 03e0 0000 1fe0 0000 ffe0 0000     .?..............
 800a244:	ff80 000f f800 00ff 8000 07ff 0000 07f8     ................
 800a254:	0000 07f8 8000 07ff fc00 01ff ffc0 001f     ................
 800a264:	ffe0 0001 1fe0 0000 01e0 0000 0060 0000     ............`...
 800a274:	0000 0000                                   ....

0800a278 <fonts32_58>:
 800a278:	0000 0600 0060 0700 00e0 07c0 03e0 07e0     ....`...........
 800a288:	07e0 03f0 1fc0 00fc 3f00 007e fc00 003f     .........?~...?.
 800a298:	f800 000f f000 0007 f800 000f fc00 001f     ................
 800a2a8:	7e00 007f 1f80 00fc 0fc0 03f8 03e0 07e0     .~..............
 800a2b8:	01e0 07c0 00e0 0780 0060 0600 0000 0000     ........`.......

0800a2c8 <fonts32_59>:
 800a2c8:	0060 0000 01e0 0000 03e0 0000 0fe0 0000     `...............
 800a2d8:	1fc0 0000 3f00 0000 fe00 0000 f800 0001     .....?..........
 800a2e8:	f000 07ff c000 07ff e000 07ff f800 0001     ................
 800a2f8:	fc00 0000 7f00 0000 1f80 0000 0fe0 0000     ................
 800a308:	03e0 0000 01e0 0000 0060 0000 0020 0000     ........`... ...
 800a318:	0000 0000                                   ....

0800a31c <fonts32_5A>:
 800a31c:	0000 0780 00e0 07c0 00e0 07f0 00e0 07f8     ................
 800a32c:	00e0 07fc 00e0 073e 80e0 071f c0e0 070f     ......>.........
 800a33c:	e0e0 0707 f0e0 0703 f8e0 0700 7ee0 0700     .............~..
 800a34c:	3fe0 0700 1fe0 0700 0fe0 0700 07e0 0700     .?..............
 800a35c:	01e0 0700 0000 0700 0000 0000               ............

0800a368 <fonts32_5B>:
	...
 800a370:	0000 01c0 0008 0530 0010 030c 0020 0103     ......0..... ...
 800a380:	c040 0180 3000 0100 0d00 0120 0200 0110     @....0.... .....
 800a390:	0500 0108 0880 0104 0080 0900 2080 1d01     ............. ..
 800a3a0:	c080 3f00 c0fe 3f00 2080 1d01 0080 0900     ...?...?. ......
 800a3b0:	0880 0104 0500 0108 0200 0110 0d00 0120     .............. .
 800a3c0:	3000 0100 c040 0180 0020 0103 0010 030c     .0..@... .......
 800a3d0:	0008 0530 0000 01c0 0000 0000 0000 0000     ..0.............

0800a3e0 <fonts32_5C>:
 800a3e0:	01e0 0000 1fe0 0000 ffc0 0000 fe00 000f     ................
 800a3f0:	e000 00ff 0000 07ff 0000 07f0 0000 0780     ................

0800a400 <fonts32_5D>:
 800a400:	f800 001f 0600 0060 0180 0182 0440 0206     ......`.....@...
 800a410:	0420 0406 0c10 0807 1808 1007 3804 201f      ............8. 
 800a420:	b814 203f f8f2 407f fbe2 40ff ffc1 81cf     ..? ...@...@....
 800a430:	ff81 8107 ff01 8203 fe01 8003 fff9 8001     ................
 800a440:	fffd 8001 ffc1 8003 fe01 8203 ff81 8107     ................
 800a450:	ffc1 81cf fbe2 40ff f8f2 407f b814 203f     .......@...@..? 
 800a460:	3804 201f 1808 1007 0c10 0807 0420 0406     .8. ........ ...
 800a470:	0440 0206 0180 0182 0600 0060 f800 001f     @.........`.....
	...

0800a494 <fonts32_5E>:
 800a494:	0000 0000 ffe0 07ff fff0 0fff fff0 0fff     ................
 800a4a4:	fff0 0fff e0f0 0f01 e0f0 0f01 e0f0 0f01     ................
 800a4b4:	e0f0 0f01 e0f0 0f01 e0f0 0f01 e0f0 0f01     ................
 800a4c4:	e0f0 0f01 f1f0 0f83 fbe0 0f83 ffe0 07ef     ................
 800a4d4:	bfc0 07ff 1f80 03ff 0000 01fe 0000 007c     ..............|.
	...
 800a4ec:	ffe0 07ff fff0 0fff fff0 0fff fff0 0fff     ................
 800a4fc:	00f0 0f00 00f0 0f00 00f0 0f00 00f0 0f00     ................
 800a50c:	00f0 0f00 00f0 0f00 00f0 0f00 00f0 0f00     ................
 800a51c:	01e0 0780 03e0 07c0 07c0 03e0 0fc0 03f0     ................
 800a52c:	ff80 01ff ff00 00ff fe00 007f f800 001f     ................
 800a53c:	0000 0000                                   ....

0800a540 <fonts32_5F>:
 800a540:	0000 c000 0000 c000 0000 c000 0000 c000     ................
 800a550:	0000 c000 0000 c000 0000 c000 0000 c000     ................
 800a560:	0000 c000 0000 c000 0000 c000 0000 c000     ................
 800a570:	0000 c000 0000 c000 0000 c000 0000 c000     ................
 800a580:	0000 c000                                   ....

0800a584 <fonts32_60_61>:
 800a584:	0000 0000 c000 01f0 f000 03f8 f800 07fc     ................
 800a594:	fc00 079c 3c00 071e 1c00 070e 1c00 070e     .....<..........
 800a5a4:	1c00 070e 3c00 078e 3c00 03cf fc00 01ff     .....<...<......
 800a5b4:	f800 07ff f000 07ff c000 07ff 0000 0000     ................

0800a5c4 <fonts32_62>:
 800a5c4:	0000 0000 ffe0 07ff ffe0 07ff ffe0 07ff     ................
 800a5d4:	7000 03c0 3800 0780 1c00 0700 1c00 0700     .p...8..........
 800a5e4:	1c00 0700 3c00 0780 f800 03c0 f000 01ff     .....<..........
 800a5f4:	e000 00ff c000 007f 0000 0000               ............

0800a600 <fonts32_63>:
 800a600:	0000 0000 c000 007f e000 01ff f000 03ff     ................
 800a610:	f800 03e0 3800 0780 3c00 0700 1c00 0700     .....8...<......
 800a620:	1c00 0700 3c00 0700 7800 0780 f800 03e0     .....<...x......
 800a630:	f000 01e0 e000 00e0 8000 0020 0000 0000     .......... .....

0800a640 <fonts32_64>:
 800a640:	0000 0000 8000 003f c000 007f f000 01ff     ......?.........
 800a650:	f800 03ff f800 03e0 3c00 0780 3c00 0700     .........<...<..
 800a660:	1c00 0700 1c00 0700 3c00 0700 7800 0380     .........<...x..
 800a670:	ffe0 03ff ffe0 07ff ffe0 07ff ffe0 07ff     ................
 800a680:	0000 0000                                   ....

0800a684 <fonts32_65>:
 800a684:	0000 0000 c000 007f e000 01ff f000 03ff     ................
 800a694:	f800 03e6 3800 0786 3c00 0706 1c00 0706     .....8...<......
 800a6a4:	1c00 0706 3c00 0706 3800 0786 f800 03c6     .....<...8......
 800a6b4:	f000 03e7 e000 01e7 c000 00e7 0000 0000     ................

0800a6c4 <fonts32_66>:
 800a6c4:	0000 0000 3800 0000 3800 0000 ffc0 07ff     .....8...8......
 800a6d4:	ffe0 07ff ffe0 07ff 39e0 0000 38e0 0000     .........9...8..
 800a6e4:	38e0 0000 38e0 0000 0000 0000               .8...8......

0800a6f0 <fonts32_67>:
 800a6f0:	0000 0000 c000 387f f000 79ff f800 fbff     .......8...y....
 800a700:	f800 f3c0 7c00 e780 3c00 c700 3c00 c700     .....|...<...<..
 800a710:	3c00 c700 3c00 e780 7800 f3c0 f000 ffe0     .<...<...x......
 800a720:	f800 7fff f800 3fff f800 0fff 0000 0000     .......?........

0800a730 <fonts32_68>:
 800a730:	0000 0000 ffe0 07ff ffe0 07ff ffe0 07ff     ................
 800a740:	7800 0000 3800 0000 1c00 0000 1c00 0000     .x...8..........
 800a750:	1c00 0000 3c00 0000 f800 07ff f800 07ff     .....<..........
 800a760:	f000 07ff 0000 0000                         ........

0800a768 <fonts32_69>:
	...
 800a770:	f9e0 03ff f9e0 03ff f9e0 03ff 0000 0000     ................
 800a780:	0000 0000                                   ....

0800a784 <fonts32_6A>:
 800a784:	0000 c000 0000 e000 f9e0 ffff f9e0 ffff     ................
 800a794:	f9e0 7fff 0000 0000 0000 0000               ............

0800a7a0 <fonts32_6B>:
 800a7a0:	0000 0000 ffe0 07ff ffe0 07ff ffe0 07ff     ................
 800a7b0:	0000 000f c000 000f e000 001f f000 007f     ................
 800a7c0:	f800 00fc 7800 03f8 3800 07e0 1800 07c0     .....x...8......
 800a7d0:	0800 0700 0000 0600 0000 0000               ............

0800a7dc <fonts32_6C>:
	...
 800a7e4:	ffe0 03ff ffe0 03ff ffe0 03ff 0000 0000     ................
 800a7f4:	0000 0000                                   ....

0800a7f8 <fonts32_6D>:
 800a7f8:	0000 0000 fc00 07ff fc00 07ff f000 07ff     ................
 800a808:	7800 0000 3800 0000 3c00 0000 1c00 0000     .x...8...<......
 800a818:	3c00 0000 3c00 0000 f800 07ff f000 07ff     .<...<..........
 800a828:	f000 07ff 3000 0000 3800 0000 3c00 0000     .....0...8...<..
 800a838:	1c00 0000 3c00 0000 3c00 0000 f800 07ff     .....<...<......
 800a848:	f000 07ff e000 07ff 0000 0000               ............

0800a854 <fonts32_6E>:
 800a854:	0000 0000 fc00 07ff fc00 07ff f000 07ff     ................
 800a864:	7800 0000 3800 0000 3c00 0000 1c00 0000     .x...8...<......
 800a874:	3c00 0000 3c00 0000 f800 07ff f800 07ff     .<...<..........
 800a884:	f000 07ff 0000 0000                         ........

0800a88c <fonts32_6F>:
 800a88c:	0000 0000 c000 007f e000 01ff f000 03ff     ................
 800a89c:	f800 03e0 3800 0780 3c00 0700 1c00 0700     .....8...<......
 800a8ac:	1c00 0700 3c00 0700 3800 0780 f800 03e0     .....<...8......
 800a8bc:	f000 03ff e000 01ff c000 00ff 0000 0000     ................

0800a8cc <fonts32_70>:
 800a8cc:	0000 0000 f800 ffff f800 ffff e000 ffff     ................
 800a8dc:	7000 03c0 3800 0700 3800 0700 3800 0700     .p...8...8...8..
 800a8ec:	3800 0700 3800 0780 f800 03c0 f000 03ff     .8...8..........
 800a8fc:	e000 01ff c000 007f 0000 0000               ............

0800a908 <fonts32_71>:
 800a908:	0000 0000 c000 007f f000 01ff f800 03ff     ................
 800a918:	7800 03c0 3c00 0780 1c00 0700 1c00 0700     .x...<..........
 800a928:	1c00 0700 3c00 0780 7800 03c0 f000 01e0     .....<...x......
 800a938:	fc00 ffff fc00 ffff fc00 ffff 0000 0000     ................

0800a948 <fonts32_72>:
 800a948:	0000 0000 f800 07ff f800 07ff e000 07ff     ................
 800a958:	f000 0000 7800 0000 3800 0000 3800 0000     .....x...8...8..
 800a968:	3800 0000 0000 0000                         .8......

0800a970 <fonts32_73>:
 800a970:	0000 0000 e000 00e1 f000 03e7 f800 03e7     ................
 800a980:	3c00 078f 1c00 070f 1c00 070f 1c00 070e     .<..............
 800a990:	1c00 071e 3c00 071e 7800 07fe 7800 03fc     .....<...x...x..
 800a9a0:	7000 01f8 0000 00f0 0000 0000               .p..........

0800a9ac <fonts32_74>:
 800a9ac:	0000 0000 1800 0000 1800 0000 ff80 03ff     ................
 800a9bc:	ffc0 07ff ffe0 07ff 1800 0700 1800 0700     ................
 800a9cc:	1800 0700 0000 0000                         ........

0800a9d4 <fonts32_75>:
 800a9d4:	0000 0000 f800 007f f800 01ff f800 03ff     ................
 800a9e4:	f800 07ff 0000 0780 0000 0700 0000 0700     ................
 800a9f4:	0000 0700 0000 0780 0000 07c0 f800 03ff     ................
 800aa04:	f800 01ff f800 07ff f800 07ff 0000 0000     ................

0800aa14 <fonts32_76>:
 800aa14:	0000 0000 1800 0000 f800 0000 f800 0007     ................
 800aa24:	f800 001f c000 00ff 0000 03fe 0000 07f0     ................
 800aa34:	0000 07e0 0000 07fc 8000 03ff f000 007f     ................
 800aa44:	f800 0007 f800 0001 3800 0000 1800 0000     .........8......
 800aa54:	0000 0000                                   ....

0800aa58 <fonts32_77>:
 800aa58:	0000 0000 7800 0000 f800 0003 f800 001f     .....x..........
 800aa68:	f000 01ff 8000 07ff 0000 07f8 0000 07f8     ................
 800aa78:	8000 07ff f800 00ff f800 000f f800 0001     ................
 800aa88:	f800 001f f000 03ff 0000 07ff 0000 07f0     ................
 800aa98:	0000 07fc 8000 03ff f800 003f f800 0007     ..........?.....
 800aaa8:	f800 0000 1800 0000 0000 0000               ............

0800aab4 <fonts32_78>:
 800aab4:	0800 0600 1800 0700 7800 07c0 f800 07e0     .........x......
 800aac4:	f000 01fb e000 00ff 8000 003f 8000 003f     ..........?...?.
 800aad4:	e000 00ff f000 01fb f800 03e1 7800 07c0     .............x..
 800aae4:	3800 0780 1800 0600 0000 0000               .8..........

0800aaf0 <fonts32_79>:
 800aaf0:	1800 0000 7800 e000 f800 e003 f800 e00f     .....x..........
 800ab00:	e000 e07f 0000 ffff 0000 fff8 0000 3fc0     ...............?
 800ab10:	0000 0ff8 0000 00ff e000 003f f800 0007     ..........?.....
 800ab20:	f800 0001 3800 0000 0800 0000 0000 0000     .....8..........

0800ab30 <fonts32_7A>:
 800ab30:	0000 0780 3800 07c0 3800 07e0 3800 07f0     .....8...8...8..
 800ab40:	3800 07f8 3800 077c 3800 073f b800 071f     .8...8|..8?.....
 800ab50:	f800 070f f800 0703 f800 0701 f800 0700     ................
 800ab60:	7800 0700 3800 0700 0000 0000               .x...8......

0800ab6c <fonts32_7B>:
 800ab6c:	0000 000e 0000 000e 0000 001f ff80 3fff     ...............?
 800ab7c:	ffc0 7ffb ffe0 fff1 01e0 f000 00e0 e000     ................
 800ab8c:	00e0 e000 00e0 e000 0000 0000 0000 0000     ................
	...

0800abb8 <fonts32_7C>:
	...
 800abc0:	ffe0 ffff ffe0 ffff ffe0 ffff 0000 0000     ................
	...

0800abd8 <fonts32_7D>:
 800abd8:	00e0 e000 00e0 e000 00e0 e000 ffe0 ffe1     ................
 800abe8:	ffe0 fff3 ffc0 7fff 0000 003f 0000 001e     ..........?.....
 800abf8:	0000 001e 0000 0000 0000 0000 0000 0000     ................
	...

0800ac24 <fonts32_7E_92>:
	...
 800ac2c:	0ce0 0000 07e0 0000 03e0 0000 0000 0000     ................
 800ac3c:	0000 0000                                   ....

0800ac40 <fonts32_93_B0>:
	...
 800ac48:	0780 0000 0fc0 0000 1860 0000 1860 0000     ........`...`...
 800ac58:	1860 0000 1ce0 0000 0fc0 0000 0300 0000     `...............
 800ac68:	0000 0000                                   ....

0800ac6c <fonts32_B1_BF>:
 800ac6c:	0000 0000 0000 00f8 0000 01fe 0000 03ff     ................
 800ac7c:	0000 07bf c000 0787 f9e0 0703 f9e0 0701     ................
 800ac8c:	f9e0 0700 79e0 0700 0000 0780 0000 07e0     .....y..........
 800ac9c:	0000 03f0 0000 01f0 0000 00f0 0000 0000     ................

0800acac <fonts32_C0_C4>:
 800acac:	0000 0780 0000 07e0 0000 07fc 0000 03ff     ................
 800acbc:	e00e 007f f80e 000f ff0e 000d 7fe0 000c     ................
 800accc:	0fe0 000c 01e0 000c 1fe0 000c 7fe0 000c     ................
 800acdc:	ff0e 000f f80e 000f e00e 007f 0000 03ff     ................
 800acec:	0000 07fc 0000 07e0 0000 0780 0000 0600     ................
 800acfc:	0000 0000                                   ....

0800ad00 <fonts32_C5>:
 800ad00:	0000 0780 0000 07e0 0000 07fc 0000 03ff     ................
 800ad10:	e000 007f f800 000f ff00 000d 7fdc 000c     ................
 800ad20:	0fe2 000c 01e2 000c 1fe2 000c 7fdc 000c     ................
 800ad30:	ff00 000f f800 000f e000 007f 0000 03ff     ................
 800ad40:	0000 07fc 0000 07e0 0000 0780 0000 0600     ................
 800ad50:	0000 0000                                   ....

0800ad54 <fonts32_C6_E0>:
 800ad54:	0000 0000 c000 01f0 f000 03f8 f800 07fc     ................
 800ad64:	fc00 079c 3c20 071e 1c60 070e 1ce0 070e     .... <..`.......
 800ad74:	1de0 070e 3d80 078e 3c00 03cf fc00 01ff     .....=...<......
 800ad84:	f800 07ff f000 07ff c000 07ff 0000 0000     ................

0800ad94 <fonts32_E1>:
 800ad94:	0000 0000 0000 00e0 e000 01f8 f000 03f8     ................
 800ada4:	7000 030c 1800 030c 1800 030c 1980 030c     .p..............
 800adb4:	19e0 0306 18e0 0306 1860 0186 3000 00c6     ........`....0..
 800adc4:	f000 01ff e000 03ff 0000 0200 0000 0000     ................

0800add4 <fonts32_E2_E4>:
 800add4:	0000 0000 c000 01f0 f000 03f8 f800 07fc     ................
 800ade4:	fdc0 079c 3dc0 071e 1c00 070e 1c00 070e     .....=..........
 800adf4:	1c00 070e 3c00 078e 3dc0 03cf fdc0 01ff     .....<...=......
 800ae04:	f800 07ff f000 07ff c000 07ff 0000 0000     ................

0800ae14 <fonts32_E5>:
 800ae14:	0000 0000 c000 01f0 f000 03f8 f800 07fc     ................
 800ae24:	fc00 079c 3ce0 071e 1d10 070e 1d10 070e     .....<..........
 800ae34:	1d10 070e 3ce0 078e 3c00 03cf fc00 01ff     .....<...<......
 800ae44:	f800 07ff f000 07ff c000 07ff 0000 0000     ................

0800ae54 <fonts32_E6_E9>:
 800ae54:	0000 0000 8000 007f e000 00ff f000 01ff     ................
 800ae64:	3000 0386 1800 0306 1800 0306 1980 0306     .0..............
 800ae74:	19e0 0306 18e0 0306 1860 0306 7000 0186     ........`....p..
 800ae84:	f000 01c7 e000 00c7 0000 0007 0000 0000     ................

0800ae94 <fonts32_EA_ED>:
	...
 800ae9c:	0100 0000 f980 03ff f8e0 03ff 0060 0000     ............`...
 800aeac:	0020 0000 0000 0000                          .......

0800aeb4 <fonts32_EE_F1>:
	...
 800aec0:	f800 03ff f980 03ff 61c0 0000 30c0 0000     .........a...0..
 800aed0:	18c0 0000 1980 0000 1980 0000 1980 0000     ................
 800aee0:	38c0 0000 e0c0 03ff c000 03ff 0000 0000     .8..............
 800aef0:	0000 0000                                   ....

0800aef4 <fonts32_F2_F3>:
 800aef4:	0000 0000 8000 003f e000 00ff f000 01ff     ......?.........
 800af04:	7000 03c0 1800 0300 1800 0300 1980 0300     .p..............
 800af14:	19e0 0300 18e0 0300 1860 0380 3000 01c0     ........`....0..
 800af24:	f000 01ff e000 00ff 8000 003f 0000 0000     ..........?.....
 800af34:	0000 0000                                   ....

0800af38 <fonts32_F4_F6>:
 800af38:	0000 0000 c000 007f e000 01ff f0c0 03ff     ................
 800af48:	f8c0 03e0 38c0 0780 3c00 0700 1c00 0700     .....8...<......
 800af58:	1c00 0700 3c00 0700 38c0 0780 f8c0 03e0     .....<...8......
 800af68:	f0c0 03ff e000 01ff c000 00ff 0000 0000     ................

0800af78 <fonts32_F7_F9>:
 800af78:	0000 0000 f800 007f f800 01ff f800 03ff     ................
 800af88:	f800 07ff 0020 0780 0060 0700 00e0 0700     .... ...`.......
 800af98:	01e0 0700 0180 0780 0000 07c0 f800 03ff     ................
 800afa8:	f800 01ff f800 07ff f800 07ff 0000 0000     ................

0800afb8 <fonts32_FA>:
	...
 800afc0:	f800 00ff f800 01ff 0000 0380 0000 0300     ................
 800afd0:	0000 0300 0180 0300 01e0 0300 00e0 0300     ................
 800afe0:	0060 0180 0000 00c0 f800 03ff f800 03ff     `...............
	...

0800aff8 <fonts32_FB_FC>:
 800aff8:	0000 0000 f800 007f f800 01ff f9c0 03ff     ................
 800b008:	f9c0 07ff 01c0 0780 0000 0700 0000 0700     ................
 800b018:	0000 0700 0000 0780 01c0 07c0 f9c0 03ff     ................
 800b028:	f9c0 01ff f800 07ff f800 07ff 0000 0000     ................

0800b038 <fonts32_FD_FF>:
	...

0800b054 <fonts32_20_char>:
 800b054:	0007 0000 93b8 0800                         ........

0800b05c <fonts32_21_char>:
 800b05c:	0008 0000 93d4 0800                         ........

0800b064 <fonts32_22_char>:
 800b064:	000a 0000 93f4 0800                         ........

0800b06c <fonts32_23_char>:
 800b06c:	0012 0000 941c 0800                         ........

0800b074 <fonts32_24_char>:
 800b074:	0012 0000 9464 0800                         ....d...

0800b07c <fonts32_25_char>:
 800b07c:	001a 0000 94ac 0800                         ........

0800b084 <fonts32_26_char>:
 800b084:	0014 0000 9514 0800                         ........

0800b08c <fonts32_27_char>:
 800b08c:	0008 0000 9564 0800                         ....d...

0800b094 <fonts32_28_char>:
 800b094:	000c 0000 9584 0800                         ........

0800b09c <fonts32_29_char>:
 800b09c:	000b 0000 95b4 0800                         ........

0800b0a4 <fonts32_2A_char>:
 800b0a4:	000e 0000 95e0 0800                         ........

0800b0ac <fonts32_2B_char>:
 800b0ac:	0012 0000 9618 0800                         ........

0800b0b4 <fonts32_2C_char>:
 800b0b4:	0008 0000 9660 0800                         ....`...

0800b0bc <fonts32_2D_char>:
 800b0bc:	000a 0000 9680 0800                         ........

0800b0c4 <fonts32_2E_char>:
 800b0c4:	0008 0000 96a8 0800                         ........

0800b0cc <fonts32_2F_char>:
 800b0cc:	0009 0000 96c8 0800                         ........

0800b0d4 <fonts32_30_char>:
 800b0d4:	0011 0000 96ec 0800                         ........

0800b0dc <fonts32_31_char>:
 800b0dc:	0010 0000 9730 0800                         ....0...

0800b0e4 <fonts32_32_char>:
 800b0e4:	0011 0000 9770 0800                         ....p...

0800b0ec <fonts32_33_char>:
 800b0ec:	0011 0000 97b4 0800                         ........

0800b0f4 <fonts32_34_char>:
 800b0f4:	0010 0000 97f8 0800                         ........

0800b0fc <fonts32_35_char>:
 800b0fc:	0010 0000 9838 0800                         ....8...

0800b104 <fonts32_36_char>:
 800b104:	0010 0000 9878 0800                         ....x...

0800b10c <fonts32_37_char>:
 800b10c:	0010 0000 98b8 0800                         ........

0800b114 <fonts32_38_char>:
 800b114:	0011 0000 98f8 0800                         ........

0800b11c <fonts32_39_char>:
 800b11c:	0010 0000 993c 0800                         ....<...

0800b124 <fonts32_3A_char>:
 800b124:	0008 0000 997c 0800                         ....|...

0800b12c <fonts32_3B_char>:
 800b12c:	0008 0000 999c 0800                         ........

0800b134 <fonts32_3C_char>:
 800b134:	0012 0000 99bc 0800                         ........

0800b13c <fonts32_3D_char>:
 800b13c:	0012 0000 9a04 0800                         ........

0800b144 <fonts32_3E_char>:
 800b144:	0012 0000 9a4c 0800                         ....L...

0800b14c <fonts32_3F_char>:
 800b14c:	0010 0000 9a94 0800                         ........

0800b154 <fonts32_40_char>:
 800b154:	001f 0000 9ad4 0800                         ........

0800b15c <fonts32_41_char>:
 800b15c:	0015 0000 9b50 0800                         ....P...

0800b164 <fonts32_42_char>:
 800b164:	0013 0000 9ba4 0800                         ........

0800b16c <fonts32_43_char>:
 800b16c:	0015 0000 9bf0 0800                         ........

0800b174 <fonts32_44_char>:
 800b174:	0015 0000 9c44 0800                         ....D...

0800b17c <fonts32_45_char>:
 800b17c:	0013 0000 9c98 0800                         ........

0800b184 <fonts32_46_char>:
 800b184:	0012 0000 9ce4 0800                         ........

0800b18c <fonts32_47_char>:
 800b18c:	0016 0000 9d2c 0800                         ....,...

0800b194 <fonts32_48_char>:
 800b194:	0014 0000 9d84 0800                         ........

0800b19c <fonts32_49_char>:
 800b19c:	0007 0000 9dd4 0800                         ........

0800b1a4 <fonts32_4A_char>:
 800b1a4:	000e 0000 9df0 0800                         ........

0800b1ac <fonts32_4B_char>:
 800b1ac:	0015 0000 9e28 0800                         ....(...

0800b1b4 <fonts32_4C_char>:
 800b1b4:	0011 0000 9e7c 0800                         ....|...

0800b1bc <fonts32_4D_char>:
 800b1bc:	0017 0000 9ec0 0800                         ........

0800b1c4 <fonts32_4E_char>:
 800b1c4:	0014 0000 9f1c 0800                         ........

0800b1cc <fonts32_4F_char>:
 800b1cc:	0017 0000 9f6c 0800                         ....l...

0800b1d4 <fonts32_50_char>:
 800b1d4:	0013 0000 9fc8 0800                         ........

0800b1dc <fonts32_51_char>:
 800b1dc:	0017 0000 a014 0800                         ........

0800b1e4 <fonts32_52_char>:
 800b1e4:	0016 0000 a070 0800                         ....p...

0800b1ec <fonts32_53_char>:
 800b1ec:	0013 0000 a0c8 0800                         ........

0800b1f4 <fonts32_54_char>:
 800b1f4:	0013 0000 a114 0800                         ........

0800b1fc <fonts32_55_char>:
 800b1fc:	0014 0000 a160 0800                         ....`...

0800b204 <fonts32_56_char>:
 800b204:	0015 0000 a1b0 0800                         ........

0800b20c <fonts32_57_char>:
 800b20c:	001d 0000 a204 0800                         ........

0800b214 <fonts32_58_char>:
 800b214:	0014 0000 a278 0800                         ....x...

0800b21c <fonts32_59_char>:
 800b21c:	0015 0000 a2c8 0800                         ........

0800b224 <fonts32_5A_char>:
 800b224:	0013 0000 a31c 0800                         ........

0800b22c <fonts32_5B_char>:
 800b22c:	001e 0000 a368 0800                         ....h...

0800b234 <fonts32_5C_char>:
 800b234:	0008 0000 a3e0 0800                         ........

0800b23c <fonts32_5D_char>:
 800b23c:	0025 0000 a400 0800                         %.......

0800b244 <fonts32_5E_char>:
 800b244:	002b 0000 a494 0800                         +.......

0800b24c <fonts32_5F_char>:
 800b24c:	0011 0000 a540 0800                         ....@...

0800b254 <fonts32_60_61_char>:
 800b254:	0010 0000 a584 0800                         ........

0800b25c <fonts32_62_char>:
 800b25c:	000f 0000 a5c4 0800                         ........

0800b264 <fonts32_63_char>:
 800b264:	0010 0000 a600 0800                         ........

0800b26c <fonts32_64_char>:
 800b26c:	0011 0000 a640 0800                         ....@...

0800b274 <fonts32_65_char>:
 800b274:	0010 0000 a684 0800                         ........

0800b27c <fonts32_66_char>:
 800b27c:	000b 0000 a6c4 0800                         ........

0800b284 <fonts32_67_char>:
 800b284:	0010 0000 a6f0 0800                         ........

0800b28c <fonts32_68_char>:
 800b28c:	000e 0000 a730 0800                         ....0...

0800b294 <fonts32_69_char>:
 800b294:	0007 0000 a768 0800                         ....h...

0800b29c <fonts32_6A_char>:
 800b29c:	0007 0000 a784 0800                         ........

0800b2a4 <fonts32_6B_char>:
 800b2a4:	000f 0000 a7a0 0800                         ........

0800b2ac <fonts32_6C_char>:
 800b2ac:	0007 0000 a7dc 0800                         ........

0800b2b4 <fonts32_6D_char>:
 800b2b4:	0017 0000 a7f8 0800                         ........

0800b2bc <fonts32_6E_char>:
 800b2bc:	000e 0000 a854 0800                         ....T...

0800b2c4 <fonts32_6F_char>:
 800b2c4:	0010 0000 a88c 0800                         ........

0800b2cc <fonts32_70_char>:
 800b2cc:	000f 0000 a8cc 0800                         ........

0800b2d4 <fonts32_71_char>:
 800b2d4:	0010 0000 a908 0800                         ........

0800b2dc <fonts32_72_char>:
 800b2dc:	000a 0000 a948 0800                         ....H...

0800b2e4 <fonts32_73_char>:
 800b2e4:	000f 0000 a970 0800                         ....p...

0800b2ec <fonts32_74_char>:
 800b2ec:	000a 0000 a9ac 0800                         ........

0800b2f4 <fonts32_75_char>:
 800b2f4:	0010 0000 a9d4 0800                         ........

0800b2fc <fonts32_76_char>:
 800b2fc:	0011 0000 aa14 0800                         ........

0800b304 <fonts32_77_char>:
 800b304:	0017 0000 aa58 0800                         ....X...

0800b30c <fonts32_78_char>:
 800b30c:	000f 0000 aab4 0800                         ........

0800b314 <fonts32_79_char>:
 800b314:	0010 0000 aaf0 0800                         ........

0800b31c <fonts32_7A_char>:
 800b31c:	000f 0000 ab30 0800                         ....0...

0800b324 <fonts32_7B_char>:
 800b324:	0013 0000 ab6c 0800                         ....l...

0800b32c <fonts32_7C_char>:
 800b32c:	0008 0000 abb8 0800                         ........

0800b334 <fonts32_7D_char>:
 800b334:	0013 0000 abd8 0800                         ........

0800b33c <fonts32_7E_92_char>:
 800b33c:	0007 0000 ac24 0800                         ....$...

0800b344 <fonts32_93_B0_char>:
 800b344:	000b 0000 ac40 0800                         ....@...

0800b34c <fonts32_B1_BF_char>:
 800b34c:	0010 0000 ac6c 0800                         ....l...

0800b354 <fonts32_C0_C4_char>:
 800b354:	0015 0000 acac 0800                         ........

0800b35c <fonts32_C5_char>:
 800b35c:	0015 0000 ad00 0800                         ........

0800b364 <fonts32_C6_E0_char>:
 800b364:	0010 0000 ad54 0800                         ....T...

0800b36c <fonts32_E1_char>:
 800b36c:	0010 0000 ad94 0800                         ........

0800b374 <fonts32_E2_E4_char>:
 800b374:	0010 0000 add4 0800                         ........

0800b37c <fonts32_E5_char>:
 800b37c:	0010 0000 ae14 0800                         ........

0800b384 <fonts32_E6_E9_char>:
 800b384:	0010 0000 ae54 0800                         ....T...

0800b38c <fonts32_EA_ED_char>:
 800b38c:	0008 0000 ae94 0800                         ........

0800b394 <fonts32_EE_F1_char>:
 800b394:	0010 0000 aeb4 0800                         ........

0800b39c <fonts32_F2_F3_char>:
 800b39c:	0011 0000 aef4 0800                         ........

0800b3a4 <fonts32_F4_F6_char>:
 800b3a4:	0010 0000 af38 0800                         ....8...

0800b3ac <fonts32_F7_F9_char>:
 800b3ac:	0010 0000 af78 0800                         ....x...

0800b3b4 <fonts32_FA_char>:
 800b3b4:	0010 0000 afb8 0800                         ........

0800b3bc <fonts32_FB_FC_char>:
 800b3bc:	0010 0000 aff8 0800                         ........

0800b3c4 <fonts32_FD_FF_char>:
 800b3c4:	0007 0000 b038 0800                         ....8...

0800b3cc <font32>:
 800b3cc:	2020 0000 b054 0800 b05c 0800 b064 0800       ..T...\...d...
 800b3dc:	b06c 0800 b074 0800 b07c 0800 b084 0800     l...t...|.......
 800b3ec:	b08c 0800 b094 0800 b09c 0800 b0a4 0800     ................
 800b3fc:	b0ac 0800 b0b4 0800 b0bc 0800 b0c4 0800     ................
 800b40c:	b0cc 0800 b0d4 0800 b0dc 0800 b0e4 0800     ................
 800b41c:	b0ec 0800 b0f4 0800 b0fc 0800 b104 0800     ................
 800b42c:	b10c 0800 b114 0800 b11c 0800 b124 0800     ............$...
 800b43c:	b12c 0800 b134 0800 b13c 0800 b144 0800     ,...4...<...D...
 800b44c:	b14c 0800 b154 0800 b15c 0800 b164 0800     L...T...\...d...
 800b45c:	b16c 0800 b174 0800 b17c 0800 b184 0800     l...t...|.......
 800b46c:	b18c 0800 b194 0800 b19c 0800 b1a4 0800     ................
 800b47c:	b1ac 0800 b1b4 0800 b1bc 0800 b1c4 0800     ................
 800b48c:	b1cc 0800 b1d4 0800 b1dc 0800 b1e4 0800     ................
 800b49c:	b1ec 0800 b1f4 0800 b1fc 0800 b204 0800     ................
 800b4ac:	b20c 0800 b214 0800 b21c 0800 b224 0800     ............$...
 800b4bc:	b22c 0800 b234 0800 b23c 0800 b244 0800     ,...4...<...D...
 800b4cc:	b24c 0800 b254 0800 b254 0800 b25c 0800     L...T...T...\...
 800b4dc:	b264 0800 b26c 0800 b274 0800 b27c 0800     d...l...t...|...
 800b4ec:	b284 0800 b28c 0800 b294 0800 b29c 0800     ................
 800b4fc:	b2a4 0800 b2ac 0800 b2b4 0800 b2bc 0800     ................
 800b50c:	b2c4 0800 b2cc 0800 b2d4 0800 b2dc 0800     ................
 800b51c:	b2e4 0800 b2ec 0800 b2f4 0800 b2fc 0800     ................
 800b52c:	b304 0800 b30c 0800 b314 0800 b31c 0800     ................
 800b53c:	b324 0800 b32c 0800 b334 0800 b33c 0800     $...,...4...<...
 800b54c:	b33c 0800 b33c 0800 b33c 0800 b33c 0800     <...<...<...<...
 800b55c:	b33c 0800 b33c 0800 b33c 0800 b33c 0800     <...<...<...<...
 800b56c:	b33c 0800 b33c 0800 b33c 0800 b33c 0800     <...<...<...<...
 800b57c:	b33c 0800 b33c 0800 b33c 0800 b33c 0800     <...<...<...<...
 800b58c:	b33c 0800 b33c 0800 b33c 0800 b33c 0800     <...<...<...<...
 800b59c:	b344 0800 b344 0800 b344 0800 b344 0800     D...D...D...D...
 800b5ac:	b344 0800 b344 0800 b344 0800 b344 0800     D...D...D...D...
 800b5bc:	b344 0800 b344 0800 b344 0800 b344 0800     D...D...D...D...
 800b5cc:	b344 0800 b344 0800 b344 0800 b344 0800     D...D...D...D...
 800b5dc:	b344 0800 b344 0800 b344 0800 b344 0800     D...D...D...D...
 800b5ec:	b344 0800 b344 0800 b344 0800 b344 0800     D...D...D...D...
 800b5fc:	b344 0800 b344 0800 b344 0800 b344 0800     D...D...D...D...
 800b60c:	b344 0800 b344 0800 b34c 0800 b34c 0800     D...D...L...L...
 800b61c:	b34c 0800 b34c 0800 b34c 0800 b34c 0800     L...L...L...L...
 800b62c:	b34c 0800 b34c 0800 b34c 0800 b34c 0800     L...L...L...L...
 800b63c:	b34c 0800 b34c 0800 b34c 0800 b34c 0800     L...L...L...L...
 800b64c:	b34c 0800 b354 0800 b354 0800 b354 0800     L...T...T...T...
 800b65c:	b354 0800 b354 0800 b35c 0800 b364 0800     T...T...\...d...
 800b66c:	b364 0800 b364 0800 b364 0800 b364 0800     d...d...d...d...
 800b67c:	b364 0800 b364 0800 b364 0800 b364 0800     d...d...d...d...
 800b68c:	b364 0800 b364 0800 b364 0800 b364 0800     d...d...d...d...
 800b69c:	b364 0800 b364 0800 b364 0800 b364 0800     d...d...d...d...
 800b6ac:	b364 0800 b364 0800 b364 0800 b364 0800     d...d...d...d...
 800b6bc:	b364 0800 b364 0800 b364 0800 b364 0800     d...d...d...d...
 800b6cc:	b364 0800 b364 0800 b36c 0800 b374 0800     d...d...l...t...
 800b6dc:	b374 0800 b374 0800 b37c 0800 b384 0800     t...t...|.......
 800b6ec:	b384 0800 b384 0800 b384 0800 b38c 0800     ................
 800b6fc:	b38c 0800 b38c 0800 b38c 0800 b394 0800     ................
 800b70c:	b394 0800 b394 0800 b394 0800 b39c 0800     ................
 800b71c:	b39c 0800 b3a4 0800 b3a4 0800 b3a4 0800     ................
 800b72c:	b3ac 0800 b3ac 0800 b3ac 0800 b3b4 0800     ................
 800b73c:	b3bc 0800 b3bc 0800 b3c4 0800 b3c4 0800     ................
 800b74c:	b3c4 0800                                   ....

0800b750 <FontKey_StartCap>:
 800b750:	ff1f 7ff8 feff 0000                         ........

0800b758 <FontKey_EndCap>:
 800b758:	ff7f 1ffe f8ff 0000                         ........

0800b760 <FontKey_Prime>:
 800b760:	0000 0f00 e0ff ff07 03c0 80ff ff01 0000     ................
 800b770:	00fe 7c00 0000 0038 1000 0000 0000 ff0f     ...|..8.........
 800b780:	07e0 c0ff ff03 0180 00ff fe00 0000 007c     ..............|.
 800b790:	3800 0000 0010 0000 0f00 e0ff ff07 03c0     .8..............
 800b7a0:	80ff ff01 0000 00fe 7c00 0000 0038 1000     .........|..8...
	...

0800b7b8 <FontKey_0>:
	...
 800b7c0:	0000 1c00 0000 007e e601 0700 0086 0c1f     ......~.........
 800b7d0:	3c00 000c 0cf0 c003 0f18 1800 3e3c 7818     .<..........<>.x
 800b7e0:	3041 4960 7830 3041 3e3c 0f18 1800 c003     A0`I0xA0<>......
 800b7f0:	0018 0cf0 3c00 000c 0c1f 0700 0086 e601     .....<..........
 800b800:	0000 007e 1c00 0000 0000 0000 0000 0000     ..~.............

0800b810 <FontKey_1>:
	...
 800b838:	0042 7f00 0000 0040 0000 0000 0000 0000     B.....@.........
	...

0800b868 <FontKey_2>:
	...
 800b88c:	4200 0000 0061 5100 0000 0049 4600 0000     .B..a..Q..I..F..
	...

0800b8c0 <FontKey_3>:
	...
 800b8e4:	2100 0000 0041 4500 0000 004b 3100 0000     .!..A..E..K..1..
	...

0800b918 <FontKey_4>:
	...
 800b920:	0000 001c 3e00 0000 0036 7700 0000 0063     .....>..6..w..c.
 800b930:	c100 0080 80c1 8001 01c0 c080 1803 0760     ..............`.
 800b940:	7014 1206 0e30 387f 100c 1c18 1c00 0018     .p..0..8........
 800b950:	300c 0600 1c30 6006 83ff e367 7ff3 7f00     .0..0..`..g.....
 800b960:	0038 000e 0000 0000 0000 0000 0000 0000     8...............

0800b970 <FontKey_5>:
	...
 800b978:	3800 0000 007e 6700 0080 e061 3000 00f8     .8..~..g..a..0..
 800b988:	3c30 3000 000f 0318 18c0 f000 2718 0c3c     0<.0.........'<.
 800b998:	1e45 450c 0c06 1e45 3918 183c f000 0318     E..E..E..9<.....
 800b9a8:	30c0 000f 3c30 3000 00f8 e061 6700 0080     .0..0<.0..a..g..
 800b9b8:	007e 3800 0000 0000 0000 0000 0000 0000     ~..8............

0800b9c8 <FontKey_6>:
	...
 800b9ec:	3c00 0000 004a 4900 0000 0049 3000 0000     .<..J..I..I..0..
	...

0800ba20 <FontKey_7>:
	...
 800ba44:	0100 0000 0071 0900 0000 0005 0300 0000     ....q...........
	...

0800ba78 <FontKey_8>:
	...
 800ba9c:	3600 0000 0049 4900 0000 0049 3600 0000     .6..I..I..I..6..
	...

0800bad0 <FontKey_9>:
	...
 800baf4:	0600 0000 0049 4900 0000 0029 1e00 0000     ....I..I..).....
	...

0800bb28 <FontKey_Lock>:
	...
 800bb3c:	0f00 00f8 f80f 0f00 00fe ff0f 0f80 c0f9     ................
 800bb4c:	f80f 0f60 60f8 f80f 0f60 60f8 f90f 0fc0     ..`..`..`..`....
 800bb5c:	80ff fe0f 0f00 00f8 f80f 0000 0000 0000     ................
	...

0800bb80 <FontKey_On>:
	...
 800bb8c:	7e00 0100 80ff 8103 06c0 6000 000c 1830     .~.........`..0.
 800bb9c:	0000 0018 3000 0000 0030 3000 fe03 0330     .....0..0..0..0.
 800bbac:	30fe 0000 0030 1800 0000 0018 0c00 3000     .0..0..........0
 800bbbc:	0006 0360 c081 ff01 0080 007e 0000 0000     ..`.......~.....
	...

0800bbd8 <FontKey_Point>:
	...
 800bbe0:	3800 0e00 007f 677f f3e3 ff60 3083 061c     .8.....g..`..0..
 800bbf0:	0030 1806 0c00 001c 0c1c 1860 6006 0630     0.........`..`0.
 800bc00:	3000 0003 0360 6000 0003 0160 c080 8001     .0..`..`..`.....
 800bc10:	00c0 80c1 c100 0080 0063 7700 0000 0036     ........c..w..6.
 800bc20:	3e00 0000 001c 0000 0000 0000 0000 0000     .>..............

0800bc30 <FontKey_No>:
	...
 800bc44:	0300 c0ff ff07 07e0 e0ff ff07 07e0 e0ff     ................
 800bc54:	ff07 07e0 e0ff ff07 07e0 e0ff ff07 07e0     ................
 800bc64:	e0ff ff07 07e0 e0ff ff07 03e0 c0ff 0000     ................
	...

0800bc88 <FontKey_I>:
 800bc88:	0000 0000 0000 ff03 07c0 e0ff 000e 0c70     ..............p.
 800bc98:	3000 0018 1818 1800 0030 330c ccfe fe33     .0......0..3..3.
 800bca8:	30cc 0c00 0030 300c 0c18 1830 300c 0c18     .0..0..0..0..0..
 800bcb8:	1830 310c 8cff ff31 308c 0c18 1830 180c     0..1..1..0..0...
 800bcc8:	1818 1818 0c18 3000 000e 0770 e0ff ff03     .......0..p.....
 800bcd8:	00c0 0000 0000 0000                         ........

0800bce0 <FontKey_Ok>:
	...
 800bcf4:	0f00 e0ff ff07 07c0 c0ff ff03 0380 80ff     ................
 800bd04:	ff01 0100 00ff fe00 0000 00fe 7c00 0000     .............|..
 800bd14:	007c 3800 0000 0038 1000 0000 0000 0000     |..8..8.........
	...

0800bd38 <fontKey_StartCap_char>:
 800bd38:	0002 0000 b750 0800                         ....P...

0800bd40 <fontKey_EndCap_char>:
 800bd40:	0002 0000 b758 0800                         ....X...

0800bd48 <fontKey_Prime_char>:
 800bd48:	001d 0000 b760 0800                         ....`...

0800bd50 <fontKey_0_char>:
 800bd50:	001d 0000 b7b8 0800                         ........

0800bd58 <fontKey_1_char>:
 800bd58:	001d 0000 b810 0800                         ........

0800bd60 <fontKey_2_char>:
 800bd60:	001d 0000 b868 0800                         ....h...

0800bd68 <fontKey_3_char>:
 800bd68:	001d 0000 b8c0 0800                         ........

0800bd70 <fontKey_4_char>:
 800bd70:	001d 0000 b918 0800                         ........

0800bd78 <fontKey_5_char>:
 800bd78:	001d 0000 b970 0800                         ....p...

0800bd80 <fontKey_6_char>:
 800bd80:	001d 0000 b9c8 0800                         ........

0800bd88 <fontKey_7_char>:
 800bd88:	001d 0000 ba20 0800                         .... ...

0800bd90 <fontKey_8_char>:
 800bd90:	001d 0000 ba78 0800                         ....x...

0800bd98 <fontKey_9_char>:
 800bd98:	001d 0000 bad0 0800                         ........

0800bda0 <fontKey_Lock_char>:
 800bda0:	001d 0000 bb28 0800                         ....(...

0800bda8 <fontKey_On_char>:
 800bda8:	001d 0000 bb80 0800                         ........

0800bdb0 <fontKey_Point_char>:
 800bdb0:	001d 0000 bbd8 0800                         ........

0800bdb8 <fontKey_No_char>:
 800bdb8:	001d 0000 bc30 0800                         ....0...

0800bdc0 <fontKey_I_char>:
 800bdc0:	001d 0000 bc88 0800                         ........

0800bdc8 <fontKey_Ok_char>:
 800bdc8:	001d 0000 bce0 0800                         ........

0800bdd0 <fontKey_Prime>:
 800bdd0:	fae0 ffff bd38 0800 bd48 0800 bd40 0800     ....8...H...@...

0800bde0 <fontKey_0>:
 800bde0:	ffff 32ae bd38 0800 bd50 0800 bd40 0800     ...28...P...@...

0800bdf0 <fontKey_1>:
 800bdf0:	ffff 32ae bd38 0800 bd58 0800 bd40 0800     ...28...X...@...

0800be00 <fontKey_2>:
 800be00:	ffff 32ae bd38 0800 bd60 0800 bd40 0800     ...28...`...@...

0800be10 <fontKey_3>:
 800be10:	ffff 32ae bd38 0800 bd68 0800 bd40 0800     ...28...h...@...

0800be20 <fontKey_4>:
 800be20:	ffff 32ae bd38 0800 bd70 0800 bd40 0800     ...28...p...@...

0800be30 <fontKey_5>:
 800be30:	ffff 32ae bd38 0800 bd78 0800 bd40 0800     ...28...x...@...

0800be40 <fontKey_6>:
 800be40:	ffff 32ae bd38 0800 bd80 0800 bd40 0800     ...28.......@...

0800be50 <fontKey_7>:
 800be50:	ffff 32ae bd38 0800 bd88 0800 bd40 0800     ...28.......@...

0800be60 <fontKey_8>:
 800be60:	ffff 32ae bd38 0800 bd90 0800 bd40 0800     ...28.......@...

0800be70 <fontKey_9>:
 800be70:	ffff 32ae bd38 0800 bd98 0800 bd40 0800     ...28.......@...

0800be80 <fontKey_Lock>:
 800be80:	ffff 32ae bd38 0800 bda0 0800 bd40 0800     ...28.......@...

0800be90 <fontKey_On>:
 800be90:	32ae ffff bd38 0800 bda8 0800 bd40 0800     .2..8.......@...

0800bea0 <fontKey_Point>:
 800bea0:	ffff 32ae bd38 0800 bdb0 0800 bd40 0800     ...28.......@...

0800beb0 <fontKey_No>:
 800beb0:	d086 ffff bd38 0800 bdb8 0800 bd40 0800     ....8.......@...

0800bec0 <fontKey_I>:
 800bec0:	ffff 32ae bd38 0800 bdc0 0800 bd40 0800     ...28.......@...

0800bed0 <fontKey_Ok>:
 800bed0:	1565 ffff bd38 0800 bdc8 0800 bd40 0800     e...8.......@...

0800bee0 <waveformSteps>:
 800bee0:	0002 0000 0280 2000 0003 0000 027c 2000     ....... ....|.. 
 800bef0:	0005 0000 0278 2000 0007 0000 027c 2000     ....x.. ....|.. 
 800bf00:	0008 0000 0280 2000 000b 0000 0274 2000     ....... ....t.. 

0800bf10 <audioleveltab>:
 800bf10:	0604 0f0a 2819 7f40                         .....(@.

0800bf18 <buttonsConfig>:
 800bf18:	45db 0800 47b7 0800 48c9 0800 0000 0000     .E...G...H......
 800bf28:	45f7 0800 47c7 0800 48e5 0800 0001 0000     .E...G...H......
 800bf38:	4613 0800 47d7 0800 4901 0800 0002 0000     .F...G...I......
 800bf48:	462f 0800 47e7 0800 491d 0800 0003 0000     /F...G...I......
 800bf58:	464b 0800 47f7 0800 4939 0800 0004 0000     KF...G..9I......
 800bf68:	4667 0800 4807 0800 4955 0800 0005 0000     gF...H..UI......
 800bf78:	4683 0800 4817 0800 4971 0800 0006 0000     .F...H..qI......
 800bf88:	469f 0800 4827 0800 498d 0800 0007 0000     .F..'H...I......
 800bf98:	46bb 0800 4837 0800 49a9 0800 0008 0000     .F..7H...I......
 800bfa8:	46d7 0800 4847 0800 49c5 0800 0009 0000     .F..GH...I......
 800bfb8:	46f3 0800 4857 0800 49e1 0800 000a 0000     .F..WH...I......
 800bfc8:	470f 0800 4867 0800 49fd 0800 000b 0000     .G..gH...I......
 800bfd8:	472b 0800 4877 0800 4a19 0800 000c 0000     +G..wH...J......
 800bfe8:	4747 0800 4887 0800 4a35 0800 000d 0000     GG...H..5J......
 800bff8:	4763 0800 4897 0800 4a51 0800 000e 0000     cG...H..QJ......
 800c008:	477f 0800 48a7 0800 4a6d 0800 000f 0000     .G...H..mJ......
 800c018:	479b 0800 48b7 0800 4a89 0800 0010 0000     .G...H...J......
 800c028:	3130 3332 3534 3736 3938 6261 6463 6665     0123456789abcdef
 800c038:	6867 6a69 6c6b 6e6d 706f 7271 7473 7675     ghijklmnopqrstuv
 800c048:	7877 7a79 2300 302d 202b 6800 4c6c 6500     wxyz.#-0+ .hlL.e
 800c058:	6766 4645 0047 3130 3332 3534 3736 3938     fgEFG.0123456789
 800c068:	4241 4443 4645 3000 3231 3433 3635 3837     ABCDEF.012345678
 800c078:	6139 6362 6564 0066                         9abcdef.
