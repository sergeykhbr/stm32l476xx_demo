
../makefiles/bin/stm32l476xx_demo.elf:     file format elf32-littlearm


Disassembly of section .isr_vector:

08000000 <__isr_vectors>:
 8000000:	00 00 01 20 9d 02 00 08 a3 02 00 08 a7 02 00 08     ... ............
 8000010:	f1 02 00 08 f5 02 00 08 3d 03 00 08 00 00 00 00     ........=.......
	...
 800002c:	85 03 00 08 89 03 00 08 00 00 00 00 8d 03 00 08     ................
 800003c:	dd 2d 00 08 a3 03 00 08 a9 03 00 08 af 03 00 08     .-..............
 800004c:	b5 03 00 08 bb 03 00 08 c1 03 00 08 c7 03 00 08     ................
 800005c:	cd 03 00 08 d3 03 00 08 d9 03 00 08 df 03 00 08     ................
 800006c:	e5 03 00 08 eb 03 00 08 f1 03 00 08 f7 03 00 08     ................
 800007c:	fd 03 00 08 03 04 00 08 09 04 00 08 0f 04 00 08     ................
 800008c:	15 04 00 08 1b 04 00 08 21 04 00 08 27 04 00 08     ........!...'...
 800009c:	2d 04 00 08 33 04 00 08 39 04 00 08 3f 04 00 08     -...3...9...?...
 80000ac:	45 04 00 08 4b 04 00 08 79 16 00 08 57 04 00 08     E...K...y...W...
 80000bc:	5d 04 00 08 63 04 00 08 69 04 00 08 6f 04 00 08     ]...c...i...o...
 80000cc:	75 04 00 08 7b 04 00 08 81 04 00 08 87 04 00 08     u...{...........
 80000dc:	8d 04 00 08 93 04 00 08 99 04 00 08 9f 04 00 08     ................
 80000ec:	a5 04 00 08 ab 04 00 08 b1 04 00 08 b7 04 00 08     ................
 80000fc:	bd 04 00 08 c3 04 00 08 c9 04 00 08 cf 04 00 08     ................
 800010c:	d5 04 00 08 db 04 00 08 e1 04 00 08 55 16 00 08     ............U...
 800011c:	ed 04 00 08 f3 04 00 08 f9 04 00 08 ff 04 00 08     ................
 800012c:	05 05 00 08 0b 05 00 08 11 05 00 08 17 05 00 08     ................
 800013c:	1d 05 00 08 23 05 00 08 29 05 00 08 2f 05 00 08     ....#...).../...
 800014c:	35 05 00 08 3b 05 00 08 41 05 00 08 47 05 00 08     5...;...A...G...
 800015c:	4d 05 00 08 53 05 00 08 59 05 00 08 5f 05 00 08     M...S...Y..._...
 800016c:	65 05 00 08 6b 05 00 08 71 05 00 08 77 05 00 08     e...k...q...w...
 800017c:	00 00 00 00 7d 05 00 08 83 05 00 08                 ....}.......

08000188 <_start>:
// For the call to work, and for the call to __initialize_hardware_early()
// to work, the reset stack must point to a valid internal RAM area.

void __attribute__ ((section(".after_vectors"),noreturn,weak))
_start (void)
{
 8000188:	b500      	push	{lr}
 800018a:	b083      	sub	sp, #12
  // enabled and require an early sequence to disable it.
  //
  // Also useful on platform with external RAM, that need to be
  // initialised before filling the BSS section.

  __initialize_hardware_early ();
 800018c:	f001 f94e 	bl	800142c <__initialize_hardware_early>

  // Use Old Style DATA and BSS section initialisation,
  // that will manage a single BSS sections.

#if defined(DEBUG) && (OS_INCLUDE_STARTUP_GUARD_CHECKS)
  __data_begin_guard = DATA_GUARD_BAD_VALUE;
 8000190:	4b30      	ldr	r3, [pc, #192]	; (8000254 <_start+0xcc>)
 8000192:	4a31      	ldr	r2, [pc, #196]	; (8000258 <_start+0xd0>)
 8000194:	6013      	str	r3, [r2, #0]
  __data_end_guard = DATA_GUARD_BAD_VALUE;
 8000196:	4a31      	ldr	r2, [pc, #196]	; (800025c <_start+0xd4>)
 8000198:	6013      	str	r3, [r2, #0]
  unsigned int *p = region_begin;
 800019a:	4b31      	ldr	r3, [pc, #196]	; (8000260 <_start+0xd8>)
  __data_end_guard = DATA_GUARD_BAD_VALUE;
 800019c:	4a31      	ldr	r2, [pc, #196]	; (8000264 <_start+0xdc>)
  while (p < region_end)
 800019e:	4932      	ldr	r1, [pc, #200]	; (8000268 <_start+0xe0>)
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d204      	bcs.n	80001ae <_start+0x26>
    *p++ = *from++;
 80001a4:	6811      	ldr	r1, [r2, #0]
 80001a6:	6019      	str	r1, [r3, #0]
 80001a8:	3304      	adds	r3, #4
 80001aa:	3204      	adds	r2, #4
 80001ac:	e7f7      	b.n	800019e <_start+0x16>
    }

#endif

#if defined(DEBUG) && (OS_INCLUDE_STARTUP_GUARD_CHECKS)
  if ((__data_begin_guard != DATA_BEGIN_GUARD_VALUE)
 80001ae:	4b2a      	ldr	r3, [pc, #168]	; (8000258 <_start+0xd0>)
 80001b0:	681a      	ldr	r2, [r3, #0]
 80001b2:	4b2e      	ldr	r3, [pc, #184]	; (800026c <_start+0xe4>)
 80001b4:	429a      	cmp	r2, r3
 80001b6:	d000      	beq.n	80001ba <_start+0x32>
 80001b8:	e7fe      	b.n	80001b8 <_start+0x30>
      || (__data_end_guard != DATA_END_GUARD_VALUE))
 80001ba:	4b28      	ldr	r3, [pc, #160]	; (800025c <_start+0xd4>)
 80001bc:	681a      	ldr	r2, [r3, #0]
 80001be:	4b2c      	ldr	r3, [pc, #176]	; (8000270 <_start+0xe8>)
 80001c0:	429a      	cmp	r2, r3
 80001c2:	d1f9      	bne.n	80001b8 <_start+0x30>
	;
    }
#endif

#if defined(DEBUG) && (OS_INCLUDE_STARTUP_GUARD_CHECKS)
  __bss_begin_guard = BSS_GUARD_BAD_VALUE;
 80001c4:	4b23      	ldr	r3, [pc, #140]	; (8000254 <_start+0xcc>)
 80001c6:	4a2b      	ldr	r2, [pc, #172]	; (8000274 <_start+0xec>)
 80001c8:	6013      	str	r3, [r2, #0]
  __bss_end_guard = BSS_GUARD_BAD_VALUE;
 80001ca:	4a2b      	ldr	r2, [pc, #172]	; (8000278 <_start+0xf0>)
 80001cc:	6013      	str	r3, [r2, #0]
  unsigned int *p = region_begin;
 80001ce:	4b2b      	ldr	r3, [pc, #172]	; (800027c <_start+0xf4>)
 80001d0:	e002      	b.n	80001d8 <_start+0x50>
    *p++ = 0;
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	3304      	adds	r3, #4
  while (p < region_end)
 80001d8:	4a29      	ldr	r2, [pc, #164]	; (8000280 <_start+0xf8>)
 80001da:	4293      	cmp	r3, r2
 80001dc:	d3f9      	bcc.n	80001d2 <_start+0x4a>
      __initialize_bss (region_begin, region_end);
    }
#endif

#if defined(DEBUG) && (OS_INCLUDE_STARTUP_GUARD_CHECKS)
  if ((__bss_begin_guard != 0) || (__bss_end_guard != 0))
 80001de:	4b25      	ldr	r3, [pc, #148]	; (8000274 <_start+0xec>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	b913      	cbnz	r3, 80001ea <_start+0x62>
 80001e4:	4b24      	ldr	r3, [pc, #144]	; (8000278 <_start+0xf0>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	b103      	cbz	r3, 80001ec <_start+0x64>
 80001ea:	e7fe      	b.n	80001ea <_start+0x62>
    }
#endif

  // Hook to continue the initialisations. Usually compute and store the
  // clock frequency in the global CMSIS variable, cleared above.
  __initialize_hardware ();
 80001ec:	f001 f92a 	bl	8001444 <__initialize_hardware>

  // Get the argc/argv (useful in semihosting configurations).
  int argc;
  char** argv;
  __initialize_args (&argc, &argv);
 80001f0:	4669      	mov	r1, sp
 80001f2:	a801      	add	r0, sp, #4
 80001f4:	f001 f8f6 	bl	80013e4 <__initialize_args>
  count = __preinit_array_end - __preinit_array_start;
 80001f8:	4c22      	ldr	r4, [pc, #136]	; (8000284 <_start+0xfc>)
 80001fa:	4b23      	ldr	r3, [pc, #140]	; (8000288 <_start+0x100>)
 80001fc:	1ae4      	subs	r4, r4, r3
 80001fe:	10a4      	asrs	r4, r4, #2
  for (i = 0; i < count; i++)
 8000200:	2500      	movs	r5, #0
 8000202:	42ac      	cmp	r4, r5
 8000204:	dc14      	bgt.n	8000230 <_start+0xa8>
  count = __init_array_end - __init_array_start;
 8000206:	4c21      	ldr	r4, [pc, #132]	; (800028c <_start+0x104>)
 8000208:	4b21      	ldr	r3, [pc, #132]	; (8000290 <_start+0x108>)
 800020a:	1ae4      	subs	r4, r4, r3
 800020c:	10a4      	asrs	r4, r4, #2
  for (i = 0; i < count; i++)
 800020e:	2500      	movs	r5, #0
 8000210:	42ac      	cmp	r4, r5
 8000212:	dc13      	bgt.n	800023c <_start+0xb4>
  // Call the standard library initialisation (mandatory for C++ to
  // execute the constructors for the static objects).
  __run_init_array ();

  // Call the main entry point, and save the exit code.
  int code = main (argc, argv);
 8000214:	9900      	ldr	r1, [sp, #0]
 8000216:	9801      	ldr	r0, [sp, #4]
 8000218:	f002 f9e2 	bl	80025e0 <main>
 800021c:	4605      	mov	r5, r0
  count = __fini_array_end - __fini_array_start;
 800021e:	4c1d      	ldr	r4, [pc, #116]	; (8000294 <_start+0x10c>)
 8000220:	4b1d      	ldr	r3, [pc, #116]	; (8000298 <_start+0x110>)
 8000222:	1ae4      	subs	r4, r4, r3
 8000224:	10a4      	asrs	r4, r4, #2
  for (i = count; i > 0; i--)
 8000226:	2c00      	cmp	r4, #0
 8000228:	dc0e      	bgt.n	8000248 <_start+0xc0>

  // Run the C++ static destructors.
  __run_fini_array ();

  _exit (code);
 800022a:	4628      	mov	r0, r5
 800022c:	f001 f8b6 	bl	800139c <_exit>
    __preinit_array_start[i] ();
 8000230:	4b15      	ldr	r3, [pc, #84]	; (8000288 <_start+0x100>)
 8000232:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8000236:	4798      	blx	r3
  for (i = 0; i < count; i++)
 8000238:	3501      	adds	r5, #1
 800023a:	e7e2      	b.n	8000202 <_start+0x7a>
    __init_array_start[i] ();
 800023c:	4b14      	ldr	r3, [pc, #80]	; (8000290 <_start+0x108>)
 800023e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8000242:	4798      	blx	r3
  for (i = 0; i < count; i++)
 8000244:	3501      	adds	r5, #1
 8000246:	e7e3      	b.n	8000210 <_start+0x88>
    __fini_array_start[i - 1] ();
 8000248:	3c01      	subs	r4, #1
 800024a:	4b13      	ldr	r3, [pc, #76]	; (8000298 <_start+0x110>)
 800024c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8000250:	4798      	blx	r3
 8000252:	e7e8      	b.n	8000226 <_start+0x9e>
 8000254:	cadebaba 	.word	0xcadebaba
 8000258:	20000000 	.word	0x20000000
 800025c:	200000d8 	.word	0x200000d8
 8000260:	20000000 	.word	0x20000000
 8000264:	0800a44c 	.word	0x0800a44c
 8000268:	200000dc 	.word	0x200000dc
 800026c:	12345678 	.word	0x12345678
 8000270:	98765432 	.word	0x98765432
 8000274:	200000dc 	.word	0x200000dc
 8000278:	20000580 	.word	0x20000580
 800027c:	200000dc 	.word	0x200000dc
 8000280:	20000584 	.word	0x20000584
 8000284:	080005b0 	.word	0x080005b0
 8000288:	080005b0 	.word	0x080005b0
 800028c:	080005b0 	.word	0x080005b0
 8000290:	080005b0 	.word	0x080005b0
 8000294:	080005b0 	.word	0x080005b0
 8000298:	080005b0 	.word	0x080005b0

0800029c <Reset_Handler>:

// The DEBUG version is not naked, but has a proper stack frame,
// to allow setting breakpoints at Reset_Handler.
void __attribute__ ((section(".after_vectors"),noreturn))
Reset_Handler (void)
{
 800029c:	b508      	push	{r3, lr}
  _start ();
 800029e:	f7ff ff73 	bl	8000188 <_start>

080002a2 <NMI_Handler>:

void __attribute__ ((section(".after_vectors"),weak))
NMI_Handler (void)
{
#if defined(DEBUG)
  __DEBUG_BKPT();
 80002a2:	be00      	bkpt	0x0000
 80002a4:	e7fe      	b.n	80002a4 <NMI_Handler+0x2>

080002a6 <HardFault_Handler>:
// Cortex-M4 Processors, Third Edition, Chap. 12.8, page 402).

void __attribute__ ((section(".after_vectors"),weak,naked))
HardFault_Handler (void)
{
  asm volatile(
 80002a6:	f01e 0f04 	tst.w	lr, #4
 80002aa:	bf0c      	ite	eq
 80002ac:	f3ef 8008 	mrseq	r0, MSP
 80002b0:	f3ef 8009 	mrsne	r0, PSP
 80002b4:	4671      	mov	r1, lr
 80002b6:	4a37      	ldr	r2, [pc, #220]	; (8000394 <PendSV_Handler+0x8>)
 80002b8:	4710      	bx	r2

080002ba <HardFault_Handler_C>:
}

void __attribute__ ((section(".after_vectors"),weak,used))
HardFault_Handler_C (ExceptionStackFrame* frame __attribute__((unused)),
                     uint32_t lr __attribute__((unused)))
{
 80002ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	4604      	mov	r4, r0
 80002c2:	4688      	mov	r8, r1
#if defined(TRACE)
  uint32_t mmfar = SCB->MMFAR; // MemManage Fault Address
 80002c4:	4b08      	ldr	r3, [pc, #32]	; (80002e8 <HardFault_Handler_C+0x2e>)
 80002c6:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  uint32_t bfar = SCB->BFAR; // Bus Fault Address
 80002c8:	6b9f      	ldr	r7, [r3, #56]	; 0x38
  uint32_t cfsr = SCB->CFSR; // Configurable Fault Status Registers
 80002ca:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    }

#endif

#if defined(TRACE)
  trace_printf ("[HardFault]\n");
 80002cc:	4807      	ldr	r0, [pc, #28]	; (80002ec <HardFault_Handler_C+0x32>)
 80002ce:	f001 f891 	bl	80013f4 <trace_printf>
  dumpExceptionStack (frame, cfsr, mmfar, bfar, lr);
 80002d2:	f8cd 8000 	str.w	r8, [sp]
 80002d6:	463b      	mov	r3, r7
 80002d8:	4632      	mov	r2, r6
 80002da:	4629      	mov	r1, r5
 80002dc:	4620      	mov	r0, r4
 80002de:	f001 f8b5 	bl	800144c <dumpExceptionStack>
#endif // defined(TRACE)

#if defined(DEBUG)
  __DEBUG_BKPT();
 80002e2:	be00      	bkpt	0x0000
 80002e4:	e7fe      	b.n	80002e4 <HardFault_Handler_C+0x2a>
 80002e6:	bf00      	nop
 80002e8:	e000ed00 	.word	0xe000ed00
 80002ec:	08004460 	.word	0x08004460

080002f0 <MemManage_Handler>:

void __attribute__ ((section(".after_vectors"),weak))
MemManage_Handler (void)
{
#if defined(DEBUG)
  __DEBUG_BKPT();
 80002f0:	be00      	bkpt	0x0000
 80002f2:	e7fe      	b.n	80002f2 <MemManage_Handler+0x2>

080002f4 <BusFault_Handler>:
}

void __attribute__ ((section(".after_vectors"),weak,naked))
BusFault_Handler (void)
{
  asm volatile(
 80002f4:	f01e 0f04 	tst.w	lr, #4
 80002f8:	bf0c      	ite	eq
 80002fa:	f3ef 8008 	mrseq	r0, MSP
 80002fe:	f3ef 8009 	mrsne	r0, PSP
 8000302:	4671      	mov	r1, lr
 8000304:	4a24      	ldr	r2, [pc, #144]	; (8000398 <PendSV_Handler+0xc>)
 8000306:	4710      	bx	r2

08000308 <BusFault_Handler_C>:
}

void __attribute__ ((section(".after_vectors"),weak,used))
BusFault_Handler_C (ExceptionStackFrame* frame __attribute__((unused)),
                    uint32_t lr __attribute__((unused)))
{
 8000308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800030c:	b082      	sub	sp, #8
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
#if defined(TRACE)
  uint32_t mmfar = SCB->MMFAR; // MemManage Fault Address
 8000312:	4b08      	ldr	r3, [pc, #32]	; (8000334 <BusFault_Handler_C+0x2c>)
 8000314:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  uint32_t bfar = SCB->BFAR; // Bus Fault Address
 8000316:	6b9f      	ldr	r7, [r3, #56]	; 0x38
  uint32_t cfsr = SCB->CFSR; // Configurable Fault Status Registers
 8000318:	6a9d      	ldr	r5, [r3, #40]	; 0x28

  trace_printf ("[BusFault]\n");
 800031a:	4807      	ldr	r0, [pc, #28]	; (8000338 <BusFault_Handler_C+0x30>)
 800031c:	f001 f86a 	bl	80013f4 <trace_printf>
  dumpExceptionStack (frame, cfsr, mmfar, bfar, lr);
 8000320:	f8cd 8000 	str.w	r8, [sp]
 8000324:	463b      	mov	r3, r7
 8000326:	4632      	mov	r2, r6
 8000328:	4629      	mov	r1, r5
 800032a:	4620      	mov	r0, r4
 800032c:	f001 f88e 	bl	800144c <dumpExceptionStack>
#endif // defined(TRACE)

#if defined(DEBUG)
  __DEBUG_BKPT();
 8000330:	be00      	bkpt	0x0000
 8000332:	e7fe      	b.n	8000332 <BusFault_Handler_C+0x2a>
 8000334:	e000ed00 	.word	0xe000ed00
 8000338:	08004470 	.word	0x08004470

0800033c <UsageFault_Handler>:
}

void __attribute__ ((section(".after_vectors"),weak,naked))
UsageFault_Handler (void)
{
  asm volatile(
 800033c:	f01e 0f04 	tst.w	lr, #4
 8000340:	bf0c      	ite	eq
 8000342:	f3ef 8008 	mrseq	r0, MSP
 8000346:	f3ef 8009 	mrsne	r0, PSP
 800034a:	4671      	mov	r1, lr
 800034c:	4a13      	ldr	r2, [pc, #76]	; (800039c <PendSV_Handler+0x10>)
 800034e:	4710      	bx	r2

08000350 <UsageFault_Handler_C>:
}

void __attribute__ ((section(".after_vectors"),weak,used))
UsageFault_Handler_C (ExceptionStackFrame* frame __attribute__((unused)),
                      uint32_t lr __attribute__((unused)))
{
 8000350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000354:	b082      	sub	sp, #8
 8000356:	4604      	mov	r4, r0
 8000358:	4688      	mov	r8, r1
#if defined(TRACE)
  uint32_t mmfar = SCB->MMFAR; // MemManage Fault Address
 800035a:	4b08      	ldr	r3, [pc, #32]	; (800037c <UsageFault_Handler_C+0x2c>)
 800035c:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  uint32_t bfar = SCB->BFAR; // Bus Fault Address
 800035e:	6b9f      	ldr	r7, [r3, #56]	; 0x38
  uint32_t cfsr = SCB->CFSR; // Configurable Fault Status Registers
 8000360:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    }

#endif

#if defined(TRACE)
  trace_printf ("[UsageFault]\n");
 8000362:	4807      	ldr	r0, [pc, #28]	; (8000380 <UsageFault_Handler_C+0x30>)
 8000364:	f001 f846 	bl	80013f4 <trace_printf>
  dumpExceptionStack (frame, cfsr, mmfar, bfar, lr);
 8000368:	f8cd 8000 	str.w	r8, [sp]
 800036c:	463b      	mov	r3, r7
 800036e:	4632      	mov	r2, r6
 8000370:	4629      	mov	r1, r5
 8000372:	4620      	mov	r0, r4
 8000374:	f001 f86a 	bl	800144c <dumpExceptionStack>
#endif // defined(TRACE)

#if defined(DEBUG)
  __DEBUG_BKPT();
 8000378:	be00      	bkpt	0x0000
 800037a:	e7fe      	b.n	800037a <UsageFault_Handler_C+0x2a>
 800037c:	e000ed00 	.word	0xe000ed00
 8000380:	0800447c 	.word	0x0800447c

08000384 <SVC_Handler>:

void __attribute__ ((section(".after_vectors"),weak))
SVC_Handler (void)
{
#if defined(DEBUG)
  __DEBUG_BKPT();
 8000384:	be00      	bkpt	0x0000
 8000386:	e7fe      	b.n	8000386 <SVC_Handler+0x2>

08000388 <DebugMon_Handler>:

void __attribute__ ((section(".after_vectors"),weak))
DebugMon_Handler (void)
{
#if defined(DEBUG)
  __DEBUG_BKPT();
 8000388:	be00      	bkpt	0x0000
 800038a:	e7fe      	b.n	800038a <DebugMon_Handler+0x2>

0800038c <PendSV_Handler>:

void __attribute__ ((section(".after_vectors"),weak))
PendSV_Handler (void)
{
#if defined(DEBUG)
  __DEBUG_BKPT();
 800038c:	be00      	bkpt	0x0000
 800038e:	e7fe      	b.n	800038e <PendSV_Handler+0x2>
SysTick_Handler (void)
{
  // DO NOT loop, just return.
  // Useful in case someone (like STM HAL) inadvertently enables SysTick.
  ;
}
 8000390:	4770      	bx	lr
 8000392:	0000      	.short	0x0000
 8000394:	080002bb 	.word	0x080002bb
 8000398:	08000309 	.word	0x08000309
 800039c:	08000351 	.word	0x08000351

080003a0 <Default_Handler>:

// Processor ends up here if an unexpected interrupt occurs or a specific
// handler is not present in the application code.

void __attribute__ ((section(".after_vectors")))
Default_Handler(void) {
 80003a0:	e7fe      	b.n	80003a0 <Default_Handler>

080003a2 <WWDG_IRQHandler>:
    while (1) {
    }
}

void __attribute__ ((weak, section(".after_vectors"))) WWDG_IRQHandler() {
 80003a2:	b508      	push	{r3, lr}
                          Default_Handler();
 80003a4:	f7ff fffc 	bl	80003a0 <Default_Handler>

080003a8 <PVD_PVM_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) PVD_PVM_IRQHandler() {
 80003a8:	b508      	push	{r3, lr}
                          Default_Handler();
 80003aa:	f7ff fff9 	bl	80003a0 <Default_Handler>

080003ae <TAMP_STAMP_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) TAMP_STAMP_IRQHandler() {
 80003ae:	b508      	push	{r3, lr}
                          Default_Handler();
 80003b0:	f7ff fff6 	bl	80003a0 <Default_Handler>

080003b4 <RTC_WKUP_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) RTC_WKUP_IRQHandler() {
 80003b4:	b508      	push	{r3, lr}
                          Default_Handler();
 80003b6:	f7ff fff3 	bl	80003a0 <Default_Handler>

080003ba <FLASH_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) FLASH_IRQHandler() {
 80003ba:	b508      	push	{r3, lr}
                          Default_Handler();
 80003bc:	f7ff fff0 	bl	80003a0 <Default_Handler>

080003c0 <RCC_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) RCC_IRQHandler() {
 80003c0:	b508      	push	{r3, lr}
                          Default_Handler();
 80003c2:	f7ff ffed 	bl	80003a0 <Default_Handler>

080003c6 <EXTI0_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) EXTI0_IRQHandler() {
 80003c6:	b508      	push	{r3, lr}
                          Default_Handler();
 80003c8:	f7ff ffea 	bl	80003a0 <Default_Handler>

080003cc <EXTI1_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) EXTI1_IRQHandler() {
 80003cc:	b508      	push	{r3, lr}
                          Default_Handler();
 80003ce:	f7ff ffe7 	bl	80003a0 <Default_Handler>

080003d2 <EXTI2_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) EXTI2_IRQHandler() {
 80003d2:	b508      	push	{r3, lr}
                          Default_Handler();
 80003d4:	f7ff ffe4 	bl	80003a0 <Default_Handler>

080003d8 <EXTI3_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) EXTI3_IRQHandler() {
 80003d8:	b508      	push	{r3, lr}
                          Default_Handler();
 80003da:	f7ff ffe1 	bl	80003a0 <Default_Handler>

080003de <EXTI4_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) EXTI4_IRQHandler() {
 80003de:	b508      	push	{r3, lr}
                          Default_Handler();
 80003e0:	f7ff ffde 	bl	80003a0 <Default_Handler>

080003e4 <DMA1_Channel1_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) DMA1_Channel1_IRQHandler() {
 80003e4:	b508      	push	{r3, lr}
                          Default_Handler();
 80003e6:	f7ff ffdb 	bl	80003a0 <Default_Handler>

080003ea <DMA1_Channel2_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) DMA1_Channel2_IRQHandler() {
 80003ea:	b508      	push	{r3, lr}
                          Default_Handler();
 80003ec:	f7ff ffd8 	bl	80003a0 <Default_Handler>

080003f0 <DMA1_Channel3_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) DMA1_Channel3_IRQHandler() {
 80003f0:	b508      	push	{r3, lr}
                          Default_Handler();
 80003f2:	f7ff ffd5 	bl	80003a0 <Default_Handler>

080003f6 <DMA1_Channel4_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) DMA1_Channel4_IRQHandler() {
 80003f6:	b508      	push	{r3, lr}
                          Default_Handler();
 80003f8:	f7ff ffd2 	bl	80003a0 <Default_Handler>

080003fc <DMA1_Channel5_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) DMA1_Channel5_IRQHandler() {
 80003fc:	b508      	push	{r3, lr}
                          Default_Handler();
 80003fe:	f7ff ffcf 	bl	80003a0 <Default_Handler>

08000402 <DMA1_Channel6_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) DMA1_Channel6_IRQHandler() {
 8000402:	b508      	push	{r3, lr}
                          Default_Handler();
 8000404:	f7ff ffcc 	bl	80003a0 <Default_Handler>

08000408 <DMA1_Channel7_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) DMA1_Channel7_IRQHandler() {
 8000408:	b508      	push	{r3, lr}
                          Default_Handler();
 800040a:	f7ff ffc9 	bl	80003a0 <Default_Handler>

0800040e <ADC1_2_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) ADC1_2_IRQHandler() {
 800040e:	b508      	push	{r3, lr}
                          Default_Handler();
 8000410:	f7ff ffc6 	bl	80003a0 <Default_Handler>

08000414 <CAN1_TX_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) CAN1_TX_IRQHandler() {
 8000414:	b508      	push	{r3, lr}
                          Default_Handler();
 8000416:	f7ff ffc3 	bl	80003a0 <Default_Handler>

0800041a <CAN1_RX0_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) CAN1_RX0_IRQHandler() {
 800041a:	b508      	push	{r3, lr}
                          Default_Handler();
 800041c:	f7ff ffc0 	bl	80003a0 <Default_Handler>

08000420 <CAN1_RX1_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) CAN1_RX1_IRQHandler() {
 8000420:	b508      	push	{r3, lr}
                          Default_Handler();
 8000422:	f7ff ffbd 	bl	80003a0 <Default_Handler>

08000426 <CAN1_SCE_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) CAN1_SCE_IRQHandler() {
 8000426:	b508      	push	{r3, lr}
                          Default_Handler();
 8000428:	f7ff ffba 	bl	80003a0 <Default_Handler>

0800042c <EXTI9_5_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) EXTI9_5_IRQHandler() {
 800042c:	b508      	push	{r3, lr}
                          Default_Handler();
 800042e:	f7ff ffb7 	bl	80003a0 <Default_Handler>

08000432 <TIM1_BRK_TIM15_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) TIM1_BRK_TIM15_IRQHandler() {
 8000432:	b508      	push	{r3, lr}
                          Default_Handler();
 8000434:	f7ff ffb4 	bl	80003a0 <Default_Handler>

08000438 <TIM1_UP_TIM16_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) TIM1_UP_TIM16_IRQHandler() {
 8000438:	b508      	push	{r3, lr}
                          Default_Handler();
 800043a:	f7ff ffb1 	bl	80003a0 <Default_Handler>

0800043e <TIM1_TRG_COM_TIM17_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) TIM1_TRG_COM_TIM17_IRQHandler() {
 800043e:	b508      	push	{r3, lr}
                          Default_Handler();
 8000440:	f7ff ffae 	bl	80003a0 <Default_Handler>

08000444 <TIM1_CC_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) TIM1_CC_IRQHandler() {
 8000444:	b508      	push	{r3, lr}
                          Default_Handler();
 8000446:	f7ff ffab 	bl	80003a0 <Default_Handler>

0800044a <TIM2_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) TIM2_IRQHandler() {
 800044a:	b508      	push	{r3, lr}
                          Default_Handler();
 800044c:	f7ff ffa8 	bl	80003a0 <Default_Handler>
                      };

void __attribute__ ((weak, section(".after_vectors"))) TIM3_IRQHandler() {
 8000450:	b508      	push	{r3, lr}
                          Default_Handler();
 8000452:	f7ff ffa5 	bl	80003a0 <Default_Handler>

08000456 <TIM4_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) TIM4_IRQHandler() {
 8000456:	b508      	push	{r3, lr}
                          Default_Handler();
 8000458:	f7ff ffa2 	bl	80003a0 <Default_Handler>

0800045c <I2C1_EV_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) I2C1_EV_IRQHandler() {
 800045c:	b508      	push	{r3, lr}
                          Default_Handler();
 800045e:	f7ff ff9f 	bl	80003a0 <Default_Handler>

08000462 <I2C1_ER_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) I2C1_ER_IRQHandler() {
 8000462:	b508      	push	{r3, lr}
                          Default_Handler();
 8000464:	f7ff ff9c 	bl	80003a0 <Default_Handler>

08000468 <I2C2_EV_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) I2C2_EV_IRQHandler() {
 8000468:	b508      	push	{r3, lr}
                          Default_Handler();
 800046a:	f7ff ff99 	bl	80003a0 <Default_Handler>

0800046e <I2C2_ER_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) I2C2_ER_IRQHandler() {
 800046e:	b508      	push	{r3, lr}
                          Default_Handler();
 8000470:	f7ff ff96 	bl	80003a0 <Default_Handler>

08000474 <SPI1_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) SPI1_IRQHandler() {
 8000474:	b508      	push	{r3, lr}
                          Default_Handler();
 8000476:	f7ff ff93 	bl	80003a0 <Default_Handler>

0800047a <SPI2_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) SPI2_IRQHandler() {
 800047a:	b508      	push	{r3, lr}
                          Default_Handler();
 800047c:	f7ff ff90 	bl	80003a0 <Default_Handler>

08000480 <USART1_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) USART1_IRQHandler() {
 8000480:	b508      	push	{r3, lr}
                          Default_Handler();
 8000482:	f7ff ff8d 	bl	80003a0 <Default_Handler>

08000486 <USART2_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) USART2_IRQHandler() {
 8000486:	b508      	push	{r3, lr}
                          Default_Handler();
 8000488:	f7ff ff8a 	bl	80003a0 <Default_Handler>

0800048c <USART3_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) USART3_IRQHandler() {
 800048c:	b508      	push	{r3, lr}
                          Default_Handler();
 800048e:	f7ff ff87 	bl	80003a0 <Default_Handler>

08000492 <EXTI15_10_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) EXTI15_10_IRQHandler() {
 8000492:	b508      	push	{r3, lr}
                          Default_Handler();
 8000494:	f7ff ff84 	bl	80003a0 <Default_Handler>

08000498 <RTC_Alarm_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) RTC_Alarm_IRQHandler() {
 8000498:	b508      	push	{r3, lr}
                          Default_Handler();
 800049a:	f7ff ff81 	bl	80003a0 <Default_Handler>

0800049e <DFSDM1_FLT3_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) DFSDM1_FLT3_IRQHandler() {
 800049e:	b508      	push	{r3, lr}
                          Default_Handler();
 80004a0:	f7ff ff7e 	bl	80003a0 <Default_Handler>

080004a4 <TIM8_BRK_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) TIM8_BRK_IRQHandler() {
 80004a4:	b508      	push	{r3, lr}
                          Default_Handler();
 80004a6:	f7ff ff7b 	bl	80003a0 <Default_Handler>

080004aa <TIM8_UP_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) TIM8_UP_IRQHandler() {
 80004aa:	b508      	push	{r3, lr}
                          Default_Handler();
 80004ac:	f7ff ff78 	bl	80003a0 <Default_Handler>

080004b0 <TIM8_TRG_COM_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) TIM8_TRG_COM_IRQHandler() {
 80004b0:	b508      	push	{r3, lr}
                          Default_Handler();
 80004b2:	f7ff ff75 	bl	80003a0 <Default_Handler>

080004b6 <TIM8_CC_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) TIM8_CC_IRQHandler() {
 80004b6:	b508      	push	{r3, lr}
                          Default_Handler();
 80004b8:	f7ff ff72 	bl	80003a0 <Default_Handler>

080004bc <ADC3_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) ADC3_IRQHandler() {
 80004bc:	b508      	push	{r3, lr}
                          Default_Handler();
 80004be:	f7ff ff6f 	bl	80003a0 <Default_Handler>

080004c2 <FMC_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) FMC_IRQHandler() {
 80004c2:	b508      	push	{r3, lr}
                          Default_Handler();
 80004c4:	f7ff ff6c 	bl	80003a0 <Default_Handler>

080004c8 <SDMMC1_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) SDMMC1_IRQHandler() {
 80004c8:	b508      	push	{r3, lr}
                          Default_Handler();
 80004ca:	f7ff ff69 	bl	80003a0 <Default_Handler>

080004ce <TIM5_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) TIM5_IRQHandler() {
 80004ce:	b508      	push	{r3, lr}
                          Default_Handler();
 80004d0:	f7ff ff66 	bl	80003a0 <Default_Handler>

080004d4 <SPI3_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) SPI3_IRQHandler() {
 80004d4:	b508      	push	{r3, lr}
                          Default_Handler();
 80004d6:	f7ff ff63 	bl	80003a0 <Default_Handler>

080004da <UART4_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) UART4_IRQHandler() {
 80004da:	b508      	push	{r3, lr}
                          Default_Handler();
 80004dc:	f7ff ff60 	bl	80003a0 <Default_Handler>

080004e0 <UART5_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) UART5_IRQHandler() {
 80004e0:	b508      	push	{r3, lr}
                          Default_Handler();
 80004e2:	f7ff ff5d 	bl	80003a0 <Default_Handler>
                      };

void __attribute__ ((weak, section(".after_vectors"))) TIM6_DAC_IRQHandler() {
 80004e6:	b508      	push	{r3, lr}
                          Default_Handler();
 80004e8:	f7ff ff5a 	bl	80003a0 <Default_Handler>

080004ec <TIM7_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) TIM7_IRQHandler() {
 80004ec:	b508      	push	{r3, lr}
                          Default_Handler();
 80004ee:	f7ff ff57 	bl	80003a0 <Default_Handler>

080004f2 <DMA2_Channel1_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) DMA2_Channel1_IRQHandler() {
 80004f2:	b508      	push	{r3, lr}
                          Default_Handler();
 80004f4:	f7ff ff54 	bl	80003a0 <Default_Handler>

080004f8 <DMA2_Channel2_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) DMA2_Channel2_IRQHandler() {
 80004f8:	b508      	push	{r3, lr}
                          Default_Handler();
 80004fa:	f7ff ff51 	bl	80003a0 <Default_Handler>

080004fe <DMA2_Channel3_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) DMA2_Channel3_IRQHandler() {
 80004fe:	b508      	push	{r3, lr}
                          Default_Handler();
 8000500:	f7ff ff4e 	bl	80003a0 <Default_Handler>

08000504 <DMA2_Channel4_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) DMA2_Channel4_IRQHandler() {
 8000504:	b508      	push	{r3, lr}
                          Default_Handler();
 8000506:	f7ff ff4b 	bl	80003a0 <Default_Handler>

0800050a <DMA2_Channel5_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) DMA2_Channel5_IRQHandler() {
 800050a:	b508      	push	{r3, lr}
                          Default_Handler();
 800050c:	f7ff ff48 	bl	80003a0 <Default_Handler>

08000510 <DFSDM1_FLT0_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) DFSDM1_FLT0_IRQHandler() {
 8000510:	b508      	push	{r3, lr}
                          Default_Handler();
 8000512:	f7ff ff45 	bl	80003a0 <Default_Handler>

08000516 <DFSDM1_FLT1_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) DFSDM1_FLT1_IRQHandler() {
 8000516:	b508      	push	{r3, lr}
                          Default_Handler();
 8000518:	f7ff ff42 	bl	80003a0 <Default_Handler>

0800051c <DFSDM1_FLT2_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) DFSDM1_FLT2_IRQHandler() {
 800051c:	b508      	push	{r3, lr}
                          Default_Handler();
 800051e:	f7ff ff3f 	bl	80003a0 <Default_Handler>

08000522 <COMP_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) COMP_IRQHandler() {
 8000522:	b508      	push	{r3, lr}
                          Default_Handler();
 8000524:	f7ff ff3c 	bl	80003a0 <Default_Handler>

08000528 <LPTIM1_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) LPTIM1_IRQHandler() {
 8000528:	b508      	push	{r3, lr}
                          Default_Handler();
 800052a:	f7ff ff39 	bl	80003a0 <Default_Handler>

0800052e <LPTIM2_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) LPTIM2_IRQHandler() {
 800052e:	b508      	push	{r3, lr}
                          Default_Handler();
 8000530:	f7ff ff36 	bl	80003a0 <Default_Handler>

08000534 <OTG_FS_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) OTG_FS_IRQHandler() {
 8000534:	b508      	push	{r3, lr}
                          Default_Handler();
 8000536:	f7ff ff33 	bl	80003a0 <Default_Handler>

0800053a <DMA2_Channel6_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) DMA2_Channel6_IRQHandler() {
 800053a:	b508      	push	{r3, lr}
                          Default_Handler();
 800053c:	f7ff ff30 	bl	80003a0 <Default_Handler>

08000540 <DMA2_Channel7_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) DMA2_Channel7_IRQHandler() {
 8000540:	b508      	push	{r3, lr}
                          Default_Handler();
 8000542:	f7ff ff2d 	bl	80003a0 <Default_Handler>

08000546 <LPUART1_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) LPUART1_IRQHandler() {
 8000546:	b508      	push	{r3, lr}
                          Default_Handler();
 8000548:	f7ff ff2a 	bl	80003a0 <Default_Handler>

0800054c <QUADSPI_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) QUADSPI_IRQHandler() {
 800054c:	b508      	push	{r3, lr}
                          Default_Handler();
 800054e:	f7ff ff27 	bl	80003a0 <Default_Handler>

08000552 <I2C3_EV_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) I2C3_EV_IRQHandler() {
 8000552:	b508      	push	{r3, lr}
                          Default_Handler();
 8000554:	f7ff ff24 	bl	80003a0 <Default_Handler>

08000558 <I2C3_ER_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) I2C3_ER_IRQHandler() {
 8000558:	b508      	push	{r3, lr}
                          Default_Handler();
 800055a:	f7ff ff21 	bl	80003a0 <Default_Handler>

0800055e <SAI1_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) SAI1_IRQHandler() {
 800055e:	b508      	push	{r3, lr}
                          Default_Handler();
 8000560:	f7ff ff1e 	bl	80003a0 <Default_Handler>

08000564 <SAI2_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) SAI2_IRQHandler() {
 8000564:	b508      	push	{r3, lr}
                          Default_Handler();
 8000566:	f7ff ff1b 	bl	80003a0 <Default_Handler>

0800056a <SWPMI1_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) SWPMI1_IRQHandler() {
 800056a:	b508      	push	{r3, lr}
                          Default_Handler();
 800056c:	f7ff ff18 	bl	80003a0 <Default_Handler>

08000570 <TSC_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) TSC_IRQHandler() {
 8000570:	b508      	push	{r3, lr}
                          Default_Handler();
 8000572:	f7ff ff15 	bl	80003a0 <Default_Handler>

08000576 <LCD_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) LCD_IRQHandler() {
 8000576:	b508      	push	{r3, lr}
                          Default_Handler();
 8000578:	f7ff ff12 	bl	80003a0 <Default_Handler>

0800057c <RNG_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) RNG_IRQHandler() {
 800057c:	b508      	push	{r3, lr}
                          Default_Handler();
 800057e:	f7ff ff0f 	bl	80003a0 <Default_Handler>

08000582 <FPU_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) FPU_IRQHandler() {
 8000582:	b508      	push	{r3, lr}
                          Default_Handler();
 8000584:	f7ff ff0c 	bl	80003a0 <Default_Handler>

Disassembly of section .text:

080005b0 <testTask>:
    dummyButtonHandler, dummyButtonHandler, dummyButtonHandler, dummyButtonHandler,
    dummyButtonHandler, dummyButtonHandler, dummyButtonHandler, buttonNoHandler,
    dummyButtonHandler
};

static void testTask(uint32_t parameters) {
 80005b0:	b508      	push	{r3, lr}
    displayAlarmTest();
 80005b2:	f001 fee9 	bl	8002388 <displayAlarmTest>
    if (firstStart) {
 80005b6:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <__bss_regions_array_end+0x28>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	b14b      	cbz	r3, 80005d0 <testTask+0x20>
        firstStart = 0;
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <__bss_regions_array_end+0x28>)
 80005be:	2200      	movs	r2, #0
 80005c0:	701a      	strb	r2, [r3, #0]
    } else {
        soundHiAlarm();
    }
    osTaskAdd(testTask, 0, 1000);
 80005c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005c6:	2100      	movs	r1, #0
 80005c8:	4804      	ldr	r0, [pc, #16]	; (80005dc <__bss_regions_array_end+0x2c>)
 80005ca:	f002 fc9b 	bl	8002f04 <osTaskAdd>
}
 80005ce:	bd08      	pop	{r3, pc}
        soundHiAlarm();
 80005d0:	f002 fa1a 	bl	8002a08 <soundHiAlarm>
 80005d4:	e7f5      	b.n	80005c2 <testTask+0x12>
 80005d6:	bf00      	nop
 80005d8:	200000e0 	.word	0x200000e0
 80005dc:	080005b1 	.word	0x080005b1

080005e0 <dummyButtonHandler>:
static void dummyButtonHandler() {
 80005e0:	b508      	push	{r3, lr}
    soundKeyBeep();
 80005e2:	f002 fa03 	bl	80029ec <soundKeyBeep>
}
 80005e6:	bd08      	pop	{r3, pc}

080005e8 <buttonNoHandler>:
static void buttonNoHandler(uint32_t pressType) {
 80005e8:	b508      	push	{r3, lr}
    soundKeyBeep();
 80005ea:	f002 f9ff 	bl	80029ec <soundKeyBeep>
    soundStopAlarm();
 80005ee:	f002 fa19 	bl	8002a24 <soundStopAlarm>
    soundSetLevel(3);
 80005f2:	2003      	movs	r0, #3
 80005f4:	f002 f9de 	bl	80029b4 <soundSetLevel>
    osTaskDelHandler(testTask);
 80005f8:	4802      	ldr	r0, [pc, #8]	; (8000604 <buttonNoHandler+0x1c>)
 80005fa:	f002 fcc7 	bl	8002f8c <osTaskDelHandler>
    showManualTestsScreen();
 80005fe:	f000 fdc3 	bl	8001188 <showManualTestsScreen>
}
 8000602:	bd08      	pop	{r3, pc}
 8000604:	080005b1 	.word	0x080005b1

08000608 <startAlarmTest>:

void startAlarmTest() {
 8000608:	b510      	push	{r4, lr}
    for (buttonName_t btn = 0; btn < Button_Last; btn++) {
 800060a:	2400      	movs	r4, #0
 800060c:	e007      	b.n	800061e <startAlarmTest+0x16>
        setButtonHandler(btn, handlers[btn]);
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <startAlarmTest+0x2c>)
 8000610:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8000614:	4620      	mov	r0, r4
 8000616:	f002 ff77 	bl	8003508 <setButtonHandler>
    for (buttonName_t btn = 0; btn < Button_Last; btn++) {
 800061a:	3401      	adds	r4, #1
 800061c:	b2e4      	uxtb	r4, r4
 800061e:	2c10      	cmp	r4, #16
 8000620:	d9f5      	bls.n	800060e <startAlarmTest+0x6>
    }

    firstStart = 1;
 8000622:	4b05      	ldr	r3, [pc, #20]	; (8000638 <startAlarmTest+0x30>)
 8000624:	2201      	movs	r2, #1
 8000626:	701a      	strb	r2, [r3, #0]
    osTaskAdd(testTask, 0, 200);
 8000628:	22c8      	movs	r2, #200	; 0xc8
 800062a:	2100      	movs	r1, #0
 800062c:	4803      	ldr	r0, [pc, #12]	; (800063c <startAlarmTest+0x34>)
 800062e:	f002 fc69 	bl	8002f04 <osTaskAdd>
}
 8000632:	bd10      	pop	{r4, pc}
 8000634:	08003fb8 	.word	0x08003fb8
 8000638:	200000e0 	.word	0x200000e0
 800063c:	080005b1 	.word	0x080005b1

08000640 <button6Handler>:
    Button_Power, Button_Last
};

static void button6Handler(uint32_t pressType) {

    if (buttonsTestOrder[testStage] == Button_6) {
 8000640:	4b04      	ldr	r3, [pc, #16]	; (8000654 <button6Handler+0x14>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	4a04      	ldr	r2, [pc, #16]	; (8000658 <button6Handler+0x18>)
 8000646:	5cd2      	ldrb	r2, [r2, r3]
 8000648:	b912      	cbnz	r2, 8000650 <button6Handler+0x10>
        testStage++;
 800064a:	3301      	adds	r3, #1
 800064c:	4a01      	ldr	r2, [pc, #4]	; (8000654 <button6Handler+0x14>)
 800064e:	7013      	strb	r3, [r2, #0]
    }
}
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	200000e1 	.word	0x200000e1
 8000658:	08003ffc 	.word	0x08003ffc

0800065c <button7Handler>:

static void button7Handler(uint32_t pressType) {
    if (buttonsTestOrder[testStage] == Button_7) {
 800065c:	4b05      	ldr	r3, [pc, #20]	; (8000674 <button7Handler+0x18>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	4a05      	ldr	r2, [pc, #20]	; (8000678 <button7Handler+0x1c>)
 8000662:	5cd2      	ldrb	r2, [r2, r3]
 8000664:	2a01      	cmp	r2, #1
 8000666:	d000      	beq.n	800066a <button7Handler+0xe>
        testStage++;
    }
}
 8000668:	4770      	bx	lr
        testStage++;
 800066a:	3301      	adds	r3, #1
 800066c:	4a01      	ldr	r2, [pc, #4]	; (8000674 <button7Handler+0x18>)
 800066e:	7013      	strb	r3, [r2, #0]
}
 8000670:	e7fa      	b.n	8000668 <button7Handler+0xc>
 8000672:	bf00      	nop
 8000674:	200000e1 	.word	0x200000e1
 8000678:	08003ffc 	.word	0x08003ffc

0800067c <button8Handler>:

static void button8Handler(uint32_t pressType) {
    if (buttonsTestOrder[testStage] == Button_8) {
 800067c:	4b05      	ldr	r3, [pc, #20]	; (8000694 <button8Handler+0x18>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	4a05      	ldr	r2, [pc, #20]	; (8000698 <button8Handler+0x1c>)
 8000682:	5cd2      	ldrb	r2, [r2, r3]
 8000684:	2a02      	cmp	r2, #2
 8000686:	d000      	beq.n	800068a <button8Handler+0xe>
        testStage++;
    }
}
 8000688:	4770      	bx	lr
        testStage++;
 800068a:	3301      	adds	r3, #1
 800068c:	4a01      	ldr	r2, [pc, #4]	; (8000694 <button8Handler+0x18>)
 800068e:	7013      	strb	r3, [r2, #0]
}
 8000690:	e7fa      	b.n	8000688 <button8Handler+0xc>
 8000692:	bf00      	nop
 8000694:	200000e1 	.word	0x200000e1
 8000698:	08003ffc 	.word	0x08003ffc

0800069c <button9Handler>:

static void button9Handler(uint32_t pressType) {
    if (buttonsTestOrder[testStage] == Button_9) {
 800069c:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <button9Handler+0x18>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	4a05      	ldr	r2, [pc, #20]	; (80006b8 <button9Handler+0x1c>)
 80006a2:	5cd2      	ldrb	r2, [r2, r3]
 80006a4:	2a03      	cmp	r2, #3
 80006a6:	d000      	beq.n	80006aa <button9Handler+0xe>
        testStage++;
    }
}
 80006a8:	4770      	bx	lr
        testStage++;
 80006aa:	3301      	adds	r3, #1
 80006ac:	4a01      	ldr	r2, [pc, #4]	; (80006b4 <button9Handler+0x18>)
 80006ae:	7013      	strb	r3, [r2, #0]
}
 80006b0:	e7fa      	b.n	80006a8 <button9Handler+0xc>
 80006b2:	bf00      	nop
 80006b4:	200000e1 	.word	0x200000e1
 80006b8:	08003ffc 	.word	0x08003ffc

080006bc <button0Handler>:

static void button0Handler(uint32_t pressType) {
    if (buttonsTestOrder[testStage] == Button_0) {
 80006bc:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <button0Handler+0x18>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	4a05      	ldr	r2, [pc, #20]	; (80006d8 <button0Handler+0x1c>)
 80006c2:	5cd2      	ldrb	r2, [r2, r3]
 80006c4:	2a04      	cmp	r2, #4
 80006c6:	d000      	beq.n	80006ca <button0Handler+0xe>
        testStage++;
    }
}
 80006c8:	4770      	bx	lr
        testStage++;
 80006ca:	3301      	adds	r3, #1
 80006cc:	4a01      	ldr	r2, [pc, #4]	; (80006d4 <button0Handler+0x18>)
 80006ce:	7013      	strb	r3, [r2, #0]
}
 80006d0:	e7fa      	b.n	80006c8 <button0Handler+0xc>
 80006d2:	bf00      	nop
 80006d4:	200000e1 	.word	0x200000e1
 80006d8:	08003ffc 	.word	0x08003ffc

080006dc <buttonInfoHandler>:

static void buttonInfoHandler(uint32_t pressType) {
    if (buttonsTestOrder[testStage] == Button_Info) {
 80006dc:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <buttonInfoHandler+0x18>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	4a05      	ldr	r2, [pc, #20]	; (80006f8 <buttonInfoHandler+0x1c>)
 80006e2:	5cd2      	ldrb	r2, [r2, r3]
 80006e4:	2a05      	cmp	r2, #5
 80006e6:	d000      	beq.n	80006ea <buttonInfoHandler+0xe>
        testStage++;
    }
}
 80006e8:	4770      	bx	lr
        testStage++;
 80006ea:	3301      	adds	r3, #1
 80006ec:	4a01      	ldr	r2, [pc, #4]	; (80006f4 <buttonInfoHandler+0x18>)
 80006ee:	7013      	strb	r3, [r2, #0]
}
 80006f0:	e7fa      	b.n	80006e8 <buttonInfoHandler+0xc>
 80006f2:	bf00      	nop
 80006f4:	200000e1 	.word	0x200000e1
 80006f8:	08003ffc 	.word	0x08003ffc

080006fc <buttonPrimeHandler>:

static void buttonPrimeHandler(uint32_t pressType) {
    if (buttonsTestOrder[testStage] == Button_Prime) {
 80006fc:	4b05      	ldr	r3, [pc, #20]	; (8000714 <buttonPrimeHandler+0x18>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	4a05      	ldr	r2, [pc, #20]	; (8000718 <buttonPrimeHandler+0x1c>)
 8000702:	5cd2      	ldrb	r2, [r2, r3]
 8000704:	2a06      	cmp	r2, #6
 8000706:	d000      	beq.n	800070a <buttonPrimeHandler+0xe>
        testStage++;
    }
}
 8000708:	4770      	bx	lr
        testStage++;
 800070a:	3301      	adds	r3, #1
 800070c:	4a01      	ldr	r2, [pc, #4]	; (8000714 <buttonPrimeHandler+0x18>)
 800070e:	7013      	strb	r3, [r2, #0]
}
 8000710:	e7fa      	b.n	8000708 <buttonPrimeHandler+0xc>
 8000712:	bf00      	nop
 8000714:	200000e1 	.word	0x200000e1
 8000718:	08003ffc 	.word	0x08003ffc

0800071c <buttonLockHandler>:

static void buttonLockHandler(uint32_t pressType) {
    if (buttonsTestOrder[testStage] == Button_Lock) {
 800071c:	4b05      	ldr	r3, [pc, #20]	; (8000734 <buttonLockHandler+0x18>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	4a05      	ldr	r2, [pc, #20]	; (8000738 <buttonLockHandler+0x1c>)
 8000722:	5cd2      	ldrb	r2, [r2, r3]
 8000724:	2a07      	cmp	r2, #7
 8000726:	d000      	beq.n	800072a <buttonLockHandler+0xe>
        testStage++;
    }
}
 8000728:	4770      	bx	lr
        testStage++;
 800072a:	3301      	adds	r3, #1
 800072c:	4a01      	ldr	r2, [pc, #4]	; (8000734 <buttonLockHandler+0x18>)
 800072e:	7013      	strb	r3, [r2, #0]
}
 8000730:	e7fa      	b.n	8000728 <buttonLockHandler+0xc>
 8000732:	bf00      	nop
 8000734:	200000e1 	.word	0x200000e1
 8000738:	08003ffc 	.word	0x08003ffc

0800073c <button1Handler>:

static void button1Handler(uint32_t pressType) {
    if (buttonsTestOrder[testStage] == Button_1) {
 800073c:	4b05      	ldr	r3, [pc, #20]	; (8000754 <button1Handler+0x18>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	4a05      	ldr	r2, [pc, #20]	; (8000758 <button1Handler+0x1c>)
 8000742:	5cd2      	ldrb	r2, [r2, r3]
 8000744:	2a08      	cmp	r2, #8
 8000746:	d000      	beq.n	800074a <button1Handler+0xe>
        testStage++;
    }
}
 8000748:	4770      	bx	lr
        testStage++;
 800074a:	3301      	adds	r3, #1
 800074c:	4a01      	ldr	r2, [pc, #4]	; (8000754 <button1Handler+0x18>)
 800074e:	7013      	strb	r3, [r2, #0]
}
 8000750:	e7fa      	b.n	8000748 <button1Handler+0xc>
 8000752:	bf00      	nop
 8000754:	200000e1 	.word	0x200000e1
 8000758:	08003ffc 	.word	0x08003ffc

0800075c <button2Handler>:

static void button2Handler(uint32_t pressType) {
    if (buttonsTestOrder[testStage] == Button_2) {
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <button2Handler+0x18>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	4a05      	ldr	r2, [pc, #20]	; (8000778 <button2Handler+0x1c>)
 8000762:	5cd2      	ldrb	r2, [r2, r3]
 8000764:	2a09      	cmp	r2, #9
 8000766:	d000      	beq.n	800076a <button2Handler+0xe>
        testStage++;
    }
}
 8000768:	4770      	bx	lr
        testStage++;
 800076a:	3301      	adds	r3, #1
 800076c:	4a01      	ldr	r2, [pc, #4]	; (8000774 <button2Handler+0x18>)
 800076e:	7013      	strb	r3, [r2, #0]
}
 8000770:	e7fa      	b.n	8000768 <button2Handler+0xc>
 8000772:	bf00      	nop
 8000774:	200000e1 	.word	0x200000e1
 8000778:	08003ffc 	.word	0x08003ffc

0800077c <button3Handler>:

static void button3Handler(uint32_t pressType) {
    if (buttonsTestOrder[testStage] == Button_3) {
 800077c:	4b05      	ldr	r3, [pc, #20]	; (8000794 <button3Handler+0x18>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	4a05      	ldr	r2, [pc, #20]	; (8000798 <button3Handler+0x1c>)
 8000782:	5cd2      	ldrb	r2, [r2, r3]
 8000784:	2a0a      	cmp	r2, #10
 8000786:	d000      	beq.n	800078a <button3Handler+0xe>
        testStage++;
    }
}
 8000788:	4770      	bx	lr
        testStage++;
 800078a:	3301      	adds	r3, #1
 800078c:	4a01      	ldr	r2, [pc, #4]	; (8000794 <button3Handler+0x18>)
 800078e:	7013      	strb	r3, [r2, #0]
}
 8000790:	e7fa      	b.n	8000788 <button3Handler+0xc>
 8000792:	bf00      	nop
 8000794:	200000e1 	.word	0x200000e1
 8000798:	08003ffc 	.word	0x08003ffc

0800079c <button4Handler>:

static void button4Handler(uint32_t pressType) {
    if (buttonsTestOrder[testStage] == Button_4) {
 800079c:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <button4Handler+0x18>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	4a05      	ldr	r2, [pc, #20]	; (80007b8 <button4Handler+0x1c>)
 80007a2:	5cd2      	ldrb	r2, [r2, r3]
 80007a4:	2a0b      	cmp	r2, #11
 80007a6:	d000      	beq.n	80007aa <button4Handler+0xe>
        testStage++;
    }
}
 80007a8:	4770      	bx	lr
        testStage++;
 80007aa:	3301      	adds	r3, #1
 80007ac:	4a01      	ldr	r2, [pc, #4]	; (80007b4 <button4Handler+0x18>)
 80007ae:	7013      	strb	r3, [r2, #0]
}
 80007b0:	e7fa      	b.n	80007a8 <button4Handler+0xc>
 80007b2:	bf00      	nop
 80007b4:	200000e1 	.word	0x200000e1
 80007b8:	08003ffc 	.word	0x08003ffc

080007bc <button5Handler>:

static void button5Handler(uint32_t pressType) {
    if (buttonsTestOrder[testStage] == Button_5) {
 80007bc:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <button5Handler+0x18>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	4a05      	ldr	r2, [pc, #20]	; (80007d8 <button5Handler+0x1c>)
 80007c2:	5cd2      	ldrb	r2, [r2, r3]
 80007c4:	2a0c      	cmp	r2, #12
 80007c6:	d000      	beq.n	80007ca <button5Handler+0xe>
        testStage++;
    }
}
 80007c8:	4770      	bx	lr
        testStage++;
 80007ca:	3301      	adds	r3, #1
 80007cc:	4a01      	ldr	r2, [pc, #4]	; (80007d4 <button5Handler+0x18>)
 80007ce:	7013      	strb	r3, [r2, #0]
}
 80007d0:	e7fa      	b.n	80007c8 <button5Handler+0xc>
 80007d2:	bf00      	nop
 80007d4:	200000e1 	.word	0x200000e1
 80007d8:	08003ffc 	.word	0x08003ffc

080007dc <buttonPointHandler>:

static void buttonPointHandler(uint32_t pressType) {
    if (buttonsTestOrder[testStage] == Button_Point) {
 80007dc:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <buttonPointHandler+0x18>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	4a05      	ldr	r2, [pc, #20]	; (80007f8 <buttonPointHandler+0x1c>)
 80007e2:	5cd2      	ldrb	r2, [r2, r3]
 80007e4:	2a0d      	cmp	r2, #13
 80007e6:	d000      	beq.n	80007ea <buttonPointHandler+0xe>
        testStage++;
    }
}
 80007e8:	4770      	bx	lr
        testStage++;
 80007ea:	3301      	adds	r3, #1
 80007ec:	4a01      	ldr	r2, [pc, #4]	; (80007f4 <buttonPointHandler+0x18>)
 80007ee:	7013      	strb	r3, [r2, #0]
}
 80007f0:	e7fa      	b.n	80007e8 <buttonPointHandler+0xc>
 80007f2:	bf00      	nop
 80007f4:	200000e1 	.word	0x200000e1
 80007f8:	08003ffc 	.word	0x08003ffc

080007fc <buttonNoHandler>:
        showManualTestsScreen();
    }
}

static void buttonNoHandler(uint32_t pressType) {
    if (buttonsTestOrder[testStage] == Button_No) {
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <buttonNoHandler+0x18>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	4a05      	ldr	r2, [pc, #20]	; (8000818 <buttonNoHandler+0x1c>)
 8000802:	5cd2      	ldrb	r2, [r2, r3]
 8000804:	2a0f      	cmp	r2, #15
 8000806:	d000      	beq.n	800080a <buttonNoHandler+0xe>
        testStage++;
    }
}
 8000808:	4770      	bx	lr
        testStage++;
 800080a:	3301      	adds	r3, #1
 800080c:	4a01      	ldr	r2, [pc, #4]	; (8000814 <buttonNoHandler+0x18>)
 800080e:	7013      	strb	r3, [r2, #0]
}
 8000810:	e7fa      	b.n	8000808 <buttonNoHandler+0xc>
 8000812:	bf00      	nop
 8000814:	200000e1 	.word	0x200000e1
 8000818:	08003ffc 	.word	0x08003ffc

0800081c <buttonPowerHandler>:

static void buttonPowerHandler(uint32_t pressType) {
    if (buttonsTestOrder[testStage] == Button_Power) {
 800081c:	4b05      	ldr	r3, [pc, #20]	; (8000834 <buttonPowerHandler+0x18>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	4a05      	ldr	r2, [pc, #20]	; (8000838 <buttonPowerHandler+0x1c>)
 8000822:	5cd2      	ldrb	r2, [r2, r3]
 8000824:	2a10      	cmp	r2, #16
 8000826:	d000      	beq.n	800082a <buttonPowerHandler+0xe>
        testStage++;
    }
}
 8000828:	4770      	bx	lr
        testStage++;
 800082a:	3301      	adds	r3, #1
 800082c:	4a01      	ldr	r2, [pc, #4]	; (8000834 <buttonPowerHandler+0x18>)
 800082e:	7013      	strb	r3, [r2, #0]
}
 8000830:	e7fa      	b.n	8000828 <buttonPowerHandler+0xc>
 8000832:	bf00      	nop
 8000834:	200000e1 	.word	0x200000e1
 8000838:	08003ffc 	.word	0x08003ffc

0800083c <testTask>:
    button1Handler, button2Handler, button3Handler, button4Handler,
    button5Handler, buttonPointHandler, buttonOkHandler, buttonNoHandler,
    buttonPowerHandler
};

static void testTask(uint32_t parameter) {
 800083c:	b510      	push	{r4, lr}
    display64(buttonsTestOrder[testStage]);
 800083e:	4c08      	ldr	r4, [pc, #32]	; (8000860 <testTask+0x24>)
 8000840:	7823      	ldrb	r3, [r4, #0]
 8000842:	4a08      	ldr	r2, [pc, #32]	; (8000864 <testTask+0x28>)
 8000844:	5cd0      	ldrb	r0, [r2, r3]
 8000846:	f001 fb33 	bl	8001eb0 <display64>
    if (testStage <= Button_Last) {
 800084a:	7823      	ldrb	r3, [r4, #0]
 800084c:	2b11      	cmp	r3, #17
 800084e:	d900      	bls.n	8000852 <testTask+0x16>
        osTaskAdd(testTask, 0, 200);
    }
}
 8000850:	bd10      	pop	{r4, pc}
        osTaskAdd(testTask, 0, 200);
 8000852:	22c8      	movs	r2, #200	; 0xc8
 8000854:	2100      	movs	r1, #0
 8000856:	4804      	ldr	r0, [pc, #16]	; (8000868 <testTask+0x2c>)
 8000858:	f002 fb54 	bl	8002f04 <osTaskAdd>
}
 800085c:	e7f8      	b.n	8000850 <testTask+0x14>
 800085e:	bf00      	nop
 8000860:	200000e1 	.word	0x200000e1
 8000864:	08003ffc 	.word	0x08003ffc
 8000868:	0800083d 	.word	0x0800083d

0800086c <buttonOkHandler>:
static void buttonOkHandler(uint32_t pressType) {
 800086c:	b508      	push	{r3, lr}
    if (buttonsTestOrder[testStage] == Button_Ok) {
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <buttonOkHandler+0x28>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	4a09      	ldr	r2, [pc, #36]	; (8000898 <buttonOkHandler+0x2c>)
 8000874:	5cd2      	ldrb	r2, [r2, r3]
 8000876:	2a0e      	cmp	r2, #14
 8000878:	d002      	beq.n	8000880 <buttonOkHandler+0x14>
    } else if (testStage == Button_Last) {
 800087a:	2b11      	cmp	r3, #17
 800087c:	d004      	beq.n	8000888 <buttonOkHandler+0x1c>
}
 800087e:	bd08      	pop	{r3, pc}
        testStage++;
 8000880:	3301      	adds	r3, #1
 8000882:	4a04      	ldr	r2, [pc, #16]	; (8000894 <buttonOkHandler+0x28>)
 8000884:	7013      	strb	r3, [r2, #0]
 8000886:	e7fa      	b.n	800087e <buttonOkHandler+0x12>
        osTaskDelHandler(testTask);
 8000888:	4804      	ldr	r0, [pc, #16]	; (800089c <buttonOkHandler+0x30>)
 800088a:	f002 fb7f 	bl	8002f8c <osTaskDelHandler>
        showManualTestsScreen();
 800088e:	f000 fc7b 	bl	8001188 <showManualTestsScreen>
}
 8000892:	e7f4      	b.n	800087e <buttonOkHandler+0x12>
 8000894:	200000e1 	.word	0x200000e1
 8000898:	08003ffc 	.word	0x08003ffc
 800089c:	0800083d 	.word	0x0800083d

080008a0 <startButtonsTest>:

void startButtonsTest() {
 80008a0:	b510      	push	{r4, lr}
    testStage = 0;
 80008a2:	2400      	movs	r4, #0
 80008a4:	4b09      	ldr	r3, [pc, #36]	; (80008cc <startButtonsTest+0x2c>)
 80008a6:	701c      	strb	r4, [r3, #0]

    for (buttonName_t btn = 0; btn < Button_Last; btn++) {
 80008a8:	e007      	b.n	80008ba <startButtonsTest+0x1a>
        setButtonHandler(btn, handlers[btn]);
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <startButtonsTest+0x30>)
 80008ac:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 80008b0:	4620      	mov	r0, r4
 80008b2:	f002 fe29 	bl	8003508 <setButtonHandler>
    for (buttonName_t btn = 0; btn < Button_Last; btn++) {
 80008b6:	3401      	adds	r4, #1
 80008b8:	b2e4      	uxtb	r4, r4
 80008ba:	2c10      	cmp	r4, #16
 80008bc:	d9f5      	bls.n	80008aa <startButtonsTest+0xa>
    }
    osTaskAdd(testTask, 0, 200);
 80008be:	22c8      	movs	r2, #200	; 0xc8
 80008c0:	2100      	movs	r1, #0
 80008c2:	4804      	ldr	r0, [pc, #16]	; (80008d4 <startButtonsTest+0x34>)
 80008c4:	f002 fb1e 	bl	8002f04 <osTaskAdd>
}
 80008c8:	bd10      	pop	{r4, pc}
 80008ca:	bf00      	nop
 80008cc:	200000e1 	.word	0x200000e1
 80008d0:	08004010 	.word	0x08004010
 80008d4:	0800083d 	.word	0x0800083d

080008d8 <testTask>:
    dummyButtonHandler,         //Button_Ok
    buttonNoHandler,            //Button_No
    dummyButtonHandler          //Button_Power
};

static void testTask(uint32_t parameters) {
 80008d8:	b508      	push	{r3, lr}
    testStep = (testStep + 1) % 3;
 80008da:	4912      	ldr	r1, [pc, #72]	; (8000924 <testTask+0x4c>)
 80008dc:	680a      	ldr	r2, [r1, #0]
 80008de:	3201      	adds	r2, #1
 80008e0:	4b11      	ldr	r3, [pc, #68]	; (8000928 <testTask+0x50>)
 80008e2:	fba3 0302 	umull	r0, r3, r3, r2
 80008e6:	085b      	lsrs	r3, r3, #1
 80008e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80008ec:	1ad3      	subs	r3, r2, r3
 80008ee:	600b      	str	r3, [r1, #0]

    switch (testStep) {
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d00e      	beq.n	8000912 <testTask+0x3a>
 80008f4:	b143      	cbz	r3, 8000908 <testTask+0x30>
 80008f6:	2b02      	cmp	r3, #2
 80008f8:	d010      	beq.n	800091c <testTask+0x44>
        break;
    case 2:
        colorfill(color_lightblue);
        break;
    }
    osTaskAdd(testTask, 0, 1000);
 80008fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008fe:	2100      	movs	r1, #0
 8000900:	480a      	ldr	r0, [pc, #40]	; (800092c <testTask+0x54>)
 8000902:	f002 faff 	bl	8002f04 <osTaskAdd>
}
 8000906:	bd08      	pop	{r3, pc}
        colorfill(color_lightred);
 8000908:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800090c:	f001 fc0a 	bl	8002124 <colorfill>
        break;
 8000910:	e7f3      	b.n	80008fa <testTask+0x22>
        colorfill(color_lightgreen);
 8000912:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8000916:	f001 fc05 	bl	8002124 <colorfill>
        break;
 800091a:	e7ee      	b.n	80008fa <testTask+0x22>
        colorfill(color_lightblue);
 800091c:	201f      	movs	r0, #31
 800091e:	f001 fc01 	bl	8002124 <colorfill>
        break;
 8000922:	e7ea      	b.n	80008fa <testTask+0x22>
 8000924:	200000e4 	.word	0x200000e4
 8000928:	aaaaaaab 	.word	0xaaaaaaab
 800092c:	080008d9 	.word	0x080008d9

08000930 <dummyButtonHandler>:
static void dummyButtonHandler() {
 8000930:	b508      	push	{r3, lr}
    soundKeyBeep();
 8000932:	f002 f85b 	bl	80029ec <soundKeyBeep>
}
 8000936:	bd08      	pop	{r3, pc}

08000938 <buttonNoHandler>:
static void buttonNoHandler(uint32_t pressType) {
 8000938:	b508      	push	{r3, lr}
    soundKeyBeep();
 800093a:	f002 f857 	bl	80029ec <soundKeyBeep>
    osTaskDelHandler(testTask);
 800093e:	4803      	ldr	r0, [pc, #12]	; (800094c <buttonNoHandler+0x14>)
 8000940:	f002 fb24 	bl	8002f8c <osTaskDelHandler>
    showManualTestsScreen();
 8000944:	f000 fc20 	bl	8001188 <showManualTestsScreen>
}
 8000948:	bd08      	pop	{r3, pc}
 800094a:	bf00      	nop
 800094c:	080008d9 	.word	0x080008d9

08000950 <startDisplayTest>:

void startDisplayTest() {
 8000950:	b510      	push	{r4, lr}
    testStep = 0;
 8000952:	2400      	movs	r4, #0
 8000954:	4b09      	ldr	r3, [pc, #36]	; (800097c <startDisplayTest+0x2c>)
 8000956:	601c      	str	r4, [r3, #0]
    for (buttonName_t btn = 0; btn < Button_Last; btn++) {
 8000958:	e007      	b.n	800096a <startDisplayTest+0x1a>
        setButtonHandler(btn, handlers[btn]);
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <startDisplayTest+0x30>)
 800095c:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8000960:	4620      	mov	r0, r4
 8000962:	f002 fdd1 	bl	8003508 <setButtonHandler>
    for (buttonName_t btn = 0; btn < Button_Last; btn++) {
 8000966:	3401      	adds	r4, #1
 8000968:	b2e4      	uxtb	r4, r4
 800096a:	2c10      	cmp	r4, #16
 800096c:	d9f5      	bls.n	800095a <startDisplayTest+0xa>
    }

    osTaskAdd(testTask, 0, 200);
 800096e:	22c8      	movs	r2, #200	; 0xc8
 8000970:	2100      	movs	r1, #0
 8000972:	4804      	ldr	r0, [pc, #16]	; (8000984 <startDisplayTest+0x34>)
 8000974:	f002 fac6 	bl	8002f04 <osTaskAdd>
}
 8000978:	bd10      	pop	{r4, pc}
 800097a:	bf00      	nop
 800097c:	200000e4 	.word	0x200000e4
 8000980:	08004054 	.word	0x08004054
 8000984:	080008d9 	.word	0x080008d9

08000988 <testTask>:
    dummyButtonHandler, dummyButtonHandler, dummyButtonHandler, dummyButtonHandler,
    dummyButtonHandler, dummyButtonHandler, buttonOkHandler, dummyButtonHandler,
    dummyButtonHandler
};

static void testTask(uint32_t parameters) {
 8000988:	b508      	push	{r3, lr}
    display66();
 800098a:	f001 fa01 	bl	8001d90 <display66>
    osTaskAdd(testTask, 0, 200);
 800098e:	22c8      	movs	r2, #200	; 0xc8
 8000990:	2100      	movs	r1, #0
 8000992:	4802      	ldr	r0, [pc, #8]	; (800099c <testTask+0x14>)
 8000994:	f002 fab6 	bl	8002f04 <osTaskAdd>
}
 8000998:	bd08      	pop	{r3, pc}
 800099a:	bf00      	nop
 800099c:	08000989 	.word	0x08000989

080009a0 <dummyButtonHandler>:
static void dummyButtonHandler() {
 80009a0:	b508      	push	{r3, lr}
    soundKeyBeep();
 80009a2:	f002 f823 	bl	80029ec <soundKeyBeep>
}
 80009a6:	bd08      	pop	{r3, pc}

080009a8 <buttonOkHandler>:
static void buttonOkHandler(uint32_t pressType) {
 80009a8:	b508      	push	{r3, lr}
    soundKeyBeep();
 80009aa:	f002 f81f 	bl	80029ec <soundKeyBeep>
    osTaskDelHandler(testTask);
 80009ae:	4803      	ldr	r0, [pc, #12]	; (80009bc <buttonOkHandler+0x14>)
 80009b0:	f002 faec 	bl	8002f8c <osTaskDelHandler>
    showManualTestsScreen();
 80009b4:	f000 fbe8 	bl	8001188 <showManualTestsScreen>
}
 80009b8:	bd08      	pop	{r3, pc}
 80009ba:	bf00      	nop
 80009bc:	08000989 	.word	0x08000989

080009c0 <startDoorTest>:

void startDoorTest() {
 80009c0:	b510      	push	{r4, lr}
    for (buttonName_t btn = 0; btn < Button_Last; btn++) {
 80009c2:	2400      	movs	r4, #0
 80009c4:	e007      	b.n	80009d6 <startDoorTest+0x16>
        setButtonHandler(btn, handlers[btn]);
 80009c6:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <startDoorTest+0x28>)
 80009c8:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 80009cc:	4620      	mov	r0, r4
 80009ce:	f002 fd9b 	bl	8003508 <setButtonHandler>
    for (buttonName_t btn = 0; btn < Button_Last; btn++) {
 80009d2:	3401      	adds	r4, #1
 80009d4:	b2e4      	uxtb	r4, r4
 80009d6:	2c10      	cmp	r4, #16
 80009d8:	d9f5      	bls.n	80009c6 <startDoorTest+0x6>
    }

    osTaskAdd(testTask, 0, 200);
 80009da:	22c8      	movs	r2, #200	; 0xc8
 80009dc:	2100      	movs	r1, #0
 80009de:	4803      	ldr	r0, [pc, #12]	; (80009ec <startDoorTest+0x2c>)
 80009e0:	f002 fa90 	bl	8002f04 <osTaskAdd>
}
 80009e4:	bd10      	pop	{r4, pc}
 80009e6:	bf00      	nop
 80009e8:	08004098 	.word	0x08004098
 80009ec:	08000989 	.word	0x08000989

080009f0 <drawGameBorder>:
}
/*
 * Game drawing functions for drawing the game border and the tetrominos
 */
void drawGameBorder(void)
{
 80009f0:	b510      	push	{r4, lr}
	for (int x = X_MIN; x < X_MAX; x++) {
 80009f2:	247d      	movs	r4, #125	; 0x7d
 80009f4:	e00c      	b.n	8000a10 <drawGameBorder+0x20>
		pixel(x, Y_MIN, color_white);
 80009f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009fa:	210a      	movs	r1, #10
 80009fc:	4620      	mov	r0, r4
 80009fe:	f001 fbae 	bl	800215e <pixel>
		pixel(x, Y_MAX, color_white);
 8000a02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a06:	21d2      	movs	r1, #210	; 0xd2
 8000a08:	4620      	mov	r0, r4
 8000a0a:	f001 fba8 	bl	800215e <pixel>
	for (int x = X_MIN; x < X_MAX; x++) {
 8000a0e:	3401      	adds	r4, #1
 8000a10:	2ce0      	cmp	r4, #224	; 0xe0
 8000a12:	ddf0      	ble.n	80009f6 <drawGameBorder+0x6>
	}
	for (int y = Y_MIN; y <= Y_MAX; y++) {
 8000a14:	240a      	movs	r4, #10
 8000a16:	e00c      	b.n	8000a32 <drawGameBorder+0x42>
		pixel(X_MIN, y, color_white);
 8000a18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a1c:	4621      	mov	r1, r4
 8000a1e:	207d      	movs	r0, #125	; 0x7d
 8000a20:	f001 fb9d 	bl	800215e <pixel>
		pixel(X_MAX, y, color_white);
 8000a24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a28:	4621      	mov	r1, r4
 8000a2a:	20e1      	movs	r0, #225	; 0xe1
 8000a2c:	f001 fb97 	bl	800215e <pixel>
	for (int y = Y_MIN; y <= Y_MAX; y++) {
 8000a30:	3401      	adds	r4, #1
 8000a32:	2cd2      	cmp	r4, #210	; 0xd2
 8000a34:	ddf0      	ble.n	8000a18 <drawGameBorder+0x28>
	}
}
 8000a36:	bd10      	pop	{r4, pc}

08000a38 <gameRestart>:
void gameRestart() {
 8000a38:	b538      	push	{r3, r4, r5, lr}
    score = 0;
 8000a3a:	2400      	movs	r4, #0
 8000a3c:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <gameRestart+0x4c>)
 8000a3e:	601c      	str	r4, [r3, #0]
    firstTet = true;
 8000a40:	2501      	movs	r5, #1
 8000a42:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <gameRestart+0x50>)
 8000a44:	701d      	strb	r5, [r3, #0]
    gameDisplay();
 8000a46:	f001 fc41 	bl	80022cc <gameDisplay>
    showScores(0);
 8000a4a:	4620      	mov	r0, r4
 8000a4c:	f001 fbf0 	bl	8002230 <showScores>
    drawGameBorder();
 8000a50:	f7ff ffce 	bl	80009f0 <drawGameBorder>
    srand(SysTick->VAL);
 8000a54:	4b0d      	ldr	r3, [pc, #52]	; (8000a8c <gameRestart+0x54>)
 8000a56:	6898      	ldr	r0, [r3, #8]
 8000a58:	f002 fda0 	bl	800359c <srand>
    tick = 1;
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <gameRestart+0x58>)
 8000a5e:	601d      	str	r5, [r3, #0]
    for (i = 0; i < 20; i++) {
 8000a60:	4620      	mov	r0, r4
 8000a62:	e00a      	b.n	8000a7a <gameRestart+0x42>
            board[i][j] = 0;
 8000a64:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8000a68:	0051      	lsls	r1, r2, #1
 8000a6a:	4a0a      	ldr	r2, [pc, #40]	; (8000a94 <gameRestart+0x5c>)
 8000a6c:	440a      	add	r2, r1
 8000a6e:	2100      	movs	r1, #0
 8000a70:	54d1      	strb	r1, [r2, r3]
        for (j = 0; j < 10; j++) {
 8000a72:	3301      	adds	r3, #1
 8000a74:	2b09      	cmp	r3, #9
 8000a76:	ddf5      	ble.n	8000a64 <gameRestart+0x2c>
    for (i = 0; i < 20; i++) {
 8000a78:	3001      	adds	r0, #1
 8000a7a:	2813      	cmp	r0, #19
 8000a7c:	dc01      	bgt.n	8000a82 <gameRestart+0x4a>
        for (j = 0; j < 10; j++) {
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e7f8      	b.n	8000a74 <gameRestart+0x3c>
}
 8000a82:	bd38      	pop	{r3, r4, r5, pc}
 8000a84:	200001b0 	.word	0x200001b0
 8000a88:	20000570 	.word	0x20000570
 8000a8c:	e000e010 	.word	0xe000e010
 8000a90:	20000004 	.word	0x20000004
 8000a94:	200000e8 	.word	0x200000e8

08000a98 <drawSquare>:

void drawSquare(gameLoc *loc, uint16_t colour)
{
 8000a98:	b510      	push	{r4, lr}
	unsigned char y = Y_MIN + loc->row * PIXEL_SCALE_FACTOR;
 8000a9a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000aa4:	005c      	lsls	r4, r3, #1
	unsigned char x = X_MIN + loc->column * PIXEL_SCALE_FACTOR;
 8000aa6:	7803      	ldrb	r3, [r0, #0]
 8000aa8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000aac:	0058      	lsls	r0, r3, #1
 8000aae:	b2c0      	uxtb	r0, r0
 8000ab0:	307d      	adds	r0, #125	; 0x7d
	block(x, y, colour);
 8000ab2:	460a      	mov	r2, r1
 8000ab4:	f004 01fe 	and.w	r1, r4, #254	; 0xfe
 8000ab8:	b2c0      	uxtb	r0, r0
 8000aba:	f001 fb62 	bl	8002182 <block>
}
 8000abe:	bd10      	pop	{r4, pc}

08000ac0 <drawNextTet>:

void drawNextTet(uint16_t colour)
{
 8000ac0:	b530      	push	{r4, r5, lr}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	4605      	mov	r5, r0
    for (char i = 0; i < 4; i++) {
 8000ac6:	2400      	movs	r4, #0
 8000ac8:	e018      	b.n	8000afc <drawNextTet+0x3c>
        gameLoc offset = tetrominos[nextTet.type][nextTet.orientation][i];
 8000aca:	4a0e      	ldr	r2, [pc, #56]	; (8000b04 <drawNextTet+0x44>)
 8000acc:	7811      	ldrb	r1, [r2, #0]
 8000ace:	f992 3001 	ldrsb.w	r3, [r2, #1]
 8000ad2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8000ad6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8000ada:	4a0b      	ldr	r2, [pc, #44]	; (8000b08 <drawNextTet+0x48>)
 8000adc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
        gameLoc draw;
        draw.column = COL_MAX + 2 + offset.column;
 8000ae0:	b2da      	uxtb	r2, r3
 8000ae2:	320c      	adds	r2, #12
 8000ae4:	f88d 2004 	strb.w	r2, [sp, #4]
        draw.row = ROW_MAX / 2 + 2 + offset.row;
 8000ae8:	0a1b      	lsrs	r3, r3, #8
 8000aea:	330c      	adds	r3, #12
 8000aec:	f88d 3005 	strb.w	r3, [sp, #5]
        drawSquare(&draw, colour);
 8000af0:	4629      	mov	r1, r5
 8000af2:	a801      	add	r0, sp, #4
 8000af4:	f7ff ffd0 	bl	8000a98 <drawSquare>
    for (char i = 0; i < 4; i++) {
 8000af8:	3401      	adds	r4, #1
 8000afa:	b264      	sxtb	r4, r4
 8000afc:	2c03      	cmp	r4, #3
 8000afe:	dde4      	ble.n	8000aca <drawNextTet+0xa>
    }
}
 8000b00:	b003      	add	sp, #12
 8000b02:	bd30      	pop	{r4, r5, pc}
 8000b04:	20000574 	.word	0x20000574
 8000b08:	080040e0 	.word	0x080040e0

08000b0c <drawTet>:

void drawTet(tet *t, uint16_t colour)
{
 8000b0c:	b570      	push	{r4, r5, r6, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	4605      	mov	r5, r0
 8000b12:	460e      	mov	r6, r1
	for (char i = 0; i < 4; i++) {
 8000b14:	2400      	movs	r4, #0
 8000b16:	e019      	b.n	8000b4c <drawTet+0x40>
		gameLoc offset = tetrominos[t->type][t->orientation][i];
 8000b18:	782a      	ldrb	r2, [r5, #0]
 8000b1a:	f995 3001 	ldrsb.w	r3, [r5, #1]
 8000b1e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000b22:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8000b26:	4a0b      	ldr	r2, [pc, #44]	; (8000b54 <drawTet+0x48>)
 8000b28:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
		gameLoc draw;
		draw.column = t->origin.column + offset.column;
 8000b2c:	78aa      	ldrb	r2, [r5, #2]
 8000b2e:	fa52 f281 	uxtab	r2, r2, r1
 8000b32:	f88d 2004 	strb.w	r2, [sp, #4]
		draw.row = t->origin.row + offset.row;
 8000b36:	78eb      	ldrb	r3, [r5, #3]
 8000b38:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8000b3c:	f88d 3005 	strb.w	r3, [sp, #5]
		drawSquare(&draw, colour);
 8000b40:	4631      	mov	r1, r6
 8000b42:	a801      	add	r0, sp, #4
 8000b44:	f7ff ffa8 	bl	8000a98 <drawSquare>
	for (char i = 0; i < 4; i++) {
 8000b48:	3401      	adds	r4, #1
 8000b4a:	b264      	sxtb	r4, r4
 8000b4c:	2c03      	cmp	r4, #3
 8000b4e:	dde3      	ble.n	8000b18 <drawTet+0xc>
	}
}
 8000b50:	b002      	add	sp, #8
 8000b52:	bd70      	pop	{r4, r5, r6, pc}
 8000b54:	080040e0 	.word	0x080040e0

08000b58 <newTet>:
		t->origin.row++;
	drawTet(t, color_white);
}

void newTet(gameLoc origin, char orientation, SHAPE type, tet *t)
{
 8000b58:	b410      	push	{r4}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	ac02      	add	r4, sp, #8
 8000b5e:	f824 0d04 	strh.w	r0, [r4, #-4]!
	t->type = type;
 8000b62:	701a      	strb	r2, [r3, #0]
	t->origin = origin;
 8000b64:	8822      	ldrh	r2, [r4, #0]
 8000b66:	805a      	strh	r2, [r3, #2]
	t->orientation = orientation;
 8000b68:	7059      	strb	r1, [r3, #1]
}
 8000b6a:	b003      	add	sp, #12
 8000b6c:	bc10      	pop	{r4}
 8000b6e:	4770      	bx	lr

08000b70 <downCollision>:
 * Boundary and collision checking code
 */

char downCollision(tet *t)
{
	for (char i = 0; i < 4; i++) {
 8000b70:	2200      	movs	r2, #0
 8000b72:	2a03      	cmp	r2, #3
 8000b74:	dc2b      	bgt.n	8000bce <downCollision+0x5e>
{
 8000b76:	b430      	push	{r4, r5}
 8000b78:	b082      	sub	sp, #8
		gameLoc offset = tetrominos[t->type][t->orientation][i];
 8000b7a:	7801      	ldrb	r1, [r0, #0]
 8000b7c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8000b80:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8000b84:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000b88:	4912      	ldr	r1, [pc, #72]	; (8000bd4 <downCollision+0x64>)
 8000b8a:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
		gameLoc origin = t->origin;
 8000b8e:	8843      	ldrh	r3, [r0, #2]
 8000b90:	f8ad 3004 	strh.w	r3, [sp, #4]
		if (board[origin.row + offset.row + 1][origin.column + offset.column]) { //Checking against other blocks
 8000b94:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 8000b98:	f341 2407 	sbfx	r4, r1, #8, #8
 8000b9c:	4423      	add	r3, r4
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	f99d 4004 	ldrsb.w	r4, [sp, #4]
 8000ba4:	fa44 f181 	sxtab	r1, r4, r1
 8000ba8:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 8000bac:	4c0a      	ldr	r4, [pc, #40]	; (8000bd8 <downCollision+0x68>)
 8000bae:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8000bb2:	5661      	ldrsb	r1, [r4, r1]
 8000bb4:	b949      	cbnz	r1, 8000bca <downCollision+0x5a>
			return true;
		}
		if (origin.row + offset.row + 1 >= ROW_MAX) { // Checking against game boundaries
 8000bb6:	2b13      	cmp	r3, #19
 8000bb8:	dc07      	bgt.n	8000bca <downCollision+0x5a>
	for (char i = 0; i < 4; i++) {
 8000bba:	3201      	adds	r2, #1
 8000bbc:	b252      	sxtb	r2, r2
 8000bbe:	2a03      	cmp	r2, #3
 8000bc0:	dddb      	ble.n	8000b7a <downCollision+0xa>
			return true;
		}
	}
	return false;
 8000bc2:	2000      	movs	r0, #0
}
 8000bc4:	b002      	add	sp, #8
 8000bc6:	bc30      	pop	{r4, r5}
 8000bc8:	4770      	bx	lr
			return true;
 8000bca:	2001      	movs	r0, #1
 8000bcc:	e7fa      	b.n	8000bc4 <downCollision+0x54>
	return false;
 8000bce:	2000      	movs	r0, #0
}
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	080040e0 	.word	0x080040e0
 8000bd8:	200000e8 	.word	0x200000e8

08000bdc <mvDown>:
{
 8000bdc:	b510      	push	{r4, lr}
 8000bde:	4604      	mov	r4, r0
	drawTet(t, color_defback);
 8000be0:	2100      	movs	r1, #0
 8000be2:	f7ff ff93 	bl	8000b0c <drawTet>
	if (!downCollision(t))
 8000be6:	4620      	mov	r0, r4
 8000be8:	f7ff ffc2 	bl	8000b70 <downCollision>
 8000bec:	b918      	cbnz	r0, 8000bf6 <mvDown+0x1a>
		t->origin.row++;
 8000bee:	f994 3003 	ldrsb.w	r3, [r4, #3]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	70e3      	strb	r3, [r4, #3]
	drawTet(t, color_white);
 8000bf6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000bfa:	4620      	mov	r0, r4
 8000bfc:	f7ff ff86 	bl	8000b0c <drawTet>
}
 8000c00:	bd10      	pop	{r4, pc}
	...

08000c04 <gameMoveDown>:
void gameMoveDown(void) {
 8000c04:	b508      	push	{r3, lr}
    mvDown(&currentTet);
 8000c06:	4802      	ldr	r0, [pc, #8]	; (8000c10 <gameMoveDown+0xc>)
 8000c08:	f7ff ffe8 	bl	8000bdc <mvDown>
}
 8000c0c:	bd08      	pop	{r3, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000578 	.word	0x20000578

08000c14 <gameTick>:
void gameTick() {
 8000c14:	b510      	push	{r4, lr}
 8000c16:	b082      	sub	sp, #8
    mvDown(&currentTet);
 8000c18:	4c20      	ldr	r4, [pc, #128]	; (8000c9c <gameTick+0x88>)
 8000c1a:	4620      	mov	r0, r4
 8000c1c:	f7ff ffde 	bl	8000bdc <mvDown>
    if (downCollision(&currentTet)) {
 8000c20:	4620      	mov	r0, r4
 8000c22:	f7ff ffa5 	bl	8000b70 <downCollision>
 8000c26:	b3a8      	cbz	r0, 8000c94 <gameTick+0x80>
        for (int i = 0; i < 4; i++) {
 8000c28:	2200      	movs	r2, #0
 8000c2a:	e029      	b.n	8000c80 <gameTick+0x6c>
            offset.column = tetrominos[currentTet.type][currentTet.orientation][i].column;
 8000c2c:	481b      	ldr	r0, [pc, #108]	; (8000c9c <gameTick+0x88>)
 8000c2e:	7804      	ldrb	r4, [r0, #0]
 8000c30:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8000c34:	491a      	ldr	r1, [pc, #104]	; (8000ca0 <gameTick+0x8c>)
 8000c36:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8000c3a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000c3e:	f911 4013 	ldrsb.w	r4, [r1, r3, lsl #1]
 8000c42:	f88d 4000 	strb.w	r4, [sp]
            offset.row = tetrominos[currentTet.type][currentTet.orientation][i].row;
 8000c46:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8000c4a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000c4e:	f88d 3001 	strb.w	r3, [sp, #1]
            gameLoc origin = currentTet.origin;
 8000c52:	8843      	ldrh	r3, [r0, #2]
 8000c54:	f8ad 3004 	strh.w	r3, [sp, #4]
            board[origin.row + offset.row][origin.column + offset.column] = true;
 8000c58:	f99d 1005 	ldrsb.w	r1, [sp, #5]
 8000c5c:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8000c60:	fa41 f383 	sxtab	r3, r1, r3
 8000c64:	f99d 0004 	ldrsb.w	r0, [sp, #4]
 8000c68:	f89d 1000 	ldrb.w	r1, [sp]
 8000c6c:	fa40 f181 	sxtab	r1, r0, r1
 8000c70:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000c74:	0058      	lsls	r0, r3, #1
 8000c76:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <gameTick+0x90>)
 8000c78:	4403      	add	r3, r0
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	5458      	strb	r0, [r3, r1]
        for (int i = 0; i < 4; i++) {
 8000c7e:	4402      	add	r2, r0
 8000c80:	2a03      	cmp	r2, #3
 8000c82:	ddd3      	ble.n	8000c2c <gameTick+0x18>
        if (tick == -1)
 8000c84:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <gameTick+0x94>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c8c:	d004      	beq.n	8000c98 <gameTick+0x84>
        tick = 1;
 8000c8e:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <gameTick+0x94>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	601a      	str	r2, [r3, #0]
}
 8000c94:	b002      	add	sp, #8
 8000c96:	bd10      	pop	{r4, pc}
 8000c98:	e7fe      	b.n	8000c98 <gameTick+0x84>
 8000c9a:	bf00      	nop
 8000c9c:	20000578 	.word	0x20000578
 8000ca0:	080040e0 	.word	0x080040e0
 8000ca4:	200000e8 	.word	0x200000e8
 8000ca8:	20000004 	.word	0x20000004

08000cac <leftCollision>:

char leftCollision(tet *t)
{
	for (char i = 0; i < 4; i++) {
 8000cac:	2100      	movs	r1, #0
 8000cae:	2903      	cmp	r1, #3
 8000cb0:	dc2b      	bgt.n	8000d0a <leftCollision+0x5e>
{
 8000cb2:	b410      	push	{r4}
 8000cb4:	b083      	sub	sp, #12
		gameLoc offset = tetrominos[t->type][t->orientation][i];
 8000cb6:	7802      	ldrb	r2, [r0, #0]
 8000cb8:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8000cbc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000cc0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8000cc4:	4a12      	ldr	r2, [pc, #72]	; (8000d10 <leftCollision+0x64>)
 8000cc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
		gameLoc origin = t->origin;
 8000cca:	8842      	ldrh	r2, [r0, #2]
 8000ccc:	f8ad 2004 	strh.w	r2, [sp, #4]
		if (board[origin.row + offset.row][origin.column + offset.column - 1]) //Checking against other blocks
 8000cd0:	f99d 2005 	ldrsb.w	r2, [sp, #5]
 8000cd4:	f343 2407 	sbfx	r4, r3, #8, #8
 8000cd8:	4422      	add	r2, r4
 8000cda:	f99d 4004 	ldrsb.w	r4, [sp, #4]
 8000cde:	fa44 f383 	sxtab	r3, r4, r3
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000ce8:	4c0a      	ldr	r4, [pc, #40]	; (8000d14 <leftCollision+0x68>)
 8000cea:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8000cee:	56d2      	ldrsb	r2, [r2, r3]
 8000cf0:	b94a      	cbnz	r2, 8000d06 <leftCollision+0x5a>
			return true;
		if (origin.column + offset.column - 1 < COL_MIN) // Checking against game boundaries
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	db07      	blt.n	8000d06 <leftCollision+0x5a>
	for (char i = 0; i < 4; i++) {
 8000cf6:	3101      	adds	r1, #1
 8000cf8:	b249      	sxtb	r1, r1
 8000cfa:	2903      	cmp	r1, #3
 8000cfc:	dddb      	ble.n	8000cb6 <leftCollision+0xa>
			return true;
	}
	return false;
 8000cfe:	2000      	movs	r0, #0
}
 8000d00:	b003      	add	sp, #12
 8000d02:	bc10      	pop	{r4}
 8000d04:	4770      	bx	lr
			return true;
 8000d06:	2001      	movs	r0, #1
 8000d08:	e7fa      	b.n	8000d00 <leftCollision+0x54>
	return false;
 8000d0a:	2000      	movs	r0, #0
}
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	080040e0 	.word	0x080040e0
 8000d14:	200000e8 	.word	0x200000e8

08000d18 <mvLeft>:
{
 8000d18:	b510      	push	{r4, lr}
 8000d1a:	4604      	mov	r4, r0
	drawTet(t, color_defback);
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	f7ff fef5 	bl	8000b0c <drawTet>
	if (!leftCollision(t))
 8000d22:	4620      	mov	r0, r4
 8000d24:	f7ff ffc2 	bl	8000cac <leftCollision>
 8000d28:	b918      	cbnz	r0, 8000d32 <mvLeft+0x1a>
		t->origin.column--;
 8000d2a:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	70a3      	strb	r3, [r4, #2]
	drawTet(t, color_white);
 8000d32:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000d36:	4620      	mov	r0, r4
 8000d38:	f7ff fee8 	bl	8000b0c <drawTet>
}
 8000d3c:	bd10      	pop	{r4, pc}
	...

08000d40 <gameMoveLeft>:
void gameMoveLeft(void) {
 8000d40:	b508      	push	{r3, lr}
    mvLeft(&currentTet);
 8000d42:	4802      	ldr	r0, [pc, #8]	; (8000d4c <gameMoveLeft+0xc>)
 8000d44:	f7ff ffe8 	bl	8000d18 <mvLeft>
}
 8000d48:	bd08      	pop	{r3, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000578 	.word	0x20000578

08000d50 <rightCollision>:

char rightCollision(tet *t)
{
	for (char i = 0; i < 4; i++) {
 8000d50:	2100      	movs	r1, #0
 8000d52:	2903      	cmp	r1, #3
 8000d54:	dc2b      	bgt.n	8000dae <rightCollision+0x5e>
{
 8000d56:	b410      	push	{r4}
 8000d58:	b083      	sub	sp, #12
		gameLoc offset = tetrominos[t->type][t->orientation][i];
 8000d5a:	7802      	ldrb	r2, [r0, #0]
 8000d5c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8000d60:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000d64:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8000d68:	4a12      	ldr	r2, [pc, #72]	; (8000db4 <rightCollision+0x64>)
 8000d6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
		gameLoc origin = t->origin;
 8000d6e:	8842      	ldrh	r2, [r0, #2]
 8000d70:	f8ad 2004 	strh.w	r2, [sp, #4]
		if (board[origin.row + offset.row][origin.column + offset.column + 1]) //Checking against other blocks
 8000d74:	f99d 2005 	ldrsb.w	r2, [sp, #5]
 8000d78:	f343 2407 	sbfx	r4, r3, #8, #8
 8000d7c:	4422      	add	r2, r4
 8000d7e:	f99d 4004 	ldrsb.w	r4, [sp, #4]
 8000d82:	fa44 f383 	sxtab	r3, r4, r3
 8000d86:	3301      	adds	r3, #1
 8000d88:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000d8c:	4c0a      	ldr	r4, [pc, #40]	; (8000db8 <rightCollision+0x68>)
 8000d8e:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8000d92:	56d2      	ldrsb	r2, [r2, r3]
 8000d94:	b94a      	cbnz	r2, 8000daa <rightCollision+0x5a>
			return true;
		if (origin.column + offset.column + 1 >= COL_MAX) // Checking against game boundaries
 8000d96:	2b09      	cmp	r3, #9
 8000d98:	dc07      	bgt.n	8000daa <rightCollision+0x5a>
	for (char i = 0; i < 4; i++) {
 8000d9a:	3101      	adds	r1, #1
 8000d9c:	b249      	sxtb	r1, r1
 8000d9e:	2903      	cmp	r1, #3
 8000da0:	dddb      	ble.n	8000d5a <rightCollision+0xa>
			return true;
	}
	return false;
 8000da2:	2000      	movs	r0, #0
}
 8000da4:	b003      	add	sp, #12
 8000da6:	bc10      	pop	{r4}
 8000da8:	4770      	bx	lr
			return true;
 8000daa:	2001      	movs	r0, #1
 8000dac:	e7fa      	b.n	8000da4 <rightCollision+0x54>
	return false;
 8000dae:	2000      	movs	r0, #0
}
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	080040e0 	.word	0x080040e0
 8000db8:	200000e8 	.word	0x200000e8

08000dbc <mvRight>:
{
 8000dbc:	b510      	push	{r4, lr}
 8000dbe:	4604      	mov	r4, r0
	drawTet(t, color_defback);
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	f7ff fea3 	bl	8000b0c <drawTet>
	if (!rightCollision(t))
 8000dc6:	4620      	mov	r0, r4
 8000dc8:	f7ff ffc2 	bl	8000d50 <rightCollision>
 8000dcc:	b918      	cbnz	r0, 8000dd6 <mvRight+0x1a>
		t->origin.column++;
 8000dce:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	70a3      	strb	r3, [r4, #2]
	drawTet(t, color_white);
 8000dd6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000dda:	4620      	mov	r0, r4
 8000ddc:	f7ff fe96 	bl	8000b0c <drawTet>
}
 8000de0:	bd10      	pop	{r4, pc}
	...

08000de4 <gameMoveRight>:
void gameMoveRight(void) {
 8000de4:	b508      	push	{r3, lr}
    mvRight(&currentTet);
 8000de6:	4802      	ldr	r0, [pc, #8]	; (8000df0 <gameMoveRight+0xc>)
 8000de8:	f7ff ffe8 	bl	8000dbc <mvRight>
}
 8000dec:	bd08      	pop	{r3, pc}
 8000dee:	bf00      	nop
 8000df0:	20000578 	.word	0x20000578

08000df4 <rotCollision>:

char rotCollision(tet *t)
{
 8000df4:	b410      	push	{r4}
 8000df6:	b083      	sub	sp, #12
	gameLoc orig = t->origin;
 8000df8:	8843      	ldrh	r3, [r0, #2]
 8000dfa:	f8ad 3004 	strh.w	r3, [sp, #4]
	for (int i = 0; i < 4; i++) {
 8000dfe:	2100      	movs	r1, #0
 8000e00:	2903      	cmp	r1, #3
 8000e02:	dc2b      	bgt.n	8000e5c <rotCollision+0x68>
		gameLoc offset = tetrominos[t->type][(t->orientation + 1) % 4][i];
 8000e04:	7804      	ldrb	r4, [r0, #0]
 8000e06:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	425a      	negs	r2, r3
 8000e0e:	f003 0303 	and.w	r3, r3, #3
 8000e12:	f002 0203 	and.w	r2, r2, #3
 8000e16:	bf58      	it	pl
 8000e18:	4253      	negpl	r3, r2
 8000e1a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8000e1e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8000e22:	4a10      	ldr	r2, [pc, #64]	; (8000e64 <rotCollision+0x70>)
 8000e24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e28:	f8ad 3000 	strh.w	r3, [sp]
		if (offset.column + orig.column >= COL_MAX || offset.column + orig.column < COL_MIN) //Check out of bounds horizontally
 8000e2c:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 8000e30:	fa42 f283 	sxtab	r2, r2, r3
 8000e34:	2a09      	cmp	r2, #9
 8000e36:	d80f      	bhi.n	8000e58 <rotCollision+0x64>
			return 1;
		if (offset.row + orig.row >= ROW_MAX || offset.row + orig.row < COL_MIN) // Check out of bounds vertically
 8000e38:	f99d 3001 	ldrsb.w	r3, [sp, #1]
 8000e3c:	f99d 4005 	ldrsb.w	r4, [sp, #5]
 8000e40:	4423      	add	r3, r4
 8000e42:	2b13      	cmp	r3, #19
 8000e44:	d808      	bhi.n	8000e58 <rotCollision+0x64>
			return 1;
		if (board[orig.row + offset.row][orig.column + offset.column]) // Check for other blocks
 8000e46:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000e4a:	4c07      	ldr	r4, [pc, #28]	; (8000e68 <rotCollision+0x74>)
 8000e4c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8000e50:	569b      	ldrsb	r3, [r3, r2]
 8000e52:	b90b      	cbnz	r3, 8000e58 <rotCollision+0x64>
	for (int i = 0; i < 4; i++) {
 8000e54:	3101      	adds	r1, #1
 8000e56:	e7d3      	b.n	8000e00 <rotCollision+0xc>
			return 1;
 8000e58:	2001      	movs	r0, #1
 8000e5a:	e000      	b.n	8000e5e <rotCollision+0x6a>
			return 1;
	}
	return 0;
 8000e5c:	2000      	movs	r0, #0
}
 8000e5e:	b003      	add	sp, #12
 8000e60:	bc10      	pop	{r4}
 8000e62:	4770      	bx	lr
 8000e64:	080040e0 	.word	0x080040e0
 8000e68:	200000e8 	.word	0x200000e8

08000e6c <rotateTet>:
{
 8000e6c:	b510      	push	{r4, lr}
 8000e6e:	4604      	mov	r4, r0
	drawTet(t, color_defback);
 8000e70:	2100      	movs	r1, #0
 8000e72:	f7ff fe4b 	bl	8000b0c <drawTet>
	if (!rotCollision(t))
 8000e76:	4620      	mov	r0, r4
 8000e78:	f7ff ffbc 	bl	8000df4 <rotCollision>
 8000e7c:	b950      	cbnz	r0, 8000e94 <rotateTet+0x28>
		t->orientation = (t->orientation + 1) % 4;
 8000e7e:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8000e82:	3301      	adds	r3, #1
 8000e84:	425a      	negs	r2, r3
 8000e86:	f003 0303 	and.w	r3, r3, #3
 8000e8a:	f002 0203 	and.w	r2, r2, #3
 8000e8e:	bf58      	it	pl
 8000e90:	4253      	negpl	r3, r2
 8000e92:	7063      	strb	r3, [r4, #1]
	drawTet(t, color_white);
 8000e94:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000e98:	4620      	mov	r0, r4
 8000e9a:	f7ff fe37 	bl	8000b0c <drawTet>
}
 8000e9e:	bd10      	pop	{r4, pc}

08000ea0 <gameRotate>:
void gameRotate(void) {
 8000ea0:	b508      	push	{r3, lr}
    rotateTet(&currentTet);
 8000ea2:	4802      	ldr	r0, [pc, #8]	; (8000eac <gameRotate+0xc>)
 8000ea4:	f7ff ffe2 	bl	8000e6c <rotateTet>
}
 8000ea8:	bd08      	pop	{r3, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000578 	.word	0x20000578

08000eb0 <compress>:
	}
	return goalCount;
}

void compress(char line)
{
 8000eb0:	b570      	push	{r4, r5, r6, lr}
 8000eb2:	b082      	sub	sp, #8
	for (char i = line - 1; i >= ROW_MIN; i--) {
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	b245      	sxtb	r5, r0
 8000eb8:	e02c      	b.n	8000f14 <compress+0x64>
		for (char j = COL_MIN; j < COL_MAX; j++) {
 8000eba:	3401      	adds	r4, #1
 8000ebc:	b264      	sxtb	r4, r4
 8000ebe:	2c09      	cmp	r4, #9
 8000ec0:	dc26      	bgt.n	8000f10 <compress+0x60>
			if (board[i][j]) {
 8000ec2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8000ec6:	005a      	lsls	r2, r3, #1
 8000ec8:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <compress+0x70>)
 8000eca:	4413      	add	r3, r2
 8000ecc:	571b      	ldrsb	r3, [r3, r4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d0f3      	beq.n	8000eba <compress+0xa>
				board[i][j] = false;
 8000ed2:	4a13      	ldr	r2, [pc, #76]	; (8000f20 <compress+0x70>)
 8000ed4:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8000ed8:	004b      	lsls	r3, r1, #1
 8000eda:	4413      	add	r3, r2
 8000edc:	2100      	movs	r1, #0
 8000ede:	5519      	strb	r1, [r3, r4]
				board[i + 1][j] = true;
 8000ee0:	1c6b      	adds	r3, r5, #1
 8000ee2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000ee6:	0058      	lsls	r0, r3, #1
 8000ee8:	4402      	add	r2, r0
 8000eea:	2301      	movs	r3, #1
 8000eec:	5513      	strb	r3, [r2, r4]
				gameLoc move;
				move.row = i;
 8000eee:	f88d 5005 	strb.w	r5, [sp, #5]
				move.column = j;
 8000ef2:	ae02      	add	r6, sp, #8
 8000ef4:	f806 4d04 	strb.w	r4, [r6, #-4]!
				drawSquare(&move, color_defback);
 8000ef8:	4630      	mov	r0, r6
 8000efa:	f7ff fdcd 	bl	8000a98 <drawSquare>
				move.row = i + 1;
 8000efe:	1c6b      	adds	r3, r5, #1
 8000f00:	f88d 3005 	strb.w	r3, [sp, #5]
				drawSquare(&move, color_white);
 8000f04:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000f08:	4630      	mov	r0, r6
 8000f0a:	f7ff fdc5 	bl	8000a98 <drawSquare>
 8000f0e:	e7d4      	b.n	8000eba <compress+0xa>
	for (char i = line - 1; i >= ROW_MIN; i--) {
 8000f10:	3d01      	subs	r5, #1
 8000f12:	b26d      	sxtb	r5, r5
 8000f14:	2d00      	cmp	r5, #0
 8000f16:	db01      	blt.n	8000f1c <compress+0x6c>
		for (char j = COL_MIN; j < COL_MAX; j++) {
 8000f18:	2400      	movs	r4, #0
 8000f1a:	e7d0      	b.n	8000ebe <compress+0xe>
			}
		}
	}
}
 8000f1c:	b002      	add	sp, #8
 8000f1e:	bd70      	pop	{r4, r5, r6, pc}
 8000f20:	200000e8 	.word	0x200000e8

08000f24 <clearGoal>:
{
 8000f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f26:	b083      	sub	sp, #12
	for (char i = ROW_MAX - 1; i >= ROW_MIN; i--) {
 8000f28:	2413      	movs	r4, #19
	char start = 0;
 8000f2a:	2700      	movs	r7, #0
	char goalCount = 0;
 8000f2c:	463e      	mov	r6, r7
	for (char i = ROW_MAX - 1; i >= ROW_MIN; i--) {
 8000f2e:	e003      	b.n	8000f38 <clearGoal+0x14>
		char goal = true;
 8000f30:	2201      	movs	r2, #1
		if (goal) { // Clear it!
 8000f32:	b98a      	cbnz	r2, 8000f58 <clearGoal+0x34>
	for (char i = ROW_MAX - 1; i >= ROW_MIN; i--) {
 8000f34:	3c01      	subs	r4, #1
 8000f36:	b264      	sxtb	r4, r4
 8000f38:	2c00      	cmp	r4, #0
 8000f3a:	db2c      	blt.n	8000f96 <clearGoal+0x72>
		for(char j = COL_MIN; j < COL_MAX; j++) {
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	2b09      	cmp	r3, #9
 8000f40:	dcf6      	bgt.n	8000f30 <clearGoal+0xc>
			if (!board[i][j]) {
 8000f42:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8000f46:	0051      	lsls	r1, r2, #1
 8000f48:	4a16      	ldr	r2, [pc, #88]	; (8000fa4 <clearGoal+0x80>)
 8000f4a:	440a      	add	r2, r1
 8000f4c:	56d2      	ldrsb	r2, [r2, r3]
 8000f4e:	2a00      	cmp	r2, #0
 8000f50:	d0ef      	beq.n	8000f32 <clearGoal+0xe>
		for(char j = COL_MIN; j < COL_MAX; j++) {
 8000f52:	3301      	adds	r3, #1
 8000f54:	b25b      	sxtb	r3, r3
 8000f56:	e7f2      	b.n	8000f3e <clearGoal+0x1a>
			goalCount++;
 8000f58:	3601      	adds	r6, #1
 8000f5a:	b276      	sxtb	r6, r6
			if (i > start)
 8000f5c:	42a7      	cmp	r7, r4
 8000f5e:	da00      	bge.n	8000f62 <clearGoal+0x3e>
				start = i;
 8000f60:	4627      	mov	r7, r4
			for (char k = COL_MIN; k < COL_MAX; k++) {
 8000f62:	2500      	movs	r5, #0
 8000f64:	e00f      	b.n	8000f86 <clearGoal+0x62>
				board[i][k] = false;
 8000f66:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8000f6a:	005a      	lsls	r2, r3, #1
 8000f6c:	4b0d      	ldr	r3, [pc, #52]	; (8000fa4 <clearGoal+0x80>)
 8000f6e:	4413      	add	r3, r2
 8000f70:	2100      	movs	r1, #0
 8000f72:	5559      	strb	r1, [r3, r5]
				clear.row = i;
 8000f74:	f88d 4005 	strb.w	r4, [sp, #5]
				clear.column = k;
 8000f78:	a802      	add	r0, sp, #8
 8000f7a:	f800 5d04 	strb.w	r5, [r0, #-4]!
				drawSquare(&clear, color_defback);
 8000f7e:	f7ff fd8b 	bl	8000a98 <drawSquare>
			for (char k = COL_MIN; k < COL_MAX; k++) {
 8000f82:	3501      	adds	r5, #1
 8000f84:	b26d      	sxtb	r5, r5
 8000f86:	2d09      	cmp	r5, #9
 8000f88:	dded      	ble.n	8000f66 <clearGoal+0x42>
            compress(i);
 8000f8a:	4620      	mov	r0, r4
 8000f8c:	f7ff ff90 	bl	8000eb0 <compress>
            i += 1;
 8000f90:	3401      	adds	r4, #1
 8000f92:	b264      	sxtb	r4, r4
 8000f94:	e7ce      	b.n	8000f34 <clearGoal+0x10>
	if (goalCount) {
 8000f96:	b916      	cbnz	r6, 8000f9e <clearGoal+0x7a>
}
 8000f98:	4630      	mov	r0, r6
 8000f9a:	b003      	add	sp, #12
 8000f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		soundBeep();
 8000f9e:	f001 fd17 	bl	80029d0 <soundBeep>
 8000fa2:	e7f9      	b.n	8000f98 <clearGoal+0x74>
 8000fa4:	200000e8 	.word	0x200000e8

08000fa8 <isgameOver>:

char isgameOver()
{
	char row = ROW_MIN + 1;
	for (int col = COL_MIN; col < COL_MAX; col++) {
 8000fa8:	2300      	movs	r3, #0
 8000faa:	2b09      	cmp	r3, #9
 8000fac:	dc06      	bgt.n	8000fbc <isgameOver+0x14>
		if (board[row][col])
 8000fae:	4a05      	ldr	r2, [pc, #20]	; (8000fc4 <isgameOver+0x1c>)
 8000fb0:	441a      	add	r2, r3
 8000fb2:	f992 200a 	ldrsb.w	r2, [r2, #10]
 8000fb6:	b91a      	cbnz	r2, 8000fc0 <isgameOver+0x18>
	for (int col = COL_MIN; col < COL_MAX; col++) {
 8000fb8:	3301      	adds	r3, #1
 8000fba:	e7f6      	b.n	8000faa <isgameOver+0x2>
			return true;
	}
	return false;
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	4770      	bx	lr
			return true;
 8000fc0:	2001      	movs	r0, #1
}
 8000fc2:	4770      	bx	lr
 8000fc4:	200000e8 	.word	0x200000e8

08000fc8 <gameLoop>:
/*
 * Main game loop
 */

void gameLoop(void)
{
 8000fc8:	b510      	push	{r4, lr}
 8000fca:	b082      	sub	sp, #8
		gameLoc origin = {5, 1};
 8000fcc:	4b39      	ldr	r3, [pc, #228]	; (80010b4 <gameLoop+0xec>)
 8000fce:	881b      	ldrh	r3, [r3, #0]
 8000fd0:	f8ad 3004 	strh.w	r3, [sp, #4]
		if (isgameOver()) {
 8000fd4:	f7ff ffe8 	bl	8000fa8 <isgameOver>
 8000fd8:	2800      	cmp	r0, #0
 8000fda:	d143      	bne.n	8001064 <gameLoop+0x9c>
		    showScores(-1);
		    soundHiAlarm();
		} else {
		    if (tick) {
 8000fdc:	4b36      	ldr	r3, [pc, #216]	; (80010b8 <gameLoop+0xf0>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d064      	beq.n	80010ae <gameLoop+0xe6>
		        tick = 0;
 8000fe4:	4b34      	ldr	r3, [pc, #208]	; (80010b8 <gameLoop+0xf0>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
		        if (firstTet) {
 8000fea:	4b34      	ldr	r3, [pc, #208]	; (80010bc <gameLoop+0xf4>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d03f      	beq.n	8001072 <gameLoop+0xaa>
		            newTet(origin, 0, (SHAPE)(rand() % 7), &currentTet);
 8000ff2:	f002 faf7 	bl	80035e4 <rand>
 8000ff6:	4c32      	ldr	r4, [pc, #200]	; (80010c0 <gameLoop+0xf8>)
 8000ff8:	fb84 3200 	smull	r3, r2, r4, r0
 8000ffc:	1813      	adds	r3, r2, r0
 8000ffe:	17c2      	asrs	r2, r0, #31
 8001000:	ebc2 02a3 	rsb	r2, r2, r3, asr #2
 8001004:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8001008:	1a82      	subs	r2, r0, r2
 800100a:	4b2e      	ldr	r3, [pc, #184]	; (80010c4 <gameLoop+0xfc>)
 800100c:	b2d2      	uxtb	r2, r2
 800100e:	2100      	movs	r1, #0
 8001010:	9801      	ldr	r0, [sp, #4]
 8001012:	f7ff fda1 	bl	8000b58 <newTet>
		            newTet(origin, 0, (SHAPE)(rand() % 7), &nextTet);
 8001016:	f002 fae5 	bl	80035e4 <rand>
 800101a:	fb84 3400 	smull	r3, r4, r4, r0
 800101e:	4404      	add	r4, r0
 8001020:	17c2      	asrs	r2, r0, #31
 8001022:	ebc2 02a4 	rsb	r2, r2, r4, asr #2
 8001026:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800102a:	1a82      	subs	r2, r0, r2
 800102c:	4b26      	ldr	r3, [pc, #152]	; (80010c8 <gameLoop+0x100>)
 800102e:	b2d2      	uxtb	r2, r2
 8001030:	2100      	movs	r1, #0
 8001032:	9801      	ldr	r0, [sp, #4]
 8001034:	f7ff fd90 	bl	8000b58 <newTet>
		            drawNextTet(color_white);
 8001038:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800103c:	f7ff fd40 	bl	8000ac0 <drawNextTet>
		            firstTet = false;
 8001040:	4b1e      	ldr	r3, [pc, #120]	; (80010bc <gameLoop+0xf4>)
 8001042:	2200      	movs	r2, #0
 8001044:	701a      	strb	r2, [r3, #0]
		            currentTet = nextTet;
                    drawNextTet(color_defback);
		            newTet(origin, 0, (SHAPE)(rand() % 7), &nextTet);
                    drawNextTet(color_white);
		        }
		        drawTet(&currentTet, color_white);
 8001046:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800104a:	481e      	ldr	r0, [pc, #120]	; (80010c4 <gameLoop+0xfc>)
 800104c:	f7ff fd5e 	bl	8000b0c <drawTet>
		        score += clearGoal();
 8001050:	f7ff ff68 	bl	8000f24 <clearGoal>
 8001054:	4a1d      	ldr	r2, [pc, #116]	; (80010cc <gameLoop+0x104>)
 8001056:	6813      	ldr	r3, [r2, #0]
 8001058:	4418      	add	r0, r3
 800105a:	6010      	str	r0, [r2, #0]
		        showScores(score);
 800105c:	f001 f8e8 	bl	8002230 <showScores>
		    } else {
		        gameTick();
		    }
		}
}
 8001060:	b002      	add	sp, #8
 8001062:	bd10      	pop	{r4, pc}
		    showScores(-1);
 8001064:	f04f 30ff 	mov.w	r0, #4294967295
 8001068:	f001 f8e2 	bl	8002230 <showScores>
		    soundHiAlarm();
 800106c:	f001 fccc 	bl	8002a08 <soundHiAlarm>
 8001070:	e7f6      	b.n	8001060 <gameLoop+0x98>
		            currentTet = nextTet;
 8001072:	4c15      	ldr	r4, [pc, #84]	; (80010c8 <gameLoop+0x100>)
 8001074:	6822      	ldr	r2, [r4, #0]
 8001076:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <gameLoop+0xfc>)
 8001078:	601a      	str	r2, [r3, #0]
                    drawNextTet(color_defback);
 800107a:	2000      	movs	r0, #0
 800107c:	f7ff fd20 	bl	8000ac0 <drawNextTet>
		            newTet(origin, 0, (SHAPE)(rand() % 7), &nextTet);
 8001080:	f002 fab0 	bl	80035e4 <rand>
 8001084:	4a0e      	ldr	r2, [pc, #56]	; (80010c0 <gameLoop+0xf8>)
 8001086:	fb82 3200 	smull	r3, r2, r2, r0
 800108a:	1813      	adds	r3, r2, r0
 800108c:	17c2      	asrs	r2, r0, #31
 800108e:	ebc2 02a3 	rsb	r2, r2, r3, asr #2
 8001092:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8001096:	1a82      	subs	r2, r0, r2
 8001098:	4623      	mov	r3, r4
 800109a:	b2d2      	uxtb	r2, r2
 800109c:	2100      	movs	r1, #0
 800109e:	9801      	ldr	r0, [sp, #4]
 80010a0:	f7ff fd5a 	bl	8000b58 <newTet>
                    drawNextTet(color_white);
 80010a4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80010a8:	f7ff fd0a 	bl	8000ac0 <drawNextTet>
 80010ac:	e7cb      	b.n	8001046 <gameLoop+0x7e>
		        gameTick();
 80010ae:	f7ff fdb1 	bl	8000c14 <gameTick>
}
 80010b2:	e7d5      	b.n	8001060 <gameLoop+0x98>
 80010b4:	080040dc 	.word	0x080040dc
 80010b8:	20000004 	.word	0x20000004
 80010bc:	20000570 	.word	0x20000570
 80010c0:	92492493 	.word	0x92492493
 80010c4:	20000578 	.word	0x20000578
 80010c8:	20000574 	.word	0x20000574
 80010cc:	200001b0 	.word	0x200001b0

080010d0 <manualTestsTask>:
    dummyButtonHandler, dummyButtonHandler, dummyButtonHandler, dummyButtonHandler,
    button5Handler, dummyButtonHandler, buttonOkHandler, dummyButtonHandler,
    buttonPowerHandler
};

static void manualTestsTask(uint32_t parameters) {
 80010d0:	b508      	push	{r3, lr}
    display48(manualTests, ManualTestLast, currentTest);
 80010d2:	4b06      	ldr	r3, [pc, #24]	; (80010ec <manualTestsTask+0x1c>)
 80010d4:	781a      	ldrb	r2, [r3, #0]
 80010d6:	2107      	movs	r1, #7
 80010d8:	4805      	ldr	r0, [pc, #20]	; (80010f0 <manualTestsTask+0x20>)
 80010da:	f000 ff9b 	bl	8002014 <display48>
    osTaskAdd(manualTestsTask, 0, 200);
 80010de:	22c8      	movs	r2, #200	; 0xc8
 80010e0:	2100      	movs	r1, #0
 80010e2:	4804      	ldr	r0, [pc, #16]	; (80010f4 <manualTestsTask+0x24>)
 80010e4:	f001 ff0e 	bl	8002f04 <osTaskAdd>
}
 80010e8:	bd08      	pop	{r3, pc}
 80010ea:	bf00      	nop
 80010ec:	200001b4 	.word	0x200001b4
 80010f0:	20000008 	.word	0x20000008
 80010f4:	080010d1 	.word	0x080010d1

080010f8 <buttonPowerHandler>:
    if ((pressType == BUTTON_PRESS_LONG) ||
 80010f8:	3802      	subs	r0, #2
 80010fa:	2801      	cmp	r0, #1
 80010fc:	d900      	bls.n	8001100 <buttonPowerHandler+0x8>
 80010fe:	4770      	bx	lr
static void buttonPowerHandler(uint32_t pressType) {
 8001100:	b508      	push	{r3, lr}
        powerOff();
 8001102:	f002 f8f5 	bl	80032f0 <powerOff>
}
 8001106:	bd08      	pop	{r3, pc}

08001108 <button5Handler>:
static void button5Handler(uint32_t pressType) {
 8001108:	b508      	push	{r3, lr}
    soundKeyBeep();
 800110a:	f001 fc6f 	bl	80029ec <soundKeyBeep>
    if (currentTest > 0) {
 800110e:	4b05      	ldr	r3, [pc, #20]	; (8001124 <button5Handler+0x1c>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	b91b      	cbnz	r3, 800111c <button5Handler+0x14>
        currentTest = ManualTestLast - 1;
 8001114:	4b03      	ldr	r3, [pc, #12]	; (8001124 <button5Handler+0x1c>)
 8001116:	2206      	movs	r2, #6
 8001118:	701a      	strb	r2, [r3, #0]
}
 800111a:	bd08      	pop	{r3, pc}
        currentTest--;
 800111c:	3b01      	subs	r3, #1
 800111e:	4a01      	ldr	r2, [pc, #4]	; (8001124 <button5Handler+0x1c>)
 8001120:	7013      	strb	r3, [r2, #0]
 8001122:	e7fa      	b.n	800111a <button5Handler+0x12>
 8001124:	200001b4 	.word	0x200001b4

08001128 <button0Handler>:
static void button0Handler(uint32_t pressType) {
 8001128:	b508      	push	{r3, lr}
    soundKeyBeep();
 800112a:	f001 fc5f 	bl	80029ec <soundKeyBeep>
    if (currentTest < ManualTestLast - 1) {
 800112e:	4b06      	ldr	r3, [pc, #24]	; (8001148 <button0Handler+0x20>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b05      	cmp	r3, #5
 8001134:	d903      	bls.n	800113e <button0Handler+0x16>
        currentTest = 0;
 8001136:	4b04      	ldr	r3, [pc, #16]	; (8001148 <button0Handler+0x20>)
 8001138:	2200      	movs	r2, #0
 800113a:	701a      	strb	r2, [r3, #0]
}
 800113c:	bd08      	pop	{r3, pc}
        currentTest++;
 800113e:	3301      	adds	r3, #1
 8001140:	4a01      	ldr	r2, [pc, #4]	; (8001148 <button0Handler+0x20>)
 8001142:	7013      	strb	r3, [r2, #0]
 8001144:	e7fa      	b.n	800113c <button0Handler+0x14>
 8001146:	bf00      	nop
 8001148:	200001b4 	.word	0x200001b4

0800114c <dummyButtonHandler>:
static void dummyButtonHandler() {
 800114c:	b508      	push	{r3, lr}
    soundKeyBeep();
 800114e:	f001 fc4d 	bl	80029ec <soundKeyBeep>
}
 8001152:	bd08      	pop	{r3, pc}

08001154 <buttonOkHandler>:
static void buttonOkHandler(uint32_t pressType) {
 8001154:	b508      	push	{r3, lr}
    soundKeyBeep();
 8001156:	f001 fc49 	bl	80029ec <soundKeyBeep>
    if (manualTestsHandlers[currentTest] != 0) {
 800115a:	4b08      	ldr	r3, [pc, #32]	; (800117c <buttonOkHandler+0x28>)
 800115c:	781a      	ldrb	r2, [r3, #0]
 800115e:	4b08      	ldr	r3, [pc, #32]	; (8001180 <buttonOkHandler+0x2c>)
 8001160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001164:	b143      	cbz	r3, 8001178 <buttonOkHandler+0x24>
        osTaskDelHandler(manualTestsTask);
 8001166:	4807      	ldr	r0, [pc, #28]	; (8001184 <buttonOkHandler+0x30>)
 8001168:	f001 ff10 	bl	8002f8c <osTaskDelHandler>
        manualTestsHandlers[currentTest]();
 800116c:	4b03      	ldr	r3, [pc, #12]	; (800117c <buttonOkHandler+0x28>)
 800116e:	781a      	ldrb	r2, [r3, #0]
 8001170:	4b03      	ldr	r3, [pc, #12]	; (8001180 <buttonOkHandler+0x2c>)
 8001172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001176:	4798      	blx	r3
}
 8001178:	bd08      	pop	{r3, pc}
 800117a:	bf00      	nop
 800117c:	200001b4 	.word	0x200001b4
 8001180:	08004204 	.word	0x08004204
 8001184:	080010d1 	.word	0x080010d1

08001188 <showManualTestsScreen>:

void showManualTestsScreen(void) {
 8001188:	b510      	push	{r4, lr}
    currentTest = 0;
 800118a:	2400      	movs	r4, #0
 800118c:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <showManualTestsScreen+0x2c>)
 800118e:	701c      	strb	r4, [r3, #0]
    for (buttonName_t btn = 0; btn < Button_Last; btn++) {
 8001190:	e007      	b.n	80011a2 <showManualTestsScreen+0x1a>
        setButtonHandler(btn, handlers[btn]);
 8001192:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <showManualTestsScreen+0x30>)
 8001194:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8001198:	4620      	mov	r0, r4
 800119a:	f002 f9b5 	bl	8003508 <setButtonHandler>
    for (buttonName_t btn = 0; btn < Button_Last; btn++) {
 800119e:	3401      	adds	r4, #1
 80011a0:	b2e4      	uxtb	r4, r4
 80011a2:	2c10      	cmp	r4, #16
 80011a4:	d9f5      	bls.n	8001192 <showManualTestsScreen+0xa>
    }
    osTaskAdd(manualTestsTask, 0, 100);
 80011a6:	2264      	movs	r2, #100	; 0x64
 80011a8:	2100      	movs	r1, #0
 80011aa:	4804      	ldr	r0, [pc, #16]	; (80011bc <showManualTestsScreen+0x34>)
 80011ac:	f001 feaa 	bl	8002f04 <osTaskAdd>
}
 80011b0:	bd10      	pop	{r4, pc}
 80011b2:	bf00      	nop
 80011b4:	200001b4 	.word	0x200001b4
 80011b8:	080041c0 	.word	0x080041c0
 80011bc:	080010d1 	.word	0x080010d1

080011c0 <testTask>:
    dummyButtonHandler, dummyButtonHandler, dummyButtonHandler, dummyButtonHandler,
    button5Handler, dummyButtonHandler, dummyButtonHandler, buttonNoHandler,
    dummyButtonHandler
};

static void testTask(uint32_t parameters) {
 80011c0:	b508      	push	{r3, lr}
    display68();
 80011c2:	f000 fe2b 	bl	8001e1c <display68>
    osTaskAdd(testTask, 0, 200);
 80011c6:	22c8      	movs	r2, #200	; 0xc8
 80011c8:	2100      	movs	r1, #0
 80011ca:	4802      	ldr	r0, [pc, #8]	; (80011d4 <testTask+0x14>)
 80011cc:	f001 fe9a 	bl	8002f04 <osTaskAdd>
}
 80011d0:	bd08      	pop	{r3, pc}
 80011d2:	bf00      	nop
 80011d4:	080011c1 	.word	0x080011c1

080011d8 <dummyButtonHandler>:
static void dummyButtonHandler() {
 80011d8:	b508      	push	{r3, lr}
    soundKeyBeep();
 80011da:	f001 fc07 	bl	80029ec <soundKeyBeep>
}
 80011de:	bd08      	pop	{r3, pc}

080011e0 <buttonNoHandler>:
static void buttonNoHandler(uint32_t pressType) {
 80011e0:	b508      	push	{r3, lr}
    soundKeyBeep();
 80011e2:	f001 fc03 	bl	80029ec <soundKeyBeep>
    disableMotor();
 80011e6:	f001 fa87 	bl	80026f8 <disableMotor>
    osTaskDelHandler(testTask);
 80011ea:	4803      	ldr	r0, [pc, #12]	; (80011f8 <buttonNoHandler+0x18>)
 80011ec:	f001 fece 	bl	8002f8c <osTaskDelHandler>
    showManualTestsScreen();
 80011f0:	f7ff ffca 	bl	8001188 <showManualTestsScreen>
}
 80011f4:	bd08      	pop	{r3, pc}
 80011f6:	bf00      	nop
 80011f8:	080011c1 	.word	0x080011c1

080011fc <button5Handler>:
static void button5Handler(uint32_t pressType) {
 80011fc:	b508      	push	{r3, lr}
    soundKeyBeep();
 80011fe:	f001 fbf5 	bl	80029ec <soundKeyBeep>
    increaseMotorSpeed(5);
 8001202:	2005      	movs	r0, #5
 8001204:	f001 fa4a 	bl	800269c <increaseMotorSpeed>
}
 8001208:	bd08      	pop	{r3, pc}

0800120a <button0Handler>:
static void button0Handler(uint32_t pressType) {
 800120a:	b508      	push	{r3, lr}
    soundKeyBeep();
 800120c:	f001 fbee 	bl	80029ec <soundKeyBeep>
    decreaseMotorSpeed(5);
 8001210:	2005      	movs	r0, #5
 8001212:	f001 fa53 	bl	80026bc <decreaseMotorSpeed>
}
 8001216:	bd08      	pop	{r3, pc}

08001218 <startMotorTest>:

void startMotorTest() {
 8001218:	b510      	push	{r4, lr}
    for (buttonName_t btn = 0; btn < Button_Last; btn++) {
 800121a:	2400      	movs	r4, #0
 800121c:	e007      	b.n	800122e <startMotorTest+0x16>
        setButtonHandler(btn, handlers[btn]);
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <startMotorTest+0x2c>)
 8001220:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8001224:	4620      	mov	r0, r4
 8001226:	f002 f96f 	bl	8003508 <setButtonHandler>
    for (buttonName_t btn = 0; btn < Button_Last; btn++) {
 800122a:	3401      	adds	r4, #1
 800122c:	b2e4      	uxtb	r4, r4
 800122e:	2c10      	cmp	r4, #16
 8001230:	d9f5      	bls.n	800121e <startMotorTest+0x6>
    }

    enableMotor();
 8001232:	f001 fa51 	bl	80026d8 <enableMotor>
    osTaskAdd(testTask, 0, 200);
 8001236:	22c8      	movs	r2, #200	; 0xc8
 8001238:	2100      	movs	r1, #0
 800123a:	4803      	ldr	r0, [pc, #12]	; (8001248 <startMotorTest+0x30>)
 800123c:	f001 fe62 	bl	8002f04 <osTaskAdd>
}
 8001240:	bd10      	pop	{r4, pc}
 8001242:	bf00      	nop
 8001244:	08004278 	.word	0x08004278
 8001248:	080011c1 	.word	0x080011c1

0800124c <testTask>:
    dummyButtonHandler, dummyButtonHandler, dummyButtonHandler, dummyButtonHandler,
    dummyButtonHandler, dummyButtonHandler, dummyButtonHandler, buttonNoHandler,
    dummyButtonHandler
};

static void testTask(uint32_t parameters) {
 800124c:	b510      	push	{r4, lr}
    if (firstStart) {
 800124e:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <testTask+0x54>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	b99b      	cbnz	r3, 800127c <testTask+0x30>
        currentSoundLevel = 1;
        display65(soundGetLevel());
        firstStart = 0;
    } else {
        soundSetLevel(currentSoundLevel);
 8001254:	4c13      	ldr	r4, [pc, #76]	; (80012a4 <testTask+0x58>)
 8001256:	7820      	ldrb	r0, [r4, #0]
 8001258:	f001 fbac 	bl	80029b4 <soundSetLevel>
        display65(soundGetLevel());
 800125c:	f001 fbb2 	bl	80029c4 <soundGetLevel>
 8001260:	b2c0      	uxtb	r0, r0
 8001262:	f000 fd6d 	bl	8001d40 <display65>
        soundKeyBeep();
 8001266:	f001 fbc1 	bl	80029ec <soundKeyBeep>

        currentSoundLevel++;
 800126a:	7823      	ldrb	r3, [r4, #0]
 800126c:	3301      	adds	r3, #1
 800126e:	b2db      	uxtb	r3, r3
 8001270:	7023      	strb	r3, [r4, #0]
        if (currentSoundLevel > 7) {
 8001272:	2b07      	cmp	r3, #7
 8001274:	d90d      	bls.n	8001292 <testTask+0x46>
            currentSoundLevel = 1;
 8001276:	2201      	movs	r2, #1
 8001278:	7022      	strb	r2, [r4, #0]
 800127a:	e00a      	b.n	8001292 <testTask+0x46>
        currentSoundLevel = 1;
 800127c:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <testTask+0x58>)
 800127e:	2201      	movs	r2, #1
 8001280:	701a      	strb	r2, [r3, #0]
        display65(soundGetLevel());
 8001282:	f001 fb9f 	bl	80029c4 <soundGetLevel>
 8001286:	b2c0      	uxtb	r0, r0
 8001288:	f000 fd5a 	bl	8001d40 <display65>
        firstStart = 0;
 800128c:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <testTask+0x54>)
 800128e:	2200      	movs	r2, #0
 8001290:	701a      	strb	r2, [r3, #0]
        }
    }
    osTaskAdd(testTask, 0, 1000);
 8001292:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001296:	2100      	movs	r1, #0
 8001298:	4803      	ldr	r0, [pc, #12]	; (80012a8 <testTask+0x5c>)
 800129a:	f001 fe33 	bl	8002f04 <osTaskAdd>
}
 800129e:	bd10      	pop	{r4, pc}
 80012a0:	200001b6 	.word	0x200001b6
 80012a4:	200001b5 	.word	0x200001b5
 80012a8:	0800124d 	.word	0x0800124d

080012ac <dummyButtonHandler>:
static void dummyButtonHandler() {
 80012ac:	b508      	push	{r3, lr}
    soundKeyBeep();
 80012ae:	f001 fb9d 	bl	80029ec <soundKeyBeep>
}
 80012b2:	bd08      	pop	{r3, pc}

080012b4 <buttonNoHandler>:
static void buttonNoHandler(uint32_t pressType) {
 80012b4:	b508      	push	{r3, lr}
    soundKeyBeep();
 80012b6:	f001 fb99 	bl	80029ec <soundKeyBeep>
    soundSetLevel(3);
 80012ba:	2003      	movs	r0, #3
 80012bc:	f001 fb7a 	bl	80029b4 <soundSetLevel>
    osTaskDelHandler(testTask);
 80012c0:	4802      	ldr	r0, [pc, #8]	; (80012cc <buttonNoHandler+0x18>)
 80012c2:	f001 fe63 	bl	8002f8c <osTaskDelHandler>
    showManualTestsScreen();
 80012c6:	f7ff ff5f 	bl	8001188 <showManualTestsScreen>
}
 80012ca:	bd08      	pop	{r3, pc}
 80012cc:	0800124d 	.word	0x0800124d

080012d0 <startSoundTest>:

void startSoundTest() {
 80012d0:	b510      	push	{r4, lr}
    for (buttonName_t btn = 0; btn < Button_Last; btn++) {
 80012d2:	2400      	movs	r4, #0
 80012d4:	e007      	b.n	80012e6 <startSoundTest+0x16>
        setButtonHandler(btn, handlers[btn]);
 80012d6:	4b09      	ldr	r3, [pc, #36]	; (80012fc <startSoundTest+0x2c>)
 80012d8:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 80012dc:	4620      	mov	r0, r4
 80012de:	f002 f913 	bl	8003508 <setButtonHandler>
    for (buttonName_t btn = 0; btn < Button_Last; btn++) {
 80012e2:	3401      	adds	r4, #1
 80012e4:	b2e4      	uxtb	r4, r4
 80012e6:	2c10      	cmp	r4, #16
 80012e8:	d9f5      	bls.n	80012d6 <startSoundTest+0x6>
    }

    firstStart = 1;
 80012ea:	4b05      	ldr	r3, [pc, #20]	; (8001300 <startSoundTest+0x30>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	701a      	strb	r2, [r3, #0]
    osTaskAdd(testTask, 0, 200);
 80012f0:	22c8      	movs	r2, #200	; 0xc8
 80012f2:	2100      	movs	r1, #0
 80012f4:	4803      	ldr	r0, [pc, #12]	; (8001304 <startSoundTest+0x34>)
 80012f6:	f001 fe05 	bl	8002f04 <osTaskAdd>
}
 80012fa:	bd10      	pop	{r4, pc}
 80012fc:	080042bc 	.word	0x080042bc
 8001300:	200001b6 	.word	0x200001b6
 8001304:	0800124d 	.word	0x0800124d

08001308 <dummyButtonHandler>:
#include <game.h>

static void testTask(uint32_t parameters);

static void dummyButtonHandler() {
}
 8001308:	4770      	bx	lr
	...

0800130c <testTask>:
    buttonOkHandler,            //Button_Ok
    buttonNoHandler,            //Button_No
    dummyButtonHandler          //Button_Power
};

static void testTask(uint32_t parameters) {
 800130c:	b508      	push	{r3, lr}
    gameLoop();
 800130e:	f7ff fe5b 	bl	8000fc8 <gameLoop>
    osTaskAdd(testTask, 0, 400);
 8001312:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001316:	2100      	movs	r1, #0
 8001318:	4801      	ldr	r0, [pc, #4]	; (8001320 <testTask+0x14>)
 800131a:	f001 fdf3 	bl	8002f04 <osTaskAdd>
}
 800131e:	bd08      	pop	{r3, pc}
 8001320:	0800130d 	.word	0x0800130d

08001324 <buttonOkHandler>:
static void buttonOkHandler(uint32_t pressType) {
 8001324:	b508      	push	{r3, lr}
    soundStopAlarm();
 8001326:	f001 fb7d 	bl	8002a24 <soundStopAlarm>
    gameRestart();
 800132a:	f7ff fb85 	bl	8000a38 <gameRestart>
}
 800132e:	bd08      	pop	{r3, pc}

08001330 <buttonNoHandler>:
static void buttonNoHandler(uint32_t pressType) {
 8001330:	b508      	push	{r3, lr}
    soundStopAlarm();
 8001332:	f001 fb77 	bl	8002a24 <soundStopAlarm>
    osTaskDelHandler(testTask);
 8001336:	4803      	ldr	r0, [pc, #12]	; (8001344 <buttonNoHandler+0x14>)
 8001338:	f001 fe28 	bl	8002f8c <osTaskDelHandler>
    showManualTestsScreen();
 800133c:	f7ff ff24 	bl	8001188 <showManualTestsScreen>
}
 8001340:	bd08      	pop	{r3, pc}
 8001342:	bf00      	nop
 8001344:	0800130d 	.word	0x0800130d

08001348 <buttonPointHandler>:
static void buttonPointHandler(uint32_t pressType) {
 8001348:	b508      	push	{r3, lr}
    gameMoveRight();
 800134a:	f7ff fd4b 	bl	8000de4 <gameMoveRight>
}
 800134e:	bd08      	pop	{r3, pc}

08001350 <button5Handler>:
static void button5Handler(uint32_t pressType) {
 8001350:	b508      	push	{r3, lr}
    gameRotate();
 8001352:	f7ff fda5 	bl	8000ea0 <gameRotate>
}
 8001356:	bd08      	pop	{r3, pc}

08001358 <button4Handler>:
static void button4Handler(uint32_t pressType) {
 8001358:	b508      	push	{r3, lr}
    gameMoveLeft();
 800135a:	f7ff fcf1 	bl	8000d40 <gameMoveLeft>
}
 800135e:	bd08      	pop	{r3, pc}

08001360 <buttonPrimeHandler>:
static void buttonPrimeHandler(uint32_t pressType) {
 8001360:	b508      	push	{r3, lr}
    gameMoveDown();
 8001362:	f7ff fc4f 	bl	8000c04 <gameMoveDown>
}
 8001366:	bd08      	pop	{r3, pc}

08001368 <startTetrisTest>:

void startTetrisTest(void) {
 8001368:	b510      	push	{r4, lr}
    for (buttonName_t btn = 0; btn < Button_Last; btn++) {
 800136a:	2400      	movs	r4, #0
 800136c:	e007      	b.n	800137e <startTetrisTest+0x16>
        setButtonHandler(btn, handlers[btn]);
 800136e:	4b09      	ldr	r3, [pc, #36]	; (8001394 <startTetrisTest+0x2c>)
 8001370:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8001374:	4620      	mov	r0, r4
 8001376:	f002 f8c7 	bl	8003508 <setButtonHandler>
    for (buttonName_t btn = 0; btn < Button_Last; btn++) {
 800137a:	3401      	adds	r4, #1
 800137c:	b2e4      	uxtb	r4, r4
 800137e:	2c10      	cmp	r4, #16
 8001380:	d9f5      	bls.n	800136e <startTetrisTest+0x6>
    }
    gameRestart();
 8001382:	f7ff fb59 	bl	8000a38 <gameRestart>
    osTaskAdd(testTask, 0, 200);
 8001386:	22c8      	movs	r2, #200	; 0xc8
 8001388:	2100      	movs	r1, #0
 800138a:	4803      	ldr	r0, [pc, #12]	; (8001398 <startTetrisTest+0x30>)
 800138c:	f001 fdba 	bl	8002f04 <osTaskAdd>
}
 8001390:	bd10      	pop	{r4, pc}
 8001392:	bf00      	nop
 8001394:	08004300 	.word	0x08004300
 8001398:	0800130d 	.word	0x0800130d

0800139c <_exit>:
// is required.

void
__attribute__((weak))
_exit(int code __attribute__((unused)))
{
 800139c:	e7fe      	b.n	800139c <_exit>
	...

080013a0 <_sbrk>:
// The definitions used here should be kept in sync with the
// stack definitions in the linker script.

caddr_t
_sbrk(int incr)
{
 80013a0:	b508      	push	{r3, lr}
 80013a2:	4603      	mov	r3, r0
  extern char _Heap_Limit; // Defined by the linker.

  static char* current_heap_end;
  char* current_block_address;

  if (current_heap_end == 0)
 80013a4:	4a0c      	ldr	r2, [pc, #48]	; (80013d8 <_sbrk+0x38>)
 80013a6:	6812      	ldr	r2, [r2, #0]
 80013a8:	b15a      	cbz	r2, 80013c2 <_sbrk+0x22>
    {
      current_heap_end = &_Heap_Begin;
    }

  current_block_address = current_heap_end;
 80013aa:	4a0b      	ldr	r2, [pc, #44]	; (80013d8 <_sbrk+0x38>)
 80013ac:	6810      	ldr	r0, [r2, #0]

  // Need to align heap to word boundary, else will get
  // hard faults on Cortex-M0. So we assume that heap starts on
  // word boundary, hence make sure we always add a multiple of
  // 4 to it.
  incr = (incr + 3) & (~3); // align value to 4
 80013ae:	3303      	adds	r3, #3
 80013b0:	f023 0303 	bic.w	r3, r3, #3
  if (current_heap_end + incr > &_Heap_Limit)
 80013b4:	4403      	add	r3, r0
 80013b6:	4a09      	ldr	r2, [pc, #36]	; (80013dc <_sbrk+0x3c>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d806      	bhi.n	80013ca <_sbrk+0x2a>
      errno = ENOMEM;
      return (caddr_t) - 1;
#endif
    }

  current_heap_end += incr;
 80013bc:	4a06      	ldr	r2, [pc, #24]	; (80013d8 <_sbrk+0x38>)
 80013be:	6013      	str	r3, [r2, #0]

  return (caddr_t) current_block_address;
}
 80013c0:	bd08      	pop	{r3, pc}
      current_heap_end = &_Heap_Begin;
 80013c2:	4a05      	ldr	r2, [pc, #20]	; (80013d8 <_sbrk+0x38>)
 80013c4:	4906      	ldr	r1, [pc, #24]	; (80013e0 <_sbrk+0x40>)
 80013c6:	6011      	str	r1, [r2, #0]
 80013c8:	e7ef      	b.n	80013aa <_sbrk+0xa>
      errno = ENOMEM;
 80013ca:	f002 f8bf 	bl	800354c <__errno>
 80013ce:	230c      	movs	r3, #12
 80013d0:	6003      	str	r3, [r0, #0]
      return (caddr_t) - 1;
 80013d2:	f04f 30ff 	mov.w	r0, #4294967295
 80013d6:	e7f3      	b.n	80013c0 <_sbrk+0x20>
 80013d8:	200001b8 	.word	0x200001b8
 80013dc:	2000fc00 	.word	0x2000fc00
 80013e0:	20000584 	.word	0x20000584

080013e4 <__initialize_args>:
  // available from the host environment. argv[argc] shall be a null pointer.
  // (static, no const)
  static char* argv[2] =
    { name, NULL };

  *p_argc = 1;
 80013e4:	2301      	movs	r3, #1
 80013e6:	6003      	str	r3, [r0, #0]
  *p_argv = &argv[0];
 80013e8:	4b01      	ldr	r3, [pc, #4]	; (80013f0 <__initialize_args+0xc>)
 80013ea:	600b      	str	r3, [r1, #0]
  return;
}
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	20000024 	.word	0x20000024

080013f4 <trace_printf>:

// ----------------------------------------------------------------------------

int
trace_printf(const char* format, ...)
{
 80013f4:	b40f      	push	{r0, r1, r2, r3}
 80013f6:	b500      	push	{lr}
 80013f8:	b083      	sub	sp, #12
 80013fa:	ab04      	add	r3, sp, #16
 80013fc:	f853 2b04 	ldr.w	r2, [r3], #4
  int ret;
  va_list ap;

  va_start (ap, format);
 8001400:	9301      	str	r3, [sp, #4]
  // TODO: rewrite it to no longer use newlib, it is way too heavy

  static char buf[OS_INTEGER_TRACE_PRINTF_TMP_ARRAY_SIZE];

  // Print to the local buffer
  ret = vsnprintf (buf, sizeof(buf), format, ap);
 8001402:	2180      	movs	r1, #128	; 0x80
 8001404:	4806      	ldr	r0, [pc, #24]	; (8001420 <trace_printf+0x2c>)
 8001406:	f002 f98b 	bl	8003720 <vsniprintf>
  if (ret > 0)
 800140a:	2800      	cmp	r0, #0
 800140c:	dd03      	ble.n	8001416 <trace_printf+0x22>
    {
      // Transfer the buffer to the device
      ret = trace_write (buf, (size_t)ret);
 800140e:	4601      	mov	r1, r0
 8001410:	4803      	ldr	r0, [pc, #12]	; (8001420 <trace_printf+0x2c>)
 8001412:	f000 f807 	bl	8001424 <trace_write>
    }

  va_end (ap);
  return ret;
}
 8001416:	b003      	add	sp, #12
 8001418:	f85d eb04 	ldr.w	lr, [sp], #4
 800141c:	b004      	add	sp, #16
 800141e:	4770      	bx	lr
 8001420:	200001c0 	.word	0x200001c0

08001424 <trace_write>:
#elif defined(OS_USE_TRACE_SEMIHOSTING_DEBUG)
  return _trace_write_semihosting_debug(buf, nbyte);
#endif

  return -1;
}
 8001424:	f04f 30ff 	mov.w	r0, #4294967295
 8001428:	4770      	bx	lr
	...

0800142c <__initialize_hardware_early>:
// priority is Privileged, and the Stack is set to Main.

void
__attribute__((weak))
__initialize_hardware_early(void)
{
 800142c:	b508      	push	{r3, lr}
  // Call the CSMSIS system initialisation routine.
  SystemInit();
 800142e:	f000 f887 	bl	8001540 <SystemInit>

#if defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7EM__)
  // Set VTOR to the actual address, provided by the linker script.
  // Override the manual, possibly wrong, SystemInit() setting.
  SCB->VTOR = (uint32_t)(&__vectors_start);
 8001432:	4a02      	ldr	r2, [pc, #8]	; (800143c <__initialize_hardware_early+0x10>)
 8001434:	4b02      	ldr	r3, [pc, #8]	; (8001440 <__initialize_hardware_early+0x14>)
 8001436:	609a      	str	r2, [r3, #8]
#endif // (__VFP_FP__) && !(__SOFTFP__)

#if defined(OS_DEBUG_SEMIHOSTING_FAULTS)
  SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk;
#endif
}
 8001438:	bd08      	pop	{r3, pc}
 800143a:	bf00      	nop
 800143c:	08000000 	.word	0x08000000
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <__initialize_hardware>:
// constructors.

void
__attribute__((weak))
__initialize_hardware(void)
{
 8001444:	b508      	push	{r3, lr}
  // Call the CSMSIS system clock routine to store the clock frequency
  // in the SystemCoreClock global RAM location.
  SystemCoreClockUpdate();
 8001446:	f000 f899 	bl	800157c <SystemCoreClockUpdate>
}
 800144a:	bd08      	pop	{r3, pc}

0800144c <dumpExceptionStack>:
{
 800144c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800144e:	4604      	mov	r4, r0
 8001450:	460d      	mov	r5, r1
 8001452:	4617      	mov	r7, r2
 8001454:	461e      	mov	r6, r3
  trace_printf ("Stack frame:\n");
 8001456:	4827      	ldr	r0, [pc, #156]	; (80014f4 <dumpExceptionStack+0xa8>)
 8001458:	f7ff ffcc 	bl	80013f4 <trace_printf>
  trace_printf (" R0 =  %08X\n", frame->r0);
 800145c:	6821      	ldr	r1, [r4, #0]
 800145e:	4826      	ldr	r0, [pc, #152]	; (80014f8 <dumpExceptionStack+0xac>)
 8001460:	f7ff ffc8 	bl	80013f4 <trace_printf>
  trace_printf (" R1 =  %08X\n", frame->r1);
 8001464:	6861      	ldr	r1, [r4, #4]
 8001466:	4825      	ldr	r0, [pc, #148]	; (80014fc <dumpExceptionStack+0xb0>)
 8001468:	f7ff ffc4 	bl	80013f4 <trace_printf>
  trace_printf (" R2 =  %08X\n", frame->r2);
 800146c:	68a1      	ldr	r1, [r4, #8]
 800146e:	4824      	ldr	r0, [pc, #144]	; (8001500 <dumpExceptionStack+0xb4>)
 8001470:	f7ff ffc0 	bl	80013f4 <trace_printf>
  trace_printf (" R3 =  %08X\n", frame->r3);
 8001474:	68e1      	ldr	r1, [r4, #12]
 8001476:	4823      	ldr	r0, [pc, #140]	; (8001504 <dumpExceptionStack+0xb8>)
 8001478:	f7ff ffbc 	bl	80013f4 <trace_printf>
  trace_printf (" R12 = %08X\n", frame->r12);
 800147c:	6921      	ldr	r1, [r4, #16]
 800147e:	4822      	ldr	r0, [pc, #136]	; (8001508 <dumpExceptionStack+0xbc>)
 8001480:	f7ff ffb8 	bl	80013f4 <trace_printf>
  trace_printf (" LR =  %08X\n", frame->lr);
 8001484:	6961      	ldr	r1, [r4, #20]
 8001486:	4821      	ldr	r0, [pc, #132]	; (800150c <dumpExceptionStack+0xc0>)
 8001488:	f7ff ffb4 	bl	80013f4 <trace_printf>
  trace_printf (" PC =  %08X\n", frame->pc);
 800148c:	69a1      	ldr	r1, [r4, #24]
 800148e:	4820      	ldr	r0, [pc, #128]	; (8001510 <dumpExceptionStack+0xc4>)
 8001490:	f7ff ffb0 	bl	80013f4 <trace_printf>
  trace_printf (" PSR = %08X\n", frame->psr);
 8001494:	69e1      	ldr	r1, [r4, #28]
 8001496:	481f      	ldr	r0, [pc, #124]	; (8001514 <dumpExceptionStack+0xc8>)
 8001498:	f7ff ffac 	bl	80013f4 <trace_printf>
  trace_printf ("FSR/FAR:\n");
 800149c:	481e      	ldr	r0, [pc, #120]	; (8001518 <dumpExceptionStack+0xcc>)
 800149e:	f7ff ffa9 	bl	80013f4 <trace_printf>
  trace_printf (" CFSR =  %08X\n", cfsr);
 80014a2:	4629      	mov	r1, r5
 80014a4:	481d      	ldr	r0, [pc, #116]	; (800151c <dumpExceptionStack+0xd0>)
 80014a6:	f7ff ffa5 	bl	80013f4 <trace_printf>
  trace_printf (" HFSR =  %08X\n", SCB->HFSR);
 80014aa:	4c1d      	ldr	r4, [pc, #116]	; (8001520 <dumpExceptionStack+0xd4>)
 80014ac:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80014ae:	481d      	ldr	r0, [pc, #116]	; (8001524 <dumpExceptionStack+0xd8>)
 80014b0:	f7ff ffa0 	bl	80013f4 <trace_printf>
  trace_printf (" DFSR =  %08X\n", SCB->DFSR);
 80014b4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80014b6:	481c      	ldr	r0, [pc, #112]	; (8001528 <dumpExceptionStack+0xdc>)
 80014b8:	f7ff ff9c 	bl	80013f4 <trace_printf>
  trace_printf (" AFSR =  %08X\n", SCB->AFSR);
 80014bc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80014be:	481b      	ldr	r0, [pc, #108]	; (800152c <dumpExceptionStack+0xe0>)
 80014c0:	f7ff ff98 	bl	80013f4 <trace_printf>
  if (cfsr & (1UL << 7))
 80014c4:	f015 0f80 	tst.w	r5, #128	; 0x80
 80014c8:	d10a      	bne.n	80014e0 <dumpExceptionStack+0x94>
  if (cfsr & (1UL << 15))
 80014ca:	f415 4f00 	tst.w	r5, #32768	; 0x8000
 80014ce:	d10c      	bne.n	80014ea <dumpExceptionStack+0x9e>
  trace_printf ("Misc\n");
 80014d0:	4817      	ldr	r0, [pc, #92]	; (8001530 <dumpExceptionStack+0xe4>)
 80014d2:	f7ff ff8f 	bl	80013f4 <trace_printf>
  trace_printf (" LR/EXC_RETURN= %08X\n", lr);
 80014d6:	9906      	ldr	r1, [sp, #24]
 80014d8:	4816      	ldr	r0, [pc, #88]	; (8001534 <dumpExceptionStack+0xe8>)
 80014da:	f7ff ff8b 	bl	80013f4 <trace_printf>
}
 80014de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      trace_printf (" MMFAR = %08X\n", mmfar);
 80014e0:	4639      	mov	r1, r7
 80014e2:	4815      	ldr	r0, [pc, #84]	; (8001538 <dumpExceptionStack+0xec>)
 80014e4:	f7ff ff86 	bl	80013f4 <trace_printf>
 80014e8:	e7ef      	b.n	80014ca <dumpExceptionStack+0x7e>
      trace_printf (" BFAR =  %08X\n", bfar);
 80014ea:	4631      	mov	r1, r6
 80014ec:	4813      	ldr	r0, [pc, #76]	; (800153c <dumpExceptionStack+0xf0>)
 80014ee:	f7ff ff81 	bl	80013f4 <trace_printf>
 80014f2:	e7ed      	b.n	80014d0 <dumpExceptionStack+0x84>
 80014f4:	08004344 	.word	0x08004344
 80014f8:	08004354 	.word	0x08004354
 80014fc:	08004364 	.word	0x08004364
 8001500:	08004374 	.word	0x08004374
 8001504:	08004384 	.word	0x08004384
 8001508:	08004394 	.word	0x08004394
 800150c:	080043a4 	.word	0x080043a4
 8001510:	080043b4 	.word	0x080043b4
 8001514:	080043c4 	.word	0x080043c4
 8001518:	080043d4 	.word	0x080043d4
 800151c:	080043e0 	.word	0x080043e0
 8001520:	e000ed00 	.word	0xe000ed00
 8001524:	080043f0 	.word	0x080043f0
 8001528:	08004400 	.word	0x08004400
 800152c:	08004410 	.word	0x08004410
 8001530:	08004440 	.word	0x08004440
 8001534:	08004448 	.word	0x08004448
 8001538:	08004420 	.word	0x08004420
 800153c:	08004430 	.word	0x08004430

08001540 <SystemInit>:
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001540:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <SystemInit+0x34>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	f042 0201 	orr.w	r2, r2, #1
 8001548:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800154a:	2100      	movs	r1, #0
 800154c:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8001554:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8001558:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800155a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800155e:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001566:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001568:	6199      	str	r1, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800156a:	4b03      	ldr	r3, [pc, #12]	; (8001578 <SystemInit+0x38>)
 800156c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001570:	609a      	str	r2, [r3, #8]
#endif
}
 8001572:	4770      	bx	lr
 8001574:	40021000 	.word	0x40021000
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0U, msirange = 0U, pllvco = 0U, pllr = 2U, pllsource = 0U, pllm = 2U;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == RESET)
 800157c:	4b2f      	ldr	r3, [pc, #188]	; (800163c <SystemCoreClockUpdate+0xc0>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f013 0f08 	tst.w	r3, #8
 8001584:	d116      	bne.n	80015b4 <SystemCoreClockUpdate+0x38>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8001586:	4b2d      	ldr	r3, [pc, #180]	; (800163c <SystemCoreClockUpdate+0xc0>)
 8001588:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800158c:	f3c3 2303 	ubfx	r3, r3, #8, #4
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8001590:	4a2b      	ldr	r2, [pc, #172]	; (8001640 <SystemCoreClockUpdate+0xc4>)
 8001592:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001596:	4a29      	ldr	r2, [pc, #164]	; (800163c <SystemCoreClockUpdate+0xc0>)
 8001598:	6893      	ldr	r3, [r2, #8]
 800159a:	f003 030c 	and.w	r3, r3, #12
 800159e:	2b0c      	cmp	r3, #12
 80015a0:	d848      	bhi.n	8001634 <SystemCoreClockUpdate+0xb8>
 80015a2:	e8df f003 	tbb	[pc, r3]
 80015a6:	470c      	.short	0x470c
 80015a8:	47194747 	.word	0x47194747
 80015ac:	471d4747 	.word	0x471d4747
 80015b0:	4747      	.short	0x4747
 80015b2:	21          	.byte	0x21
 80015b3:	00          	.byte	0x00
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 80015b4:	4b21      	ldr	r3, [pc, #132]	; (800163c <SystemCoreClockUpdate+0xc0>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80015bc:	e7e8      	b.n	8001590 <SystemCoreClockUpdate+0x14>
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80015be:	4b21      	ldr	r3, [pc, #132]	; (8001644 <SystemCoreClockUpdate+0xc8>)
 80015c0:	6019      	str	r1, [r3, #0]
      SystemCoreClock = msirange;
      break;
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 80015c2:	4b1e      	ldr	r3, [pc, #120]	; (800163c <SystemCoreClockUpdate+0xc0>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80015ca:	4a1f      	ldr	r2, [pc, #124]	; (8001648 <SystemCoreClockUpdate+0xcc>)
 80015cc:	5cd1      	ldrb	r1, [r2, r3]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80015ce:	4a1d      	ldr	r2, [pc, #116]	; (8001644 <SystemCoreClockUpdate+0xc8>)
 80015d0:	6813      	ldr	r3, [r2, #0]
 80015d2:	40cb      	lsrs	r3, r1
 80015d4:	6013      	str	r3, [r2, #0]
}
 80015d6:	4770      	bx	lr
      SystemCoreClock = HSI_VALUE;
 80015d8:	4b1a      	ldr	r3, [pc, #104]	; (8001644 <SystemCoreClockUpdate+0xc8>)
 80015da:	4a1c      	ldr	r2, [pc, #112]	; (800164c <SystemCoreClockUpdate+0xd0>)
 80015dc:	601a      	str	r2, [r3, #0]
      break;
 80015de:	e7f0      	b.n	80015c2 <SystemCoreClockUpdate+0x46>
      SystemCoreClock = HSE_VALUE;
 80015e0:	4b18      	ldr	r3, [pc, #96]	; (8001644 <SystemCoreClockUpdate+0xc8>)
 80015e2:	4a1b      	ldr	r2, [pc, #108]	; (8001650 <SystemCoreClockUpdate+0xd4>)
 80015e4:	601a      	str	r2, [r3, #0]
      break;
 80015e6:	e7ec      	b.n	80015c2 <SystemCoreClockUpdate+0x46>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80015e8:	4b14      	ldr	r3, [pc, #80]	; (800163c <SystemCoreClockUpdate+0xc0>)
 80015ea:	68da      	ldr	r2, [r3, #12]
 80015ec:	f002 0203 	and.w	r2, r2, #3
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80015f6:	3301      	adds	r3, #1
      switch (pllsource)
 80015f8:	2a02      	cmp	r2, #2
 80015fa:	d004      	beq.n	8001606 <SystemCoreClockUpdate+0x8a>
 80015fc:	2a03      	cmp	r2, #3
 80015fe:	d015      	beq.n	800162c <SystemCoreClockUpdate+0xb0>
          pllvco = (msirange / pllm);
 8001600:	fbb1 f3f3 	udiv	r3, r1, r3
          break;
 8001604:	e002      	b.n	800160c <SystemCoreClockUpdate+0x90>
          pllvco = (HSI_VALUE / pllm);
 8001606:	4a11      	ldr	r2, [pc, #68]	; (800164c <SystemCoreClockUpdate+0xd0>)
 8001608:	fbb2 f3f3 	udiv	r3, r2, r3
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 800160c:	490b      	ldr	r1, [pc, #44]	; (800163c <SystemCoreClockUpdate+0xc0>)
 800160e:	68ca      	ldr	r2, [r1, #12]
 8001610:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8001614:	fb03 f302 	mul.w	r3, r3, r2
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8001618:	68ca      	ldr	r2, [r1, #12]
 800161a:	f3c2 6241 	ubfx	r2, r2, #25, #2
 800161e:	3201      	adds	r2, #1
 8001620:	0052      	lsls	r2, r2, #1
      SystemCoreClock = pllvco/pllr;
 8001622:	fbb3 f3f2 	udiv	r3, r3, r2
 8001626:	4a07      	ldr	r2, [pc, #28]	; (8001644 <SystemCoreClockUpdate+0xc8>)
 8001628:	6013      	str	r3, [r2, #0]
      break;
 800162a:	e7ca      	b.n	80015c2 <SystemCoreClockUpdate+0x46>
          pllvco = (HSE_VALUE / pllm);
 800162c:	4a08      	ldr	r2, [pc, #32]	; (8001650 <SystemCoreClockUpdate+0xd4>)
 800162e:	fbb2 f3f3 	udiv	r3, r2, r3
          break;
 8001632:	e7eb      	b.n	800160c <SystemCoreClockUpdate+0x90>
      SystemCoreClock = msirange;
 8001634:	4b03      	ldr	r3, [pc, #12]	; (8001644 <SystemCoreClockUpdate+0xc8>)
 8001636:	6019      	str	r1, [r3, #0]
      break;
 8001638:	e7c3      	b.n	80015c2 <SystemCoreClockUpdate+0x46>
 800163a:	bf00      	nop
 800163c:	40021000 	.word	0x40021000
 8001640:	0800449c 	.word	0x0800449c
 8001644:	2000002c 	.word	0x2000002c
 8001648:	0800448c 	.word	0x0800448c
 800164c:	00f42400 	.word	0x00f42400
 8001650:	007a1200 	.word	0x007a1200

08001654 <TIM6_DAC_IRQHandler>:
#include <sound.h>
#include <stm32l4xx.h>

void TIM6_DAC_IRQHandler() {
 8001654:	b508      	push	{r3, lr}
    if (TIM6->SR & TIM_SR_UIF) {
 8001656:	4b07      	ldr	r3, [pc, #28]	; (8001674 <TIM6_DAC_IRQHandler+0x20>)
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	f013 0f01 	tst.w	r3, #1
 800165e:	d100      	bne.n	8001662 <TIM6_DAC_IRQHandler+0xe>
        TIM6->SR &= ~TIM_SR_UIF;
        soundControlHandler();
    }
}
 8001660:	bd08      	pop	{r3, pc}
        TIM6->SR &= ~TIM_SR_UIF;
 8001662:	4a04      	ldr	r2, [pc, #16]	; (8001674 <TIM6_DAC_IRQHandler+0x20>)
 8001664:	6913      	ldr	r3, [r2, #16]
 8001666:	f023 0301 	bic.w	r3, r3, #1
 800166a:	6113      	str	r3, [r2, #16]
        soundControlHandler();
 800166c:	f001 fb3e 	bl	8002cec <soundControlHandler>
}
 8001670:	e7f6      	b.n	8001660 <TIM6_DAC_IRQHandler+0xc>
 8001672:	bf00      	nop
 8001674:	40001000 	.word	0x40001000

08001678 <TIM3_IRQHandler>:

void TIM3_IRQHandler() {
 8001678:	b508      	push	{r3, lr}
    if (TIM3->SR & TIM_SR_UIF) {
 800167a:	4b07      	ldr	r3, [pc, #28]	; (8001698 <TIM3_IRQHandler+0x20>)
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	f013 0f01 	tst.w	r3, #1
 8001682:	d100      	bne.n	8001686 <TIM3_IRQHandler+0xe>
        TIM3->SR &= ~TIM_SR_UIF;
        soundWaveformHandler();
    }
}
 8001684:	bd08      	pop	{r3, pc}
        TIM3->SR &= ~TIM_SR_UIF;
 8001686:	4a04      	ldr	r2, [pc, #16]	; (8001698 <TIM3_IRQHandler+0x20>)
 8001688:	6913      	ldr	r3, [r2, #16]
 800168a:	f023 0301 	bic.w	r3, r3, #1
 800168e:	6113      	str	r3, [r2, #16]
        soundWaveformHandler();
 8001690:	f001 fb52 	bl	8002d38 <soundWaveformHandler>
}
 8001694:	e7f6      	b.n	8001684 <TIM3_IRQHandler+0xc>
 8001696:	bf00      	nop
 8001698:	40000400 	.word	0x40000400

0800169c <cmdWrite>:
    }
    start_display();
}

static void cmdWrite(uint16_t cmd) {
    WR_CLEAR();
 800169c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80016a0:	695a      	ldr	r2, [r3, #20]
 80016a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016a6:	615a      	str	r2, [r3, #20]
    DC_CLEAR();
 80016a8:	695a      	ldr	r2, [r3, #20]
 80016aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016ae:	615a      	str	r2, [r3, #20]
    GPIOD->ODR = cmd;
 80016b0:	4a03      	ldr	r2, [pc, #12]	; (80016c0 <cmdWrite+0x24>)
 80016b2:	6150      	str	r0, [r2, #20]
    WR_SET();
 80016b4:	695a      	ldr	r2, [r3, #20]
 80016b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016ba:	615a      	str	r2, [r3, #20]
}
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	48000c00 	.word	0x48000c00

080016c4 <dataWrite>:

static void dataWrite(uint16_t data) {
    WR_CLEAR();
 80016c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80016c8:	695a      	ldr	r2, [r3, #20]
 80016ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016ce:	615a      	str	r2, [r3, #20]
    DC_SET();
 80016d0:	695a      	ldr	r2, [r3, #20]
 80016d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80016d6:	615a      	str	r2, [r3, #20]
    GPIOD->ODR = data;
 80016d8:	4a03      	ldr	r2, [pc, #12]	; (80016e8 <dataWrite+0x24>)
 80016da:	6150      	str	r0, [r2, #20]
    WR_SET();
 80016dc:	695a      	ldr	r2, [r3, #20]
 80016de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016e2:	615a      	str	r2, [r3, #20]
}
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	48000c00 	.word	0x48000c00

080016ec <setFgColor>:

void setFgColor(uint16_t color) {
    fgColor = color;
 80016ec:	4b01      	ldr	r3, [pc, #4]	; (80016f4 <setFgColor+0x8>)
 80016ee:	8018      	strh	r0, [r3, #0]
}
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	20000246 	.word	0x20000246

080016f8 <setBgColor>:

void setBgColor(uint16_t color) {
    bgColor = color;
 80016f8:	4b01      	ldr	r3, [pc, #4]	; (8001700 <setBgColor+0x8>)
 80016fa:	8018      	strh	r0, [r3, #0]
}
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	20000240 	.word	0x20000240

08001704 <graflocat>:

//column -> x
//page -> y
void graflocat(uint16_t page, uint16_t column) {
 8001704:	b538      	push	{r3, r4, r5, lr}
 8001706:	4605      	mov	r5, r0
 8001708:	460c      	mov	r4, r1
    cmdWrite(0x2A);
 800170a:	202a      	movs	r0, #42	; 0x2a
 800170c:	f7ff ffc6 	bl	800169c <cmdWrite>
    dataWrite(0x00);
 8001710:	2000      	movs	r0, #0
 8001712:	f7ff ffd7 	bl	80016c4 <dataWrite>
    dataWrite(240 - page - getFontSize());
 8001716:	f000 fe71 	bl	80023fc <getFontSize>
 800171a:	b283      	uxth	r3, r0
 800171c:	4268      	negs	r0, r5
 800171e:	1ac0      	subs	r0, r0, r3
 8001720:	b280      	uxth	r0, r0
 8001722:	30f0      	adds	r0, #240	; 0xf0
 8001724:	b280      	uxth	r0, r0
 8001726:	f7ff ffcd 	bl	80016c4 <dataWrite>
    dataWrite(0x00);
 800172a:	2000      	movs	r0, #0
 800172c:	f7ff ffca 	bl	80016c4 <dataWrite>
    dataWrite(240);
 8001730:	20f0      	movs	r0, #240	; 0xf0
 8001732:	f7ff ffc7 	bl	80016c4 <dataWrite>
    cmdWrite(0x2B);
 8001736:	202b      	movs	r0, #43	; 0x2b
 8001738:	f7ff ffb0 	bl	800169c <cmdWrite>
    dataWrite(column >> 8);
 800173c:	0a20      	lsrs	r0, r4, #8
 800173e:	f7ff ffc1 	bl	80016c4 <dataWrite>
    dataWrite(column & 0xFF);
 8001742:	b2e0      	uxtb	r0, r4
 8001744:	f7ff ffbe 	bl	80016c4 <dataWrite>
    dataWrite(0x01);
 8001748:	2001      	movs	r0, #1
 800174a:	f7ff ffbb 	bl	80016c4 <dataWrite>
    dataWrite(0x3F);
 800174e:	203f      	movs	r0, #63	; 0x3f
 8001750:	f7ff ffb8 	bl	80016c4 <dataWrite>

    currentPage = page;
 8001754:	4b02      	ldr	r3, [pc, #8]	; (8001760 <graflocat+0x5c>)
 8001756:	801d      	strh	r5, [r3, #0]
    currentColumn = column;
 8001758:	4b02      	ldr	r3, [pc, #8]	; (8001764 <graflocat+0x60>)
 800175a:	801c      	strh	r4, [r3, #0]
}
 800175c:	bd38      	pop	{r3, r4, r5, pc}
 800175e:	bf00      	nop
 8001760:	20000244 	.word	0x20000244
 8001764:	20000242 	.word	0x20000242

08001768 <fillhx>:

void fillhx(uint16_t column) {
 8001768:	b570      	push	{r4, r5, r6, lr}
 800176a:	4606      	mov	r6, r0
    uint16_t lastCol;

    lastCol = column;
    if (column > 320) {
 800176c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
 8001770:	d901      	bls.n	8001776 <fillhx+0xe>
        lastCol = 320;
 8001772:	f44f 76a0 	mov.w	r6, #320	; 0x140
    }
    graflocat(currentPage, currentColumn);
 8001776:	4c11      	ldr	r4, [pc, #68]	; (80017bc <fillhx+0x54>)
 8001778:	8821      	ldrh	r1, [r4, #0]
 800177a:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <fillhx+0x58>)
 800177c:	8818      	ldrh	r0, [r3, #0]
 800177e:	f7ff ffc1 	bl	8001704 <graflocat>
    for (int i = currentColumn; i < lastCol; i++) {
 8001782:	8825      	ldrh	r5, [r4, #0]
 8001784:	e011      	b.n	80017aa <fillhx+0x42>
        cmdWrite(0x2C);
        for (int j = 0; j < getFontSize(); j++) {
            dataWrite(bgColor);
 8001786:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <fillhx+0x5c>)
 8001788:	8818      	ldrh	r0, [r3, #0]
 800178a:	f7ff ff9b 	bl	80016c4 <dataWrite>
        for (int j = 0; j < getFontSize(); j++) {
 800178e:	3401      	adds	r4, #1
 8001790:	f000 fe34 	bl	80023fc <getFontSize>
 8001794:	42a0      	cmp	r0, r4
 8001796:	dcf6      	bgt.n	8001786 <fillhx+0x1e>
        }
        graflocat(currentPage, currentColumn + 1);
 8001798:	4b08      	ldr	r3, [pc, #32]	; (80017bc <fillhx+0x54>)
 800179a:	8819      	ldrh	r1, [r3, #0]
 800179c:	3101      	adds	r1, #1
 800179e:	b289      	uxth	r1, r1
 80017a0:	4b07      	ldr	r3, [pc, #28]	; (80017c0 <fillhx+0x58>)
 80017a2:	8818      	ldrh	r0, [r3, #0]
 80017a4:	f7ff ffae 	bl	8001704 <graflocat>
    for (int i = currentColumn; i < lastCol; i++) {
 80017a8:	3501      	adds	r5, #1
 80017aa:	42ae      	cmp	r6, r5
 80017ac:	dd04      	ble.n	80017b8 <fillhx+0x50>
        cmdWrite(0x2C);
 80017ae:	202c      	movs	r0, #44	; 0x2c
 80017b0:	f7ff ff74 	bl	800169c <cmdWrite>
        for (int j = 0; j < getFontSize(); j++) {
 80017b4:	2400      	movs	r4, #0
 80017b6:	e7eb      	b.n	8001790 <fillhx+0x28>
    }
}
 80017b8:	bd70      	pop	{r4, r5, r6, pc}
 80017ba:	bf00      	nop
 80017bc:	20000242 	.word	0x20000242
 80017c0:	20000244 	.word	0x20000244
 80017c4:	20000240 	.word	0x20000240

080017c8 <enterxxx>:

void enterxxx() {
 80017c8:	b508      	push	{r3, lr}
    fillhx(320);
 80017ca:	f44f 70a0 	mov.w	r0, #320	; 0x140
 80017ce:	f7ff ffcb 	bl	8001768 <fillhx>
    currentColumn = 0;
 80017d2:	4b05      	ldr	r3, [pc, #20]	; (80017e8 <enterxxx+0x20>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	801a      	strh	r2, [r3, #0]
    currentPage += getFontSize();
 80017d8:	f000 fe10 	bl	80023fc <getFontSize>
 80017dc:	4a03      	ldr	r2, [pc, #12]	; (80017ec <enterxxx+0x24>)
 80017de:	8813      	ldrh	r3, [r2, #0]
 80017e0:	fa13 f080 	uxtah	r0, r3, r0
 80017e4:	8010      	strh	r0, [r2, #0]
}
 80017e6:	bd08      	pop	{r3, pc}
 80017e8:	20000242 	.word	0x20000242
 80017ec:	20000244 	.word	0x20000244

080017f0 <start_display>:

void start_display() {
 80017f0:	b508      	push	{r3, lr}
    currentPage = 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	4a06      	ldr	r2, [pc, #24]	; (8001810 <start_display+0x20>)
 80017f6:	8013      	strh	r3, [r2, #0]
    currentColumn = 0;
 80017f8:	4a06      	ldr	r2, [pc, #24]	; (8001814 <start_display+0x24>)
 80017fa:	8013      	strh	r3, [r2, #0]
    fgColor = color_datatitle;
 80017fc:	4a06      	ldr	r2, [pc, #24]	; (8001818 <start_display+0x28>)
 80017fe:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8001802:	8011      	strh	r1, [r2, #0]
    bgColor = color_defback;
 8001804:	4a05      	ldr	r2, [pc, #20]	; (800181c <start_display+0x2c>)
 8001806:	8013      	strh	r3, [r2, #0]
    setFontSize(8);
 8001808:	2008      	movs	r0, #8
 800180a:	f000 fdcd 	bl	80023a8 <setFontSize>
}
 800180e:	bd08      	pop	{r3, pc}
 8001810:	20000244 	.word	0x20000244
 8001814:	20000242 	.word	0x20000242
 8001818:	20000246 	.word	0x20000246
 800181c:	20000240 	.word	0x20000240

08001820 <initDisplay>:
void initDisplay() {
 8001820:	b508      	push	{r3, lr}
    RST_SET();
 8001822:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001826:	6953      	ldr	r3, [r2, #20]
 8001828:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800182c:	6153      	str	r3, [r2, #20]
    for (int i = 0; i < 1000; i++);
 800182e:	2300      	movs	r3, #0
 8001830:	e000      	b.n	8001834 <initDisplay+0x14>
 8001832:	3301      	adds	r3, #1
 8001834:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001838:	dbfb      	blt.n	8001832 <initDisplay+0x12>
    RD_SET();
 800183a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800183e:	695a      	ldr	r2, [r3, #20]
 8001840:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001844:	615a      	str	r2, [r3, #20]
    CS_CLEAR();
 8001846:	695a      	ldr	r2, [r3, #20]
 8001848:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800184c:	615a      	str	r2, [r3, #20]
    for (uint32_t i = 0; i < INIT_SEQUENCE_LENGTH; i++) {
 800184e:	2300      	movs	r3, #0
 8001850:	e014      	b.n	800187c <initDisplay+0x5c>
                WR_CLEAR();
 8001852:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001856:	6951      	ldr	r1, [r2, #20]
 8001858:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800185c:	6151      	str	r1, [r2, #20]
                DC_CLEAR();
 800185e:	6951      	ldr	r1, [r2, #20]
 8001860:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001864:	6151      	str	r1, [r2, #20]
                GPIOD->ODR = DisplayInitSequence[i].data;
 8001866:	4916      	ldr	r1, [pc, #88]	; (80018c0 <initDisplay+0xa0>)
 8001868:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 800186c:	7848      	ldrb	r0, [r1, #1]
 800186e:	4915      	ldr	r1, [pc, #84]	; (80018c4 <initDisplay+0xa4>)
 8001870:	6148      	str	r0, [r1, #20]
                WR_SET();
 8001872:	6951      	ldr	r1, [r2, #20]
 8001874:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001878:	6151      	str	r1, [r2, #20]
    for (uint32_t i = 0; i < INIT_SEQUENCE_LENGTH; i++) {
 800187a:	3301      	adds	r3, #1
 800187c:	2b4d      	cmp	r3, #77	; 0x4d
 800187e:	d81b      	bhi.n	80018b8 <initDisplay+0x98>
        switch (DisplayInitSequence[i].type) {
 8001880:	4a0f      	ldr	r2, [pc, #60]	; (80018c0 <initDisplay+0xa0>)
 8001882:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001886:	2a00      	cmp	r2, #0
 8001888:	d0e3      	beq.n	8001852 <initDisplay+0x32>
 800188a:	2a01      	cmp	r2, #1
 800188c:	d1f5      	bne.n	800187a <initDisplay+0x5a>
                WR_CLEAR();
 800188e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001892:	6951      	ldr	r1, [r2, #20]
 8001894:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8001898:	6151      	str	r1, [r2, #20]
                DC_SET();
 800189a:	6951      	ldr	r1, [r2, #20]
 800189c:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80018a0:	6151      	str	r1, [r2, #20]
                GPIOD->ODR = DisplayInitSequence[i].data;
 80018a2:	4907      	ldr	r1, [pc, #28]	; (80018c0 <initDisplay+0xa0>)
 80018a4:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 80018a8:	7848      	ldrb	r0, [r1, #1]
 80018aa:	4906      	ldr	r1, [pc, #24]	; (80018c4 <initDisplay+0xa4>)
 80018ac:	6148      	str	r0, [r1, #20]
                WR_SET();
 80018ae:	6951      	ldr	r1, [r2, #20]
 80018b0:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80018b4:	6151      	str	r1, [r2, #20]
                break;
 80018b6:	e7e0      	b.n	800187a <initDisplay+0x5a>
    start_display();
 80018b8:	f7ff ff9a 	bl	80017f0 <start_display>
}
 80018bc:	bd08      	pop	{r3, pc}
 80018be:	bf00      	nop
 80018c0:	080044cc 	.word	0x080044cc
 80018c4:	48000c00 	.word	0x48000c00

080018c8 <grafchar>:

void grafchar(char c) {
 80018c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018cc:	b083      	sub	sp, #12
 80018ce:	4604      	mov	r4, r0
    uint32_t pixelMask = 0;
    uint32_t charSize;
    uint32_t fontScale, scaleW;
    uint32_t i = 0;

    font = (Font*)getCurrentFont();
 80018d0:	f000 fd9a 	bl	8002408 <getCurrentFont>
 80018d4:	4681      	mov	r9, r0
    charImage = (FontCharacter*)font->chars[c - 0x20];
 80018d6:	f1a4 0320 	sub.w	r3, r4, #32
 80018da:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80018de:	f8d3 b004 	ldr.w	fp, [r3, #4]
    charSize = charImage->charWidth * font->charHeight / font->elemSize;
 80018e2:	f89b 2000 	ldrb.w	r2, [fp]
 80018e6:	7803      	ldrb	r3, [r0, #0]
 80018e8:	fb03 f302 	mul.w	r3, r3, r2
 80018ec:	7842      	ldrb	r2, [r0, #1]
 80018ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80018f2:	9300      	str	r3, [sp, #0]
    fontScale = getFontScale();
 80018f4:	f000 fdaa 	bl	800244c <getFontScale>
 80018f8:	4605      	mov	r5, r0

    scaleW = fontScale;

    graflocat(currentPage, currentColumn);
 80018fa:	4b3a      	ldr	r3, [pc, #232]	; (80019e4 <grafchar+0x11c>)
 80018fc:	8819      	ldrh	r1, [r3, #0]
 80018fe:	4b3a      	ldr	r3, [pc, #232]	; (80019e8 <grafchar+0x120>)
 8001900:	8818      	ldrh	r0, [r3, #0]
 8001902:	f7ff feff 	bl	8001704 <graflocat>
    cmdWrite(0x2C);
 8001906:	202c      	movs	r0, #44	; 0x2c
 8001908:	f7ff fec8 	bl	800169c <cmdWrite>
    scaleW = fontScale;
 800190c:	9501      	str	r5, [sp, #4]
    uint32_t i = 0;
 800190e:	f04f 0a00 	mov.w	sl, #0
    uint32_t pixelMask = 0;
 8001912:	46d0      	mov	r8, sl
    uint32_t charPixels = 0;
 8001914:	4656      	mov	r6, sl
    while (i < charSize) {
 8001916:	e039      	b.n	800198c <grafchar+0xc4>
        switch (font->elemSize) {
        case 8:
            charPixels = *((uint8_t*)charImage->charData + i);
 8001918:	f8db 3004 	ldr.w	r3, [fp, #4]
 800191c:	f813 600a 	ldrb.w	r6, [r3, sl]
            pixelMask = 0x80;
 8001920:	f04f 0880 	mov.w	r8, #128	; 0x80
            break;
 8001924:	e03d      	b.n	80019a2 <grafchar+0xda>
        case 16:
            charPixels = *((uint16_t*)charImage->charData + i);
 8001926:	f8db 3004 	ldr.w	r3, [fp, #4]
 800192a:	f833 601a 	ldrh.w	r6, [r3, sl, lsl #1]
            pixelMask = 0x8000;
 800192e:	f44f 4800 	mov.w	r8, #32768	; 0x8000
            break;
 8001932:	e036      	b.n	80019a2 <grafchar+0xda>
        case 32:
            charPixels = *((uint32_t*)charImage->charData + i);
 8001934:	f8db 3004 	ldr.w	r3, [fp, #4]
 8001938:	f853 602a 	ldr.w	r6, [r3, sl, lsl #2]
            pixelMask = 0x80000000;
 800193c:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
            break;
 8001940:	e02f      	b.n	80019a2 <grafchar+0xda>
        }

        for (int j = 0; j < font->elemSize; j++) {
            if ((charPixels & pixelMask) != 0) {
                for (uint32_t scaleH = 0; scaleH < fontScale; scaleH++) {
                    dataWrite(fgColor);
 8001942:	4b2a      	ldr	r3, [pc, #168]	; (80019ec <grafchar+0x124>)
 8001944:	8818      	ldrh	r0, [r3, #0]
 8001946:	f7ff febd 	bl	80016c4 <dataWrite>
                for (uint32_t scaleH = 0; scaleH < fontScale; scaleH++) {
 800194a:	3401      	adds	r4, #1
 800194c:	42ac      	cmp	r4, r5
 800194e:	d3f8      	bcc.n	8001942 <grafchar+0x7a>
            } else {
                for (uint32_t scaleH = 0; scaleH < fontScale; scaleH++) {
                    dataWrite(bgColor);
                }
            }
            charPixels <<= 1;
 8001950:	0076      	lsls	r6, r6, #1
        for (int j = 0; j < font->elemSize; j++) {
 8001952:	3701      	adds	r7, #1
 8001954:	f899 3001 	ldrb.w	r3, [r9, #1]
 8001958:	42bb      	cmp	r3, r7
 800195a:	dd0c      	ble.n	8001976 <grafchar+0xae>
            if ((charPixels & pixelMask) != 0) {
 800195c:	ea16 0408 	ands.w	r4, r6, r8
 8001960:	d006      	beq.n	8001970 <grafchar+0xa8>
                for (uint32_t scaleH = 0; scaleH < fontScale; scaleH++) {
 8001962:	2400      	movs	r4, #0
 8001964:	e7f2      	b.n	800194c <grafchar+0x84>
                    dataWrite(bgColor);
 8001966:	4b22      	ldr	r3, [pc, #136]	; (80019f0 <grafchar+0x128>)
 8001968:	8818      	ldrh	r0, [r3, #0]
 800196a:	f7ff feab 	bl	80016c4 <dataWrite>
                for (uint32_t scaleH = 0; scaleH < fontScale; scaleH++) {
 800196e:	3401      	adds	r4, #1
 8001970:	42ac      	cmp	r4, r5
 8001972:	d3f8      	bcc.n	8001966 <grafchar+0x9e>
 8001974:	e7ec      	b.n	8001950 <grafchar+0x88>
        }

        i++;
 8001976:	f10a 0a01 	add.w	sl, sl, #1
        if (i % (font->charHeight / font->elemSize) == 0) {
 800197a:	f899 2000 	ldrb.w	r2, [r9]
 800197e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001982:	fbba f2f3 	udiv	r2, sl, r3
 8001986:	fb03 a312 	mls	r3, r3, r2, sl
 800198a:	b163      	cbz	r3, 80019a6 <grafchar+0xde>
    while (i < charSize) {
 800198c:	9b00      	ldr	r3, [sp, #0]
 800198e:	459a      	cmp	sl, r3
 8001990:	d224      	bcs.n	80019dc <grafchar+0x114>
        switch (font->elemSize) {
 8001992:	f899 3001 	ldrb.w	r3, [r9, #1]
 8001996:	2b10      	cmp	r3, #16
 8001998:	d0c5      	beq.n	8001926 <grafchar+0x5e>
 800199a:	2b20      	cmp	r3, #32
 800199c:	d0ca      	beq.n	8001934 <grafchar+0x6c>
 800199e:	2b08      	cmp	r3, #8
 80019a0:	d0ba      	beq.n	8001918 <grafchar+0x50>
        for (int j = 0; j < font->elemSize; j++) {
 80019a2:	2700      	movs	r7, #0
 80019a4:	e7d6      	b.n	8001954 <grafchar+0x8c>
            graflocat(currentPage, currentColumn + 1);
 80019a6:	4b0f      	ldr	r3, [pc, #60]	; (80019e4 <grafchar+0x11c>)
 80019a8:	8819      	ldrh	r1, [r3, #0]
 80019aa:	3101      	adds	r1, #1
 80019ac:	b289      	uxth	r1, r1
 80019ae:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <grafchar+0x120>)
 80019b0:	8818      	ldrh	r0, [r3, #0]
 80019b2:	f7ff fea7 	bl	8001704 <graflocat>
            cmdWrite(0x2C);
 80019b6:	202c      	movs	r0, #44	; 0x2c
 80019b8:	f7ff fe70 	bl	800169c <cmdWrite>
            if (scaleW > 1) {
 80019bc:	9b01      	ldr	r3, [sp, #4]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d90a      	bls.n	80019d8 <grafchar+0x110>
                scaleW--;
 80019c2:	3b01      	subs	r3, #1
 80019c4:	9301      	str	r3, [sp, #4]
                i = i - font->charHeight / font->elemSize;
 80019c6:	f899 3000 	ldrb.w	r3, [r9]
 80019ca:	f899 2001 	ldrb.w	r2, [r9, #1]
 80019ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80019d2:	ebaa 0a03 	sub.w	sl, sl, r3
 80019d6:	e7d9      	b.n	800198c <grafchar+0xc4>
            } else {
                scaleW = fontScale;
 80019d8:	9501      	str	r5, [sp, #4]
 80019da:	e7d7      	b.n	800198c <grafchar+0xc4>
            }
        }
    }
}
 80019dc:	b003      	add	sp, #12
 80019de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019e2:	bf00      	nop
 80019e4:	20000242 	.word	0x20000242
 80019e8:	20000244 	.word	0x20000244
 80019ec:	20000246 	.word	0x20000246
 80019f0:	20000240 	.word	0x20000240

080019f4 <keyshow>:

void keyshow(uint8_t key) {
 80019f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    KeyCharacter *keyCharacter = getKeyCharacter(key);
 80019f8:	f000 fd2e 	bl	8002458 <getKeyCharacter>
 80019fc:	4606      	mov	r6, r0
    const FontCharacter *currentImage;
    uint8_t charPixels;
    uint8_t pixelMask;
    uint32_t i = 0;

    currentImage = keyCharacter->startCap;
 80019fe:	f8d0 8004 	ldr.w	r8, [r0, #4]
    graflocat(currentPage, currentColumn);
 8001a02:	4b5b      	ldr	r3, [pc, #364]	; (8001b70 <keyshow+0x17c>)
 8001a04:	8819      	ldrh	r1, [r3, #0]
 8001a06:	4b5b      	ldr	r3, [pc, #364]	; (8001b74 <keyshow+0x180>)
 8001a08:	8818      	ldrh	r0, [r3, #0]
 8001a0a:	f7ff fe7b 	bl	8001704 <graflocat>
    cmdWrite(0x2C);
 8001a0e:	202c      	movs	r0, #44	; 0x2c
 8001a10:	f7ff fe44 	bl	800169c <cmdWrite>
    uint32_t i = 0;
 8001a14:	2700      	movs	r7, #0
    while (i < currentImage->charWidth * 3) {
 8001a16:	e018      	b.n	8001a4a <keyshow+0x56>
        charPixels = *((uint8_t*)currentImage->charData + i);
        pixelMask = 0x80;
        for (int j = 0; j < 8; j++) {
            if ((charPixels & pixelMask) != 0) {
                dataWrite(keyCharacter->bgColor);
 8001a18:	8830      	ldrh	r0, [r6, #0]
 8001a1a:	f7ff fe53 	bl	80016c4 <dataWrite>
            } else {
                dataWrite(bgColor);
            }
            charPixels <<= 1;
 8001a1e:	0064      	lsls	r4, r4, #1
 8001a20:	b2e4      	uxtb	r4, r4
        for (int j = 0; j < 8; j++) {
 8001a22:	3501      	adds	r5, #1
 8001a24:	2d07      	cmp	r5, #7
 8001a26:	dc07      	bgt.n	8001a38 <keyshow+0x44>
            if ((charPixels & pixelMask) != 0) {
 8001a28:	f014 0f80 	tst.w	r4, #128	; 0x80
 8001a2c:	d1f4      	bne.n	8001a18 <keyshow+0x24>
                dataWrite(bgColor);
 8001a2e:	4b52      	ldr	r3, [pc, #328]	; (8001b78 <keyshow+0x184>)
 8001a30:	8818      	ldrh	r0, [r3, #0]
 8001a32:	f7ff fe47 	bl	80016c4 <dataWrite>
 8001a36:	e7f2      	b.n	8001a1e <keyshow+0x2a>
        }
        i++;
 8001a38:	3701      	adds	r7, #1
        if (i % 3 == 0) {
 8001a3a:	4b50      	ldr	r3, [pc, #320]	; (8001b7c <keyshow+0x188>)
 8001a3c:	fba3 2307 	umull	r2, r3, r3, r7
 8001a40:	085b      	lsrs	r3, r3, #1
 8001a42:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001a46:	429f      	cmp	r7, r3
 8001a48:	d00a      	beq.n	8001a60 <keyshow+0x6c>
    while (i < currentImage->charWidth * 3) {
 8001a4a:	f898 3000 	ldrb.w	r3, [r8]
 8001a4e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001a52:	42bb      	cmp	r3, r7
 8001a54:	d910      	bls.n	8001a78 <keyshow+0x84>
        charPixels = *((uint8_t*)currentImage->charData + i);
 8001a56:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001a5a:	5ddc      	ldrb	r4, [r3, r7]
        for (int j = 0; j < 8; j++) {
 8001a5c:	2500      	movs	r5, #0
 8001a5e:	e7e1      	b.n	8001a24 <keyshow+0x30>
            graflocat(currentPage, currentColumn + 1);
 8001a60:	4b43      	ldr	r3, [pc, #268]	; (8001b70 <keyshow+0x17c>)
 8001a62:	8819      	ldrh	r1, [r3, #0]
 8001a64:	3101      	adds	r1, #1
 8001a66:	b289      	uxth	r1, r1
 8001a68:	4b42      	ldr	r3, [pc, #264]	; (8001b74 <keyshow+0x180>)
 8001a6a:	8818      	ldrh	r0, [r3, #0]
 8001a6c:	f7ff fe4a 	bl	8001704 <graflocat>
            cmdWrite(0x2C);
 8001a70:	202c      	movs	r0, #44	; 0x2c
 8001a72:	f7ff fe13 	bl	800169c <cmdWrite>
 8001a76:	e7e8      	b.n	8001a4a <keyshow+0x56>
        }
    }
    i = 0;
    currentImage = keyCharacter->keyCharacter;
 8001a78:	f8d6 8008 	ldr.w	r8, [r6, #8]
    graflocat(currentPage, currentColumn);
 8001a7c:	4b3c      	ldr	r3, [pc, #240]	; (8001b70 <keyshow+0x17c>)
 8001a7e:	8819      	ldrh	r1, [r3, #0]
 8001a80:	4b3c      	ldr	r3, [pc, #240]	; (8001b74 <keyshow+0x180>)
 8001a82:	8818      	ldrh	r0, [r3, #0]
 8001a84:	f7ff fe3e 	bl	8001704 <graflocat>
    cmdWrite(0x2C);
 8001a88:	202c      	movs	r0, #44	; 0x2c
 8001a8a:	f7ff fe07 	bl	800169c <cmdWrite>
    i = 0;
 8001a8e:	2700      	movs	r7, #0
    while (i < currentImage->charWidth * 3) {
 8001a90:	e017      	b.n	8001ac2 <keyshow+0xce>
        charPixels = *((uint8_t*)currentImage->charData + i);
        pixelMask = 0x80;
        for (int j = 0; j < 8; j++) {
            if ((charPixels & pixelMask) != 0) {
                dataWrite(keyCharacter->fgColor);
 8001a92:	8870      	ldrh	r0, [r6, #2]
 8001a94:	f7ff fe16 	bl	80016c4 <dataWrite>
            } else {
                dataWrite(keyCharacter->bgColor);
            }
            charPixels <<= 1;
 8001a98:	0064      	lsls	r4, r4, #1
 8001a9a:	b2e4      	uxtb	r4, r4
        for (int j = 0; j < 8; j++) {
 8001a9c:	3501      	adds	r5, #1
 8001a9e:	2d07      	cmp	r5, #7
 8001aa0:	dc06      	bgt.n	8001ab0 <keyshow+0xbc>
            if ((charPixels & pixelMask) != 0) {
 8001aa2:	f014 0f80 	tst.w	r4, #128	; 0x80
 8001aa6:	d1f4      	bne.n	8001a92 <keyshow+0x9e>
                dataWrite(keyCharacter->bgColor);
 8001aa8:	8830      	ldrh	r0, [r6, #0]
 8001aaa:	f7ff fe0b 	bl	80016c4 <dataWrite>
 8001aae:	e7f3      	b.n	8001a98 <keyshow+0xa4>
        }
        i++;
 8001ab0:	3701      	adds	r7, #1
        if (i % 3 == 0) {
 8001ab2:	4b32      	ldr	r3, [pc, #200]	; (8001b7c <keyshow+0x188>)
 8001ab4:	fba3 2307 	umull	r2, r3, r3, r7
 8001ab8:	085b      	lsrs	r3, r3, #1
 8001aba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001abe:	429f      	cmp	r7, r3
 8001ac0:	d00a      	beq.n	8001ad8 <keyshow+0xe4>
    while (i < currentImage->charWidth * 3) {
 8001ac2:	f898 3000 	ldrb.w	r3, [r8]
 8001ac6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001aca:	42bb      	cmp	r3, r7
 8001acc:	d910      	bls.n	8001af0 <keyshow+0xfc>
        charPixels = *((uint8_t*)currentImage->charData + i);
 8001ace:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001ad2:	5ddc      	ldrb	r4, [r3, r7]
        for (int j = 0; j < 8; j++) {
 8001ad4:	2500      	movs	r5, #0
 8001ad6:	e7e2      	b.n	8001a9e <keyshow+0xaa>
            graflocat(currentPage, currentColumn + 1);
 8001ad8:	4b25      	ldr	r3, [pc, #148]	; (8001b70 <keyshow+0x17c>)
 8001ada:	8819      	ldrh	r1, [r3, #0]
 8001adc:	3101      	adds	r1, #1
 8001ade:	b289      	uxth	r1, r1
 8001ae0:	4b24      	ldr	r3, [pc, #144]	; (8001b74 <keyshow+0x180>)
 8001ae2:	8818      	ldrh	r0, [r3, #0]
 8001ae4:	f7ff fe0e 	bl	8001704 <graflocat>
            cmdWrite(0x2C);
 8001ae8:	202c      	movs	r0, #44	; 0x2c
 8001aea:	f7ff fdd7 	bl	800169c <cmdWrite>
 8001aee:	e7e8      	b.n	8001ac2 <keyshow+0xce>
        }
    }
    i = 0;
    currentImage = keyCharacter->endCap;
 8001af0:	f8d6 800c 	ldr.w	r8, [r6, #12]
    graflocat(currentPage, currentColumn);
 8001af4:	4b1e      	ldr	r3, [pc, #120]	; (8001b70 <keyshow+0x17c>)
 8001af6:	8819      	ldrh	r1, [r3, #0]
 8001af8:	4b1e      	ldr	r3, [pc, #120]	; (8001b74 <keyshow+0x180>)
 8001afa:	8818      	ldrh	r0, [r3, #0]
 8001afc:	f7ff fe02 	bl	8001704 <graflocat>
    cmdWrite(0x2C);
 8001b00:	202c      	movs	r0, #44	; 0x2c
 8001b02:	f7ff fdcb 	bl	800169c <cmdWrite>
    i = 0;
 8001b06:	2700      	movs	r7, #0
    while (i < currentImage->charWidth * 3) {
 8001b08:	e018      	b.n	8001b3c <keyshow+0x148>
        charPixels = *((uint8_t*)currentImage->charData + i);
        pixelMask = 0x80;
        for (int j = 0; j < 8; j++) {
            if ((charPixels & pixelMask) != 0) {
                dataWrite(keyCharacter->bgColor);
 8001b0a:	8830      	ldrh	r0, [r6, #0]
 8001b0c:	f7ff fdda 	bl	80016c4 <dataWrite>
            } else {
                dataWrite(bgColor);
            }
            charPixels <<= 1;
 8001b10:	0064      	lsls	r4, r4, #1
 8001b12:	b2e4      	uxtb	r4, r4
        for (int j = 0; j < 8; j++) {
 8001b14:	3501      	adds	r5, #1
 8001b16:	2d07      	cmp	r5, #7
 8001b18:	dc07      	bgt.n	8001b2a <keyshow+0x136>
            if ((charPixels & pixelMask) != 0) {
 8001b1a:	f014 0f80 	tst.w	r4, #128	; 0x80
 8001b1e:	d1f4      	bne.n	8001b0a <keyshow+0x116>
                dataWrite(bgColor);
 8001b20:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <keyshow+0x184>)
 8001b22:	8818      	ldrh	r0, [r3, #0]
 8001b24:	f7ff fdce 	bl	80016c4 <dataWrite>
 8001b28:	e7f2      	b.n	8001b10 <keyshow+0x11c>
        }
        i++;
 8001b2a:	3701      	adds	r7, #1
        if (i % 3 == 0) {
 8001b2c:	4b13      	ldr	r3, [pc, #76]	; (8001b7c <keyshow+0x188>)
 8001b2e:	fba3 2307 	umull	r2, r3, r3, r7
 8001b32:	085b      	lsrs	r3, r3, #1
 8001b34:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001b38:	429f      	cmp	r7, r3
 8001b3a:	d00a      	beq.n	8001b52 <keyshow+0x15e>
    while (i < currentImage->charWidth * 3) {
 8001b3c:	f898 3000 	ldrb.w	r3, [r8]
 8001b40:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001b44:	42bb      	cmp	r3, r7
 8001b46:	d910      	bls.n	8001b6a <keyshow+0x176>
        charPixels = *((uint8_t*)currentImage->charData + i);
 8001b48:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001b4c:	5ddc      	ldrb	r4, [r3, r7]
        for (int j = 0; j < 8; j++) {
 8001b4e:	2500      	movs	r5, #0
 8001b50:	e7e1      	b.n	8001b16 <keyshow+0x122>
            graflocat(currentPage, currentColumn + 1);
 8001b52:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <keyshow+0x17c>)
 8001b54:	8819      	ldrh	r1, [r3, #0]
 8001b56:	3101      	adds	r1, #1
 8001b58:	b289      	uxth	r1, r1
 8001b5a:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <keyshow+0x180>)
 8001b5c:	8818      	ldrh	r0, [r3, #0]
 8001b5e:	f7ff fdd1 	bl	8001704 <graflocat>
            cmdWrite(0x2C);
 8001b62:	202c      	movs	r0, #44	; 0x2c
 8001b64:	f7ff fd9a 	bl	800169c <cmdWrite>
 8001b68:	e7e8      	b.n	8001b3c <keyshow+0x148>
        }
    }
}
 8001b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000242 	.word	0x20000242
 8001b74:	20000244 	.word	0x20000244
 8001b78:	20000240 	.word	0x20000240
 8001b7c:	aaaaaaab 	.word	0xaaaaaaab

08001b80 <putstr>:

void putstr(const char *s) {
 8001b80:	b510      	push	{r4, lr}
 8001b82:	4604      	mov	r4, r0
    while (*s) {
 8001b84:	e002      	b.n	8001b8c <putstr+0xc>
        grafchar(*(s++));
 8001b86:	3401      	adds	r4, #1
 8001b88:	f7ff fe9e 	bl	80018c8 <grafchar>
    while (*s) {
 8001b8c:	f994 0000 	ldrsb.w	r0, [r4]
 8001b90:	2800      	cmp	r0, #0
 8001b92:	d1f8      	bne.n	8001b86 <putstr+0x6>
    }
}
 8001b94:	bd10      	pop	{r4, pc}
	...

08001b98 <filldisplay>:

void filldisplay() {
 8001b98:	b508      	push	{r3, lr}
    setFontSize(8);
 8001b9a:	2008      	movs	r0, #8
 8001b9c:	f000 fc04 	bl	80023a8 <setFontSize>
    while (currentPage < 240) {
 8001ba0:	e001      	b.n	8001ba6 <filldisplay+0xe>
        enterxxx();
 8001ba2:	f7ff fe11 	bl	80017c8 <enterxxx>
    while (currentPage < 240) {
 8001ba6:	4b02      	ldr	r3, [pc, #8]	; (8001bb0 <filldisplay+0x18>)
 8001ba8:	881b      	ldrh	r3, [r3, #0]
 8001baa:	2bef      	cmp	r3, #239	; 0xef
 8001bac:	d9f9      	bls.n	8001ba2 <filldisplay+0xa>
    }
}
 8001bae:	bd08      	pop	{r3, pc}
 8001bb0:	20000244 	.word	0x20000244

08001bb4 <enteremtystr>:

void enteremtystr() {
 8001bb4:	b508      	push	{r3, lr}
    enterxxx();
 8001bb6:	f7ff fe07 	bl	80017c8 <enterxxx>
    setFontSize(8);
 8001bba:	2008      	movs	r0, #8
 8001bbc:	f000 fbf4 	bl	80023a8 <setFontSize>
    enterxxx();
 8001bc0:	f7ff fe02 	bl	80017c8 <enterxxx>
}
 8001bc4:	bd08      	pop	{r3, pc}

08001bc6 <display00>:

void display00() {
 8001bc6:	b508      	push	{r3, lr}
    start_display();
 8001bc8:	f7ff fe12 	bl	80017f0 <start_display>
    filldisplay();
 8001bcc:	f7ff ffe4 	bl	8001b98 <filldisplay>
}
 8001bd0:	bd08      	pop	{r3, pc}
	...

08001bd4 <display01>:

void display01() {
 8001bd4:	b508      	push	{r3, lr}
    uint16_t column1, column2;

    start_display();
 8001bd6:	f7ff fe0b 	bl	80017f0 <start_display>
    setFontSize(8);
 8001bda:	2008      	movs	r0, #8
 8001bdc:	f000 fbe4 	bl	80023a8 <setFontSize>
    setFgColor(color_white);
 8001be0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001be4:	f7ff fd82 	bl	80016ec <setFgColor>
    enterxxx();
 8001be8:	f7ff fdee 	bl	80017c8 <enterxxx>
    setFontSize(32);
 8001bec:	2020      	movs	r0, #32
 8001bee:	f000 fbdb 	bl	80023a8 <setFontSize>
    fillhx(16);
 8001bf2:	2010      	movs	r0, #16
 8001bf4:	f7ff fdb8 	bl	8001768 <fillhx>
    //grafchar(0x5B); // 5b
    //grafchar(0x7E);
    putstr("   Auriga");
 8001bf8:	4845      	ldr	r0, [pc, #276]	; (8001d10 <display01+0x13c>)
 8001bfa:	f7ff ffc1 	bl	8001b80 <putstr>
    grafchar(' ');
 8001bfe:	2020      	movs	r0, #32
 8001c00:	f7ff fe62 	bl	80018c8 <grafchar>
    column1 = currentColumn;
    putstr("SimTech");
 8001c04:	4843      	ldr	r0, [pc, #268]	; (8001d14 <display01+0x140>)
 8001c06:	f7ff ffbb 	bl	8001b80 <putstr>
    column2 = currentColumn;
    setFontSize(8);
 8001c0a:	2008      	movs	r0, #8
 8001c0c:	f000 fbcc 	bl	80023a8 <setFontSize>
    putstr("TM");
 8001c10:	4841      	ldr	r0, [pc, #260]	; (8001d18 <display01+0x144>)
 8001c12:	f7ff ffb5 	bl	8001b80 <putstr>
    setFontSize(32);
 8001c16:	2020      	movs	r0, #32
 8001c18:	f000 fbc6 	bl	80023a8 <setFontSize>
    enterxxx();
 8001c1c:	f7ff fdd4 	bl	80017c8 <enterxxx>
    setFontSize(8);
 8001c20:	2008      	movs	r0, #8
 8001c22:	f000 fbc1 	bl	80023a8 <setFontSize>
    enterxxx();
 8001c26:	f7ff fdcf 	bl	80017c8 <enterxxx>
    setFontSize(32);
 8001c2a:	2020      	movs	r0, #32
 8001c2c:	f000 fbbc 	bl	80023a8 <setFontSize>
    putstr(" ARM Cortex-M4 inside");
 8001c30:	483a      	ldr	r0, [pc, #232]	; (8001d1c <display01+0x148>)
 8001c32:	f7ff ffa5 	bl	8001b80 <putstr>
    enterxxx();
 8001c36:	f7ff fdc7 	bl	80017c8 <enterxxx>
    enterxxx();
 8001c3a:	f7ff fdc5 	bl	80017c8 <enterxxx>
    setFontSize(16);
 8001c3e:	2010      	movs	r0, #16
 8001c40:	f000 fbb2 	bl	80023a8 <setFontSize>
    fillhx(16);
 8001c44:	2010      	movs	r0, #16
 8001c46:	f7ff fd8f 	bl	8001768 <fillhx>
    putstr("Software Version: ");
 8001c4a:	4835      	ldr	r0, [pc, #212]	; (8001d20 <display01+0x14c>)
 8001c4c:	f7ff ff98 	bl	8001b80 <putstr>
    enterxxx();
 8001c50:	f7ff fdba 	bl	80017c8 <enterxxx>
    setFontSize(12);
 8001c54:	200c      	movs	r0, #12
 8001c56:	f000 fba7 	bl	80023a8 <setFontSize>
    enterxxx();
 8001c5a:	f7ff fdb5 	bl	80017c8 <enterxxx>
    setFontSize(16);
 8001c5e:	2010      	movs	r0, #16
 8001c60:	f000 fba2 	bl	80023a8 <setFontSize>
    fillhx(16);
 8001c64:	2010      	movs	r0, #16
 8001c66:	f7ff fd7f 	bl	8001768 <fillhx>
    setFgColor(0xf483);
 8001c6a:	f24f 4083 	movw	r0, #62595	; 0xf483
 8001c6e:	f7ff fd3d 	bl	80016ec <setFgColor>
    putstr("STM32L4xx Demo firmware");
 8001c72:	482c      	ldr	r0, [pc, #176]	; (8001d24 <display01+0x150>)
 8001c74:	f7ff ff84 	bl	8001b80 <putstr>
    enterxxx();
 8001c78:	f7ff fda6 	bl	80017c8 <enterxxx>
    setFontSize(12);
 8001c7c:	200c      	movs	r0, #12
 8001c7e:	f000 fb93 	bl	80023a8 <setFontSize>
    enterxxx();
 8001c82:	f7ff fda1 	bl	80017c8 <enterxxx>
    setFontSize(16);
 8001c86:	2010      	movs	r0, #16
 8001c88:	f000 fb8e 	bl	80023a8 <setFontSize>
    fillhx(16);
 8001c8c:	2010      	movs	r0, #16
 8001c8e:	f7ff fd6b 	bl	8001768 <fillhx>
    setFgColor(color_white);
 8001c92:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001c96:	f7ff fd29 	bl	80016ec <setFgColor>
    putstr("Library");
 8001c9a:	4823      	ldr	r0, [pc, #140]	; (8001d28 <display01+0x154>)
 8001c9c:	f7ff ff70 	bl	8001b80 <putstr>
    fillhx(150);
 8001ca0:	2096      	movs	r0, #150	; 0x96
 8001ca2:	f7ff fd61 	bl	8001768 <fillhx>
    putstr("-----------");
 8001ca6:	4821      	ldr	r0, [pc, #132]	; (8001d2c <display01+0x158>)
 8001ca8:	f7ff ff6a 	bl	8001b80 <putstr>
    enterxxx();
 8001cac:	f7ff fd8c 	bl	80017c8 <enterxxx>
    setFontSize(12);
 8001cb0:	200c      	movs	r0, #12
 8001cb2:	f000 fb79 	bl	80023a8 <setFontSize>
    enterxxx();
 8001cb6:	f7ff fd87 	bl	80017c8 <enterxxx>
    setFontSize(16);
 8001cba:	2010      	movs	r0, #16
 8001cbc:	f000 fb74 	bl	80023a8 <setFontSize>
    fillhx(16);
 8001cc0:	2010      	movs	r0, #16
 8001cc2:	f7ff fd51 	bl	8001768 <fillhx>
    putstr("Serial Number: ");
 8001cc6:	481a      	ldr	r0, [pc, #104]	; (8001d30 <display01+0x15c>)
 8001cc8:	f7ff ff5a 	bl	8001b80 <putstr>
    fillhx(150);
 8001ccc:	2096      	movs	r0, #150	; 0x96
 8001cce:	f7ff fd4b 	bl	8001768 <fillhx>
    putstr("T     1    ");
 8001cd2:	4818      	ldr	r0, [pc, #96]	; (8001d34 <display01+0x160>)
 8001cd4:	f7ff ff54 	bl	8001b80 <putstr>
    enterxxx();
 8001cd8:	f7ff fd76 	bl	80017c8 <enterxxx>
    setFontSize(12);
 8001cdc:	200c      	movs	r0, #12
 8001cde:	f000 fb63 	bl	80023a8 <setFontSize>
    enterxxx();
 8001ce2:	f7ff fd71 	bl	80017c8 <enterxxx>
    setFontSize(16);
 8001ce6:	2010      	movs	r0, #16
 8001ce8:	f000 fb5e 	bl	80023a8 <setFontSize>
    fillhx(16);
 8001cec:	2010      	movs	r0, #16
 8001cee:	f7ff fd3b 	bl	8001768 <fillhx>
    putstr("Production Date: ");
 8001cf2:	4811      	ldr	r0, [pc, #68]	; (8001d38 <display01+0x164>)
 8001cf4:	f7ff ff44 	bl	8001b80 <putstr>
    fillhx(150);
 8001cf8:	2096      	movs	r0, #150	; 0x96
 8001cfa:	f7ff fd35 	bl	8001768 <fillhx>
    putstr("24-Jan-2020");
 8001cfe:	480f      	ldr	r0, [pc, #60]	; (8001d3c <display01+0x168>)
 8001d00:	f7ff ff3e 	bl	8001b80 <putstr>
    enterxxx();
 8001d04:	f7ff fd60 	bl	80017c8 <enterxxx>
    enterxxx();
 8001d08:	f7ff fd5e 	bl	80017c8 <enterxxx>
}
 8001d0c:	bd08      	pop	{r3, pc}
 8001d0e:	bf00      	nop
 8001d10:	08004568 	.word	0x08004568
 8001d14:	08004574 	.word	0x08004574
 8001d18:	0800457c 	.word	0x0800457c
 8001d1c:	08004580 	.word	0x08004580
 8001d20:	08004598 	.word	0x08004598
 8001d24:	080045ac 	.word	0x080045ac
 8001d28:	080045c4 	.word	0x080045c4
 8001d2c:	080045cc 	.word	0x080045cc
 8001d30:	080045d8 	.word	0x080045d8
 8001d34:	080045e8 	.word	0x080045e8
 8001d38:	080045f4 	.word	0x080045f4
 8001d3c:	08004608 	.word	0x08004608

08001d40 <display65>:

void display65(uint8_t level) {
 8001d40:	b510      	push	{r4, lr}
 8001d42:	b088      	sub	sp, #32
 8001d44:	4604      	mov	r4, r0
    char *buf[8];

    start_display();
 8001d46:	f7ff fd53 	bl	80017f0 <start_display>
    setFontSize(32);
 8001d4a:	2020      	movs	r0, #32
 8001d4c:	f000 fb2c 	bl	80023a8 <setFontSize>
    putstr("Sound alarm test");
 8001d50:	480d      	ldr	r0, [pc, #52]	; (8001d88 <display65+0x48>)
 8001d52:	f7ff ff15 	bl	8001b80 <putstr>
    enterxxx();
 8001d56:	f7ff fd37 	bl	80017c8 <enterxxx>
    setFontSize(24);
 8001d5a:	2018      	movs	r0, #24
 8001d5c:	f000 fb24 	bl	80023a8 <setFontSize>
    enterxxx();
 8001d60:	f7ff fd32 	bl	80017c8 <enterxxx>
    putstr("Current sound level: ");
 8001d64:	4809      	ldr	r0, [pc, #36]	; (8001d8c <display65+0x4c>)
 8001d66:	f7ff ff0b 	bl	8001b80 <putstr>
    itoa(level, buf, 10);
 8001d6a:	220a      	movs	r2, #10
 8001d6c:	4669      	mov	r1, sp
 8001d6e:	4620      	mov	r0, r4
 8001d70:	f001 fc0a 	bl	8003588 <itoa>
    putstr(buf);
 8001d74:	4668      	mov	r0, sp
 8001d76:	f7ff ff03 	bl	8001b80 <putstr>
    enterxxx();
 8001d7a:	f7ff fd25 	bl	80017c8 <enterxxx>
    filldisplay();
 8001d7e:	f7ff ff0b 	bl	8001b98 <filldisplay>
}
 8001d82:	b008      	add	sp, #32
 8001d84:	bd10      	pop	{r4, pc}
 8001d86:	bf00      	nop
 8001d88:	0800467c 	.word	0x0800467c
 8001d8c:	08004690 	.word	0x08004690

08001d90 <display66>:

void display66() {
 8001d90:	b508      	push	{r3, lr}
	start_display();
 8001d92:	f7ff fd2d 	bl	80017f0 <start_display>
	setFontSize(32);
 8001d96:	2020      	movs	r0, #32
 8001d98:	f000 fb06 	bl	80023a8 <setFontSize>
	putstr("Door Sensor Test ");
 8001d9c:	4819      	ldr	r0, [pc, #100]	; (8001e04 <display66+0x74>)
 8001d9e:	f7ff feef 	bl	8001b80 <putstr>
    enterxxx();
 8001da2:	f7ff fd11 	bl	80017c8 <enterxxx>
    enterxxx();
 8001da6:	f7ff fd0f 	bl	80017c8 <enterxxx>

	setFontSize(72);
 8001daa:	2048      	movs	r0, #72	; 0x48
 8001dac:	f000 fafc 	bl	80023a8 <setFontSize>
    setFgColor(color_warnfont);
 8001db0:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001db4:	f7ff fc9a 	bl	80016ec <setFgColor>
    if ((GPIOC->IDR & 0x01UL) != 0) {
 8001db8:	4b13      	ldr	r3, [pc, #76]	; (8001e08 <display66+0x78>)
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	f013 0f01 	tst.w	r3, #1
 8001dc0:	d11b      	bne.n	8001dfa <display66+0x6a>
        putstr("Open");
    } else {
        putstr("Close");
 8001dc2:	4812      	ldr	r0, [pc, #72]	; (8001e0c <display66+0x7c>)
 8001dc4:	f7ff fedc 	bl	8001b80 <putstr>
    }
    enterxxx();
 8001dc8:	f7ff fcfe 	bl	80017c8 <enterxxx>
    setFontSize(24);
 8001dcc:	2018      	movs	r0, #24
 8001dce:	f000 faeb 	bl	80023a8 <setFontSize>
    enterxxx();
 8001dd2:	f7ff fcf9 	bl	80017c8 <enterxxx>
    enterxxx();
 8001dd6:	f7ff fcf7 	bl	80017c8 <enterxxx>
    enterxxx();
 8001dda:	f7ff fcf5 	bl	80017c8 <enterxxx>
    putstr("Press ");
 8001dde:	480c      	ldr	r0, [pc, #48]	; (8001e10 <display66+0x80>)
 8001de0:	f7ff fece 	bl	8001b80 <putstr>
    keyshow(Button_Ok);
 8001de4:	200e      	movs	r0, #14
 8001de6:	f7ff fe05 	bl	80019f4 <keyshow>
    putstr(" Key to Continue");
 8001dea:	480a      	ldr	r0, [pc, #40]	; (8001e14 <display66+0x84>)
 8001dec:	f7ff fec8 	bl	8001b80 <putstr>
    enterxxx();
 8001df0:	f7ff fcea 	bl	80017c8 <enterxxx>
    filldisplay();
 8001df4:	f7ff fed0 	bl	8001b98 <filldisplay>
}
 8001df8:	bd08      	pop	{r3, pc}
        putstr("Open");
 8001dfa:	4807      	ldr	r0, [pc, #28]	; (8001e18 <display66+0x88>)
 8001dfc:	f7ff fec0 	bl	8001b80 <putstr>
 8001e00:	e7e2      	b.n	8001dc8 <display66+0x38>
 8001e02:	bf00      	nop
 8001e04:	080046a8 	.word	0x080046a8
 8001e08:	48000800 	.word	0x48000800
 8001e0c:	080046c4 	.word	0x080046c4
 8001e10:	080046cc 	.word	0x080046cc
 8001e14:	080046d4 	.word	0x080046d4
 8001e18:	080046bc 	.word	0x080046bc

08001e1c <display68>:

void display68() {
 8001e1c:	b510      	push	{r4, lr}
    start_display();
 8001e1e:	f7ff fce7 	bl	80017f0 <start_display>
    setFontSize(32);
 8001e22:	2020      	movs	r0, #32
 8001e24:	f000 fac0 	bl	80023a8 <setFontSize>
    putstr("Motor rotation test");
 8001e28:	481b      	ldr	r0, [pc, #108]	; (8001e98 <display68+0x7c>)
 8001e2a:	f7ff fea9 	bl	8001b80 <putstr>
    enterxxx();
 8001e2e:	f7ff fccb 	bl	80017c8 <enterxxx>
    setFontSize(24);
 8001e32:	2018      	movs	r0, #24
 8001e34:	f000 fab8 	bl	80023a8 <setFontSize>
    enterxxx();
 8001e38:	f7ff fcc6 	bl	80017c8 <enterxxx>
    enterxxx();
 8001e3c:	f7ff fcc4 	bl	80017c8 <enterxxx>
    putstr("Please check motor rotation");
 8001e40:	4816      	ldr	r0, [pc, #88]	; (8001e9c <display68+0x80>)
 8001e42:	f7ff fe9d 	bl	8001b80 <putstr>
    enterxxx();
 8001e46:	f7ff fcbf 	bl	80017c8 <enterxxx>
    putstr("Press ");
 8001e4a:	4c15      	ldr	r4, [pc, #84]	; (8001ea0 <display68+0x84>)
 8001e4c:	4620      	mov	r0, r4
 8001e4e:	f7ff fe97 	bl	8001b80 <putstr>
    keyshow(Button_5);
 8001e52:	200c      	movs	r0, #12
 8001e54:	f7ff fdce 	bl	80019f4 <keyshow>
    putstr(" to increase and ");
 8001e58:	4812      	ldr	r0, [pc, #72]	; (8001ea4 <display68+0x88>)
 8001e5a:	f7ff fe91 	bl	8001b80 <putstr>
    keyshow(Button_0);
 8001e5e:	2004      	movs	r0, #4
 8001e60:	f7ff fdc8 	bl	80019f4 <keyshow>
    enterxxx();
 8001e64:	f7ff fcb0 	bl	80017c8 <enterxxx>
    putstr("to decrease the motor speed");
 8001e68:	480f      	ldr	r0, [pc, #60]	; (8001ea8 <display68+0x8c>)
 8001e6a:	f7ff fe89 	bl	8001b80 <putstr>
    enterxxx();
 8001e6e:	f7ff fcab 	bl	80017c8 <enterxxx>
    enterxxx();
 8001e72:	f7ff fca9 	bl	80017c8 <enterxxx>
    enterxxx();
 8001e76:	f7ff fca7 	bl	80017c8 <enterxxx>
    putstr("Press ");
 8001e7a:	4620      	mov	r0, r4
 8001e7c:	f7ff fe80 	bl	8001b80 <putstr>
    keyshow(Button_No);
 8001e80:	200f      	movs	r0, #15
 8001e82:	f7ff fdb7 	bl	80019f4 <keyshow>
    putstr(" to exit");
 8001e86:	4809      	ldr	r0, [pc, #36]	; (8001eac <display68+0x90>)
 8001e88:	f7ff fe7a 	bl	8001b80 <putstr>
    enterxxx();
 8001e8c:	f7ff fc9c 	bl	80017c8 <enterxxx>
    filldisplay();
 8001e90:	f7ff fe82 	bl	8001b98 <filldisplay>
}
 8001e94:	bd10      	pop	{r4, pc}
 8001e96:	bf00      	nop
 8001e98:	080046e8 	.word	0x080046e8
 8001e9c:	080046fc 	.word	0x080046fc
 8001ea0:	080046cc 	.word	0x080046cc
 8001ea4:	08004718 	.word	0x08004718
 8001ea8:	0800472c 	.word	0x0800472c
 8001eac:	08004748 	.word	0x08004748

08001eb0 <display64>:

void display64(uint8_t currentKey) {
 8001eb0:	b510      	push	{r4, lr}
 8001eb2:	4604      	mov	r4, r0
    start_display();
 8001eb4:	f7ff fc9c 	bl	80017f0 <start_display>
    setFontSize(32);
 8001eb8:	2020      	movs	r0, #32
 8001eba:	f000 fa75 	bl	80023a8 <setFontSize>
    putstr("Keypad Test ");
 8001ebe:	4850      	ldr	r0, [pc, #320]	; (8002000 <display64+0x150>)
 8001ec0:	f7ff fe5e 	bl	8001b80 <putstr>
    enteremtystr();
 8001ec4:	f7ff fe76 	bl	8001bb4 <enteremtystr>
    setFontSize(24);
 8001ec8:	2018      	movs	r0, #24
 8001eca:	f000 fa6d 	bl	80023a8 <setFontSize>
    keyshow(Button_Power);
 8001ece:	2010      	movs	r0, #16
 8001ed0:	f7ff fd90 	bl	80019f4 <keyshow>
    fillhx(250);
 8001ed4:	20fa      	movs	r0, #250	; 0xfa
 8001ed6:	f7ff fc47 	bl	8001768 <fillhx>
    keyshow(Button_No);
 8001eda:	200f      	movs	r0, #15
 8001edc:	f7ff fd8a 	bl	80019f4 <keyshow>
    enteremtystr();
 8001ee0:	f7ff fe68 	bl	8001bb4 <enteremtystr>
    setFontSize(24);
 8001ee4:	2018      	movs	r0, #24
 8001ee6:	f000 fa5f 	bl	80023a8 <setFontSize>
    keyshow(Button_Lock);
 8001eea:	2007      	movs	r0, #7
 8001eec:	f7ff fd82 	bl	80019f4 <keyshow>
    fillhx(250);
 8001ef0:	20fa      	movs	r0, #250	; 0xfa
 8001ef2:	f7ff fc39 	bl	8001768 <fillhx>
    keyshow(Button_Ok);
 8001ef6:	200e      	movs	r0, #14
 8001ef8:	f7ff fd7c 	bl	80019f4 <keyshow>
    enteremtystr();
 8001efc:	f7ff fe5a 	bl	8001bb4 <enteremtystr>
    setFontSize(24);
 8001f00:	2018      	movs	r0, #24
 8001f02:	f000 fa51 	bl	80023a8 <setFontSize>
    keyshow(Button_Info);
 8001f06:	2005      	movs	r0, #5
 8001f08:	f7ff fd74 	bl	80019f4 <keyshow>
    fillhx(250);
 8001f0c:	20fa      	movs	r0, #250	; 0xfa
 8001f0e:	f7ff fc2b 	bl	8001768 <fillhx>
    keyshow(Button_Prime);
 8001f12:	2006      	movs	r0, #6
 8001f14:	f7ff fd6e 	bl	80019f4 <keyshow>
    enterxxx();
 8001f18:	f7ff fc56 	bl	80017c8 <enterxxx>
    setFontSize(16);
 8001f1c:	2010      	movs	r0, #16
 8001f1e:	f000 fa43 	bl	80023a8 <setFontSize>
    enterxxx();
 8001f22:	f7ff fc51 	bl	80017c8 <enterxxx>
    setFontSize(24);
 8001f26:	2018      	movs	r0, #24
 8001f28:	f000 fa3e 	bl	80023a8 <setFontSize>
    keyshow(Button_1);
 8001f2c:	2008      	movs	r0, #8
 8001f2e:	f7ff fd61 	bl	80019f4 <keyshow>
    fillhx(50);
 8001f32:	2032      	movs	r0, #50	; 0x32
 8001f34:	f7ff fc18 	bl	8001768 <fillhx>
    keyshow(Button_2);
 8001f38:	2009      	movs	r0, #9
 8001f3a:	f7ff fd5b 	bl	80019f4 <keyshow>
    fillhx(100);
 8001f3e:	2064      	movs	r0, #100	; 0x64
 8001f40:	f7ff fc12 	bl	8001768 <fillhx>
    keyshow(Button_3);
 8001f44:	200a      	movs	r0, #10
 8001f46:	f7ff fd55 	bl	80019f4 <keyshow>
    fillhx(150);
 8001f4a:	2096      	movs	r0, #150	; 0x96
 8001f4c:	f7ff fc0c 	bl	8001768 <fillhx>
    keyshow(Button_4);
 8001f50:	200b      	movs	r0, #11
 8001f52:	f7ff fd4f 	bl	80019f4 <keyshow>
    fillhx(200);
 8001f56:	20c8      	movs	r0, #200	; 0xc8
 8001f58:	f7ff fc06 	bl	8001768 <fillhx>
    keyshow(Button_5);
 8001f5c:	200c      	movs	r0, #12
 8001f5e:	f7ff fd49 	bl	80019f4 <keyshow>
    fillhx(250);
 8001f62:	20fa      	movs	r0, #250	; 0xfa
 8001f64:	f7ff fc00 	bl	8001768 <fillhx>
    keyshow(Button_Point);
 8001f68:	200d      	movs	r0, #13
 8001f6a:	f7ff fd43 	bl	80019f4 <keyshow>
    enteremtystr();
 8001f6e:	f7ff fe21 	bl	8001bb4 <enteremtystr>
    setFontSize(24);
 8001f72:	2018      	movs	r0, #24
 8001f74:	f000 fa18 	bl	80023a8 <setFontSize>
    keyshow(Button_6);
 8001f78:	2000      	movs	r0, #0
 8001f7a:	f7ff fd3b 	bl	80019f4 <keyshow>
    fillhx(50);
 8001f7e:	2032      	movs	r0, #50	; 0x32
 8001f80:	f7ff fbf2 	bl	8001768 <fillhx>
    keyshow(Button_7);
 8001f84:	2001      	movs	r0, #1
 8001f86:	f7ff fd35 	bl	80019f4 <keyshow>
    fillhx(100);
 8001f8a:	2064      	movs	r0, #100	; 0x64
 8001f8c:	f7ff fbec 	bl	8001768 <fillhx>
    keyshow(Button_8);
 8001f90:	2002      	movs	r0, #2
 8001f92:	f7ff fd2f 	bl	80019f4 <keyshow>
    fillhx(150);
 8001f96:	2096      	movs	r0, #150	; 0x96
 8001f98:	f7ff fbe6 	bl	8001768 <fillhx>
    keyshow(Button_9);
 8001f9c:	2003      	movs	r0, #3
 8001f9e:	f7ff fd29 	bl	80019f4 <keyshow>
    fillhx(200);
 8001fa2:	20c8      	movs	r0, #200	; 0xc8
 8001fa4:	f7ff fbe0 	bl	8001768 <fillhx>
    keyshow(Button_0);
 8001fa8:	2004      	movs	r0, #4
 8001faa:	f7ff fd23 	bl	80019f4 <keyshow>
    enterxxx();
 8001fae:	f7ff fc0b 	bl	80017c8 <enterxxx>
    setFontSize(16);
 8001fb2:	2010      	movs	r0, #16
 8001fb4:	f000 f9f8 	bl	80023a8 <setFontSize>
    enterxxx();
 8001fb8:	f7ff fc06 	bl	80017c8 <enterxxx>
    setFontSize(24);
 8001fbc:	2018      	movs	r0, #24
 8001fbe:	f000 f9f3 	bl	80023a8 <setFontSize>
    setFgColor(color_white);
 8001fc2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001fc6:	f7ff fb91 	bl	80016ec <setFgColor>
    if (currentKey != Button_Last) {
 8001fca:	2c11      	cmp	r4, #17
 8001fcc:	d00d      	beq.n	8001fea <display64+0x13a>
        putstr("Press ");
 8001fce:	480d      	ldr	r0, [pc, #52]	; (8002004 <display64+0x154>)
 8001fd0:	f7ff fdd6 	bl	8001b80 <putstr>
        keyshow(currentKey);
 8001fd4:	4620      	mov	r0, r4
 8001fd6:	f7ff fd0d 	bl	80019f4 <keyshow>
        putstr(" Key");
 8001fda:	480b      	ldr	r0, [pc, #44]	; (8002008 <display64+0x158>)
 8001fdc:	f7ff fdd0 	bl	8001b80 <putstr>
    } else {
        putstr("Test OK! Press ");
        keyshow(Button_Ok);
        putstr(" to continue.");
    }
    enterxxx();
 8001fe0:	f7ff fbf2 	bl	80017c8 <enterxxx>
    filldisplay();
 8001fe4:	f7ff fdd8 	bl	8001b98 <filldisplay>
};
 8001fe8:	bd10      	pop	{r4, pc}
        putstr("Test OK! Press ");
 8001fea:	4808      	ldr	r0, [pc, #32]	; (800200c <display64+0x15c>)
 8001fec:	f7ff fdc8 	bl	8001b80 <putstr>
        keyshow(Button_Ok);
 8001ff0:	200e      	movs	r0, #14
 8001ff2:	f7ff fcff 	bl	80019f4 <keyshow>
        putstr(" to continue.");
 8001ff6:	4806      	ldr	r0, [pc, #24]	; (8002010 <display64+0x160>)
 8001ff8:	f7ff fdc2 	bl	8001b80 <putstr>
 8001ffc:	e7f0      	b.n	8001fe0 <display64+0x130>
 8001ffe:	bf00      	nop
 8002000:	08004644 	.word	0x08004644
 8002004:	080046cc 	.word	0x080046cc
 8002008:	08004654 	.word	0x08004654
 800200c:	0800465c 	.word	0x0800465c
 8002010:	0800466c 	.word	0x0800466c

08002014 <display48>:

void display48(char *items[], int32_t count, int32_t selected) {
 8002014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002018:	4680      	mov	r8, r0
 800201a:	460d      	mov	r5, r1
 800201c:	4616      	mov	r6, r2
    int32_t startItem, endItem;

    start_display();
 800201e:	f7ff fbe7 	bl	80017f0 <start_display>
    setFontSize(32);
 8002022:	2020      	movs	r0, #32
 8002024:	f000 f9c0 	bl	80023a8 <setFontSize>
    putstr("Technician options: ");
 8002028:	483a      	ldr	r0, [pc, #232]	; (8002114 <display48+0x100>)
 800202a:	f7ff fda9 	bl	8001b80 <putstr>
    enteremtystr();
 800202e:	f7ff fdc1 	bl	8001bb4 <enteremtystr>
    if (selected < 4) {
 8002032:	2e03      	cmp	r6, #3
 8002034:	dc05      	bgt.n	8002042 <display48+0x2e>
        startItem = 0;
        if (count > 7) {
 8002036:	2d07      	cmp	r5, #7
 8002038:	dd0d      	ble.n	8002056 <display48+0x42>
            endItem = 7;
 800203a:	2507      	movs	r5, #7
        startItem = 0;
 800203c:	2700      	movs	r7, #0
    } else {
        startItem = selected - 3;
        endItem = selected + 4;
    }

    for (int i = startItem; i < endItem; i++) {
 800203e:	463c      	mov	r4, r7
 8002040:	e022      	b.n	8002088 <display48+0x74>
    } else if (selected > count - 4) {
 8002042:	1f2b      	subs	r3, r5, #4
 8002044:	42b3      	cmp	r3, r6
 8002046:	da03      	bge.n	8002050 <display48+0x3c>
        if (count >= 7) {
 8002048:	2d06      	cmp	r5, #6
 800204a:	dd06      	ble.n	800205a <display48+0x46>
            startItem = count - 7;
 800204c:	1fef      	subs	r7, r5, #7
 800204e:	e7f6      	b.n	800203e <display48+0x2a>
        startItem = selected - 3;
 8002050:	1ef7      	subs	r7, r6, #3
        endItem = selected + 4;
 8002052:	1d35      	adds	r5, r6, #4
 8002054:	e7f3      	b.n	800203e <display48+0x2a>
        startItem = 0;
 8002056:	2700      	movs	r7, #0
 8002058:	e7f1      	b.n	800203e <display48+0x2a>
            startItem = 0;
 800205a:	2700      	movs	r7, #0
 800205c:	e7ef      	b.n	800203e <display48+0x2a>
            setFontSize(24);
            putstr(items[i]);
            setFgColor(color_white);
            enterxxx();
        } else {
            setFgColor(color_white);
 800205e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002062:	f7ff fb43 	bl	80016ec <setFgColor>
            setBgColor(color_green);
 8002066:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800206a:	f7ff fb45 	bl	80016f8 <setBgColor>
            setFontSize(32);
 800206e:	2020      	movs	r0, #32
 8002070:	f000 f99a 	bl	80023a8 <setFontSize>
            putstr(items[i]);
 8002074:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
 8002078:	f7ff fd82 	bl	8001b80 <putstr>
            setBgColor(color_defback);
 800207c:	2000      	movs	r0, #0
 800207e:	f7ff fb3b 	bl	80016f8 <setBgColor>
            enterxxx();
 8002082:	f7ff fba1 	bl	80017c8 <enterxxx>
    for (int i = startItem; i < endItem; i++) {
 8002086:	3401      	adds	r4, #1
 8002088:	42a5      	cmp	r5, r4
 800208a:	dd16      	ble.n	80020ba <display48+0xa6>
        if (i != selected) {
 800208c:	42b4      	cmp	r4, r6
 800208e:	d0e6      	beq.n	800205e <display48+0x4a>
            setFgColor(color_selnotsel);
 8002090:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8002094:	f7ff fb2a 	bl	80016ec <setFgColor>
            setBgColor(color_defback);
 8002098:	2000      	movs	r0, #0
 800209a:	f7ff fb2d 	bl	80016f8 <setBgColor>
            setFontSize(24);
 800209e:	2018      	movs	r0, #24
 80020a0:	f000 f982 	bl	80023a8 <setFontSize>
            putstr(items[i]);
 80020a4:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
 80020a8:	f7ff fd6a 	bl	8001b80 <putstr>
            setFgColor(color_white);
 80020ac:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80020b0:	f7ff fb1c 	bl	80016ec <setFgColor>
            enterxxx();
 80020b4:	f7ff fb88 	bl	80017c8 <enterxxx>
 80020b8:	e7e5      	b.n	8002086 <display48+0x72>
        }
    }

    setFontSize(24);
 80020ba:	2018      	movs	r0, #24
 80020bc:	f000 f974 	bl	80023a8 <setFontSize>
    for (int i = 0; i < 7 - (endItem - startItem); i++) {
 80020c0:	2400      	movs	r4, #0
 80020c2:	e002      	b.n	80020ca <display48+0xb6>
        enterxxx();
 80020c4:	f7ff fb80 	bl	80017c8 <enterxxx>
    for (int i = 0; i < 7 - (endItem - startItem); i++) {
 80020c8:	3401      	adds	r4, #1
 80020ca:	1beb      	subs	r3, r5, r7
 80020cc:	f1c3 0307 	rsb	r3, r3, #7
 80020d0:	42a3      	cmp	r3, r4
 80020d2:	dcf7      	bgt.n	80020c4 <display48+0xb0>
    }

    setFgColor(color_white);
 80020d4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80020d8:	f7ff fb08 	bl	80016ec <setFgColor>
    setFontSize(24);
 80020dc:	2018      	movs	r0, #24
 80020de:	f000 f963 	bl	80023a8 <setFontSize>
    putstr("Select ");
 80020e2:	480d      	ldr	r0, [pc, #52]	; (8002118 <display48+0x104>)
 80020e4:	f7ff fd4c 	bl	8001b80 <putstr>
    keyshow(Button_5);
 80020e8:	200c      	movs	r0, #12
 80020ea:	f7ff fc83 	bl	80019f4 <keyshow>
    putstr(", ");
 80020ee:	480b      	ldr	r0, [pc, #44]	; (800211c <display48+0x108>)
 80020f0:	f7ff fd46 	bl	8001b80 <putstr>
    keyshow(Button_0);
 80020f4:	2004      	movs	r0, #4
 80020f6:	f7ff fc7d 	bl	80019f4 <keyshow>
    putstr(" and press ");
 80020fa:	4809      	ldr	r0, [pc, #36]	; (8002120 <display48+0x10c>)
 80020fc:	f7ff fd40 	bl	8001b80 <putstr>
    keyshow(Button_Ok);
 8002100:	200e      	movs	r0, #14
 8002102:	f7ff fc77 	bl	80019f4 <keyshow>
    enterxxx();
 8002106:	f7ff fb5f 	bl	80017c8 <enterxxx>
    filldisplay();
 800210a:	f7ff fd45 	bl	8001b98 <filldisplay>
}
 800210e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002112:	bf00      	nop
 8002114:	08004614 	.word	0x08004614
 8002118:	0800462c 	.word	0x0800462c
 800211c:	08004634 	.word	0x08004634
 8002120:	08004638 	.word	0x08004638

08002124 <colorfill>:

void colorfill(uint16_t color) {
 8002124:	b570      	push	{r4, r5, r6, lr}
 8002126:	4605      	mov	r5, r0
    int x, y;

    start_display();
 8002128:	f7ff fb62 	bl	80017f0 <start_display>
    setFontSize(8);
 800212c:	2008      	movs	r0, #8
 800212e:	f000 f93b 	bl	80023a8 <setFontSize>
    graflocat(240 - 8, 0);
 8002132:	2100      	movs	r1, #0
 8002134:	20e8      	movs	r0, #232	; 0xe8
 8002136:	f7ff fae5 	bl	8001704 <graflocat>
    cmdWrite(0x2C);
 800213a:	202c      	movs	r0, #44	; 0x2c
 800213c:	f7ff faae 	bl	800169c <cmdWrite>
    for (x = 0; x < 320; x++) {
 8002140:	2600      	movs	r6, #0
 8002142:	e006      	b.n	8002152 <colorfill+0x2e>
        for (y = 0; y < 240; y++) {
            dataWrite(color);
 8002144:	4628      	mov	r0, r5
 8002146:	f7ff fabd 	bl	80016c4 <dataWrite>
        for (y = 0; y < 240; y++) {
 800214a:	3401      	adds	r4, #1
 800214c:	2cef      	cmp	r4, #239	; 0xef
 800214e:	ddf9      	ble.n	8002144 <colorfill+0x20>
    for (x = 0; x < 320; x++) {
 8002150:	3601      	adds	r6, #1
 8002152:	f5b6 7fa0 	cmp.w	r6, #320	; 0x140
 8002156:	da01      	bge.n	800215c <colorfill+0x38>
        for (y = 0; y < 240; y++) {
 8002158:	2400      	movs	r4, #0
 800215a:	e7f7      	b.n	800214c <colorfill+0x28>
        }
    }
}
 800215c:	bd70      	pop	{r4, r5, r6, pc}

0800215e <pixel>:

void pixel(int x, int y, uint16_t color) {
 800215e:	b570      	push	{r4, r5, r6, lr}
 8002160:	4606      	mov	r6, r0
 8002162:	460d      	mov	r5, r1
 8002164:	4614      	mov	r4, r2
    setFontSize(0);
 8002166:	2000      	movs	r0, #0
 8002168:	f000 f91e 	bl	80023a8 <setFontSize>
    graflocat(y, x);
 800216c:	b2b1      	uxth	r1, r6
 800216e:	b2a8      	uxth	r0, r5
 8002170:	f7ff fac8 	bl	8001704 <graflocat>
    cmdWrite(0x2C);
 8002174:	202c      	movs	r0, #44	; 0x2c
 8002176:	f7ff fa91 	bl	800169c <cmdWrite>
    dataWrite(color);
 800217a:	4620      	mov	r0, r4
 800217c:	f7ff faa2 	bl	80016c4 <dataWrite>
}
 8002180:	bd70      	pop	{r4, r5, r6, pc}

08002182 <block>:

void block(int x, int y, uint16_t color) {
 8002182:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002186:	4680      	mov	r8, r0
 8002188:	460d      	mov	r5, r1
    if (color == color_defback) {
 800218a:	4616      	mov	r6, r2
 800218c:	b992      	cbnz	r2, 80021b4 <block+0x32>
        for (int i = x + 1; i < x + 9; i++) {
 800218e:	1c47      	adds	r7, r0, #1
 8002190:	e00a      	b.n	80021a8 <block+0x26>
            for (int j = y + 1; j < y + 9; j++) {
                pixel(i, j, color);
 8002192:	4632      	mov	r2, r6
 8002194:	4621      	mov	r1, r4
 8002196:	4638      	mov	r0, r7
 8002198:	f7ff ffe1 	bl	800215e <pixel>
            for (int j = y + 1; j < y + 9; j++) {
 800219c:	3401      	adds	r4, #1
 800219e:	f105 0309 	add.w	r3, r5, #9
 80021a2:	42a3      	cmp	r3, r4
 80021a4:	dcf5      	bgt.n	8002192 <block+0x10>
        for (int i = x + 1; i < x + 9; i++) {
 80021a6:	3701      	adds	r7, #1
 80021a8:	f108 0309 	add.w	r3, r8, #9
 80021ac:	42bb      	cmp	r3, r7
 80021ae:	dd3d      	ble.n	800222c <block+0xaa>
            for (int j = y + 1; j < y + 9; j++) {
 80021b0:	1c6c      	adds	r4, r5, #1
 80021b2:	e7f4      	b.n	800219e <block+0x1c>
            }
        }
    } else {
        for (int i = x + 2; i < x + 8; i++) {
 80021b4:	1c87      	adds	r7, r0, #2
 80021b6:	e00a      	b.n	80021ce <block+0x4c>
            for (int j = y + 2; j < y + 8; j++) {
                pixel(i, j, color);
 80021b8:	4632      	mov	r2, r6
 80021ba:	4621      	mov	r1, r4
 80021bc:	4638      	mov	r0, r7
 80021be:	f7ff ffce 	bl	800215e <pixel>
            for (int j = y + 2; j < y + 8; j++) {
 80021c2:	3401      	adds	r4, #1
 80021c4:	f105 0308 	add.w	r3, r5, #8
 80021c8:	42a3      	cmp	r3, r4
 80021ca:	dcf5      	bgt.n	80021b8 <block+0x36>
        for (int i = x + 2; i < x + 8; i++) {
 80021cc:	3701      	adds	r7, #1
 80021ce:	f108 0908 	add.w	r9, r8, #8
 80021d2:	45b9      	cmp	r9, r7
 80021d4:	dd01      	ble.n	80021da <block+0x58>
            for (int j = y + 2; j < y + 8; j++) {
 80021d6:	1cac      	adds	r4, r5, #2
 80021d8:	e7f4      	b.n	80021c4 <block+0x42>
            }
        }
        for (int i = x + 1; i < x + 9; i++) {
 80021da:	f108 0601 	add.w	r6, r8, #1
 80021de:	4634      	mov	r4, r6
 80021e0:	e00d      	b.n	80021fe <block+0x7c>
            pixel(i, y + 1, color_white);
 80021e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021e6:	1c69      	adds	r1, r5, #1
 80021e8:	4620      	mov	r0, r4
 80021ea:	f7ff ffb8 	bl	800215e <pixel>
            pixel(i, y + 8, color_gray);
 80021ee:	f248 4210 	movw	r2, #33808	; 0x8410
 80021f2:	f105 0108 	add.w	r1, r5, #8
 80021f6:	4620      	mov	r0, r4
 80021f8:	f7ff ffb1 	bl	800215e <pixel>
        for (int i = x + 1; i < x + 9; i++) {
 80021fc:	3401      	adds	r4, #1
 80021fe:	f108 0309 	add.w	r3, r8, #9
 8002202:	42a3      	cmp	r3, r4
 8002204:	dced      	bgt.n	80021e2 <block+0x60>
        }
        for (int j = y + 1; j < y + 9; j++) {
 8002206:	1c6c      	adds	r4, r5, #1
 8002208:	e00c      	b.n	8002224 <block+0xa2>
            pixel(x + 1, j, color_white);
 800220a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800220e:	4621      	mov	r1, r4
 8002210:	4630      	mov	r0, r6
 8002212:	f7ff ffa4 	bl	800215e <pixel>
            pixel(x + 8, j, color_gray);
 8002216:	f248 4210 	movw	r2, #33808	; 0x8410
 800221a:	4621      	mov	r1, r4
 800221c:	4648      	mov	r0, r9
 800221e:	f7ff ff9e 	bl	800215e <pixel>
        for (int j = y + 1; j < y + 9; j++) {
 8002222:	3401      	adds	r4, #1
 8002224:	f105 0309 	add.w	r3, r5, #9
 8002228:	42a3      	cmp	r3, r4
 800222a:	dcee      	bgt.n	800220a <block+0x88>
        }

    }
}
 800222c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002230 <showScores>:

void showScores(int scores) {
 8002230:	b510      	push	{r4, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	4604      	mov	r4, r0
    char buf[8];

    start_display();
 8002236:	f7ff fadb 	bl	80017f0 <start_display>
    setFontSize(24);
 800223a:	2018      	movs	r0, #24
 800223c:	f000 f8b4 	bl	80023a8 <setFontSize>
    graflocat(0, 235);
 8002240:	21eb      	movs	r1, #235	; 0xeb
 8002242:	2000      	movs	r0, #0
 8002244:	f7ff fa5e 	bl	8001704 <graflocat>
    enterxxx();
 8002248:	f7ff fabe 	bl	80017c8 <enterxxx>
    graflocat(currentPage, 235);
 800224c:	21eb      	movs	r1, #235	; 0xeb
 800224e:	4b1a      	ldr	r3, [pc, #104]	; (80022b8 <showScores+0x88>)
 8002250:	8818      	ldrh	r0, [r3, #0]
 8002252:	f7ff fa57 	bl	8001704 <graflocat>
    if (scores >= 0) {
 8002256:	2c00      	cmp	r4, #0
 8002258:	db1f      	blt.n	800229a <showScores+0x6a>
        itoa(scores, buf, 10);
 800225a:	220a      	movs	r2, #10
 800225c:	4669      	mov	r1, sp
 800225e:	4620      	mov	r0, r4
 8002260:	f001 f992 	bl	8003588 <itoa>
        putstr("Scores");
 8002264:	4815      	ldr	r0, [pc, #84]	; (80022bc <showScores+0x8c>)
 8002266:	f7ff fc8b 	bl	8001b80 <putstr>
        enterxxx();
 800226a:	f7ff faad 	bl	80017c8 <enterxxx>
        graflocat(currentPage, 235);
 800226e:	21eb      	movs	r1, #235	; 0xeb
 8002270:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <showScores+0x88>)
 8002272:	8818      	ldrh	r0, [r3, #0]
 8002274:	f7ff fa46 	bl	8001704 <graflocat>
        putstr(buf);
 8002278:	4668      	mov	r0, sp
 800227a:	f7ff fc81 	bl	8001b80 <putstr>
        putstr("Game");
        enterxxx();
        graflocat(currentPage, 235);
        putstr("Over");
    }
    graflocat(4 * getFontSize(), 235);
 800227e:	f000 f8bd 	bl	80023fc <getFontSize>
 8002282:	0080      	lsls	r0, r0, #2
 8002284:	b280      	uxth	r0, r0
 8002286:	21eb      	movs	r1, #235	; 0xeb
 8002288:	f7ff fa3c 	bl	8001704 <graflocat>
    putstr("Next:");
 800228c:	480c      	ldr	r0, [pc, #48]	; (80022c0 <showScores+0x90>)
 800228e:	f7ff fc77 	bl	8001b80 <putstr>
    enterxxx();
 8002292:	f7ff fa99 	bl	80017c8 <enterxxx>

}
 8002296:	b002      	add	sp, #8
 8002298:	bd10      	pop	{r4, pc}
        putstr("Game");
 800229a:	480a      	ldr	r0, [pc, #40]	; (80022c4 <showScores+0x94>)
 800229c:	f7ff fc70 	bl	8001b80 <putstr>
        enterxxx();
 80022a0:	f7ff fa92 	bl	80017c8 <enterxxx>
        graflocat(currentPage, 235);
 80022a4:	21eb      	movs	r1, #235	; 0xeb
 80022a6:	4b04      	ldr	r3, [pc, #16]	; (80022b8 <showScores+0x88>)
 80022a8:	8818      	ldrh	r0, [r3, #0]
 80022aa:	f7ff fa2b 	bl	8001704 <graflocat>
        putstr("Over");
 80022ae:	4806      	ldr	r0, [pc, #24]	; (80022c8 <showScores+0x98>)
 80022b0:	f7ff fc66 	bl	8001b80 <putstr>
 80022b4:	e7e3      	b.n	800227e <showScores+0x4e>
 80022b6:	bf00      	nop
 80022b8:	20000244 	.word	0x20000244
 80022bc:	08004798 	.word	0x08004798
 80022c0:	080047b0 	.word	0x080047b0
 80022c4:	080047a0 	.word	0x080047a0
 80022c8:	080047a8 	.word	0x080047a8

080022cc <gameDisplay>:

void gameDisplay() {
 80022cc:	b508      	push	{r3, lr}
    colorfill(color_defback);
 80022ce:	2000      	movs	r0, #0
 80022d0:	f7ff ff28 	bl	8002124 <colorfill>
    start_display();
 80022d4:	f7ff fa8c 	bl	80017f0 <start_display>
    setFontSize(24);
 80022d8:	2018      	movs	r0, #24
 80022da:	f000 f865 	bl	80023a8 <setFontSize>
    enterxxx();
 80022de:	f7ff fa73 	bl	80017c8 <enterxxx>
    keyshow(Button_4);
 80022e2:	200b      	movs	r0, #11
 80022e4:	f7ff fb86 	bl	80019f4 <keyshow>
    putstr(" - Left");
 80022e8:	4822      	ldr	r0, [pc, #136]	; (8002374 <gameDisplay+0xa8>)
 80022ea:	f7ff fc49 	bl	8001b80 <putstr>
    enterxxx();
 80022ee:	f7ff fa6b 	bl	80017c8 <enterxxx>
    setFontSize(8);
 80022f2:	2008      	movs	r0, #8
 80022f4:	f000 f858 	bl	80023a8 <setFontSize>
    enterxxx();
 80022f8:	f7ff fa66 	bl	80017c8 <enterxxx>
    setFontSize(24);
 80022fc:	2018      	movs	r0, #24
 80022fe:	f000 f853 	bl	80023a8 <setFontSize>
    keyshow(Button_Point);
 8002302:	200d      	movs	r0, #13
 8002304:	f7ff fb76 	bl	80019f4 <keyshow>
    putstr(" - Right");
 8002308:	481b      	ldr	r0, [pc, #108]	; (8002378 <gameDisplay+0xac>)
 800230a:	f7ff fc39 	bl	8001b80 <putstr>
    enterxxx();
 800230e:	f7ff fa5b 	bl	80017c8 <enterxxx>
    setFontSize(8);
 8002312:	2008      	movs	r0, #8
 8002314:	f000 f848 	bl	80023a8 <setFontSize>
    enterxxx();
 8002318:	f7ff fa56 	bl	80017c8 <enterxxx>
    setFontSize(24);
 800231c:	2018      	movs	r0, #24
 800231e:	f000 f843 	bl	80023a8 <setFontSize>
    keyshow(Button_5);
 8002322:	200c      	movs	r0, #12
 8002324:	f7ff fb66 	bl	80019f4 <keyshow>
    putstr(" - Rotate");
 8002328:	4814      	ldr	r0, [pc, #80]	; (800237c <gameDisplay+0xb0>)
 800232a:	f7ff fc29 	bl	8001b80 <putstr>
    enterxxx();
 800232e:	f7ff fa4b 	bl	80017c8 <enterxxx>
    setFontSize(8);
 8002332:	2008      	movs	r0, #8
 8002334:	f000 f838 	bl	80023a8 <setFontSize>
    enterxxx();
 8002338:	f7ff fa46 	bl	80017c8 <enterxxx>
    setFontSize(24);
 800233c:	2018      	movs	r0, #24
 800233e:	f000 f833 	bl	80023a8 <setFontSize>
    keyshow(Button_Prime);
 8002342:	2006      	movs	r0, #6
 8002344:	f7ff fb56 	bl	80019f4 <keyshow>
    putstr(" - Down");
 8002348:	480d      	ldr	r0, [pc, #52]	; (8002380 <gameDisplay+0xb4>)
 800234a:	f7ff fc19 	bl	8001b80 <putstr>
    enterxxx();
 800234e:	f7ff fa3b 	bl	80017c8 <enterxxx>
    setFontSize(8);
 8002352:	2008      	movs	r0, #8
 8002354:	f000 f828 	bl	80023a8 <setFontSize>
    enterxxx();
 8002358:	f7ff fa36 	bl	80017c8 <enterxxx>
    setFontSize(24);
 800235c:	2018      	movs	r0, #24
 800235e:	f000 f823 	bl	80023a8 <setFontSize>
    keyshow(Button_Ok);
 8002362:	200e      	movs	r0, #14
 8002364:	f7ff fb46 	bl	80019f4 <keyshow>
    putstr(" - New");
 8002368:	4806      	ldr	r0, [pc, #24]	; (8002384 <gameDisplay+0xb8>)
 800236a:	f7ff fc09 	bl	8001b80 <putstr>
    enterxxx();
 800236e:	f7ff fa2b 	bl	80017c8 <enterxxx>
}
 8002372:	bd08      	pop	{r3, pc}
 8002374:	08004768 	.word	0x08004768
 8002378:	08004770 	.word	0x08004770
 800237c:	0800477c 	.word	0x0800477c
 8002380:	08004788 	.word	0x08004788
 8002384:	08004790 	.word	0x08004790

08002388 <displayAlarmTest>:

void displayAlarmTest() {
 8002388:	b508      	push	{r3, lr}
    start_display();
 800238a:	f7ff fa31 	bl	80017f0 <start_display>
    setFontSize(32);
 800238e:	2020      	movs	r0, #32
 8002390:	f000 f80a 	bl	80023a8 <setFontSize>
    putstr("High priority alarm");
 8002394:	4803      	ldr	r0, [pc, #12]	; (80023a4 <displayAlarmTest+0x1c>)
 8002396:	f7ff fbf3 	bl	8001b80 <putstr>
    enterxxx();
 800239a:	f7ff fa15 	bl	80017c8 <enterxxx>
    filldisplay();
 800239e:	f7ff fbfb 	bl	8001b98 <filldisplay>
}
 80023a2:	bd08      	pop	{r3, pc}
 80023a4:	08004754 	.word	0x08004754

080023a8 <setFontSize>:
    currentFontSize = 8;
    fontScale = 1;
}

void setFontSize(uint8_t fontSize) {
    currentFontSize = fontSize;
 80023a8:	4b12      	ldr	r3, [pc, #72]	; (80023f4 <setFontSize+0x4c>)
 80023aa:	7018      	strb	r0, [r3, #0]

    switch (fontSize) {
 80023ac:	2820      	cmp	r0, #32
 80023ae:	d011      	beq.n	80023d4 <setFontSize+0x2c>
 80023b0:	d90a      	bls.n	80023c8 <setFontSize+0x20>
 80023b2:	2840      	cmp	r0, #64	; 0x40
 80023b4:	d014      	beq.n	80023e0 <setFontSize+0x38>
 80023b6:	d911      	bls.n	80023dc <setFontSize+0x34>
 80023b8:	2848      	cmp	r0, #72	; 0x48
 80023ba:	d017      	beq.n	80023ec <setFontSize+0x44>
 80023bc:	2860      	cmp	r0, #96	; 0x60
 80023be:	d114      	bne.n	80023ea <setFontSize+0x42>
        break;
    case 72:
        fontScale = 3;
        break;
    case 96:
        fontScale = 4;
 80023c0:	4b0d      	ldr	r3, [pc, #52]	; (80023f8 <setFontSize+0x50>)
 80023c2:	2204      	movs	r2, #4
 80023c4:	601a      	str	r2, [r3, #0]
        break;
    }
}
 80023c6:	4770      	bx	lr
    switch (fontSize) {
 80023c8:	2810      	cmp	r0, #16
 80023ca:	d003      	beq.n	80023d4 <setFontSize+0x2c>
 80023cc:	2818      	cmp	r0, #24
 80023ce:	d001      	beq.n	80023d4 <setFontSize+0x2c>
 80023d0:	2808      	cmp	r0, #8
 80023d2:	d1f8      	bne.n	80023c6 <setFontSize+0x1e>
        fontScale = 1;
 80023d4:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <setFontSize+0x50>)
 80023d6:	2201      	movs	r2, #1
 80023d8:	601a      	str	r2, [r3, #0]
        break;
 80023da:	4770      	bx	lr
    switch (fontSize) {
 80023dc:	2830      	cmp	r0, #48	; 0x30
 80023de:	d103      	bne.n	80023e8 <setFontSize+0x40>
        fontScale = 2;
 80023e0:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <setFontSize+0x50>)
 80023e2:	2202      	movs	r2, #2
 80023e4:	601a      	str	r2, [r3, #0]
        break;
 80023e6:	4770      	bx	lr
 80023e8:	4770      	bx	lr
 80023ea:	4770      	bx	lr
        fontScale = 3;
 80023ec:	4b02      	ldr	r3, [pc, #8]	; (80023f8 <setFontSize+0x50>)
 80023ee:	2203      	movs	r2, #3
 80023f0:	601a      	str	r2, [r3, #0]
        break;
 80023f2:	4770      	bx	lr
 80023f4:	20000248 	.word	0x20000248
 80023f8:	2000024c 	.word	0x2000024c

080023fc <getFontSize>:

uint8_t getFontSize() {
    return currentFontSize;
}
 80023fc:	4b01      	ldr	r3, [pc, #4]	; (8002404 <getFontSize+0x8>)
 80023fe:	7818      	ldrb	r0, [r3, #0]
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	20000248 	.word	0x20000248

08002408 <getCurrentFont>:

const Font *getCurrentFont() {
    switch (currentFontSize) {
 8002408:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <getCurrentFont+0x30>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	2b20      	cmp	r3, #32
 800240e:	d010      	beq.n	8002432 <getCurrentFont+0x2a>
 8002410:	d807      	bhi.n	8002422 <getCurrentFont+0x1a>
 8002412:	2b10      	cmp	r3, #16
 8002414:	d101      	bne.n	800241a <getCurrentFont+0x12>
    case 8:
        return &font8;
    case 16:
        return &font16;
 8002416:	4809      	ldr	r0, [pc, #36]	; (800243c <getCurrentFont+0x34>)
    case 96:
        return &font24;
    default:
        return &font8;
    }
}
 8002418:	4770      	bx	lr
    switch (currentFontSize) {
 800241a:	2b18      	cmp	r3, #24
 800241c:	d107      	bne.n	800242e <getCurrentFont+0x26>
        return &font24;
 800241e:	4808      	ldr	r0, [pc, #32]	; (8002440 <getCurrentFont+0x38>)
 8002420:	4770      	bx	lr
    switch (currentFontSize) {
 8002422:	2b48      	cmp	r3, #72	; 0x48
 8002424:	d0fb      	beq.n	800241e <getCurrentFont+0x16>
 8002426:	2b60      	cmp	r3, #96	; 0x60
 8002428:	d0f9      	beq.n	800241e <getCurrentFont+0x16>
 800242a:	2b30      	cmp	r3, #48	; 0x30
 800242c:	d0f7      	beq.n	800241e <getCurrentFont+0x16>
        return &font8;
 800242e:	4805      	ldr	r0, [pc, #20]	; (8002444 <getCurrentFont+0x3c>)
 8002430:	4770      	bx	lr
        return &font32;
 8002432:	4805      	ldr	r0, [pc, #20]	; (8002448 <getCurrentFont+0x40>)
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	20000248 	.word	0x20000248
 800243c:	08004da0 	.word	0x08004da0
 8002440:	08005124 	.word	0x08005124
 8002444:	0800582c 	.word	0x0800582c
 8002448:	080054a8 	.word	0x080054a8

0800244c <getFontScale>:

uint32_t getFontScale() {
    return fontScale;
}
 800244c:	4b01      	ldr	r3, [pc, #4]	; (8002454 <getFontScale+0x8>)
 800244e:	6818      	ldr	r0, [r3, #0]
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	2000024c 	.word	0x2000024c

08002458 <getKeyCharacter>:

const KeyCharacter *getKeyCharacter(buttonName_t button) {
    return FontKeys[button];
}
 8002458:	4b01      	ldr	r3, [pc, #4]	; (8002460 <getKeyCharacter+0x8>)
 800245a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800245e:	4770      	bx	lr
 8002460:	20000030 	.word	0x20000030

08002464 <ledOff>:
    ledOff(ledRed);
    ledOff(ledGreen);
}

void ledOff(led_t led) {
    switch (led) {
 8002464:	b110      	cbz	r0, 800246c <ledOff+0x8>
 8002466:	2801      	cmp	r0, #1
 8002468:	d006      	beq.n	8002478 <ledOff+0x14>
 800246a:	4770      	bx	lr
    case ledRed:
        GPIOB->ODR &= ~(1 << 9);
 800246c:	4a05      	ldr	r2, [pc, #20]	; (8002484 <ledOff+0x20>)
 800246e:	6953      	ldr	r3, [r2, #20]
 8002470:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002474:	6153      	str	r3, [r2, #20]
        break;
 8002476:	4770      	bx	lr
    case ledGreen:
        GPIOB->ODR &= ~(1 << 8);
 8002478:	4a02      	ldr	r2, [pc, #8]	; (8002484 <ledOff+0x20>)
 800247a:	6953      	ldr	r3, [r2, #20]
 800247c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002480:	6153      	str	r3, [r2, #20]
        break;
    }
}
 8002482:	4770      	bx	lr
 8002484:	48000400 	.word	0x48000400

08002488 <initLeds>:
void initLeds() {
 8002488:	b508      	push	{r3, lr}
    ledOff(ledRed);
 800248a:	2000      	movs	r0, #0
 800248c:	f7ff ffea 	bl	8002464 <ledOff>
    ledOff(ledGreen);
 8002490:	2001      	movs	r0, #1
 8002492:	f7ff ffe7 	bl	8002464 <ledOff>
}
 8002496:	bd08      	pop	{r3, pc}

08002498 <max706_toggle>:
    GPIOC->PUPDR = 1 << GPIO_PUPDR_PUPD0_Pos;

    GPIOD->MODER = 0x55555555;
}

void max706_toggle(uint32_t parameter) {
 8002498:	b508      	push	{r3, lr}
    GPIOC->ODR ^= (1 << 3);
 800249a:	4a06      	ldr	r2, [pc, #24]	; (80024b4 <max706_toggle+0x1c>)
 800249c:	6953      	ldr	r3, [r2, #20]
 800249e:	f083 0308 	eor.w	r3, r3, #8
 80024a2:	6153      	str	r3, [r2, #20]

    osTaskAdd(max706_toggle, 0, 500);
 80024a4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80024a8:	2100      	movs	r1, #0
 80024aa:	4803      	ldr	r0, [pc, #12]	; (80024b8 <max706_toggle+0x20>)
 80024ac:	f000 fd2a 	bl	8002f04 <osTaskAdd>
}
 80024b0:	bd08      	pop	{r3, pc}
 80024b2:	bf00      	nop
 80024b4:	48000800 	.word	0x48000800
 80024b8:	08002499 	.word	0x08002499

080024bc <initializationTask>:
    while ((RCC->CFGR & RCC_CFGR_SWS_Msk) != RCC_CFGR_SWS_PLL);

    SystemCoreClockUpdate();
}

void initializationTask(uint32_t parameter) {
 80024bc:	b508      	push	{r3, lr}
    static uint32_t time;

    if (time == 0) {
 80024be:	4b0e      	ldr	r3, [pc, #56]	; (80024f8 <initializationTask+0x3c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	b143      	cbz	r3, 80024d6 <initializationTask+0x1a>
        display00();
        osTaskAdd(initializationTask, 0, 50);
    } else if (time < 5) {
 80024c4:	2b04      	cmp	r3, #4
 80024c6:	d90e      	bls.n	80024e6 <initializationTask+0x2a>
        display01();
        osTaskAdd(initializationTask, 0, 1000);
    } else {
        showManualTestsScreen();
 80024c8:	f7fe fe5e 	bl	8001188 <showManualTestsScreen>
    }
    time++;
 80024cc:	4a0a      	ldr	r2, [pc, #40]	; (80024f8 <initializationTask+0x3c>)
 80024ce:	6813      	ldr	r3, [r2, #0]
 80024d0:	3301      	adds	r3, #1
 80024d2:	6013      	str	r3, [r2, #0]
}
 80024d4:	bd08      	pop	{r3, pc}
        display00();
 80024d6:	f7ff fb76 	bl	8001bc6 <display00>
        osTaskAdd(initializationTask, 0, 50);
 80024da:	2232      	movs	r2, #50	; 0x32
 80024dc:	2100      	movs	r1, #0
 80024de:	4807      	ldr	r0, [pc, #28]	; (80024fc <initializationTask+0x40>)
 80024e0:	f000 fd10 	bl	8002f04 <osTaskAdd>
 80024e4:	e7f2      	b.n	80024cc <initializationTask+0x10>
        display01();
 80024e6:	f7ff fb75 	bl	8001bd4 <display01>
        osTaskAdd(initializationTask, 0, 1000);
 80024ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80024ee:	2100      	movs	r1, #0
 80024f0:	4802      	ldr	r0, [pc, #8]	; (80024fc <initializationTask+0x40>)
 80024f2:	f000 fd07 	bl	8002f04 <osTaskAdd>
 80024f6:	e7e9      	b.n	80024cc <initializationTask+0x10>
 80024f8:	20000250 	.word	0x20000250
 80024fc:	080024bd 	.word	0x080024bd

08002500 <initGPIO>:
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN |
 8002500:	4a1f      	ldr	r2, [pc, #124]	; (8002580 <initGPIO+0x80>)
 8002502:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002504:	f043 031f 	orr.w	r3, r3, #31
 8002508:	64d3      	str	r3, [r2, #76]	; 0x4c
    GPIOA->MODER &= ~(GPIO_MODER_MODE8_Msk |
 800250a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800250e:	6813      	ldr	r3, [r2, #0]
 8002510:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 8002514:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002518:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1 << GPIO_MODER_MODE8_Pos) |
 800251a:	6813      	ldr	r3, [r2, #0]
 800251c:	f043 73aa 	orr.w	r3, r3, #22282240	; 0x1540000
 8002520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002524:	6013      	str	r3, [r2, #0]
    GPIOB->MODER = (1 << GPIO_MODER_MODE3_Pos) |
 8002526:	4b17      	ldr	r3, [pc, #92]	; (8002584 <initGPIO+0x84>)
 8002528:	4a17      	ldr	r2, [pc, #92]	; (8002588 <initGPIO+0x88>)
 800252a:	601a      	str	r2, [r3, #0]
    GPIOB->MODER &= ~(GPIO_MODER_MODE5_Msk);
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002532:	601a      	str	r2, [r3, #0]
    GPIOB->PUPDR = (1 < GPIO_PUPDR_PUPD5_Pos);  //KEYS3 with pull-up
 8002534:	2101      	movs	r1, #1
 8002536:	60d9      	str	r1, [r3, #12]
    GPIOE->MODER = 0xFFFB0000UL;				//PORTE[9] is alternate function
 8002538:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800253c:	4a13      	ldr	r2, [pc, #76]	; (800258c <initGPIO+0x8c>)
 800253e:	601a      	str	r2, [r3, #0]
    GPIOE->PUPDR = 0x5555;                      //PORTE[7:0] with pull up
 8002540:	f245 5255 	movw	r2, #21845	; 0x5555
 8002544:	60da      	str	r2, [r3, #12]
    GPIOE->AFR[1] = 1 << GPIO_AFRH_AFSEL9_Pos;	//TIM1_CH1 is an alternate function AF1 for PE9
 8002546:	2210      	movs	r2, #16
 8002548:	625a      	str	r2, [r3, #36]	; 0x24
    GPIOC->MODER &= ~(GPIO_MODER_MODE0_Msk |
 800254a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002554:	f022 02f3 	bic.w	r2, r2, #243	; 0xf3
 8002558:	601a      	str	r2, [r3, #0]
    GPIOC->MODER |= (1 << GPIO_MODER_MODE2_Pos) |
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002560:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8002564:	601a      	str	r2, [r3, #0]
    GPIOC->AFR[1] = 2 << GPIO_AFRH_AFSEL9_Pos;  //TIM3_CH4 is an alternate function AF2 for PC9
 8002566:	2220      	movs	r2, #32
 8002568:	625a      	str	r2, [r3, #36]	; 0x24
    GPIOC->ODR |= (1 << 2);
 800256a:	695a      	ldr	r2, [r3, #20]
 800256c:	f042 0204 	orr.w	r2, r2, #4
 8002570:	615a      	str	r2, [r3, #20]
    GPIOC->PUPDR = 1 << GPIO_PUPDR_PUPD0_Pos;
 8002572:	60d9      	str	r1, [r3, #12]
    GPIOD->MODER = 0x55555555;
 8002574:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002578:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 800257c:	601a      	str	r2, [r3, #0]
}
 800257e:	4770      	bx	lr
 8002580:	40021000 	.word	0x40021000
 8002584:	48000400 	.word	0x48000400
 8002588:	11050140 	.word	0x11050140
 800258c:	fffb0000 	.word	0xfffb0000

08002590 <initClocks>:
void initClocks() {
 8002590:	b508      	push	{r3, lr}
    RCC->CR |= RCC_CR_HSEON;
 8002592:	4a11      	ldr	r2, [pc, #68]	; (80025d8 <initClocks+0x48>)
 8002594:	6813      	ldr	r3, [r2, #0]
 8002596:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800259a:	6013      	str	r3, [r2, #0]
    while ((RCC->CR & RCC_CR_HSERDY) == 0);
 800259c:	4b0e      	ldr	r3, [pc, #56]	; (80025d8 <initClocks+0x48>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80025a4:	d0fa      	beq.n	800259c <initClocks+0xc>
    RCC->PLLCFGR = (0x3 << RCC_PLLCFGR_PLLSRC_Pos) | //Main PLL Clock source -> HSE (8 MHz)
 80025a6:	4b0c      	ldr	r3, [pc, #48]	; (80025d8 <initClocks+0x48>)
 80025a8:	4a0c      	ldr	r2, [pc, #48]	; (80025dc <initClocks+0x4c>)
 80025aa:	60da      	str	r2, [r3, #12]
    RCC->CR |= RCC_CR_PLLON;
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80025b2:	601a      	str	r2, [r3, #0]
    while ((RCC->CR & RCC_CR_PLLRDY) == 0);
 80025b4:	4b08      	ldr	r3, [pc, #32]	; (80025d8 <initClocks+0x48>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80025bc:	d0fa      	beq.n	80025b4 <initClocks+0x24>
    RCC->CFGR = RCC_CFGR_SW_PLL << RCC_CFGR_SW_Pos;
 80025be:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <initClocks+0x48>)
 80025c0:	2203      	movs	r2, #3
 80025c2:	609a      	str	r2, [r3, #8]
    while ((RCC->CFGR & RCC_CFGR_SWS_Msk) != RCC_CFGR_SWS_PLL);
 80025c4:	4b04      	ldr	r3, [pc, #16]	; (80025d8 <initClocks+0x48>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f003 030c 	and.w	r3, r3, #12
 80025cc:	2b0c      	cmp	r3, #12
 80025ce:	d1f9      	bne.n	80025c4 <initClocks+0x34>
    SystemCoreClockUpdate();
 80025d0:	f7fe ffd4 	bl	800157c <SystemCoreClockUpdate>
}
 80025d4:	bd08      	pop	{r3, pc}
 80025d6:	bf00      	nop
 80025d8:	40021000 	.word	0x40021000
 80025dc:	03000f03 	.word	0x03000f03

080025e0 <main>:

int main (int argc, char* argv[]) {
 80025e0:	b508      	push	{r3, lr}
    initClocks();
 80025e2:	f7ff ffd5 	bl	8002590 <initClocks>
    osInit(1000, timerInit, timerElapseSinceLastTime);
 80025e6:	4a14      	ldr	r2, [pc, #80]	; (8002638 <main+0x58>)
 80025e8:	4914      	ldr	r1, [pc, #80]	; (800263c <main+0x5c>)
 80025ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025ee:	f000 fc51 	bl	8002e94 <osInit>

    initGPIO();
 80025f2:	f7ff ff85 	bl	8002500 <initGPIO>
    initSound();
 80025f6:	f000 f9cb 	bl	8002990 <initSound>
    initMotor();
 80025fa:	f000 f84b 	bl	8002694 <initMotor>
    initLeds();
 80025fe:	f7ff ff43 	bl	8002488 <initLeds>
    initDisplay();
 8002602:	f7ff f90d 	bl	8001820 <initDisplay>

    osTaskAdd(max706_toggle, 0, 500);
 8002606:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800260a:	2100      	movs	r1, #0
 800260c:	480c      	ldr	r0, [pc, #48]	; (8002640 <main+0x60>)
 800260e:	f000 fc79 	bl	8002f04 <osTaskAdd>
    buttonInit(getButtonsConfig(), Button_Last);
 8002612:	f000 fddb 	bl	80031cc <getButtonsConfig>
 8002616:	2111      	movs	r1, #17
 8002618:	f000 ff36 	bl	8003488 <buttonInit>
    osTaskAdd(buttonsPollTask, 0, 5);
 800261c:	2205      	movs	r2, #5
 800261e:	2100      	movs	r1, #0
 8002620:	4808      	ldr	r0, [pc, #32]	; (8002644 <main+0x64>)
 8002622:	f000 fc6f 	bl	8002f04 <osTaskAdd>
    osTaskAdd(initializationTask, 0, 100);
 8002626:	2264      	movs	r2, #100	; 0x64
 8002628:	2100      	movs	r1, #0
 800262a:	4807      	ldr	r0, [pc, #28]	; (8002648 <main+0x68>)
 800262c:	f000 fc6a 	bl	8002f04 <osTaskAdd>
    osRun();
 8002630:	f000 fc48 	bl	8002ec4 <osRun>
}
 8002634:	bd08      	pop	{r3, pc}
 8002636:	bf00      	nop
 8002638:	08002dcd 	.word	0x08002dcd
 800263c:	08002d85 	.word	0x08002d85
 8002640:	08002499 	.word	0x08002499
 8002644:	0800325d 	.word	0x0800325d
 8002648:	080024bd 	.word	0x080024bd

0800264c <initMotorTimer>:

#define MOTOR_TIMER_FREQ (78125)
#define MOTOR_TIMER_PERIOD (SystemCoreClock / MOTOR_TIMER_FREQ)

static void initMotorTimer() {
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 800264c:	4a0d      	ldr	r2, [pc, #52]	; (8002684 <initMotorTimer+0x38>)
 800264e:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8002650:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002654:	6613      	str	r3, [r2, #96]	; 0x60

	TIM1->CCMR1 = 0x6 << TIM_CCMR1_OC1M_Pos;    //PWM Mode 1
 8002656:	4b0c      	ldr	r3, [pc, #48]	; (8002688 <initMotorTimer+0x3c>)
 8002658:	2260      	movs	r2, #96	; 0x60
 800265a:	619a      	str	r2, [r3, #24]

	TIM1->CCER = TIM_CCER_CC1E;                 //Enable Channel1 output
 800265c:	2201      	movs	r2, #1
 800265e:	621a      	str	r2, [r3, #32]
	TIM1->PSC = 0;
 8002660:	2200      	movs	r2, #0
 8002662:	629a      	str	r2, [r3, #40]	; 0x28
	TIM1->ARR = MOTOR_TIMER_PERIOD - 1;
 8002664:	4a09      	ldr	r2, [pc, #36]	; (800268c <initMotorTimer+0x40>)
 8002666:	6812      	ldr	r2, [r2, #0]
 8002668:	4909      	ldr	r1, [pc, #36]	; (8002690 <initMotorTimer+0x44>)
 800266a:	fba1 1202 	umull	r1, r2, r1, r2
 800266e:	0bd2      	lsrs	r2, r2, #15
 8002670:	3a01      	subs	r2, #1
 8002672:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM1->CCR1 = 10;
 8002674:	220a      	movs	r2, #10
 8002676:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->BDTR |= TIM_BDTR_MOE;
 8002678:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800267a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800267e:	645a      	str	r2, [r3, #68]	; 0x44
}
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	40021000 	.word	0x40021000
 8002688:	40012c00 	.word	0x40012c00
 800268c:	2000002c 	.word	0x2000002c
 8002690:	6b5fca6b 	.word	0x6b5fca6b

08002694 <initMotor>:

void initMotor() {
 8002694:	b508      	push	{r3, lr}
	initMotorTimer();
 8002696:	f7ff ffd9 	bl	800264c <initMotorTimer>
}
 800269a:	bd08      	pop	{r3, pc}

0800269c <increaseMotorSpeed>:

void increaseMotorSpeed(uint16_t step) {
    uint16_t tmp = TIM1->CCR1;
 800269c:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <increaseMotorSpeed+0x1c>)
 800269e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026a0:	b29b      	uxth	r3, r3
    uint16_t maxDuty = 100;

    if (step > (maxDuty - tmp)) {
 80026a2:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 80026a6:	4290      	cmp	r0, r2
 80026a8:	dc04      	bgt.n	80026b4 <increaseMotorSpeed+0x18>
        tmp = maxDuty;
    } else {
        tmp += step;
 80026aa:	4403      	add	r3, r0
 80026ac:	b29b      	uxth	r3, r3
    }
    TIM1->CCR1 = tmp;
 80026ae:	4a02      	ldr	r2, [pc, #8]	; (80026b8 <increaseMotorSpeed+0x1c>)
 80026b0:	6353      	str	r3, [r2, #52]	; 0x34
}
 80026b2:	4770      	bx	lr
        tmp = maxDuty;
 80026b4:	2364      	movs	r3, #100	; 0x64
 80026b6:	e7fa      	b.n	80026ae <increaseMotorSpeed+0x12>
 80026b8:	40012c00 	.word	0x40012c00

080026bc <decreaseMotorSpeed>:

void decreaseMotorSpeed(uint16_t step) {
    uint16_t tmp = TIM1->CCR1;
 80026bc:	4b05      	ldr	r3, [pc, #20]	; (80026d4 <decreaseMotorSpeed+0x18>)
 80026be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c0:	b29b      	uxth	r3, r3

    if (step > tmp) {
 80026c2:	4283      	cmp	r3, r0
 80026c4:	d304      	bcc.n	80026d0 <decreaseMotorSpeed+0x14>
        tmp = 0;
    } else {
        tmp -= step;
 80026c6:	1a1b      	subs	r3, r3, r0
 80026c8:	b29b      	uxth	r3, r3
    }
    TIM1->CCR1 = tmp;
 80026ca:	4a02      	ldr	r2, [pc, #8]	; (80026d4 <decreaseMotorSpeed+0x18>)
 80026cc:	6353      	str	r3, [r2, #52]	; 0x34
}
 80026ce:	4770      	bx	lr
        tmp = 0;
 80026d0:	2300      	movs	r3, #0
 80026d2:	e7fa      	b.n	80026ca <decreaseMotorSpeed+0xe>
 80026d4:	40012c00 	.word	0x40012c00

080026d8 <enableMotor>:

void enableMotor() {
    GPIOB->ODR |= (1 << 12);
 80026d8:	4a05      	ldr	r2, [pc, #20]	; (80026f0 <enableMotor+0x18>)
 80026da:	6953      	ldr	r3, [r2, #20]
 80026dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026e0:	6153      	str	r3, [r2, #20]
    TIM1->CR1 |= TIM_CR1_CEN;
 80026e2:	4a04      	ldr	r2, [pc, #16]	; (80026f4 <enableMotor+0x1c>)
 80026e4:	6813      	ldr	r3, [r2, #0]
 80026e6:	f043 0301 	orr.w	r3, r3, #1
 80026ea:	6013      	str	r3, [r2, #0]
}
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	48000400 	.word	0x48000400
 80026f4:	40012c00 	.word	0x40012c00

080026f8 <disableMotor>:

void disableMotor() {
	TIM1->CR1 &= ~TIM_CR1_CEN;
 80026f8:	4a05      	ldr	r2, [pc, #20]	; (8002710 <disableMotor+0x18>)
 80026fa:	6813      	ldr	r3, [r2, #0]
 80026fc:	f023 0301 	bic.w	r3, r3, #1
 8002700:	6013      	str	r3, [r2, #0]
    GPIOB->ODR &= ~(1 << 12);
 8002702:	4a04      	ldr	r2, [pc, #16]	; (8002714 <disableMotor+0x1c>)
 8002704:	6953      	ldr	r3, [r2, #20]
 8002706:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800270a:	6153      	str	r3, [r2, #20]
}
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	40012c00 	.word	0x40012c00
 8002714:	48000400 	.word	0x48000400

08002718 <soundInitTimers>:
static const uint8_t audioleveltab[AUDIOLEVELS_COUNT] = {
    4, 6, 10, 15, 25, 40, 64, 127
};

static void soundInitTimers() {
    RCC->APB1ENR1 |= RCC_APB1ENR1_TIM3EN | RCC_APB1ENR1_TIM6EN;
 8002718:	4a12      	ldr	r2, [pc, #72]	; (8002764 <soundInitTimers+0x4c>)
 800271a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800271c:	f043 0312 	orr.w	r3, r3, #18
 8002720:	6593      	str	r3, [r2, #88]	; 0x58

    TIM3->CCMR2 = 0x6 << TIM_CCMR2_OC4M_Pos;    //PWM Mode 1
 8002722:	4b11      	ldr	r3, [pc, #68]	; (8002768 <soundInitTimers+0x50>)
 8002724:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8002728:	61da      	str	r2, [r3, #28]
    TIM3->CR1 = 0x1 << TIM_CR1_CMS_Pos;
 800272a:	2220      	movs	r2, #32
 800272c:	601a      	str	r2, [r3, #0]
    TIM3->SR = 0;
 800272e:	2200      	movs	r2, #0
 8002730:	611a      	str	r2, [r3, #16]
    TIM3->CCER = TIM_CCER_CC4E;                 //Enable Channel1 output
 8002732:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002736:	6219      	str	r1, [r3, #32]
    TIM3->PSC = 0;
 8002738:	629a      	str	r2, [r3, #40]	; 0x28
    TIM3->ARR = 0;
 800273a:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM3->BDTR |= TIM_BDTR_MOE;
 800273c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800273e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002742:	645a      	str	r2, [r3, #68]	; 0x44

    TIM6->ARR = SystemCoreClock / SOUND_CONTROL_TIMER_FREQ;
 8002744:	4b09      	ldr	r3, [pc, #36]	; (800276c <soundInitTimers+0x54>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a09      	ldr	r2, [pc, #36]	; (8002770 <soundInitTimers+0x58>)
 800274a:	fba2 2303 	umull	r2, r3, r2, r3
 800274e:	099b      	lsrs	r3, r3, #6
 8002750:	4a08      	ldr	r2, [pc, #32]	; (8002774 <soundInitTimers+0x5c>)
 8002752:	62d3      	str	r3, [r2, #44]	; 0x2c
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002754:	4b08      	ldr	r3, [pc, #32]	; (8002778 <soundInitTimers+0x60>)
 8002756:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002760:	605a      	str	r2, [r3, #4]

    NVIC_EnableIRQ(TIM3_IRQn);
    NVIC_EnableIRQ(TIM6_DAC_IRQn);
}
 8002762:	4770      	bx	lr
 8002764:	40021000 	.word	0x40021000
 8002768:	40000400 	.word	0x40000400
 800276c:	2000002c 	.word	0x2000002c
 8002770:	10624dd3 	.word	0x10624dd3
 8002774:	40001000 	.word	0x40001000
 8002778:	e000e100 	.word	0xe000e100

0800277c <soundSetTimerPeriod>:

static void soundSetTimerPeriod(uint32_t period) {
    TIM3->ARR = period;
 800277c:	4b01      	ldr	r3, [pc, #4]	; (8002784 <soundSetTimerPeriod+0x8>)
 800277e:	62d8      	str	r0, [r3, #44]	; 0x2c
}
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	40000400 	.word	0x40000400

08002788 <soundSetTimerDuty>:

static void soundSetTimerDuty(uint32_t duty) {
    TIM3->CCR4 = duty;
 8002788:	4b01      	ldr	r3, [pc, #4]	; (8002790 <soundSetTimerDuty+0x8>)
 800278a:	6418      	str	r0, [r3, #64]	; 0x40
}
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	40000400 	.word	0x40000400

08002794 <intervalConvert>:

//Convert HCS08 TPM intervals (duty cycle and period) to
//STM32 TIM3 intervals
static uint32_t intervalConvert(uint32_t interval) {
    uint32_t sysClkMhz = SystemCoreClock / 1000000;
 8002794:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <intervalConvert+0x1c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a06      	ldr	r2, [pc, #24]	; (80027b4 <intervalConvert+0x20>)
 800279a:	fba2 2303 	umull	r2, r3, r2, r3
 800279e:	0c9b      	lsrs	r3, r3, #18

    return interval * sysClkMhz / ORIGINAL_FREQUENCY_MHZ;
 80027a0:	fb00 f003 	mul.w	r0, r0, r3
 80027a4:	4b04      	ldr	r3, [pc, #16]	; (80027b8 <intervalConvert+0x24>)
 80027a6:	fba3 3000 	umull	r3, r0, r3, r0
}
 80027aa:	0900      	lsrs	r0, r0, #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	2000002c 	.word	0x2000002c
 80027b4:	431bde83 	.word	0x431bde83
 80027b8:	cccccccd 	.word	0xcccccccd

080027bc <soundStart>:

static void soundStart() {
    toneburst = 0;
 80027bc:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <soundStart+0x1c>)
 80027be:	2200      	movs	r2, #0
 80027c0:	801a      	strh	r2, [r3, #0]
    TIM6->CR1 |= TIM_CR1_CEN;
 80027c2:	4b06      	ldr	r3, [pc, #24]	; (80027dc <soundStart+0x20>)
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	f042 0201 	orr.w	r2, r2, #1
 80027ca:	601a      	str	r2, [r3, #0]
    TIM6->DIER |= TIM_DIER_UIE;
 80027cc:	68da      	ldr	r2, [r3, #12]
 80027ce:	f042 0201 	orr.w	r2, r2, #1
 80027d2:	60da      	str	r2, [r3, #12]
}
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	20000268 	.word	0x20000268
 80027dc:	40001000 	.word	0x40001000

080027e0 <soundStop>:

static void soundStop() {
    TIM3->CR1 &= ~TIM_CR1_CEN;
 80027e0:	4b0b      	ldr	r3, [pc, #44]	; (8002810 <soundStop+0x30>)
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	f022 0201 	bic.w	r2, r2, #1
 80027e8:	601a      	str	r2, [r3, #0]
    TIM3->DIER &= ~TIM_DIER_UIE;
 80027ea:	68da      	ldr	r2, [r3, #12]
 80027ec:	f022 0201 	bic.w	r2, r2, #1
 80027f0:	60da      	str	r2, [r3, #12]
    TIM6->CR1 &= ~TIM_CR1_CEN;
 80027f2:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	f022 0201 	bic.w	r2, r2, #1
 80027fc:	601a      	str	r2, [r3, #0]
    TIM6->DIER &= ~TIM_DIER_UIE;
 80027fe:	68da      	ldr	r2, [r3, #12]
 8002800:	f022 0201 	bic.w	r2, r2, #1
 8002804:	60da      	str	r2, [r3, #12]
    currentState = sound_silence;
 8002806:	4b03      	ldr	r3, [pc, #12]	; (8002814 <soundStop+0x34>)
 8002808:	2200      	movs	r2, #0
 800280a:	701a      	strb	r2, [r3, #0]
}
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	40000400 	.word	0x40000400
 8002814:	20000266 	.word	0x20000266

08002818 <soundPlayNote>:

static void soundPlayNote(uint32_t period, uint32_t level) {
 8002818:	b538      	push	{r3, r4, r5, lr}
 800281a:	4604      	mov	r4, r0
 800281c:	460d      	mov	r5, r1
    soundSetTimerPeriod(intervalConvert(period));
 800281e:	f7ff ffb9 	bl	8002794 <intervalConvert>
 8002822:	f7ff ffab 	bl	800277c <soundSetTimerPeriod>

    if (level < AUDIOLEVELS_COUNT) {
 8002826:	2d07      	cmp	r5, #7
 8002828:	d812      	bhi.n	8002850 <soundPlayNote+0x38>
        audiohar1 = intervalConvert(audioleveltab[level] *
 800282a:	4b10      	ldr	r3, [pc, #64]	; (800286c <soundPlayNote+0x54>)
 800282c:	5d58      	ldrb	r0, [r3, r5]
                                    (period / 512 + 5));
 800282e:	0a64      	lsrs	r4, r4, #9
 8002830:	3405      	adds	r4, #5
        audiohar1 = intervalConvert(audioleveltab[level] *
 8002832:	fb04 f000 	mul.w	r0, r4, r0
 8002836:	f7ff ffad 	bl	8002794 <intervalConvert>
 800283a:	4b0d      	ldr	r3, [pc, #52]	; (8002870 <soundPlayNote+0x58>)
 800283c:	6018      	str	r0, [r3, #0]
        audiohar2 = audiohar1 / 8;
 800283e:	08c2      	lsrs	r2, r0, #3
 8002840:	4b0c      	ldr	r3, [pc, #48]	; (8002874 <soundPlayNote+0x5c>)
 8002842:	601a      	str	r2, [r3, #0]
        audiohar3 = audiohar2 / 8;
 8002844:	0982      	lsrs	r2, r0, #6
 8002846:	4b0c      	ldr	r3, [pc, #48]	; (8002878 <soundPlayNote+0x60>)
 8002848:	601a      	str	r2, [r3, #0]
        audiohar4 = audiohar3 / 8;
 800284a:	0a40      	lsrs	r0, r0, #9
 800284c:	4b0b      	ldr	r3, [pc, #44]	; (800287c <soundPlayNote+0x64>)
 800284e:	6018      	str	r0, [r3, #0]
    }
    audiophase = 12;
 8002850:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <soundPlayNote+0x68>)
 8002852:	220c      	movs	r2, #12
 8002854:	701a      	strb	r2, [r3, #0]
    TIM3->CR1 |= TIM_CR1_CEN;
 8002856:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <soundPlayNote+0x6c>)
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	f042 0201 	orr.w	r2, r2, #1
 800285e:	601a      	str	r2, [r3, #0]
    TIM3->DIER |= TIM_DIER_UIE;
 8002860:	68da      	ldr	r2, [r3, #12]
 8002862:	f042 0201 	orr.w	r2, r2, #1
 8002866:	60da      	str	r2, [r3, #12]
}
 8002868:	bd38      	pop	{r3, r4, r5, pc}
 800286a:	bf00      	nop
 800286c:	0800a2ac 	.word	0x0800a2ac
 8002870:	20000254 	.word	0x20000254
 8002874:	20000258 	.word	0x20000258
 8002878:	2000025c 	.word	0x2000025c
 800287c:	20000260 	.word	0x20000260
 8002880:	20000265 	.word	0x20000265
 8002884:	40000400 	.word	0x40000400

08002888 <soundStopNote>:

static void soundStopNote() {
    TIM3->CR1 &= ~TIM_CR1_CEN;
 8002888:	4b04      	ldr	r3, [pc, #16]	; (800289c <soundStopNote+0x14>)
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	f022 0201 	bic.w	r2, r2, #1
 8002890:	601a      	str	r2, [r3, #0]
    TIM3->DIER &= ~TIM_DIER_UIE;
 8002892:	68da      	ldr	r2, [r3, #12]
 8002894:	f022 0201 	bic.w	r2, r2, #1
 8002898:	60da      	str	r2, [r3, #12]
}
 800289a:	4770      	bx	lr
 800289c:	40000400 	.word	0x40000400

080028a0 <beepControlHandler>:
    default:
        break;
    }
}

static void beepControlHandler() {
 80028a0:	b508      	push	{r3, lr}
    switch (toneburst) {
 80028a2:	4b39      	ldr	r3, [pc, #228]	; (8002988 <beepControlHandler+0xe8>)
 80028a4:	881b      	ldrh	r3, [r3, #0]
 80028a6:	f240 1291 	movw	r2, #401	; 0x191
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d050      	beq.n	8002950 <beepControlHandler+0xb0>
 80028ae:	f5b3 7fc9 	cmp.w	r3, #402	; 0x192
 80028b2:	d215      	bcs.n	80028e0 <beepControlHandler+0x40>
 80028b4:	2b1f      	cmp	r3, #31
 80028b6:	d03b      	beq.n	8002930 <beepControlHandler+0x90>
 80028b8:	d80b      	bhi.n	80028d2 <beepControlHandler+0x32>
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d030      	beq.n	8002920 <beepControlHandler+0x80>
 80028be:	2b10      	cmp	r3, #16
 80028c0:	d135      	bne.n	800292e <beepControlHandler+0x8e>
    case 1:
        soundPlayNote(2485, audiolevel - 4);
        break;
    case 16:
        soundPlayNote(2485, audiolevel - 3);
 80028c2:	4b32      	ldr	r3, [pc, #200]	; (800298c <beepControlHandler+0xec>)
 80028c4:	7819      	ldrb	r1, [r3, #0]
 80028c6:	3903      	subs	r1, #3
 80028c8:	f640 10b5 	movw	r0, #2485	; 0x9b5
 80028cc:	f7ff ffa4 	bl	8002818 <soundPlayNote>
        break;
 80028d0:	e02d      	b.n	800292e <beepControlHandler+0x8e>
    switch (toneburst) {
 80028d2:	2be7      	cmp	r3, #231	; 0xe7
 80028d4:	d034      	beq.n	8002940 <beepControlHandler+0xa0>
 80028d6:	2bf6      	cmp	r3, #246	; 0xf6
 80028d8:	d129      	bne.n	800292e <beepControlHandler+0x8e>
        break;
    case 231:
        soundPlayNote(2485, audiolevel - 3);
        break;
    case 246:
        soundStopNote();
 80028da:	f7ff ffd5 	bl	8002888 <soundStopNote>
        break;
 80028de:	e026      	b.n	800292e <beepControlHandler+0x8e>
    switch (toneburst) {
 80028e0:	f240 2277 	movw	r2, #631	; 0x277
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d043      	beq.n	8002970 <beepControlHandler+0xd0>
 80028e8:	f5b3 7f1e 	cmp.w	r3, #632	; 0x278
 80028ec:	d20e      	bcs.n	800290c <beepControlHandler+0x6c>
 80028ee:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 80028f2:	d035      	beq.n	8002960 <beepControlHandler+0xc0>
 80028f4:	f240 12af 	movw	r2, #431	; 0x1af
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d118      	bne.n	800292e <beepControlHandler+0x8e>
        break;
    case 416:
        soundPlayNote(3131, audiolevel - 3);
        break;
    case 431:
        soundPlayNote(3131, audiolevel - 1);
 80028fc:	4b23      	ldr	r3, [pc, #140]	; (800298c <beepControlHandler+0xec>)
 80028fe:	7819      	ldrb	r1, [r3, #0]
 8002900:	3901      	subs	r1, #1
 8002902:	f640 403b 	movw	r0, #3131	; 0xc3b
 8002906:	f7ff ff87 	bl	8002818 <soundPlayNote>
        break;
 800290a:	e010      	b.n	800292e <beepControlHandler+0x8e>
    switch (toneburst) {
 800290c:	f240 2286 	movw	r2, #646	; 0x286
 8002910:	4293      	cmp	r3, r2
 8002912:	d035      	beq.n	8002980 <beepControlHandler+0xe0>
 8002914:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002918:	d109      	bne.n	800292e <beepControlHandler+0x8e>
        break;
    case 646:
        soundStopNote();
        break;
    case 800:
        soundStop();
 800291a:	f7ff ff61 	bl	80027e0 <soundStop>
        break;
    }
}
 800291e:	e006      	b.n	800292e <beepControlHandler+0x8e>
        soundPlayNote(2485, audiolevel - 4);
 8002920:	4b1a      	ldr	r3, [pc, #104]	; (800298c <beepControlHandler+0xec>)
 8002922:	7819      	ldrb	r1, [r3, #0]
 8002924:	3904      	subs	r1, #4
 8002926:	f640 10b5 	movw	r0, #2485	; 0x9b5
 800292a:	f7ff ff75 	bl	8002818 <soundPlayNote>
}
 800292e:	bd08      	pop	{r3, pc}
        soundPlayNote(2485, audiolevel - 1);
 8002930:	4b16      	ldr	r3, [pc, #88]	; (800298c <beepControlHandler+0xec>)
 8002932:	7819      	ldrb	r1, [r3, #0]
 8002934:	3901      	subs	r1, #1
 8002936:	f640 10b5 	movw	r0, #2485	; 0x9b5
 800293a:	f7ff ff6d 	bl	8002818 <soundPlayNote>
        break;
 800293e:	e7f6      	b.n	800292e <beepControlHandler+0x8e>
        soundPlayNote(2485, audiolevel - 3);
 8002940:	4b12      	ldr	r3, [pc, #72]	; (800298c <beepControlHandler+0xec>)
 8002942:	7819      	ldrb	r1, [r3, #0]
 8002944:	3903      	subs	r1, #3
 8002946:	f640 10b5 	movw	r0, #2485	; 0x9b5
 800294a:	f7ff ff65 	bl	8002818 <soundPlayNote>
        break;
 800294e:	e7ee      	b.n	800292e <beepControlHandler+0x8e>
        soundPlayNote(3131, audiolevel - 4);
 8002950:	4b0e      	ldr	r3, [pc, #56]	; (800298c <beepControlHandler+0xec>)
 8002952:	7819      	ldrb	r1, [r3, #0]
 8002954:	3904      	subs	r1, #4
 8002956:	f640 403b 	movw	r0, #3131	; 0xc3b
 800295a:	f7ff ff5d 	bl	8002818 <soundPlayNote>
        break;
 800295e:	e7e6      	b.n	800292e <beepControlHandler+0x8e>
        soundPlayNote(3131, audiolevel - 3);
 8002960:	4b0a      	ldr	r3, [pc, #40]	; (800298c <beepControlHandler+0xec>)
 8002962:	7819      	ldrb	r1, [r3, #0]
 8002964:	3903      	subs	r1, #3
 8002966:	f640 403b 	movw	r0, #3131	; 0xc3b
 800296a:	f7ff ff55 	bl	8002818 <soundPlayNote>
        break;
 800296e:	e7de      	b.n	800292e <beepControlHandler+0x8e>
        soundPlayNote(3131, audiolevel - 3);
 8002970:	4b06      	ldr	r3, [pc, #24]	; (800298c <beepControlHandler+0xec>)
 8002972:	7819      	ldrb	r1, [r3, #0]
 8002974:	3903      	subs	r1, #3
 8002976:	f640 403b 	movw	r0, #3131	; 0xc3b
 800297a:	f7ff ff4d 	bl	8002818 <soundPlayNote>
        break;
 800297e:	e7d6      	b.n	800292e <beepControlHandler+0x8e>
        soundStopNote();
 8002980:	f7ff ff82 	bl	8002888 <soundStopNote>
        break;
 8002984:	e7d3      	b.n	800292e <beepControlHandler+0x8e>
 8002986:	bf00      	nop
 8002988:	20000268 	.word	0x20000268
 800298c:	20000264 	.word	0x20000264

08002990 <initSound>:
void initSound() {
 8002990:	b508      	push	{r3, lr}
    toneburst = 0;
 8002992:	2300      	movs	r3, #0
 8002994:	4a04      	ldr	r2, [pc, #16]	; (80029a8 <initSound+0x18>)
 8002996:	8013      	strh	r3, [r2, #0]
    audiolevel = 3;
 8002998:	4a04      	ldr	r2, [pc, #16]	; (80029ac <initSound+0x1c>)
 800299a:	2103      	movs	r1, #3
 800299c:	7011      	strb	r1, [r2, #0]
    currentState = sound_silence;
 800299e:	4a04      	ldr	r2, [pc, #16]	; (80029b0 <initSound+0x20>)
 80029a0:	7013      	strb	r3, [r2, #0]
    soundInitTimers();
 80029a2:	f7ff feb9 	bl	8002718 <soundInitTimers>
}
 80029a6:	bd08      	pop	{r3, pc}
 80029a8:	20000268 	.word	0x20000268
 80029ac:	20000264 	.word	0x20000264
 80029b0:	20000266 	.word	0x20000266

080029b4 <soundSetLevel>:
    if (level < 8) {
 80029b4:	2807      	cmp	r0, #7
 80029b6:	d801      	bhi.n	80029bc <soundSetLevel+0x8>
        audiolevel = level;
 80029b8:	4b01      	ldr	r3, [pc, #4]	; (80029c0 <soundSetLevel+0xc>)
 80029ba:	7018      	strb	r0, [r3, #0]
}
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	20000264 	.word	0x20000264

080029c4 <soundGetLevel>:
}
 80029c4:	4b01      	ldr	r3, [pc, #4]	; (80029cc <soundGetLevel+0x8>)
 80029c6:	7818      	ldrb	r0, [r3, #0]
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	20000264 	.word	0x20000264

080029d0 <soundBeep>:
void soundBeep() {
 80029d0:	b508      	push	{r3, lr}
    if (currentState == sound_silence) {
 80029d2:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <soundBeep+0x18>)
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	b103      	cbz	r3, 80029da <soundBeep+0xa>
}
 80029d8:	bd08      	pop	{r3, pc}
        currentState = sound_beep;
 80029da:	4b03      	ldr	r3, [pc, #12]	; (80029e8 <soundBeep+0x18>)
 80029dc:	2201      	movs	r2, #1
 80029de:	701a      	strb	r2, [r3, #0]
        soundStart();
 80029e0:	f7ff feec 	bl	80027bc <soundStart>
}
 80029e4:	e7f8      	b.n	80029d8 <soundBeep+0x8>
 80029e6:	bf00      	nop
 80029e8:	20000266 	.word	0x20000266

080029ec <soundKeyBeep>:
void soundKeyBeep() {
 80029ec:	b508      	push	{r3, lr}
    if (currentState == sound_silence) {
 80029ee:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <soundKeyBeep+0x18>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	b103      	cbz	r3, 80029f6 <soundKeyBeep+0xa>
}
 80029f4:	bd08      	pop	{r3, pc}
        currentState = sound_keybeep;
 80029f6:	4b03      	ldr	r3, [pc, #12]	; (8002a04 <soundKeyBeep+0x18>)
 80029f8:	2202      	movs	r2, #2
 80029fa:	701a      	strb	r2, [r3, #0]
        soundStart();
 80029fc:	f7ff fede 	bl	80027bc <soundStart>
}
 8002a00:	e7f8      	b.n	80029f4 <soundKeyBeep+0x8>
 8002a02:	bf00      	nop
 8002a04:	20000266 	.word	0x20000266

08002a08 <soundHiAlarm>:
void soundHiAlarm() {
 8002a08:	b508      	push	{r3, lr}
    if (currentState != sound_hialarm) {
 8002a0a:	4b05      	ldr	r3, [pc, #20]	; (8002a20 <soundHiAlarm+0x18>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d004      	beq.n	8002a1c <soundHiAlarm+0x14>
        currentState = sound_hialarm;
 8002a12:	4b03      	ldr	r3, [pc, #12]	; (8002a20 <soundHiAlarm+0x18>)
 8002a14:	2204      	movs	r2, #4
 8002a16:	701a      	strb	r2, [r3, #0]
        soundStart();
 8002a18:	f7ff fed0 	bl	80027bc <soundStart>
}
 8002a1c:	bd08      	pop	{r3, pc}
 8002a1e:	bf00      	nop
 8002a20:	20000266 	.word	0x20000266

08002a24 <soundStopAlarm>:
void soundStopAlarm() {
 8002a24:	b508      	push	{r3, lr}
    switch (currentState) {
 8002a26:	4b04      	ldr	r3, [pc, #16]	; (8002a38 <soundStopAlarm+0x14>)
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	3b03      	subs	r3, #3
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d900      	bls.n	8002a32 <soundStopAlarm+0xe>
}
 8002a30:	bd08      	pop	{r3, pc}
        soundStop();
 8002a32:	f7ff fed5 	bl	80027e0 <soundStop>
}
 8002a36:	e7fb      	b.n	8002a30 <soundStopAlarm+0xc>
 8002a38:	20000266 	.word	0x20000266

08002a3c <keybeepControlHandler>:

void keybeepControlHandler() {
 8002a3c:	b508      	push	{r3, lr}
    switch (toneburst) {
 8002a3e:	4b15      	ldr	r3, [pc, #84]	; (8002a94 <keybeepControlHandler+0x58>)
 8002a40:	881b      	ldrh	r3, [r3, #0]
 8002a42:	2b83      	cmp	r3, #131	; 0x83
 8002a44:	d01b      	beq.n	8002a7e <keybeepControlHandler+0x42>
 8002a46:	d80b      	bhi.n	8002a60 <keybeepControlHandler+0x24>
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d010      	beq.n	8002a6e <keybeepControlHandler+0x32>
 8002a4c:	2b0b      	cmp	r3, #11
 8002a4e:	d115      	bne.n	8002a7c <keybeepControlHandler+0x40>
    case 1:
        soundPlayNote(2485, audiolevel - 3);
        break;
    case 11:
        soundPlayNote(2485, audiolevel - 1);
 8002a50:	4b11      	ldr	r3, [pc, #68]	; (8002a98 <keybeepControlHandler+0x5c>)
 8002a52:	7819      	ldrb	r1, [r3, #0]
 8002a54:	3901      	subs	r1, #1
 8002a56:	f640 10b5 	movw	r0, #2485	; 0x9b5
 8002a5a:	f7ff fedd 	bl	8002818 <soundPlayNote>
        break;
 8002a5e:	e00d      	b.n	8002a7c <keybeepControlHandler+0x40>
    switch (toneburst) {
 8002a60:	2b8d      	cmp	r3, #141	; 0x8d
 8002a62:	d014      	beq.n	8002a8e <keybeepControlHandler+0x52>
 8002a64:	2ba1      	cmp	r3, #161	; 0xa1
 8002a66:	d109      	bne.n	8002a7c <keybeepControlHandler+0x40>
        break;
    case 141:
        soundStopNote();
        break;
    case 161:
        soundStop();
 8002a68:	f7ff feba 	bl	80027e0 <soundStop>
        break;
    }
}
 8002a6c:	e006      	b.n	8002a7c <keybeepControlHandler+0x40>
        soundPlayNote(2485, audiolevel - 3);
 8002a6e:	4b0a      	ldr	r3, [pc, #40]	; (8002a98 <keybeepControlHandler+0x5c>)
 8002a70:	7819      	ldrb	r1, [r3, #0]
 8002a72:	3903      	subs	r1, #3
 8002a74:	f640 10b5 	movw	r0, #2485	; 0x9b5
 8002a78:	f7ff fece 	bl	8002818 <soundPlayNote>
}
 8002a7c:	bd08      	pop	{r3, pc}
        soundPlayNote(2485, audiolevel - 3);
 8002a7e:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <keybeepControlHandler+0x5c>)
 8002a80:	7819      	ldrb	r1, [r3, #0]
 8002a82:	3903      	subs	r1, #3
 8002a84:	f640 10b5 	movw	r0, #2485	; 0x9b5
 8002a88:	f7ff fec6 	bl	8002818 <soundPlayNote>
        break;
 8002a8c:	e7f6      	b.n	8002a7c <keybeepControlHandler+0x40>
        soundStopNote();
 8002a8e:	f7ff fefb 	bl	8002888 <soundStopNote>
        break;
 8002a92:	e7f3      	b.n	8002a7c <keybeepControlHandler+0x40>
 8002a94:	20000268 	.word	0x20000268
 8002a98:	20000264 	.word	0x20000264

08002a9c <hialarmControlHandler>:

void hialarmControlHandler() {
 8002a9c:	b508      	push	{r3, lr}
    uint16_t toneburst_local;

    if (toneburst < 2000) {
 8002a9e:	4b91      	ldr	r3, [pc, #580]	; (8002ce4 <hialarmControlHandler+0x248>)
 8002aa0:	881b      	ldrh	r3, [r3, #0]
 8002aa2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002aa6:	d302      	bcc.n	8002aae <hialarmControlHandler+0x12>
        toneburst_local = toneburst;
    } else {
        toneburst_local = toneburst - 2000;
 8002aa8:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8002aac:	b29b      	uxth	r3, r3
    }

    switch (toneburst_local) {
 8002aae:	f240 2209 	movw	r2, #521	; 0x209
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	f000 80d7 	beq.w	8002c66 <hialarmControlHandler+0x1ca>
 8002ab8:	d843      	bhi.n	8002b42 <hialarmControlHandler+0xa6>
 8002aba:	2bfb      	cmp	r3, #251	; 0xfb
 8002abc:	f000 80ab 	beq.w	8002c16 <hialarmControlHandler+0x17a>
 8002ac0:	d919      	bls.n	8002af6 <hialarmControlHandler+0x5a>
 8002ac2:	f240 12af 	movw	r2, #431	; 0x1af
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	f000 80b5 	beq.w	8002c36 <hialarmControlHandler+0x19a>
 8002acc:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8002ad0:	d327      	bcc.n	8002b22 <hialarmControlHandler+0x86>
 8002ad2:	f240 12f5 	movw	r2, #501	; 0x1f5
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	f000 80b5 	beq.w	8002c46 <hialarmControlHandler+0x1aa>
 8002adc:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	f000 80b8 	beq.w	8002c56 <hialarmControlHandler+0x1ba>
 8002ae6:	f240 12b9 	movw	r2, #441	; 0x1b9
 8002aea:	4293      	cmp	r3, r2
 8002aec:	f040 8082 	bne.w	8002bf4 <hialarmControlHandler+0x158>
        break;
    case    431:
        soundPlayNote(2790, audiolevel - 3);
        break;
    case    441:
        soundStopNote();
 8002af0:	f7ff feca 	bl	8002888 <soundStopNote>
        break;
 8002af4:	e07e      	b.n	8002bf4 <hialarmControlHandler+0x158>
    switch (toneburst_local) {
 8002af6:	2b14      	cmp	r3, #20
 8002af8:	d07d      	beq.n	8002bf6 <hialarmControlHandler+0x15a>
 8002afa:	d80b      	bhi.n	8002b14 <hialarmControlHandler+0x78>
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d072      	beq.n	8002be6 <hialarmControlHandler+0x14a>
 8002b00:	2b0a      	cmp	r3, #10
 8002b02:	d177      	bne.n	8002bf4 <hialarmControlHandler+0x158>
        soundPlayNote(1566, audiolevel - 3);
 8002b04:	4b78      	ldr	r3, [pc, #480]	; (8002ce8 <hialarmControlHandler+0x24c>)
 8002b06:	7819      	ldrb	r1, [r3, #0]
 8002b08:	3903      	subs	r1, #3
 8002b0a:	f240 601e 	movw	r0, #1566	; 0x61e
 8002b0e:	f7ff fe83 	bl	8002818 <soundPlayNote>
        break;
 8002b12:	e06f      	b.n	8002bf4 <hialarmControlHandler+0x158>
    switch (toneburst_local) {
 8002b14:	2bb5      	cmp	r3, #181	; 0xb5
 8002b16:	d076      	beq.n	8002c06 <hialarmControlHandler+0x16a>
 8002b18:	2bbf      	cmp	r3, #191	; 0xbf
 8002b1a:	d16b      	bne.n	8002bf4 <hialarmControlHandler+0x158>
        soundStopNote();
 8002b1c:	f7ff feb4 	bl	8002888 <soundStopNote>
        break;
 8002b20:	e068      	b.n	8002bf4 <hialarmControlHandler+0x158>
    switch (toneburst_local) {
 8002b22:	f240 1205 	movw	r2, #261	; 0x105
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d07d      	beq.n	8002c26 <hialarmControlHandler+0x18a>
 8002b2a:	f240 120f 	movw	r2, #271	; 0x10f
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d160      	bne.n	8002bf4 <hialarmControlHandler+0x158>
        soundPlayNote(2790, audiolevel - 1);
 8002b32:	4b6d      	ldr	r3, [pc, #436]	; (8002ce8 <hialarmControlHandler+0x24c>)
 8002b34:	7819      	ldrb	r1, [r3, #0]
 8002b36:	3901      	subs	r1, #1
 8002b38:	f640 20e6 	movw	r0, #2790	; 0xae6
 8002b3c:	f7ff fe6c 	bl	8002818 <soundPlayNote>
        break;
 8002b40:	e058      	b.n	8002bf4 <hialarmControlHandler+0x158>
    switch (toneburst_local) {
 8002b42:	f240 429d 	movw	r2, #1181	; 0x49d
 8002b46:	4293      	cmp	r3, r2
 8002b48:	f000 80ad 	beq.w	8002ca6 <hialarmControlHandler+0x20a>
 8002b4c:	d91b      	bls.n	8002b86 <hialarmControlHandler+0xea>
 8002b4e:	f240 42ec 	movw	r2, #1260	; 0x4ec
 8002b52:	4293      	cmp	r3, r2
 8002b54:	f000 80b2 	beq.w	8002cbc <hialarmControlHandler+0x220>
 8002b58:	d935      	bls.n	8002bc6 <hialarmControlHandler+0x12a>
 8002b5a:	f240 5297 	movw	r2, #1431	; 0x597
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	f000 80b4 	beq.w	8002ccc <hialarmControlHandler+0x230>
 8002b64:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	f000 80b7 	beq.w	8002cdc <hialarmControlHandler+0x240>
 8002b6e:	f240 42f6 	movw	r2, #1270	; 0x4f6
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d13e      	bne.n	8002bf4 <hialarmControlHandler+0x158>
        break;
    case    1260:
        soundPlayNote(2790, audiolevel - 3);
        break;
    case    1270:
        soundPlayNote(2790, audiolevel - 1);
 8002b76:	4b5c      	ldr	r3, [pc, #368]	; (8002ce8 <hialarmControlHandler+0x24c>)
 8002b78:	7819      	ldrb	r1, [r3, #0]
 8002b7a:	3901      	subs	r1, #1
 8002b7c:	f640 20e6 	movw	r0, #2790	; 0xae6
 8002b80:	f7ff fe4a 	bl	8002818 <soundPlayNote>
        break;
 8002b84:	e036      	b.n	8002bf4 <hialarmControlHandler+0x158>
    switch (toneburst_local) {
 8002b86:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d07b      	beq.n	8002c86 <hialarmControlHandler+0x1ea>
 8002b8e:	d80a      	bhi.n	8002ba6 <hialarmControlHandler+0x10a>
 8002b90:	f240 22a9 	movw	r2, #681	; 0x2a9
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d06e      	beq.n	8002c76 <hialarmControlHandler+0x1da>
 8002b98:	f240 22b3 	movw	r2, #691	; 0x2b3
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d129      	bne.n	8002bf4 <hialarmControlHandler+0x158>
        soundStopNote();
 8002ba0:	f7ff fe72 	bl	8002888 <soundStopNote>
        break;
 8002ba4:	e026      	b.n	8002bf4 <hialarmControlHandler+0x158>
    switch (toneburst_local) {
 8002ba6:	f240 32f3 	movw	r2, #1011	; 0x3f3
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d073      	beq.n	8002c96 <hialarmControlHandler+0x1fa>
 8002bae:	f240 32fd 	movw	r2, #1021	; 0x3fd
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d11e      	bne.n	8002bf4 <hialarmControlHandler+0x158>
        soundPlayNote(1566, audiolevel - 1);
 8002bb6:	4b4c      	ldr	r3, [pc, #304]	; (8002ce8 <hialarmControlHandler+0x24c>)
 8002bb8:	7819      	ldrb	r1, [r3, #0]
 8002bba:	3901      	subs	r1, #1
 8002bbc:	f240 601e 	movw	r0, #1566	; 0x61e
 8002bc0:	f7ff fe2a 	bl	8002818 <soundPlayNote>
        break;
 8002bc4:	e016      	b.n	8002bf4 <hialarmControlHandler+0x158>
    switch (toneburst_local) {
 8002bc6:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d073      	beq.n	8002cb6 <hialarmControlHandler+0x21a>
 8002bce:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d10e      	bne.n	8002bf4 <hialarmControlHandler+0x158>
        soundPlayNote(2790, audiolevel - 4);
 8002bd6:	4b44      	ldr	r3, [pc, #272]	; (8002ce8 <hialarmControlHandler+0x24c>)
 8002bd8:	7819      	ldrb	r1, [r3, #0]
 8002bda:	3904      	subs	r1, #4
 8002bdc:	f640 20e6 	movw	r0, #2790	; 0xae6
 8002be0:	f7ff fe1a 	bl	8002818 <soundPlayNote>
        break;
 8002be4:	e006      	b.n	8002bf4 <hialarmControlHandler+0x158>
        soundPlayNote(1566, audiolevel - 4);
 8002be6:	4b40      	ldr	r3, [pc, #256]	; (8002ce8 <hialarmControlHandler+0x24c>)
 8002be8:	7819      	ldrb	r1, [r3, #0]
 8002bea:	3904      	subs	r1, #4
 8002bec:	f240 601e 	movw	r0, #1566	; 0x61e
 8002bf0:	f7ff fe12 	bl	8002818 <soundPlayNote>
        break;
    case    1441:
        soundStopNote();
        break;
    }
}
 8002bf4:	bd08      	pop	{r3, pc}
        soundPlayNote(1566, audiolevel - 1);
 8002bf6:	4b3c      	ldr	r3, [pc, #240]	; (8002ce8 <hialarmControlHandler+0x24c>)
 8002bf8:	7819      	ldrb	r1, [r3, #0]
 8002bfa:	3901      	subs	r1, #1
 8002bfc:	f240 601e 	movw	r0, #1566	; 0x61e
 8002c00:	f7ff fe0a 	bl	8002818 <soundPlayNote>
        break;
 8002c04:	e7f6      	b.n	8002bf4 <hialarmControlHandler+0x158>
        soundPlayNote(1566, audiolevel - 3);
 8002c06:	4b38      	ldr	r3, [pc, #224]	; (8002ce8 <hialarmControlHandler+0x24c>)
 8002c08:	7819      	ldrb	r1, [r3, #0]
 8002c0a:	3903      	subs	r1, #3
 8002c0c:	f240 601e 	movw	r0, #1566	; 0x61e
 8002c10:	f7ff fe02 	bl	8002818 <soundPlayNote>
        break;
 8002c14:	e7ee      	b.n	8002bf4 <hialarmControlHandler+0x158>
        soundPlayNote(2790, audiolevel - 4);
 8002c16:	4b34      	ldr	r3, [pc, #208]	; (8002ce8 <hialarmControlHandler+0x24c>)
 8002c18:	7819      	ldrb	r1, [r3, #0]
 8002c1a:	3904      	subs	r1, #4
 8002c1c:	f640 20e6 	movw	r0, #2790	; 0xae6
 8002c20:	f7ff fdfa 	bl	8002818 <soundPlayNote>
        break;
 8002c24:	e7e6      	b.n	8002bf4 <hialarmControlHandler+0x158>
        soundPlayNote(2790, audiolevel - 3);
 8002c26:	4b30      	ldr	r3, [pc, #192]	; (8002ce8 <hialarmControlHandler+0x24c>)
 8002c28:	7819      	ldrb	r1, [r3, #0]
 8002c2a:	3903      	subs	r1, #3
 8002c2c:	f640 20e6 	movw	r0, #2790	; 0xae6
 8002c30:	f7ff fdf2 	bl	8002818 <soundPlayNote>
        break;
 8002c34:	e7de      	b.n	8002bf4 <hialarmControlHandler+0x158>
        soundPlayNote(2790, audiolevel - 3);
 8002c36:	4b2c      	ldr	r3, [pc, #176]	; (8002ce8 <hialarmControlHandler+0x24c>)
 8002c38:	7819      	ldrb	r1, [r3, #0]
 8002c3a:	3903      	subs	r1, #3
 8002c3c:	f640 20e6 	movw	r0, #2790	; 0xae6
 8002c40:	f7ff fdea 	bl	8002818 <soundPlayNote>
        break;
 8002c44:	e7d6      	b.n	8002bf4 <hialarmControlHandler+0x158>
        soundPlayNote(2214, audiolevel - 4);
 8002c46:	4b28      	ldr	r3, [pc, #160]	; (8002ce8 <hialarmControlHandler+0x24c>)
 8002c48:	7819      	ldrb	r1, [r3, #0]
 8002c4a:	3904      	subs	r1, #4
 8002c4c:	f640 00a6 	movw	r0, #2214	; 0x8a6
 8002c50:	f7ff fde2 	bl	8002818 <soundPlayNote>
        break;
 8002c54:	e7ce      	b.n	8002bf4 <hialarmControlHandler+0x158>
        soundPlayNote(2214, audiolevel - 3);
 8002c56:	4b24      	ldr	r3, [pc, #144]	; (8002ce8 <hialarmControlHandler+0x24c>)
 8002c58:	7819      	ldrb	r1, [r3, #0]
 8002c5a:	3903      	subs	r1, #3
 8002c5c:	f640 00a6 	movw	r0, #2214	; 0x8a6
 8002c60:	f7ff fdda 	bl	8002818 <soundPlayNote>
        break;
 8002c64:	e7c6      	b.n	8002bf4 <hialarmControlHandler+0x158>
        soundPlayNote(2214, audiolevel - 1);
 8002c66:	4b20      	ldr	r3, [pc, #128]	; (8002ce8 <hialarmControlHandler+0x24c>)
 8002c68:	7819      	ldrb	r1, [r3, #0]
 8002c6a:	3901      	subs	r1, #1
 8002c6c:	f640 00a6 	movw	r0, #2214	; 0x8a6
 8002c70:	f7ff fdd2 	bl	8002818 <soundPlayNote>
        break;
 8002c74:	e7be      	b.n	8002bf4 <hialarmControlHandler+0x158>
        soundPlayNote(2214, audiolevel - 3);
 8002c76:	4b1c      	ldr	r3, [pc, #112]	; (8002ce8 <hialarmControlHandler+0x24c>)
 8002c78:	7819      	ldrb	r1, [r3, #0]
 8002c7a:	3903      	subs	r1, #3
 8002c7c:	f640 00a6 	movw	r0, #2214	; 0x8a6
 8002c80:	f7ff fdca 	bl	8002818 <soundPlayNote>
        break;
 8002c84:	e7b6      	b.n	8002bf4 <hialarmControlHandler+0x158>
        soundPlayNote(1566, audiolevel - 4);
 8002c86:	4b18      	ldr	r3, [pc, #96]	; (8002ce8 <hialarmControlHandler+0x24c>)
 8002c88:	7819      	ldrb	r1, [r3, #0]
 8002c8a:	3904      	subs	r1, #4
 8002c8c:	f240 601e 	movw	r0, #1566	; 0x61e
 8002c90:	f7ff fdc2 	bl	8002818 <soundPlayNote>
        break;
 8002c94:	e7ae      	b.n	8002bf4 <hialarmControlHandler+0x158>
        soundPlayNote(1566, audiolevel - 3);
 8002c96:	4b14      	ldr	r3, [pc, #80]	; (8002ce8 <hialarmControlHandler+0x24c>)
 8002c98:	7819      	ldrb	r1, [r3, #0]
 8002c9a:	3903      	subs	r1, #3
 8002c9c:	f240 601e 	movw	r0, #1566	; 0x61e
 8002ca0:	f7ff fdba 	bl	8002818 <soundPlayNote>
        break;
 8002ca4:	e7a6      	b.n	8002bf4 <hialarmControlHandler+0x158>
        soundPlayNote(1566, audiolevel - 3);
 8002ca6:	4b10      	ldr	r3, [pc, #64]	; (8002ce8 <hialarmControlHandler+0x24c>)
 8002ca8:	7819      	ldrb	r1, [r3, #0]
 8002caa:	3903      	subs	r1, #3
 8002cac:	f240 601e 	movw	r0, #1566	; 0x61e
 8002cb0:	f7ff fdb2 	bl	8002818 <soundPlayNote>
        break;
 8002cb4:	e79e      	b.n	8002bf4 <hialarmControlHandler+0x158>
        soundStopNote();
 8002cb6:	f7ff fde7 	bl	8002888 <soundStopNote>
        break;
 8002cba:	e79b      	b.n	8002bf4 <hialarmControlHandler+0x158>
        soundPlayNote(2790, audiolevel - 3);
 8002cbc:	4b0a      	ldr	r3, [pc, #40]	; (8002ce8 <hialarmControlHandler+0x24c>)
 8002cbe:	7819      	ldrb	r1, [r3, #0]
 8002cc0:	3903      	subs	r1, #3
 8002cc2:	f640 20e6 	movw	r0, #2790	; 0xae6
 8002cc6:	f7ff fda7 	bl	8002818 <soundPlayNote>
        break;
 8002cca:	e793      	b.n	8002bf4 <hialarmControlHandler+0x158>
        soundPlayNote(2790, audiolevel - 3);
 8002ccc:	4b06      	ldr	r3, [pc, #24]	; (8002ce8 <hialarmControlHandler+0x24c>)
 8002cce:	7819      	ldrb	r1, [r3, #0]
 8002cd0:	3903      	subs	r1, #3
 8002cd2:	f640 20e6 	movw	r0, #2790	; 0xae6
 8002cd6:	f7ff fd9f 	bl	8002818 <soundPlayNote>
        break;
 8002cda:	e78b      	b.n	8002bf4 <hialarmControlHandler+0x158>
        soundStopNote();
 8002cdc:	f7ff fdd4 	bl	8002888 <soundStopNote>
}
 8002ce0:	e788      	b.n	8002bf4 <hialarmControlHandler+0x158>
 8002ce2:	bf00      	nop
 8002ce4:	20000268 	.word	0x20000268
 8002ce8:	20000264 	.word	0x20000264

08002cec <soundControlHandler>:

//Sound playback control
//Called by TIM6 interrupt handler
void soundControlHandler() {
 8002cec:	b508      	push	{r3, lr}
    switch (currentState) {
 8002cee:	4b10      	ldr	r3, [pc, #64]	; (8002d30 <soundControlHandler+0x44>)
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d015      	beq.n	8002d22 <soundControlHandler+0x36>
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	d016      	beq.n	8002d28 <soundControlHandler+0x3c>
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d002      	beq.n	8002d04 <soundControlHandler+0x18>
        break;
    case sound_hialarm:
        hialarmControlHandler();
        break;
    default:
        soundStop();
 8002cfe:	f7ff fd6f 	bl	80027e0 <soundStop>
 8002d02:	e001      	b.n	8002d08 <soundControlHandler+0x1c>
        beepControlHandler();
 8002d04:	f7ff fdcc 	bl	80028a0 <beepControlHandler>
    }

    toneburst++;
 8002d08:	4a0a      	ldr	r2, [pc, #40]	; (8002d34 <soundControlHandler+0x48>)
 8002d0a:	8813      	ldrh	r3, [r2, #0]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	8013      	strh	r3, [r2, #0]

    if (toneburst > 10000) {
 8002d12:	f242 7210 	movw	r2, #10000	; 0x2710
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d902      	bls.n	8002d20 <soundControlHandler+0x34>
        toneburst = 0;
 8002d1a:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <soundControlHandler+0x48>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	801a      	strh	r2, [r3, #0]
    }
}
 8002d20:	bd08      	pop	{r3, pc}
        keybeepControlHandler();
 8002d22:	f7ff fe8b 	bl	8002a3c <keybeepControlHandler>
        break;
 8002d26:	e7ef      	b.n	8002d08 <soundControlHandler+0x1c>
        hialarmControlHandler();
 8002d28:	f7ff feb8 	bl	8002a9c <hialarmControlHandler>
        break;
 8002d2c:	e7ec      	b.n	8002d08 <soundControlHandler+0x1c>
 8002d2e:	bf00      	nop
 8002d30:	20000266 	.word	0x20000266
 8002d34:	20000268 	.word	0x20000268

08002d38 <soundWaveformHandler>:

//Waveform control
//Called by TIM3 interrupt handler
void soundWaveformHandler() {
 8002d38:	b508      	push	{r3, lr}
    uint32_t nextDutyCycle = 0;

    if (audiophase > 0) {
 8002d3a:	4b10      	ldr	r3, [pc, #64]	; (8002d7c <soundWaveformHandler+0x44>)
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	b12b      	cbz	r3, 8002d4c <soundWaveformHandler+0x14>
        audiophase--;
 8002d40:	3b01      	subs	r3, #1
 8002d42:	4a0e      	ldr	r2, [pc, #56]	; (8002d7c <soundWaveformHandler+0x44>)
 8002d44:	7013      	strb	r3, [r2, #0]
    } else {
        audiophase = 12;
    }

    for (int i = 0; i < WAVEFORM_NUM_STEPS; i++) {
 8002d46:	2300      	movs	r3, #0
    uint32_t nextDutyCycle = 0;
 8002d48:	4618      	mov	r0, r3
    for (int i = 0; i < WAVEFORM_NUM_STEPS; i++) {
 8002d4a:	e004      	b.n	8002d56 <soundWaveformHandler+0x1e>
        audiophase = 12;
 8002d4c:	4b0b      	ldr	r3, [pc, #44]	; (8002d7c <soundWaveformHandler+0x44>)
 8002d4e:	220c      	movs	r2, #12
 8002d50:	701a      	strb	r2, [r3, #0]
 8002d52:	e7f8      	b.n	8002d46 <soundWaveformHandler+0xe>
    for (int i = 0; i < WAVEFORM_NUM_STEPS; i++) {
 8002d54:	3301      	adds	r3, #1
 8002d56:	2b05      	cmp	r3, #5
 8002d58:	dc0c      	bgt.n	8002d74 <soundWaveformHandler+0x3c>
        if (audiophase == waveformSteps[i].phase) {
 8002d5a:	4a09      	ldr	r2, [pc, #36]	; (8002d80 <soundWaveformHandler+0x48>)
 8002d5c:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
 8002d60:	4a06      	ldr	r2, [pc, #24]	; (8002d7c <soundWaveformHandler+0x44>)
 8002d62:	7812      	ldrb	r2, [r2, #0]
 8002d64:	4291      	cmp	r1, r2
 8002d66:	d1f5      	bne.n	8002d54 <soundWaveformHandler+0x1c>
            nextDutyCycle = *waveformSteps[i].duty;
 8002d68:	4a05      	ldr	r2, [pc, #20]	; (8002d80 <soundWaveformHandler+0x48>)
 8002d6a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8002d6e:	6852      	ldr	r2, [r2, #4]
 8002d70:	6810      	ldr	r0, [r2, #0]
 8002d72:	e7ef      	b.n	8002d54 <soundWaveformHandler+0x1c>
        }
    }
    soundSetTimerDuty(nextDutyCycle);
 8002d74:	f7ff fd08 	bl	8002788 <soundSetTimerDuty>
}
 8002d78:	bd08      	pop	{r3, pc}
 8002d7a:	bf00      	nop
 8002d7c:	20000265 	.word	0x20000265
 8002d80:	0800a2b4 	.word	0x0800a2b4

08002d84 <timerInit>:

static timer_t timer_data;

void timerInit(uint32_t resolution, timerHandler_t handler)
{
	timer_data.resolution = 0;
 8002d84:	4b0d      	ldr	r3, [pc, #52]	; (8002dbc <timerInit+0x38>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	609a      	str	r2, [r3, #8]
	timer_data.ticks = 0;
 8002d8a:	601a      	str	r2, [r3, #0]
	timer_data.lastAskTime = 0;
 8002d8c:	605a      	str	r2, [r3, #4]
	timer_data.state = tsActive;
 8002d8e:	2201      	movs	r2, #1
 8002d90:	731a      	strb	r2, [r3, #12]
	timer_data.handler = handler;
 8002d92:	6119      	str	r1, [r3, #16]
	SysTick_Config(SystemCoreClock/resolution);
 8002d94:	4b0a      	ldr	r3, [pc, #40]	; (8002dc0 <timerInit+0x3c>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	fbb3 f0f0 	udiv	r0, r3, r0
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d9c:	3801      	subs	r0, #1
 8002d9e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002da2:	d209      	bcs.n	8002db8 <timerInit+0x34>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002da4:	4b07      	ldr	r3, [pc, #28]	; (8002dc4 <timerInit+0x40>)
 8002da6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002da8:	4a07      	ldr	r2, [pc, #28]	; (8002dc8 <timerInit+0x44>)
 8002daa:	21f0      	movs	r1, #240	; 0xf0
 8002dac:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002db0:	2200      	movs	r2, #0
 8002db2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002db4:	2207      	movs	r2, #7
 8002db6:	601a      	str	r2, [r3, #0]
}
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	2000026c 	.word	0x2000026c
 8002dc0:	2000002c 	.word	0x2000002c
 8002dc4:	e000e010 	.word	0xe000e010
 8002dc8:	e000ed00 	.word	0xe000ed00

08002dcc <timerElapseSinceLastTime>:
/**
 * This function ust be used only when external interrupts are disabled!
*/
TIME_T timerElapseSinceLastTime(void)
{
	TIME_T result = timer_data.ticks - timer_data.lastAskTime;
 8002dcc:	4b02      	ldr	r3, [pc, #8]	; (8002dd8 <timerElapseSinceLastTime+0xc>)
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	6858      	ldr	r0, [r3, #4]
	timer_data.lastAskTime = timer_data.ticks;
 8002dd2:	605a      	str	r2, [r3, #4]
	return result;
}
 8002dd4:	1a10      	subs	r0, r2, r0
 8002dd6:	4770      	bx	lr
 8002dd8:	2000026c 	.word	0x2000026c

08002ddc <SysTick_Handler>:


void SysTick_Handler(void)
{
 8002ddc:	b508      	push	{r3, lr}
	// Check operation. Is it atomic?
	timer_data.ticks++;
 8002dde:	4b03      	ldr	r3, [pc, #12]	; (8002dec <SysTick_Handler+0x10>)
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	3201      	adds	r2, #1
 8002de4:	601a      	str	r2, [r3, #0]
	timer_data.handler();
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	4798      	blx	r3
}
 8002dea:	bd08      	pop	{r3, pc}
 8002dec:	2000026c 	.word	0x2000026c

08002df0 <tickHook>:
static bool haveTaskToDo; //TODO search usage of this variable

// TODO Need to implement or do it weak
void tickHook(void)
{
}
 8002df0:	4770      	bx	lr
	...

08002df4 <nearestTaskTime>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002df4:	b672      	cpsid	i


static TIME_T nearestTaskTime(void){
  ENTER_CRITICAL_SECTION();
  TIME_T time = INVALID_TIME;
  for(taskId_t i = 0; i < MAX_TASKS; ++i){
 8002df6:	2300      	movs	r3, #0
  TIME_T time = INVALID_TIME;
 8002df8:	f04f 30ff 	mov.w	r0, #4294967295
  for(taskId_t i = 0; i < MAX_TASKS; ++i){
 8002dfc:	e005      	b.n	8002e0a <nearestTaskTime+0x16>
    if(tasks[i].state == tskWait){
      time > tasks[i].time?
 8002dfe:	011a      	lsls	r2, r3, #4
 8002e00:	4909      	ldr	r1, [pc, #36]	; (8002e28 <nearestTaskTime+0x34>)
 8002e02:	588a      	ldr	r2, [r1, r2]
        time = tasks[i].time: 0;
 8002e04:	4282      	cmp	r2, r0
 8002e06:	d30d      	bcc.n	8002e24 <nearestTaskTime+0x30>
  for(taskId_t i = 0; i < MAX_TASKS; ++i){
 8002e08:	3301      	adds	r3, #1
 8002e0a:	2b13      	cmp	r3, #19
 8002e0c:	d808      	bhi.n	8002e20 <nearestTaskTime+0x2c>
    if(tasks[i].state == tskWait){
 8002e0e:	4a06      	ldr	r2, [pc, #24]	; (8002e28 <nearestTaskTime+0x34>)
 8002e10:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8002e14:	7b12      	ldrb	r2, [r2, #12]
 8002e16:	2a02      	cmp	r2, #2
 8002e18:	d0f1      	beq.n	8002dfe <nearestTaskTime+0xa>
    }
    else if(tasks[i].state == tskReady){
 8002e1a:	2a01      	cmp	r2, #1
 8002e1c:	d1f4      	bne.n	8002e08 <nearestTaskTime+0x14>
      time = 0;
 8002e1e:	2000      	movs	r0, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8002e20:	b662      	cpsie	i
    }
  }
  haveTaskToDo = time == 0;
  EXIT_CRITICAL_SECTION();
  return time;
}
 8002e22:	4770      	bx	lr
        time = tasks[i].time: 0;
 8002e24:	4610      	mov	r0, r2
 8002e26:	e7ef      	b.n	8002e08 <nearestTaskTime+0x14>
 8002e28:	20000280 	.word	0x20000280

08002e2c <recountTasksTime>:


static void recountTasksTime(void){
 8002e2c:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 8002e2e:	b672      	cpsid	i
  ENTER_CRITICAL_SECTION();
  TIME_T value = timerElapseSinceLastTimeFunction();
 8002e30:	4b16      	ldr	r3, [pc, #88]	; (8002e8c <recountTasksTime+0x60>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4798      	blx	r3
  if(value){
 8002e36:	b338      	cbz	r0, 8002e88 <recountTasksTime+0x5c>
 8002e38:	4604      	mov	r4, r0
    for(taskId_t i = 0; i < MAX_TASKS; ++i)
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	e010      	b.n	8002e60 <recountTasksTime+0x34>
      {
        if(tasks[i].time > 0){
          if(tasks[i].time > value)
            tasks[i].time -= value;
          else
            tasks[i].time = 0;
 8002e3e:	011a      	lsls	r2, r3, #4
 8002e40:	4913      	ldr	r1, [pc, #76]	; (8002e90 <recountTasksTime+0x64>)
 8002e42:	2000      	movs	r0, #0
 8002e44:	5088      	str	r0, [r1, r2]
        }

        if(tasks[i].time == 0 && tasks[i].task){
 8002e46:	011a      	lsls	r2, r3, #4
 8002e48:	4911      	ldr	r1, [pc, #68]	; (8002e90 <recountTasksTime+0x64>)
 8002e4a:	588a      	ldr	r2, [r1, r2]
 8002e4c:	b93a      	cbnz	r2, 8002e5e <recountTasksTime+0x32>
 8002e4e:	eb01 1203 	add.w	r2, r1, r3, lsl #4
 8002e52:	6852      	ldr	r2, [r2, #4]
 8002e54:	b11a      	cbz	r2, 8002e5e <recountTasksTime+0x32>
          haveTaskToDo = true;
          tasks[i].state = tskReady;
 8002e56:	eb01 1203 	add.w	r2, r1, r3, lsl #4
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	7311      	strb	r1, [r2, #12]
    for(taskId_t i = 0; i < MAX_TASKS; ++i)
 8002e5e:	3301      	adds	r3, #1
 8002e60:	2b13      	cmp	r3, #19
 8002e62:	d811      	bhi.n	8002e88 <recountTasksTime+0x5c>
      if(tasks[i].state == tskWait)
 8002e64:	4a0a      	ldr	r2, [pc, #40]	; (8002e90 <recountTasksTime+0x64>)
 8002e66:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8002e6a:	7b12      	ldrb	r2, [r2, #12]
 8002e6c:	2a02      	cmp	r2, #2
 8002e6e:	d1f6      	bne.n	8002e5e <recountTasksTime+0x32>
        if(tasks[i].time > 0){
 8002e70:	011a      	lsls	r2, r3, #4
 8002e72:	4907      	ldr	r1, [pc, #28]	; (8002e90 <recountTasksTime+0x64>)
 8002e74:	588a      	ldr	r2, [r1, r2]
 8002e76:	2a00      	cmp	r2, #0
 8002e78:	d0e5      	beq.n	8002e46 <recountTasksTime+0x1a>
          if(tasks[i].time > value)
 8002e7a:	42a2      	cmp	r2, r4
 8002e7c:	d9df      	bls.n	8002e3e <recountTasksTime+0x12>
            tasks[i].time -= value;
 8002e7e:	0119      	lsls	r1, r3, #4
 8002e80:	1b12      	subs	r2, r2, r4
 8002e82:	4803      	ldr	r0, [pc, #12]	; (8002e90 <recountTasksTime+0x64>)
 8002e84:	5042      	str	r2, [r0, r1]
 8002e86:	e7de      	b.n	8002e46 <recountTasksTime+0x1a>
  __ASM volatile ("cpsie i" : : : "memory");
 8002e88:	b662      	cpsie	i
        }
      }
    }
  }
  EXIT_CRITICAL_SECTION();
}
 8002e8a:	bd10      	pop	{r4, pc}
 8002e8c:	200003c0 	.word	0x200003c0
 8002e90:	20000280 	.word	0x20000280

08002e94 <osInit>:
{
 8002e94:	b538      	push	{r3, r4, r5, lr}
 8002e96:	460d      	mov	r5, r1
 8002e98:	4614      	mov	r4, r2
	  for(i = 0; i < MAX_TASKS; ++i)
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	e005      	b.n	8002eaa <osInit+0x16>
	    tasks[i].state = tskFree;
 8002e9e:	4a06      	ldr	r2, [pc, #24]	; (8002eb8 <osInit+0x24>)
 8002ea0:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	7311      	strb	r1, [r2, #12]
	  for(i = 0; i < MAX_TASKS; ++i)
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	2b13      	cmp	r3, #19
 8002eac:	d9f7      	bls.n	8002e9e <osInit+0xa>
	timerInitialization(resolution, tickHook);
 8002eae:	4903      	ldr	r1, [pc, #12]	; (8002ebc <osInit+0x28>)
 8002eb0:	47a8      	blx	r5
	timerElapseSinceLastTimeFunction = timerElapsedTime;
 8002eb2:	4b03      	ldr	r3, [pc, #12]	; (8002ec0 <osInit+0x2c>)
 8002eb4:	601c      	str	r4, [r3, #0]
}
 8002eb6:	bd38      	pop	{r3, r4, r5, pc}
 8002eb8:	20000280 	.word	0x20000280
 8002ebc:	08002df1 	.word	0x08002df1
 8002ec0:	200003c0 	.word	0x200003c0

08002ec4 <osRun>:
void osRun(void){
 8002ec4:	b510      	push	{r4, lr}
 8002ec6:	e016      	b.n	8002ef6 <osRun+0x32>
 8002ec8:	b662      	cpsie	i
      for(taskId_t i = 0; i < MAX_TASKS; ++i){
 8002eca:	3401      	adds	r4, #1
 8002ecc:	2c13      	cmp	r4, #19
 8002ece:	d810      	bhi.n	8002ef2 <osRun+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 8002ed0:	b672      	cpsid	i
        if(tasks[i].state == tskReady){
 8002ed2:	4b0b      	ldr	r3, [pc, #44]	; (8002f00 <osRun+0x3c>)
 8002ed4:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8002ed8:	7b1b      	ldrb	r3, [r3, #12]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d1f4      	bne.n	8002ec8 <osRun+0x4>
          task_t task = tasks[i].task;
 8002ede:	4b08      	ldr	r3, [pc, #32]	; (8002f00 <osRun+0x3c>)
 8002ee0:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8002ee4:	685a      	ldr	r2, [r3, #4]
          uint32_t param = tasks[i].param;
 8002ee6:	6898      	ldr	r0, [r3, #8]
          tasks[i].state = tskFree;
 8002ee8:	2100      	movs	r1, #0
 8002eea:	7319      	strb	r1, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8002eec:	b662      	cpsie	i
          task(param);
 8002eee:	4790      	blx	r2
 8002ef0:	e7eb      	b.n	8002eca <osRun+0x6>
      nextTaskTime = nearestTaskTime();
 8002ef2:	f7ff ff7f 	bl	8002df4 <nearestTaskTime>
      recountTasksTime();
 8002ef6:	f7ff ff99 	bl	8002e2c <recountTasksTime>
      for(taskId_t i = 0; i < MAX_TASKS; ++i){
 8002efa:	2400      	movs	r4, #0
 8002efc:	e7e6      	b.n	8002ecc <osRun+0x8>
 8002efe:	bf00      	nop
 8002f00:	20000280 	.word	0x20000280

08002f04 <osTaskAdd>:
taskId_t osTaskAdd(task_t task, uint32_t param, TIME_T time){
 8002f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 8002f06:	b672      	cpsid	i
  for(slot = 0; slot < MAX_TASKS; ++slot){
 8002f08:	2400      	movs	r4, #0
 8002f0a:	2c13      	cmp	r4, #19
 8002f0c:	d806      	bhi.n	8002f1c <osTaskAdd+0x18>
    if(tasks[slot].state == tskFree){
 8002f0e:	4b10      	ldr	r3, [pc, #64]	; (8002f50 <osTaskAdd+0x4c>)
 8002f10:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8002f14:	7b1b      	ldrb	r3, [r3, #12]
 8002f16:	b10b      	cbz	r3, 8002f1c <osTaskAdd+0x18>
  for(slot = 0; slot < MAX_TASKS; ++slot){
 8002f18:	3401      	adds	r4, #1
 8002f1a:	e7f6      	b.n	8002f0a <osTaskAdd+0x6>
  if(idx < MAX_TASKS){
 8002f1c:	2c13      	cmp	r4, #19
 8002f1e:	d902      	bls.n	8002f26 <osTaskAdd+0x22>
  __ASM volatile ("cpsie i" : : : "memory");
 8002f20:	b662      	cpsie	i
}
 8002f22:	4620      	mov	r0, r4
 8002f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f26:	4617      	mov	r7, r2
 8002f28:	460d      	mov	r5, r1
 8002f2a:	4606      	mov	r6, r0
    recountTasksTime();
 8002f2c:	f7ff ff7e 	bl	8002e2c <recountTasksTime>
    tasks[idx].task = task;
 8002f30:	4a07      	ldr	r2, [pc, #28]	; (8002f50 <osTaskAdd+0x4c>)
 8002f32:	0123      	lsls	r3, r4, #4
 8002f34:	18d1      	adds	r1, r2, r3
 8002f36:	604e      	str	r6, [r1, #4]
    tasks[idx].param = param;
 8002f38:	608d      	str	r5, [r1, #8]
    tasks[idx].time = time;
 8002f3a:	50d7      	str	r7, [r2, r3]
                            : tskReady, haveTaskToDo = true;
 8002f3c:	b12f      	cbz	r7, 8002f4a <osTaskAdd+0x46>
 8002f3e:	2202      	movs	r2, #2
    tasks[idx].state = time ? tskWait
 8002f40:	4b03      	ldr	r3, [pc, #12]	; (8002f50 <osTaskAdd+0x4c>)
 8002f42:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8002f46:	731a      	strb	r2, [r3, #12]
 8002f48:	e7ea      	b.n	8002f20 <osTaskAdd+0x1c>
                            : tskReady, haveTaskToDo = true;
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	e7f8      	b.n	8002f40 <osTaskAdd+0x3c>
 8002f4e:	bf00      	nop
 8002f50:	20000280 	.word	0x20000280

08002f54 <osTaskDelId>:
  __ASM volatile ("cpsid i" : : : "memory");
 8002f54:	b672      	cpsid	i
  if(id < MAX_TASKS && tasks[id].task == handler){
 8002f56:	2813      	cmp	r0, #19
 8002f58:	d813      	bhi.n	8002f82 <osTaskDelId+0x2e>
 8002f5a:	4b0b      	ldr	r3, [pc, #44]	; (8002f88 <osTaskDelId+0x34>)
 8002f5c:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	428b      	cmp	r3, r1
 8002f64:	d001      	beq.n	8002f6a <osTaskDelId+0x16>
  uint32_t result = 0;
 8002f66:	2000      	movs	r0, #0
 8002f68:	e00c      	b.n	8002f84 <osTaskDelId+0x30>
    tasks[id].time = 0;
 8002f6a:	4907      	ldr	r1, [pc, #28]	; (8002f88 <osTaskDelId+0x34>)
 8002f6c:	0100      	lsls	r0, r0, #4
 8002f6e:	180b      	adds	r3, r1, r0
 8002f70:	2200      	movs	r2, #0
 8002f72:	500a      	str	r2, [r1, r0]
    tasks[id].task = 0;
 8002f74:	605a      	str	r2, [r3, #4]
    tasks[id].state = tskFree;
 8002f76:	731a      	strb	r2, [r3, #12]
    tasks[id].param= 0xDE1D;
 8002f78:	f64d 621d 	movw	r2, #56861	; 0xde1d
 8002f7c:	609a      	str	r2, [r3, #8]
    result = 1;
 8002f7e:	2001      	movs	r0, #1
 8002f80:	e000      	b.n	8002f84 <osTaskDelId+0x30>
  uint32_t result = 0;
 8002f82:	2000      	movs	r0, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8002f84:	b662      	cpsie	i
}
 8002f86:	4770      	bx	lr
 8002f88:	20000280 	.word	0x20000280

08002f8c <osTaskDelHandler>:
uint32_t osTaskDelHandler(task_t task){
 8002f8c:	b470      	push	{r4, r5, r6}
  __ASM volatile ("cpsid i" : : : "memory");
 8002f8e:	b672      	cpsid	i
  for (int i = 0; i < MAX_TASKS; ++i){
 8002f90:	2300      	movs	r3, #0
  uint32_t result = 0;
 8002f92:	461e      	mov	r6, r3
  for (int i = 0; i < MAX_TASKS; ++i){
 8002f94:	e000      	b.n	8002f98 <osTaskDelHandler+0xc>
 8002f96:	3301      	adds	r3, #1
 8002f98:	2b13      	cmp	r3, #19
 8002f9a:	dc17      	bgt.n	8002fcc <osTaskDelHandler+0x40>
    if(tasks[i].state != tskFree && tasks[i].task == task){
 8002f9c:	4a0d      	ldr	r2, [pc, #52]	; (8002fd4 <osTaskDelHandler+0x48>)
 8002f9e:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8002fa2:	7b12      	ldrb	r2, [r2, #12]
 8002fa4:	2a00      	cmp	r2, #0
 8002fa6:	d0f6      	beq.n	8002f96 <osTaskDelHandler+0xa>
 8002fa8:	4a0a      	ldr	r2, [pc, #40]	; (8002fd4 <osTaskDelHandler+0x48>)
 8002faa:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8002fae:	6852      	ldr	r2, [r2, #4]
 8002fb0:	4282      	cmp	r2, r0
 8002fb2:	d1f0      	bne.n	8002f96 <osTaskDelHandler+0xa>
      tasks[i].state = tskFree;
 8002fb4:	4d07      	ldr	r5, [pc, #28]	; (8002fd4 <osTaskDelHandler+0x48>)
 8002fb6:	011c      	lsls	r4, r3, #4
 8002fb8:	192a      	adds	r2, r5, r4
 8002fba:	2100      	movs	r1, #0
 8002fbc:	7311      	strb	r1, [r2, #12]
      tasks[i].task = 0;
 8002fbe:	6051      	str	r1, [r2, #4]
      tasks[i].time = 0;
 8002fc0:	5129      	str	r1, [r5, r4]
      tasks[i].param= 0x0DE1;
 8002fc2:	f640 51e1 	movw	r1, #3553	; 0xde1
 8002fc6:	6091      	str	r1, [r2, #8]
      result++;
 8002fc8:	3601      	adds	r6, #1
 8002fca:	e7e4      	b.n	8002f96 <osTaskDelHandler+0xa>
  __ASM volatile ("cpsie i" : : : "memory");
 8002fcc:	b662      	cpsie	i
}
 8002fce:	4630      	mov	r0, r6
 8002fd0:	bc70      	pop	{r4, r5, r6}
 8002fd2:	4770      	bx	lr
 8002fd4:	20000280 	.word	0x20000280

08002fd8 <button6Init>:
    return (buttonsGetState() & (1 << buttonId))? BUTTON_PRESSED: BUTTON_NOT_PRESSED;
}

static void button6Init(buttonInitState_t state) {
    buttonInitCommon(state, Button_6);
}
 8002fd8:	4770      	bx	lr

08002fda <button7Init>:

static void button7Init(buttonInitState_t state) {
    buttonInitCommon(state, Button_7);
}
 8002fda:	4770      	bx	lr

08002fdc <button8Init>:

static void button8Init(buttonInitState_t state) {
    buttonInitCommon(state, Button_8);
}
 8002fdc:	4770      	bx	lr

08002fde <button9Init>:

static void button9Init(buttonInitState_t state) {
    buttonInitCommon(state, Button_9);
}
 8002fde:	4770      	bx	lr

08002fe0 <button0Init>:

static void button0Init(buttonInitState_t state) {
    buttonInitCommon(state, Button_0);
}
 8002fe0:	4770      	bx	lr

08002fe2 <buttonInfoInit>:

static void buttonInfoInit(buttonInitState_t state) {
    buttonInitCommon(state, Button_Info);
}
 8002fe2:	4770      	bx	lr

08002fe4 <buttonPrimeInit>:

static void buttonPrimeInit(buttonInitState_t state) {
    buttonInitCommon(state, Button_Prime);
}
 8002fe4:	4770      	bx	lr

08002fe6 <buttonLockInit>:

static void buttonLockInit(buttonInitState_t state) {
    buttonInitCommon(state, Button_Lock);
}
 8002fe6:	4770      	bx	lr

08002fe8 <button1Init>:

static void button1Init(buttonInitState_t state) {
    buttonInitCommon(state, Button_1);
}
 8002fe8:	4770      	bx	lr

08002fea <button2Init>:

static void button2Init(buttonInitState_t state) {
    buttonInitCommon(state, Button_2);
}
 8002fea:	4770      	bx	lr

08002fec <button3Init>:

static void button3Init(buttonInitState_t state) {
    buttonInitCommon(state, Button_3);
}
 8002fec:	4770      	bx	lr

08002fee <button4Init>:

static void button4Init(buttonInitState_t state) {
    buttonInitCommon(state, Button_4);
}
 8002fee:	4770      	bx	lr

08002ff0 <button5Init>:

static void button5Init(buttonInitState_t state) {
    buttonInitCommon(state, Button_5);
}
 8002ff0:	4770      	bx	lr

08002ff2 <buttonPointInit>:

static void buttonPointInit(buttonInitState_t state) {
    buttonInitCommon(state, Button_Point);
}
 8002ff2:	4770      	bx	lr

08002ff4 <buttonOkInit>:

static void buttonOkInit(buttonInitState_t state) {
    buttonInitCommon(state, Button_Ok);
}
 8002ff4:	4770      	bx	lr

08002ff6 <buttonNoInit>:

static void buttonNoInit(buttonInitState_t state) {
    buttonInitCommon(state, Button_No);
}
 8002ff6:	4770      	bx	lr

08002ff8 <buttonPowerInit>:

static void buttonPowerInit(buttonInitState_t state) {
    buttonInitCommon(state, Button_Power);
}
 8002ff8:	4770      	bx	lr
	...

08002ffc <buttonPowerHandler>:

static void buttonNoHandler(uint32_t pressType) {
    osTaskDelHandler(buttonNoHandler);
}

static void buttonPowerHandler(uint32_t pressType) {
 8002ffc:	b508      	push	{r3, lr}
    osTaskDelHandler(buttonPowerHandler);
 8002ffe:	4802      	ldr	r0, [pc, #8]	; (8003008 <buttonPowerHandler+0xc>)
 8003000:	f7ff ffc4 	bl	8002f8c <osTaskDelHandler>
}
 8003004:	bd08      	pop	{r3, pc}
 8003006:	bf00      	nop
 8003008:	08002ffd 	.word	0x08002ffd

0800300c <buttonNoHandler>:
static void buttonNoHandler(uint32_t pressType) {
 800300c:	b508      	push	{r3, lr}
    osTaskDelHandler(buttonNoHandler);
 800300e:	4802      	ldr	r0, [pc, #8]	; (8003018 <buttonNoHandler+0xc>)
 8003010:	f7ff ffbc 	bl	8002f8c <osTaskDelHandler>
}
 8003014:	bd08      	pop	{r3, pc}
 8003016:	bf00      	nop
 8003018:	0800300d 	.word	0x0800300d

0800301c <buttonOkHandler>:
static void buttonOkHandler(uint32_t pressType) {
 800301c:	b508      	push	{r3, lr}
    osTaskDelHandler(buttonOkHandler);
 800301e:	4802      	ldr	r0, [pc, #8]	; (8003028 <buttonOkHandler+0xc>)
 8003020:	f7ff ffb4 	bl	8002f8c <osTaskDelHandler>
}
 8003024:	bd08      	pop	{r3, pc}
 8003026:	bf00      	nop
 8003028:	0800301d 	.word	0x0800301d

0800302c <buttonPointHandler>:
static void buttonPointHandler(uint32_t pressType) {
 800302c:	b508      	push	{r3, lr}
    osTaskDelHandler(buttonPointHandler);
 800302e:	4802      	ldr	r0, [pc, #8]	; (8003038 <buttonPointHandler+0xc>)
 8003030:	f7ff ffac 	bl	8002f8c <osTaskDelHandler>
}
 8003034:	bd08      	pop	{r3, pc}
 8003036:	bf00      	nop
 8003038:	0800302d 	.word	0x0800302d

0800303c <button5Handler>:
static void button5Handler(uint32_t pressType) {
 800303c:	b508      	push	{r3, lr}
    osTaskDelHandler(button5Handler);
 800303e:	4802      	ldr	r0, [pc, #8]	; (8003048 <button5Handler+0xc>)
 8003040:	f7ff ffa4 	bl	8002f8c <osTaskDelHandler>
}
 8003044:	bd08      	pop	{r3, pc}
 8003046:	bf00      	nop
 8003048:	0800303d 	.word	0x0800303d

0800304c <button4Handler>:
static void button4Handler(uint32_t pressType) {
 800304c:	b508      	push	{r3, lr}
    osTaskDelHandler(button4Handler);
 800304e:	4802      	ldr	r0, [pc, #8]	; (8003058 <button4Handler+0xc>)
 8003050:	f7ff ff9c 	bl	8002f8c <osTaskDelHandler>
}
 8003054:	bd08      	pop	{r3, pc}
 8003056:	bf00      	nop
 8003058:	0800304d 	.word	0x0800304d

0800305c <button3Handler>:
static void button3Handler(uint32_t pressType) {
 800305c:	b508      	push	{r3, lr}
    osTaskDelHandler(button3Handler);
 800305e:	4802      	ldr	r0, [pc, #8]	; (8003068 <button3Handler+0xc>)
 8003060:	f7ff ff94 	bl	8002f8c <osTaskDelHandler>
}
 8003064:	bd08      	pop	{r3, pc}
 8003066:	bf00      	nop
 8003068:	0800305d 	.word	0x0800305d

0800306c <button2Handler>:
static void button2Handler(uint32_t pressType) {
 800306c:	b508      	push	{r3, lr}
    osTaskDelHandler(button2Handler);
 800306e:	4802      	ldr	r0, [pc, #8]	; (8003078 <button2Handler+0xc>)
 8003070:	f7ff ff8c 	bl	8002f8c <osTaskDelHandler>
}
 8003074:	bd08      	pop	{r3, pc}
 8003076:	bf00      	nop
 8003078:	0800306d 	.word	0x0800306d

0800307c <button1Handler>:
static void button1Handler(uint32_t pressType) {
 800307c:	b508      	push	{r3, lr}
    osTaskDelHandler(button1Handler);
 800307e:	4802      	ldr	r0, [pc, #8]	; (8003088 <button1Handler+0xc>)
 8003080:	f7ff ff84 	bl	8002f8c <osTaskDelHandler>
}
 8003084:	bd08      	pop	{r3, pc}
 8003086:	bf00      	nop
 8003088:	0800307d 	.word	0x0800307d

0800308c <buttonLockHandler>:
static void buttonLockHandler(uint32_t pressType) {
 800308c:	b508      	push	{r3, lr}
    osTaskDelHandler(buttonLockHandler);
 800308e:	4802      	ldr	r0, [pc, #8]	; (8003098 <buttonLockHandler+0xc>)
 8003090:	f7ff ff7c 	bl	8002f8c <osTaskDelHandler>
}
 8003094:	bd08      	pop	{r3, pc}
 8003096:	bf00      	nop
 8003098:	0800308d 	.word	0x0800308d

0800309c <buttonPrimeHandler>:
static void buttonPrimeHandler(uint32_t pressType) {
 800309c:	b508      	push	{r3, lr}
    osTaskDelHandler(buttonPrimeHandler);
 800309e:	4802      	ldr	r0, [pc, #8]	; (80030a8 <buttonPrimeHandler+0xc>)
 80030a0:	f7ff ff74 	bl	8002f8c <osTaskDelHandler>
}
 80030a4:	bd08      	pop	{r3, pc}
 80030a6:	bf00      	nop
 80030a8:	0800309d 	.word	0x0800309d

080030ac <buttonInfoHandler>:
static void buttonInfoHandler(uint32_t pressType) {
 80030ac:	b508      	push	{r3, lr}
    osTaskDelHandler(buttonInfoHandler);
 80030ae:	4802      	ldr	r0, [pc, #8]	; (80030b8 <buttonInfoHandler+0xc>)
 80030b0:	f7ff ff6c 	bl	8002f8c <osTaskDelHandler>
}
 80030b4:	bd08      	pop	{r3, pc}
 80030b6:	bf00      	nop
 80030b8:	080030ad 	.word	0x080030ad

080030bc <button0Handler>:
static void button0Handler(uint32_t pressType) {
 80030bc:	b508      	push	{r3, lr}
    osTaskDelHandler(button0Handler);
 80030be:	4802      	ldr	r0, [pc, #8]	; (80030c8 <button0Handler+0xc>)
 80030c0:	f7ff ff64 	bl	8002f8c <osTaskDelHandler>
}
 80030c4:	bd08      	pop	{r3, pc}
 80030c6:	bf00      	nop
 80030c8:	080030bd 	.word	0x080030bd

080030cc <button9Handler>:
static void button9Handler(uint32_t pressType) {
 80030cc:	b508      	push	{r3, lr}
    osTaskDelHandler(button9Handler);
 80030ce:	4802      	ldr	r0, [pc, #8]	; (80030d8 <button9Handler+0xc>)
 80030d0:	f7ff ff5c 	bl	8002f8c <osTaskDelHandler>
}
 80030d4:	bd08      	pop	{r3, pc}
 80030d6:	bf00      	nop
 80030d8:	080030cd 	.word	0x080030cd

080030dc <button8Handler>:
static void button8Handler(uint32_t pressType) {
 80030dc:	b508      	push	{r3, lr}
    osTaskDelHandler(button8Handler);
 80030de:	4802      	ldr	r0, [pc, #8]	; (80030e8 <button8Handler+0xc>)
 80030e0:	f7ff ff54 	bl	8002f8c <osTaskDelHandler>
}
 80030e4:	bd08      	pop	{r3, pc}
 80030e6:	bf00      	nop
 80030e8:	080030dd 	.word	0x080030dd

080030ec <button7Handler>:
static void button7Handler(uint32_t pressType) {
 80030ec:	b508      	push	{r3, lr}
    osTaskDelHandler(button7Handler);
 80030ee:	4802      	ldr	r0, [pc, #8]	; (80030f8 <button7Handler+0xc>)
 80030f0:	f7ff ff4c 	bl	8002f8c <osTaskDelHandler>
}
 80030f4:	bd08      	pop	{r3, pc}
 80030f6:	bf00      	nop
 80030f8:	080030ed 	.word	0x080030ed

080030fc <button6Handler>:
static void button6Handler(uint32_t pressType) {
 80030fc:	b508      	push	{r3, lr}
    osTaskDelHandler(button6Handler);
 80030fe:	4802      	ldr	r0, [pc, #8]	; (8003108 <button6Handler+0xc>)
 8003100:	f7ff ff44 	bl	8002f8c <osTaskDelHandler>
}
 8003104:	bd08      	pop	{r3, pc}
 8003106:	bf00      	nop
 8003108:	080030fd 	.word	0x080030fd

0800310c <buttonGetState>:
static buttonState_t buttonGetState(buttonName_t buttonId) {
 800310c:	b510      	push	{r4, lr}
 800310e:	4604      	mov	r4, r0
    return (buttonsGetState() & (1 << buttonId))? BUTTON_PRESSED: BUTTON_NOT_PRESSED;
 8003110:	f000 f860 	bl	80031d4 <buttonsGetState>
 8003114:	2301      	movs	r3, #1
 8003116:	40a3      	lsls	r3, r4
 8003118:	4218      	tst	r0, r3
}
 800311a:	bf14      	ite	ne
 800311c:	2001      	movne	r0, #1
 800311e:	2000      	moveq	r0, #0
 8003120:	bd10      	pop	{r4, pc}

08003122 <buttonPowerGetState>:
static buttonState_t buttonPowerGetState(void) {
 8003122:	b508      	push	{r3, lr}
    return buttonGetState(Button_Power);
 8003124:	2010      	movs	r0, #16
 8003126:	f7ff fff1 	bl	800310c <buttonGetState>
}
 800312a:	bd08      	pop	{r3, pc}

0800312c <buttonNoGetState>:
static buttonState_t buttonNoGetState(void) {
 800312c:	b508      	push	{r3, lr}
    return buttonGetState(Button_No);
 800312e:	200f      	movs	r0, #15
 8003130:	f7ff ffec 	bl	800310c <buttonGetState>
}
 8003134:	bd08      	pop	{r3, pc}

08003136 <buttonOkGetState>:
static buttonState_t buttonOkGetState(void) {
 8003136:	b508      	push	{r3, lr}
    return buttonGetState(Button_Ok);
 8003138:	200e      	movs	r0, #14
 800313a:	f7ff ffe7 	bl	800310c <buttonGetState>
}
 800313e:	bd08      	pop	{r3, pc}

08003140 <buttonPointGetState>:
static buttonState_t buttonPointGetState(void) {
 8003140:	b508      	push	{r3, lr}
    return buttonGetState(Button_Point);
 8003142:	200d      	movs	r0, #13
 8003144:	f7ff ffe2 	bl	800310c <buttonGetState>
}
 8003148:	bd08      	pop	{r3, pc}

0800314a <button5GetState>:
static buttonState_t button5GetState(void) {
 800314a:	b508      	push	{r3, lr}
    return buttonGetState(Button_5);
 800314c:	200c      	movs	r0, #12
 800314e:	f7ff ffdd 	bl	800310c <buttonGetState>
}
 8003152:	bd08      	pop	{r3, pc}

08003154 <button4GetState>:
static buttonState_t button4GetState(void) {
 8003154:	b508      	push	{r3, lr}
    return buttonGetState(Button_4);
 8003156:	200b      	movs	r0, #11
 8003158:	f7ff ffd8 	bl	800310c <buttonGetState>
}
 800315c:	bd08      	pop	{r3, pc}

0800315e <button3GetState>:
static buttonState_t button3GetState(void) {
 800315e:	b508      	push	{r3, lr}
    return buttonGetState(Button_3);
 8003160:	200a      	movs	r0, #10
 8003162:	f7ff ffd3 	bl	800310c <buttonGetState>
}
 8003166:	bd08      	pop	{r3, pc}

08003168 <button2GetState>:
static buttonState_t button2GetState(void) {
 8003168:	b508      	push	{r3, lr}
    return buttonGetState(Button_2);
 800316a:	2009      	movs	r0, #9
 800316c:	f7ff ffce 	bl	800310c <buttonGetState>
}
 8003170:	bd08      	pop	{r3, pc}

08003172 <button1GetState>:
static buttonState_t button1GetState(void) {
 8003172:	b508      	push	{r3, lr}
    return buttonGetState(Button_1);
 8003174:	2008      	movs	r0, #8
 8003176:	f7ff ffc9 	bl	800310c <buttonGetState>
}
 800317a:	bd08      	pop	{r3, pc}

0800317c <buttonLockGetState>:
static buttonState_t buttonLockGetState(void) {
 800317c:	b508      	push	{r3, lr}
    return buttonGetState(Button_Lock);
 800317e:	2007      	movs	r0, #7
 8003180:	f7ff ffc4 	bl	800310c <buttonGetState>
}
 8003184:	bd08      	pop	{r3, pc}

08003186 <buttonPrimeGetState>:
static buttonState_t buttonPrimeGetState(void) {
 8003186:	b508      	push	{r3, lr}
    return buttonGetState(Button_Prime);
 8003188:	2006      	movs	r0, #6
 800318a:	f7ff ffbf 	bl	800310c <buttonGetState>
}
 800318e:	bd08      	pop	{r3, pc}

08003190 <buttonInfoGetState>:
static buttonState_t buttonInfoGetState(void) {
 8003190:	b508      	push	{r3, lr}
    return buttonGetState(Button_Info);
 8003192:	2005      	movs	r0, #5
 8003194:	f7ff ffba 	bl	800310c <buttonGetState>
}
 8003198:	bd08      	pop	{r3, pc}

0800319a <button0GetState>:
static buttonState_t button0GetState(void) {
 800319a:	b508      	push	{r3, lr}
    return buttonGetState(Button_0);
 800319c:	2004      	movs	r0, #4
 800319e:	f7ff ffb5 	bl	800310c <buttonGetState>
}
 80031a2:	bd08      	pop	{r3, pc}

080031a4 <button9GetState>:
static buttonState_t button9GetState(void) {
 80031a4:	b508      	push	{r3, lr}
    return buttonGetState(Button_9);
 80031a6:	2003      	movs	r0, #3
 80031a8:	f7ff ffb0 	bl	800310c <buttonGetState>
}
 80031ac:	bd08      	pop	{r3, pc}

080031ae <button8GetState>:
static buttonState_t button8GetState(void) {
 80031ae:	b508      	push	{r3, lr}
    return buttonGetState(Button_8);
 80031b0:	2002      	movs	r0, #2
 80031b2:	f7ff ffab 	bl	800310c <buttonGetState>
}
 80031b6:	bd08      	pop	{r3, pc}

080031b8 <button7GetState>:
static buttonState_t button7GetState(void) {
 80031b8:	b508      	push	{r3, lr}
    return buttonGetState(Button_7);
 80031ba:	2001      	movs	r0, #1
 80031bc:	f7ff ffa6 	bl	800310c <buttonGetState>
}
 80031c0:	bd08      	pop	{r3, pc}

080031c2 <button6GetState>:
static buttonState_t button6GetState(void) {
 80031c2:	b508      	push	{r3, lr}
    return buttonGetState(Button_6);
 80031c4:	2000      	movs	r0, #0
 80031c6:	f7ff ffa1 	bl	800310c <buttonGetState>
}
 80031ca:	bd08      	pop	{r3, pc}

080031cc <getButtonsConfig>:
}
 80031cc:	4800      	ldr	r0, [pc, #0]	; (80031d0 <getButtonsConfig+0x4>)
 80031ce:	4770      	bx	lr
 80031d0:	0800a2e4 	.word	0x0800a2e4

080031d4 <buttonsGetState>:

static uint32_t buttonsState;

uint32_t buttonsGetState(void) {
    return buttonsState;
}
 80031d4:	4b01      	ldr	r3, [pc, #4]	; (80031dc <buttonsGetState+0x8>)
 80031d6:	6818      	ldr	r0, [r3, #0]
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	200003c8 	.word	0x200003c8

080031e0 <getRawButtonsState>:

uint32_t getRawButtonsState() {
 80031e0:	b082      	sub	sp, #8
    volatile uint32_t tmp = GPIOE->IDR & 0xFF;
 80031e2:	4b03      	ldr	r3, [pc, #12]	; (80031f0 <getRawButtonsState+0x10>)
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	9301      	str	r3, [sp, #4]
    return tmp;
 80031ea:	9801      	ldr	r0, [sp, #4]
}
 80031ec:	b002      	add	sp, #8
 80031ee:	4770      	bx	lr
 80031f0:	48001000 	.word	0x48001000

080031f4 <getPwrButtonState>:

uint32_t getPwrButtonState() {
    if ((GPIOB->IDR & (1 << 5)) != 0) {
 80031f4:	4b04      	ldr	r3, [pc, #16]	; (8003208 <getPwrButtonState+0x14>)
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	f013 0f20 	tst.w	r3, #32
 80031fc:	d101      	bne.n	8003202 <getPwrButtonState+0xe>
        return 0;
    } else {
        return 1;
 80031fe:	2001      	movs	r0, #1
    }
}
 8003200:	4770      	bx	lr
        return 0;
 8003202:	2000      	movs	r0, #0
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	48000400 	.word	0x48000400

0800320c <activateButtonColumn>:

void activateButtonColumn(uint8_t column) {
    switch (column) {
 800320c:	b110      	cbz	r0, 8003214 <activateButtonColumn+0x8>
 800320e:	2801      	cmp	r0, #1
 8003210:	d004      	beq.n	800321c <activateButtonColumn+0x10>
 8003212:	4770      	bx	lr
    case 0:
        //Activate KEYS2
        GPIOB->BSRR = (1 << (4 + 16)) | (1 << 3); //Set PB3 clear PB4
 8003214:	4b03      	ldr	r3, [pc, #12]	; (8003224 <activateButtonColumn+0x18>)
 8003216:	4a04      	ldr	r2, [pc, #16]	; (8003228 <activateButtonColumn+0x1c>)
 8003218:	619a      	str	r2, [r3, #24]
        break;
 800321a:	4770      	bx	lr
    case 1:
        //Activate KEYS1
        GPIOB->BSRR = (1 << (3 + 16)) | (1 << 4); //Set PB4 clear PB3;
 800321c:	4b01      	ldr	r3, [pc, #4]	; (8003224 <activateButtonColumn+0x18>)
 800321e:	4a03      	ldr	r2, [pc, #12]	; (800322c <activateButtonColumn+0x20>)
 8003220:	619a      	str	r2, [r3, #24]
        break;
    }
}
 8003222:	4770      	bx	lr
 8003224:	48000400 	.word	0x48000400
 8003228:	00100008 	.word	0x00100008
 800322c:	00080010 	.word	0x00080010

08003230 <handleChangedButtons>:

void handleChangedButtons(uint32_t newButtonsState) {
 8003230:	b538      	push	{r3, r4, r5, lr}
    uint32_t changes = buttonsState ^ newButtonsState;
 8003232:	4b09      	ldr	r3, [pc, #36]	; (8003258 <handleChangedButtons+0x28>)
 8003234:	681d      	ldr	r5, [r3, #0]
 8003236:	4045      	eors	r5, r0

    buttonsState = newButtonsState;
 8003238:	6018      	str	r0, [r3, #0]
    for (buttonName_t btn = Button_6; btn < Button_Last; btn++) {
 800323a:	2400      	movs	r4, #0
 800323c:	e001      	b.n	8003242 <handleChangedButtons+0x12>
 800323e:	3401      	adds	r4, #1
 8003240:	b2e4      	uxtb	r4, r4
 8003242:	2c10      	cmp	r4, #16
 8003244:	d807      	bhi.n	8003256 <handleChangedButtons+0x26>
        if (changes & (1 << btn)) {
 8003246:	2301      	movs	r3, #1
 8003248:	40a3      	lsls	r3, r4
 800324a:	422b      	tst	r3, r5
 800324c:	d0f7      	beq.n	800323e <handleChangedButtons+0xe>
            buttonInterruptHandler(btn);
 800324e:	4620      	mov	r0, r4
 8003250:	f000 f968 	bl	8003524 <buttonInterruptHandler>
 8003254:	e7f3      	b.n	800323e <handleChangedButtons+0xe>
        }
    }
}
 8003256:	bd38      	pop	{r3, r4, r5, pc}
 8003258:	200003c8 	.word	0x200003c8

0800325c <buttonsPollTask>:

void buttonsPollTask(uint32_t parameter) {
 800325c:	b510      	push	{r4, lr}
    static uint8_t btn_poll_stage = 0;
    static uint32_t rawButtonState;

    switch (btn_poll_stage) {
 800325e:	4b21      	ldr	r3, [pc, #132]	; (80032e4 <buttonsPollTask+0x88>)
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d013      	beq.n	800328e <buttonsPollTask+0x32>
 8003266:	b113      	cbz	r3, 800326e <buttonsPollTask+0x12>
 8003268:	2b02      	cmp	r3, #2
 800326a:	d021      	beq.n	80032b0 <buttonsPollTask+0x54>
        handleChangedButtons((~rawButtonState) & 0x1FFFF);
        btn_poll_stage = 0;
        osTaskAdd(buttonsPollTask, 0, 5);
        break;
    }
}
 800326c:	bd10      	pop	{r4, pc}
        rawButtonState = 0;
 800326e:	2400      	movs	r4, #0
 8003270:	4b1d      	ldr	r3, [pc, #116]	; (80032e8 <buttonsPollTask+0x8c>)
 8003272:	601c      	str	r4, [r3, #0]
        activateButtonColumn(0);
 8003274:	4620      	mov	r0, r4
 8003276:	f7ff ffc9 	bl	800320c <activateButtonColumn>
        btn_poll_stage++;
 800327a:	4a1a      	ldr	r2, [pc, #104]	; (80032e4 <buttonsPollTask+0x88>)
 800327c:	7813      	ldrb	r3, [r2, #0]
 800327e:	3301      	adds	r3, #1
 8003280:	7013      	strb	r3, [r2, #0]
        osTaskAdd(buttonsPollTask, 0, 5);
 8003282:	2205      	movs	r2, #5
 8003284:	4621      	mov	r1, r4
 8003286:	4819      	ldr	r0, [pc, #100]	; (80032ec <buttonsPollTask+0x90>)
 8003288:	f7ff fe3c 	bl	8002f04 <osTaskAdd>
        break;
 800328c:	e7ee      	b.n	800326c <buttonsPollTask+0x10>
        rawButtonState = getRawButtonsState();
 800328e:	f7ff ffa7 	bl	80031e0 <getRawButtonsState>
 8003292:	4b15      	ldr	r3, [pc, #84]	; (80032e8 <buttonsPollTask+0x8c>)
 8003294:	6018      	str	r0, [r3, #0]
        activateButtonColumn(1);
 8003296:	2001      	movs	r0, #1
 8003298:	f7ff ffb8 	bl	800320c <activateButtonColumn>
        btn_poll_stage++;
 800329c:	4a11      	ldr	r2, [pc, #68]	; (80032e4 <buttonsPollTask+0x88>)
 800329e:	7813      	ldrb	r3, [r2, #0]
 80032a0:	3301      	adds	r3, #1
 80032a2:	7013      	strb	r3, [r2, #0]
        osTaskAdd(buttonsPollTask, 0, 5);
 80032a4:	2205      	movs	r2, #5
 80032a6:	2100      	movs	r1, #0
 80032a8:	4810      	ldr	r0, [pc, #64]	; (80032ec <buttonsPollTask+0x90>)
 80032aa:	f7ff fe2b 	bl	8002f04 <osTaskAdd>
        break;
 80032ae:	e7dd      	b.n	800326c <buttonsPollTask+0x10>
        rawButtonState |= getRawButtonsState() << 8;
 80032b0:	f7ff ff96 	bl	80031e0 <getRawButtonsState>
 80032b4:	4c0c      	ldr	r4, [pc, #48]	; (80032e8 <buttonsPollTask+0x8c>)
 80032b6:	6823      	ldr	r3, [r4, #0]
 80032b8:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80032bc:	6020      	str	r0, [r4, #0]
        rawButtonState |= getPwrButtonState() << 16;
 80032be:	f7ff ff99 	bl	80031f4 <getPwrButtonState>
 80032c2:	6823      	ldr	r3, [r4, #0]
 80032c4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80032c8:	6020      	str	r0, [r4, #0]
        handleChangedButtons((~rawButtonState) & 0x1FFFF);
 80032ca:	43c0      	mvns	r0, r0
 80032cc:	f3c0 0010 	ubfx	r0, r0, #0, #17
 80032d0:	f7ff ffae 	bl	8003230 <handleChangedButtons>
        btn_poll_stage = 0;
 80032d4:	2100      	movs	r1, #0
 80032d6:	4b03      	ldr	r3, [pc, #12]	; (80032e4 <buttonsPollTask+0x88>)
 80032d8:	7019      	strb	r1, [r3, #0]
        osTaskAdd(buttonsPollTask, 0, 5);
 80032da:	2205      	movs	r2, #5
 80032dc:	4803      	ldr	r0, [pc, #12]	; (80032ec <buttonsPollTask+0x90>)
 80032de:	f7ff fe11 	bl	8002f04 <osTaskAdd>
}
 80032e2:	e7c3      	b.n	800326c <buttonsPollTask+0x10>
 80032e4:	200003c4 	.word	0x200003c4
 80032e8:	200003cc 	.word	0x200003cc
 80032ec:	0800325d 	.word	0x0800325d

080032f0 <powerOff>:
#include "power_hal.h"
#include <stm32l4xx.h>

void powerOff() {
    GPIOC->ODR &= ~(1 << 2);
 80032f0:	4a02      	ldr	r2, [pc, #8]	; (80032fc <powerOff+0xc>)
 80032f2:	6953      	ldr	r3, [r2, #20]
 80032f4:	f023 0304 	bic.w	r3, r3, #4
 80032f8:	6153      	str	r3, [r2, #20]
}
 80032fa:	4770      	bx	lr
 80032fc:	48000800 	.word	0x48000800

08003300 <antiBounce>:
  // Button jitter mitigation logic with disabled interrupt
  osTaskAdd(buttonTaskProcess, buttonId, 0);
}


static antiBounse_t antiBounce(uint8_t buttonId) {
 8003300:	b538      	push	{r3, r4, r5, lr}
 8003302:	4604      	mov	r4, r0
	antiBounse_t result = antiBounceFail;
	buttonState_t state = button[buttonId].getState();
 8003304:	0043      	lsls	r3, r0, #1
 8003306:	4403      	add	r3, r0
 8003308:	00da      	lsls	r2, r3, #3
 800330a:	4d1b      	ldr	r5, [pc, #108]	; (8003378 <antiBounce+0x78>)
 800330c:	4415      	add	r5, r2
 800330e:	692b      	ldr	r3, [r5, #16]
 8003310:	4798      	blx	r3

	if(button[buttonId].tempState == BUTTON_STATE_UNDEFINED)
 8003312:	786b      	ldrb	r3, [r5, #1]
 8003314:	2b02      	cmp	r3, #2
 8003316:	d010      	beq.n	800333a <antiBounce+0x3a>
		button[buttonId].antiBounceSummary = 0;
		button[buttonId].tempState = state;
	}
	//TODO check current state and compare

	if(state == button[buttonId].tempState){
 8003318:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800331c:	00da      	lsls	r2, r3, #3
 800331e:	4b16      	ldr	r3, [pc, #88]	; (8003378 <antiBounce+0x78>)
 8003320:	4413      	add	r3, r2
 8003322:	785b      	ldrb	r3, [r3, #1]
 8003324:	4283      	cmp	r3, r0
 8003326:	d00c      	beq.n	8003342 <antiBounce+0x42>
		if(button[buttonId].antiBounceSummary >= maxAntiBounceAttempt){
			// TODO add assert for mechanical noise
		}
	}
	else{
		button[buttonId].antiBounceAttempts = 0;
 8003328:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800332c:	00e2      	lsls	r2, r4, #3
 800332e:	4b12      	ldr	r3, [pc, #72]	; (8003378 <antiBounce+0x78>)
 8003330:	4413      	add	r3, r2
 8003332:	2200      	movs	r2, #0
 8003334:	70da      	strb	r2, [r3, #3]
	antiBounse_t result = antiBounceFail;
 8003336:	2001      	movs	r0, #1
	}
	return result;
}
 8003338:	bd38      	pop	{r3, r4, r5, pc}
		button[buttonId].antiBounceSummary = 0;
 800333a:	2200      	movs	r2, #0
 800333c:	712a      	strb	r2, [r5, #4]
		button[buttonId].tempState = state;
 800333e:	7068      	strb	r0, [r5, #1]
 8003340:	e7ea      	b.n	8003318 <antiBounce+0x18>
		button[buttonId].antiBounceAttempts++;
 8003342:	4611      	mov	r1, r2
 8003344:	4a0c      	ldr	r2, [pc, #48]	; (8003378 <antiBounce+0x78>)
 8003346:	440a      	add	r2, r1
 8003348:	78d3      	ldrb	r3, [r2, #3]
 800334a:	3301      	adds	r3, #1
 800334c:	70d3      	strb	r3, [r2, #3]
		button[buttonId].antiBounceSummary++;
 800334e:	7911      	ldrb	r1, [r2, #4]
 8003350:	3101      	adds	r1, #1
 8003352:	7111      	strb	r1, [r2, #4]
		if(button[buttonId].antiBounceAttempts >= normalAntiBounceAttempts){
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b04      	cmp	r3, #4
 8003358:	d90c      	bls.n	8003374 <antiBounce+0x74>
			button[buttonId].antiBounceAttempts = 0;
 800335a:	4b07      	ldr	r3, [pc, #28]	; (8003378 <antiBounce+0x78>)
 800335c:	0062      	lsls	r2, r4, #1
 800335e:	1910      	adds	r0, r2, r4
 8003360:	00c1      	lsls	r1, r0, #3
 8003362:	185d      	adds	r5, r3, r1
 8003364:	2000      	movs	r0, #0
 8003366:	70e8      	strb	r0, [r5, #3]
			button[buttonId].state = button[buttonId].tempState;
 8003368:	786d      	ldrb	r5, [r5, #1]
 800336a:	545d      	strb	r5, [r3, r1]
			button[buttonId].tempState = BUTTON_STATE_UNDEFINED;
 800336c:	440b      	add	r3, r1
 800336e:	2202      	movs	r2, #2
 8003370:	705a      	strb	r2, [r3, #1]
 8003372:	e7e1      	b.n	8003338 <antiBounce+0x38>
			result = antiBounceNext;
 8003374:	2002      	movs	r0, #2
 8003376:	e7df      	b.n	8003338 <antiBounce+0x38>
 8003378:	200003d0 	.word	0x200003d0

0800337c <buttonPressTask>:

		}
	}
}

static void buttonPressTask(uint32_t parameter){
 800337c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800337e:	b2c4      	uxtb	r4, r0
	uint8_t buttonId = (uint8_t)parameter;
	if(button[buttonId].pressType == BUTTON_PRESS_SHORT){
 8003380:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8003384:	00da      	lsls	r2, r3, #3
 8003386:	4b17      	ldr	r3, [pc, #92]	; (80033e4 <buttonPressTask+0x68>)
 8003388:	4413      	add	r3, r2
 800338a:	789b      	ldrb	r3, [r3, #2]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d002      	beq.n	8003396 <buttonPressTask+0x1a>
		button[buttonId].pressType = BUTTON_PRESS_LONG;
		TIME_T taskTime = BUTTON_LONG_PRESS_TIME - BUTTON_PRESS_TIME;
		button[buttonId].taskId = osTaskAdd(buttonPressTask, buttonId, taskTime);
	}
	else if(button[buttonId].pressType == BUTTON_PRESS_LONG){
 8003390:	2b02      	cmp	r3, #2
 8003392:	d012      	beq.n	80033ba <buttonPressTask+0x3e>
		TIME_T taskTime = BUTTON_LONG_PRESS_TIME - BUTTON_PRESS_TIME;
		button[buttonId].taskId = osTaskAdd(buttonPressTask, buttonId, taskTime);

		osTaskAdd(button[buttonId].callBack, (uint32_t)button[buttonId].pressType, 0);
	}
}
 8003394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		button[buttonId].pressType = BUTTON_PRESS_LONG;
 8003396:	4e13      	ldr	r6, [pc, #76]	; (80033e4 <buttonPressTask+0x68>)
 8003398:	0065      	lsls	r5, r4, #1
 800339a:	192a      	adds	r2, r5, r4
 800339c:	00d3      	lsls	r3, r2, #3
 800339e:	4433      	add	r3, r6
 80033a0:	2202      	movs	r2, #2
 80033a2:	709a      	strb	r2, [r3, #2]
		button[buttonId].taskId = osTaskAdd(buttonPressTask, buttonId, taskTime);
 80033a4:	f240 424c 	movw	r2, #1100	; 0x44c
 80033a8:	4621      	mov	r1, r4
 80033aa:	480f      	ldr	r0, [pc, #60]	; (80033e8 <buttonPressTask+0x6c>)
 80033ac:	f7ff fdaa 	bl	8002f04 <osTaskAdd>
 80033b0:	442c      	add	r4, r5
 80033b2:	00e3      	lsls	r3, r4, #3
 80033b4:	441e      	add	r6, r3
 80033b6:	6170      	str	r0, [r6, #20]
 80033b8:	e7ec      	b.n	8003394 <buttonPressTask+0x18>
		button[buttonId].pressType = BUTTON_PRESS_STICK;
 80033ba:	4f0a      	ldr	r7, [pc, #40]	; (80033e4 <buttonPressTask+0x68>)
 80033bc:	0066      	lsls	r6, r4, #1
 80033be:	1933      	adds	r3, r6, r4
 80033c0:	00dd      	lsls	r5, r3, #3
 80033c2:	443d      	add	r5, r7
 80033c4:	2303      	movs	r3, #3
 80033c6:	70ab      	strb	r3, [r5, #2]
		button[buttonId].taskId = osTaskAdd(buttonPressTask, buttonId, taskTime);
 80033c8:	f240 424c 	movw	r2, #1100	; 0x44c
 80033cc:	4621      	mov	r1, r4
 80033ce:	4806      	ldr	r0, [pc, #24]	; (80033e8 <buttonPressTask+0x6c>)
 80033d0:	f7ff fd98 	bl	8002f04 <osTaskAdd>
 80033d4:	6168      	str	r0, [r5, #20]
		osTaskAdd(button[buttonId].callBack, (uint32_t)button[buttonId].pressType, 0);
 80033d6:	2200      	movs	r2, #0
 80033d8:	78a9      	ldrb	r1, [r5, #2]
 80033da:	68a8      	ldr	r0, [r5, #8]
 80033dc:	f7ff fd92 	bl	8002f04 <osTaskAdd>
}
 80033e0:	e7d8      	b.n	8003394 <buttonPressTask+0x18>
 80033e2:	bf00      	nop
 80033e4:	200003d0 	.word	0x200003d0
 80033e8:	0800337d 	.word	0x0800337d

080033ec <buttonTaskProcess>:
static void buttonTaskProcess(uint32_t parameter){
 80033ec:	b570      	push	{r4, r5, r6, lr}
 80033ee:	4604      	mov	r4, r0
	antiBounse_t antiBounceState = antiBounce(buttonId);
 80033f0:	b2c0      	uxtb	r0, r0
 80033f2:	f7ff ff85 	bl	8003300 <antiBounce>
	if(antiBounceState == antiBounceNext){
 80033f6:	2802      	cmp	r0, #2
 80033f8:	d023      	beq.n	8003442 <buttonTaskProcess+0x56>
	else if(antiBounceState == antiBounceOk){
 80033fa:	bb08      	cbnz	r0, 8003440 <buttonTaskProcess+0x54>
 80033fc:	b2e4      	uxtb	r4, r4
		button[buttonId].init(btON);
 80033fe:	4e1f      	ldr	r6, [pc, #124]	; (800347c <buttonTaskProcess+0x90>)
 8003400:	0063      	lsls	r3, r4, #1
 8003402:	4423      	add	r3, r4
 8003404:	00dd      	lsls	r5, r3, #3
 8003406:	1973      	adds	r3, r6, r5
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	2001      	movs	r0, #1
 800340c:	4798      	blx	r3
		if(button[buttonId].state == BUTTON_PRESSED){
 800340e:	5d73      	ldrb	r3, [r6, r5]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d01c      	beq.n	800344e <buttonTaskProcess+0x62>
			if(button[buttonId].pressType != BUTTON_PRESS_NONE){
 8003414:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8003418:	00da      	lsls	r2, r3, #3
 800341a:	4b18      	ldr	r3, [pc, #96]	; (800347c <buttonTaskProcess+0x90>)
 800341c:	4413      	add	r3, r2
 800341e:	789b      	ldrb	r3, [r3, #2]
 8003420:	bb2b      	cbnz	r3, 800346e <buttonTaskProcess+0x82>
			osTaskAdd(button[buttonId].callBack, (uint32_t)button[buttonId].pressType, 0);
 8003422:	4e16      	ldr	r6, [pc, #88]	; (800347c <buttonTaskProcess+0x90>)
 8003424:	0065      	lsls	r5, r4, #1
 8003426:	192a      	adds	r2, r5, r4
 8003428:	00d3      	lsls	r3, r2, #3
 800342a:	4433      	add	r3, r6
 800342c:	2200      	movs	r2, #0
 800342e:	7899      	ldrb	r1, [r3, #2]
 8003430:	6898      	ldr	r0, [r3, #8]
 8003432:	f7ff fd67 	bl	8002f04 <osTaskAdd>
			button[buttonId].pressType = BUTTON_PRESS_NONE;
 8003436:	442c      	add	r4, r5
 8003438:	00e3      	lsls	r3, r4, #3
 800343a:	441e      	add	r6, r3
 800343c:	2300      	movs	r3, #0
 800343e:	70b3      	strb	r3, [r6, #2]
}
 8003440:	bd70      	pop	{r4, r5, r6, pc}
		osTaskAdd(buttonTaskProcess, buttonId, timeBetweenChecks);
 8003442:	2205      	movs	r2, #5
 8003444:	b2e1      	uxtb	r1, r4
 8003446:	480e      	ldr	r0, [pc, #56]	; (8003480 <buttonTaskProcess+0x94>)
 8003448:	f7ff fd5c 	bl	8002f04 <osTaskAdd>
 800344c:	e7f8      	b.n	8003440 <buttonTaskProcess+0x54>
			button[buttonId].pressType = BUTTON_PRESS_SHORT;
 800344e:	4632      	mov	r2, r6
 8003450:	4629      	mov	r1, r5
 8003452:	4431      	add	r1, r6
 8003454:	2001      	movs	r0, #1
 8003456:	7088      	strb	r0, [r1, #2]
			TIME_T taskTime = BUTTON_PRESS_TIME - (button[buttonId].antiBounceSummary * timeBetweenChecks); // TODO check validity
 8003458:	442a      	add	r2, r5
 800345a:	7912      	ldrb	r2, [r2, #4]
 800345c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
			osTaskAdd(buttonPressTask, buttonId, taskTime);
 8003460:	f5c2 72c8 	rsb	r2, r2, #400	; 0x190
 8003464:	4621      	mov	r1, r4
 8003466:	4807      	ldr	r0, [pc, #28]	; (8003484 <buttonTaskProcess+0x98>)
 8003468:	f7ff fd4c 	bl	8002f04 <osTaskAdd>
 800346c:	e7e8      	b.n	8003440 <buttonTaskProcess+0x54>
				osTaskDelId(button[buttonId].taskId, buttonPressTask);
 800346e:	4b03      	ldr	r3, [pc, #12]	; (800347c <buttonTaskProcess+0x90>)
 8003470:	4413      	add	r3, r2
 8003472:	4904      	ldr	r1, [pc, #16]	; (8003484 <buttonTaskProcess+0x98>)
 8003474:	6958      	ldr	r0, [r3, #20]
 8003476:	f7ff fd6d 	bl	8002f54 <osTaskDelId>
 800347a:	e7d2      	b.n	8003422 <buttonTaskProcess+0x36>
 800347c:	200003d0 	.word	0x200003d0
 8003480:	080033ed 	.word	0x080033ed
 8003484:	0800337d 	.word	0x0800337d

08003488 <buttonInit>:
void buttonInit(const buttonInitStruct_t *buttonInitData, uint8_t buttonNumber){
 8003488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800348c:	4680      	mov	r8, r0
 800348e:	4689      	mov	r9, r1
	memset(button, 0, sizeof(button));
 8003490:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8003494:	2100      	movs	r1, #0
 8003496:	481b      	ldr	r0, [pc, #108]	; (8003504 <buttonInit+0x7c>)
 8003498:	f000 f878 	bl	800358c <memset>
	for(uint8_t i = 0; i < buttonNumber; ++i)
 800349c:	2500      	movs	r5, #0
 800349e:	e001      	b.n	80034a4 <buttonInit+0x1c>
 80034a0:	3501      	adds	r5, #1
 80034a2:	b2ed      	uxtb	r5, r5
 80034a4:	454d      	cmp	r5, r9
 80034a6:	d22a      	bcs.n	80034fe <buttonInit+0x76>
		uint8_t buttonId = buttonInitData[i].name;
 80034a8:	0128      	lsls	r0, r5, #4
 80034aa:	eb08 0200 	add.w	r2, r8, r0
 80034ae:	7b16      	ldrb	r6, [r2, #12]
		if(button[buttonId].callBack == 0)
 80034b0:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80034b4:	00d9      	lsls	r1, r3, #3
 80034b6:	4b13      	ldr	r3, [pc, #76]	; (8003504 <buttonInit+0x7c>)
 80034b8:	440b      	add	r3, r1
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d1ef      	bne.n	80034a0 <buttonInit+0x18>
			button[buttonId].state = BUTTON_STATE_UNDEFINED;
 80034c0:	f8df a040 	ldr.w	sl, [pc, #64]	; 8003504 <buttonInit+0x7c>
 80034c4:	0077      	lsls	r7, r6, #1
 80034c6:	19b9      	adds	r1, r7, r6
 80034c8:	00cb      	lsls	r3, r1, #3
 80034ca:	eb0a 0403 	add.w	r4, sl, r3
 80034ce:	2102      	movs	r1, #2
 80034d0:	f80a 1003 	strb.w	r1, [sl, r3]
			button[buttonId].tempState = BUTTON_STATE_UNDEFINED;
 80034d4:	7061      	strb	r1, [r4, #1]
			button[buttonId].pressType = BUTTON_PRESS_NONE;
 80034d6:	2300      	movs	r3, #0
 80034d8:	70a3      	strb	r3, [r4, #2]
			button[buttonId].antiBounceAttempts = 0;
 80034da:	70e3      	strb	r3, [r4, #3]
			button[buttonId].antiBounceSummary = 0;
 80034dc:	7123      	strb	r3, [r4, #4]
			button[buttonId].callBack = buttonInitData[i].callBack;
 80034de:	6893      	ldr	r3, [r2, #8]
 80034e0:	60a3      	str	r3, [r4, #8]
			button[buttonId].init = buttonInitData[i].init;
 80034e2:	f858 3000 	ldr.w	r3, [r8, r0]
 80034e6:	60e3      	str	r3, [r4, #12]
			button[buttonId].getState = buttonInitData[i].getState;
 80034e8:	6852      	ldr	r2, [r2, #4]
 80034ea:	6122      	str	r2, [r4, #16]
			button[buttonId].init(btON);
 80034ec:	2001      	movs	r0, #1
 80034ee:	4798      	blx	r3
			button[buttonId].state = button[buttonId].getState();
 80034f0:	6923      	ldr	r3, [r4, #16]
 80034f2:	4798      	blx	r3
 80034f4:	443e      	add	r6, r7
 80034f6:	00f3      	lsls	r3, r6, #3
 80034f8:	f80a 0003 	strb.w	r0, [sl, r3]
 80034fc:	e7d0      	b.n	80034a0 <buttonInit+0x18>
}
 80034fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003502:	bf00      	nop
 8003504:	200003d0 	.word	0x200003d0

08003508 <setButtonHandler>:
    if (callBack) {
 8003508:	b141      	cbz	r1, 800351c <setButtonHandler+0x14>
void setButtonHandler(uint8_t buttonId, task_t callBack) {
 800350a:	b410      	push	{r4}
        button[buttonId].callBack = callBack;
 800350c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003510:	00c2      	lsls	r2, r0, #3
 8003512:	4b03      	ldr	r3, [pc, #12]	; (8003520 <setButtonHandler+0x18>)
 8003514:	4413      	add	r3, r2
 8003516:	6099      	str	r1, [r3, #8]
}
 8003518:	bc10      	pop	{r4}
 800351a:	4770      	bx	lr
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	200003d0 	.word	0x200003d0

08003524 <buttonInterruptHandler>:
void buttonInterruptHandler(uint8_t buttonId){
 8003524:	b510      	push	{r4, lr}
 8003526:	4604      	mov	r4, r0
  button[buttonId].init(btOFF);
 8003528:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800352c:	00da      	lsls	r2, r3, #3
 800352e:	4b05      	ldr	r3, [pc, #20]	; (8003544 <buttonInterruptHandler+0x20>)
 8003530:	4413      	add	r3, r2
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	2000      	movs	r0, #0
 8003536:	4798      	blx	r3
  osTaskAdd(buttonTaskProcess, buttonId, 0);
 8003538:	2200      	movs	r2, #0
 800353a:	4621      	mov	r1, r4
 800353c:	4802      	ldr	r0, [pc, #8]	; (8003548 <buttonInterruptHandler+0x24>)
 800353e:	f7ff fce1 	bl	8002f04 <osTaskAdd>
}
 8003542:	bd10      	pop	{r4, pc}
 8003544:	200003d0 	.word	0x200003d0
 8003548:	080033ed 	.word	0x080033ed

0800354c <__errno>:
 800354c:	4b01      	ldr	r3, [pc, #4]	; (8003554 <__errno+0x8>)
 800354e:	6818      	ldr	r0, [r3, #0]
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	20000074 	.word	0x20000074

08003558 <__itoa>:
 8003558:	1e93      	subs	r3, r2, #2
 800355a:	2b22      	cmp	r3, #34	; 0x22
 800355c:	b510      	push	{r4, lr}
 800355e:	460c      	mov	r4, r1
 8003560:	d904      	bls.n	800356c <__itoa+0x14>
 8003562:	2300      	movs	r3, #0
 8003564:	700b      	strb	r3, [r1, #0]
 8003566:	461c      	mov	r4, r3
 8003568:	4620      	mov	r0, r4
 800356a:	bd10      	pop	{r4, pc}
 800356c:	2a0a      	cmp	r2, #10
 800356e:	d109      	bne.n	8003584 <__itoa+0x2c>
 8003570:	2800      	cmp	r0, #0
 8003572:	da07      	bge.n	8003584 <__itoa+0x2c>
 8003574:	232d      	movs	r3, #45	; 0x2d
 8003576:	700b      	strb	r3, [r1, #0]
 8003578:	4240      	negs	r0, r0
 800357a:	2101      	movs	r1, #1
 800357c:	4421      	add	r1, r4
 800357e:	f000 f865 	bl	800364c <__utoa>
 8003582:	e7f1      	b.n	8003568 <__itoa+0x10>
 8003584:	2100      	movs	r1, #0
 8003586:	e7f9      	b.n	800357c <__itoa+0x24>

08003588 <itoa>:
 8003588:	f7ff bfe6 	b.w	8003558 <__itoa>

0800358c <memset>:
 800358c:	4402      	add	r2, r0
 800358e:	4603      	mov	r3, r0
 8003590:	4293      	cmp	r3, r2
 8003592:	d100      	bne.n	8003596 <memset+0xa>
 8003594:	4770      	bx	lr
 8003596:	f803 1b01 	strb.w	r1, [r3], #1
 800359a:	e7f9      	b.n	8003590 <memset+0x4>

0800359c <srand>:
 800359c:	b538      	push	{r3, r4, r5, lr}
 800359e:	4b0d      	ldr	r3, [pc, #52]	; (80035d4 <srand+0x38>)
 80035a0:	681c      	ldr	r4, [r3, #0]
 80035a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80035a4:	4605      	mov	r5, r0
 80035a6:	b97b      	cbnz	r3, 80035c8 <srand+0x2c>
 80035a8:	2018      	movs	r0, #24
 80035aa:	f000 f8c7 	bl	800373c <malloc>
 80035ae:	4a0a      	ldr	r2, [pc, #40]	; (80035d8 <srand+0x3c>)
 80035b0:	4b0a      	ldr	r3, [pc, #40]	; (80035dc <srand+0x40>)
 80035b2:	63a0      	str	r0, [r4, #56]	; 0x38
 80035b4:	e9c0 2300 	strd	r2, r3, [r0]
 80035b8:	4b09      	ldr	r3, [pc, #36]	; (80035e0 <srand+0x44>)
 80035ba:	6083      	str	r3, [r0, #8]
 80035bc:	230b      	movs	r3, #11
 80035be:	8183      	strh	r3, [r0, #12]
 80035c0:	2201      	movs	r2, #1
 80035c2:	2300      	movs	r3, #0
 80035c4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80035c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80035ca:	2200      	movs	r2, #0
 80035cc:	611d      	str	r5, [r3, #16]
 80035ce:	615a      	str	r2, [r3, #20]
 80035d0:	bd38      	pop	{r3, r4, r5, pc}
 80035d2:	bf00      	nop
 80035d4:	20000074 	.word	0x20000074
 80035d8:	abcd330e 	.word	0xabcd330e
 80035dc:	e66d1234 	.word	0xe66d1234
 80035e0:	0005deec 	.word	0x0005deec

080035e4 <rand>:
 80035e4:	b538      	push	{r3, r4, r5, lr}
 80035e6:	4b13      	ldr	r3, [pc, #76]	; (8003634 <rand+0x50>)
 80035e8:	681c      	ldr	r4, [r3, #0]
 80035ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80035ec:	b97b      	cbnz	r3, 800360e <rand+0x2a>
 80035ee:	2018      	movs	r0, #24
 80035f0:	f000 f8a4 	bl	800373c <malloc>
 80035f4:	4a10      	ldr	r2, [pc, #64]	; (8003638 <rand+0x54>)
 80035f6:	4b11      	ldr	r3, [pc, #68]	; (800363c <rand+0x58>)
 80035f8:	63a0      	str	r0, [r4, #56]	; 0x38
 80035fa:	e9c0 2300 	strd	r2, r3, [r0]
 80035fe:	4b10      	ldr	r3, [pc, #64]	; (8003640 <rand+0x5c>)
 8003600:	6083      	str	r3, [r0, #8]
 8003602:	230b      	movs	r3, #11
 8003604:	8183      	strh	r3, [r0, #12]
 8003606:	2201      	movs	r2, #1
 8003608:	2300      	movs	r3, #0
 800360a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800360e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003610:	480c      	ldr	r0, [pc, #48]	; (8003644 <rand+0x60>)
 8003612:	690a      	ldr	r2, [r1, #16]
 8003614:	694b      	ldr	r3, [r1, #20]
 8003616:	4c0c      	ldr	r4, [pc, #48]	; (8003648 <rand+0x64>)
 8003618:	4350      	muls	r0, r2
 800361a:	fb04 0003 	mla	r0, r4, r3, r0
 800361e:	fba2 2304 	umull	r2, r3, r2, r4
 8003622:	4403      	add	r3, r0
 8003624:	1c54      	adds	r4, r2, #1
 8003626:	f143 0500 	adc.w	r5, r3, #0
 800362a:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800362e:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8003632:	bd38      	pop	{r3, r4, r5, pc}
 8003634:	20000074 	.word	0x20000074
 8003638:	abcd330e 	.word	0xabcd330e
 800363c:	e66d1234 	.word	0xe66d1234
 8003640:	0005deec 	.word	0x0005deec
 8003644:	5851f42d 	.word	0x5851f42d
 8003648:	4c957f2d 	.word	0x4c957f2d

0800364c <__utoa>:
 800364c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800364e:	4b1d      	ldr	r3, [pc, #116]	; (80036c4 <__utoa+0x78>)
 8003650:	b08b      	sub	sp, #44	; 0x2c
 8003652:	4605      	mov	r5, r0
 8003654:	460c      	mov	r4, r1
 8003656:	466e      	mov	r6, sp
 8003658:	f103 0c20 	add.w	ip, r3, #32
 800365c:	6818      	ldr	r0, [r3, #0]
 800365e:	6859      	ldr	r1, [r3, #4]
 8003660:	4637      	mov	r7, r6
 8003662:	c703      	stmia	r7!, {r0, r1}
 8003664:	3308      	adds	r3, #8
 8003666:	4563      	cmp	r3, ip
 8003668:	463e      	mov	r6, r7
 800366a:	d1f7      	bne.n	800365c <__utoa+0x10>
 800366c:	6818      	ldr	r0, [r3, #0]
 800366e:	791b      	ldrb	r3, [r3, #4]
 8003670:	713b      	strb	r3, [r7, #4]
 8003672:	1e93      	subs	r3, r2, #2
 8003674:	2b22      	cmp	r3, #34	; 0x22
 8003676:	6038      	str	r0, [r7, #0]
 8003678:	f04f 0300 	mov.w	r3, #0
 800367c:	d904      	bls.n	8003688 <__utoa+0x3c>
 800367e:	7023      	strb	r3, [r4, #0]
 8003680:	461c      	mov	r4, r3
 8003682:	4620      	mov	r0, r4
 8003684:	b00b      	add	sp, #44	; 0x2c
 8003686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003688:	1e66      	subs	r6, r4, #1
 800368a:	fbb5 f0f2 	udiv	r0, r5, r2
 800368e:	af0a      	add	r7, sp, #40	; 0x28
 8003690:	fb02 5510 	mls	r5, r2, r0, r5
 8003694:	443d      	add	r5, r7
 8003696:	1c59      	adds	r1, r3, #1
 8003698:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 800369c:	f806 5f01 	strb.w	r5, [r6, #1]!
 80036a0:	4605      	mov	r5, r0
 80036a2:	b968      	cbnz	r0, 80036c0 <__utoa+0x74>
 80036a4:	5460      	strb	r0, [r4, r1]
 80036a6:	4423      	add	r3, r4
 80036a8:	4622      	mov	r2, r4
 80036aa:	1b19      	subs	r1, r3, r4
 80036ac:	1b10      	subs	r0, r2, r4
 80036ae:	4281      	cmp	r1, r0
 80036b0:	dde7      	ble.n	8003682 <__utoa+0x36>
 80036b2:	7811      	ldrb	r1, [r2, #0]
 80036b4:	7818      	ldrb	r0, [r3, #0]
 80036b6:	f802 0b01 	strb.w	r0, [r2], #1
 80036ba:	f803 1901 	strb.w	r1, [r3], #-1
 80036be:	e7f4      	b.n	80036aa <__utoa+0x5e>
 80036c0:	460b      	mov	r3, r1
 80036c2:	e7e2      	b.n	800368a <__utoa+0x3e>
 80036c4:	0800a3f4 	.word	0x0800a3f4

080036c8 <_vsniprintf_r>:
 80036c8:	b530      	push	{r4, r5, lr}
 80036ca:	1e14      	subs	r4, r2, #0
 80036cc:	4605      	mov	r5, r0
 80036ce:	b09b      	sub	sp, #108	; 0x6c
 80036d0:	4618      	mov	r0, r3
 80036d2:	da05      	bge.n	80036e0 <_vsniprintf_r+0x18>
 80036d4:	238b      	movs	r3, #139	; 0x8b
 80036d6:	602b      	str	r3, [r5, #0]
 80036d8:	f04f 30ff 	mov.w	r0, #4294967295
 80036dc:	b01b      	add	sp, #108	; 0x6c
 80036de:	bd30      	pop	{r4, r5, pc}
 80036e0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80036e4:	f8ad 300c 	strh.w	r3, [sp, #12]
 80036e8:	bf14      	ite	ne
 80036ea:	f104 33ff 	addne.w	r3, r4, #4294967295
 80036ee:	4623      	moveq	r3, r4
 80036f0:	9302      	str	r3, [sp, #8]
 80036f2:	9305      	str	r3, [sp, #20]
 80036f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036f8:	9100      	str	r1, [sp, #0]
 80036fa:	9104      	str	r1, [sp, #16]
 80036fc:	f8ad 300e 	strh.w	r3, [sp, #14]
 8003700:	4602      	mov	r2, r0
 8003702:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003704:	4669      	mov	r1, sp
 8003706:	4628      	mov	r0, r5
 8003708:	f000 f922 	bl	8003950 <_svfiprintf_r>
 800370c:	1c43      	adds	r3, r0, #1
 800370e:	bfbc      	itt	lt
 8003710:	238b      	movlt	r3, #139	; 0x8b
 8003712:	602b      	strlt	r3, [r5, #0]
 8003714:	2c00      	cmp	r4, #0
 8003716:	d0e1      	beq.n	80036dc <_vsniprintf_r+0x14>
 8003718:	9b00      	ldr	r3, [sp, #0]
 800371a:	2200      	movs	r2, #0
 800371c:	701a      	strb	r2, [r3, #0]
 800371e:	e7dd      	b.n	80036dc <_vsniprintf_r+0x14>

08003720 <vsniprintf>:
 8003720:	b507      	push	{r0, r1, r2, lr}
 8003722:	9300      	str	r3, [sp, #0]
 8003724:	4613      	mov	r3, r2
 8003726:	460a      	mov	r2, r1
 8003728:	4601      	mov	r1, r0
 800372a:	4803      	ldr	r0, [pc, #12]	; (8003738 <vsniprintf+0x18>)
 800372c:	6800      	ldr	r0, [r0, #0]
 800372e:	f7ff ffcb 	bl	80036c8 <_vsniprintf_r>
 8003732:	b003      	add	sp, #12
 8003734:	f85d fb04 	ldr.w	pc, [sp], #4
 8003738:	20000074 	.word	0x20000074

0800373c <malloc>:
 800373c:	4b02      	ldr	r3, [pc, #8]	; (8003748 <malloc+0xc>)
 800373e:	4601      	mov	r1, r0
 8003740:	6818      	ldr	r0, [r3, #0]
 8003742:	f000 b851 	b.w	80037e8 <_malloc_r>
 8003746:	bf00      	nop
 8003748:	20000074 	.word	0x20000074

0800374c <_free_r>:
 800374c:	b538      	push	{r3, r4, r5, lr}
 800374e:	4605      	mov	r5, r0
 8003750:	2900      	cmp	r1, #0
 8003752:	d045      	beq.n	80037e0 <_free_r+0x94>
 8003754:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003758:	1f0c      	subs	r4, r1, #4
 800375a:	2b00      	cmp	r3, #0
 800375c:	bfb8      	it	lt
 800375e:	18e4      	addlt	r4, r4, r3
 8003760:	f000 fbfa 	bl	8003f58 <__malloc_lock>
 8003764:	4a1f      	ldr	r2, [pc, #124]	; (80037e4 <_free_r+0x98>)
 8003766:	6813      	ldr	r3, [r2, #0]
 8003768:	4610      	mov	r0, r2
 800376a:	b933      	cbnz	r3, 800377a <_free_r+0x2e>
 800376c:	6063      	str	r3, [r4, #4]
 800376e:	6014      	str	r4, [r2, #0]
 8003770:	4628      	mov	r0, r5
 8003772:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003776:	f000 bbf0 	b.w	8003f5a <__malloc_unlock>
 800377a:	42a3      	cmp	r3, r4
 800377c:	d90c      	bls.n	8003798 <_free_r+0x4c>
 800377e:	6821      	ldr	r1, [r4, #0]
 8003780:	1862      	adds	r2, r4, r1
 8003782:	4293      	cmp	r3, r2
 8003784:	bf04      	itt	eq
 8003786:	681a      	ldreq	r2, [r3, #0]
 8003788:	685b      	ldreq	r3, [r3, #4]
 800378a:	6063      	str	r3, [r4, #4]
 800378c:	bf04      	itt	eq
 800378e:	1852      	addeq	r2, r2, r1
 8003790:	6022      	streq	r2, [r4, #0]
 8003792:	6004      	str	r4, [r0, #0]
 8003794:	e7ec      	b.n	8003770 <_free_r+0x24>
 8003796:	4613      	mov	r3, r2
 8003798:	685a      	ldr	r2, [r3, #4]
 800379a:	b10a      	cbz	r2, 80037a0 <_free_r+0x54>
 800379c:	42a2      	cmp	r2, r4
 800379e:	d9fa      	bls.n	8003796 <_free_r+0x4a>
 80037a0:	6819      	ldr	r1, [r3, #0]
 80037a2:	1858      	adds	r0, r3, r1
 80037a4:	42a0      	cmp	r0, r4
 80037a6:	d10b      	bne.n	80037c0 <_free_r+0x74>
 80037a8:	6820      	ldr	r0, [r4, #0]
 80037aa:	4401      	add	r1, r0
 80037ac:	1858      	adds	r0, r3, r1
 80037ae:	4282      	cmp	r2, r0
 80037b0:	6019      	str	r1, [r3, #0]
 80037b2:	d1dd      	bne.n	8003770 <_free_r+0x24>
 80037b4:	6810      	ldr	r0, [r2, #0]
 80037b6:	6852      	ldr	r2, [r2, #4]
 80037b8:	605a      	str	r2, [r3, #4]
 80037ba:	4401      	add	r1, r0
 80037bc:	6019      	str	r1, [r3, #0]
 80037be:	e7d7      	b.n	8003770 <_free_r+0x24>
 80037c0:	d902      	bls.n	80037c8 <_free_r+0x7c>
 80037c2:	230c      	movs	r3, #12
 80037c4:	602b      	str	r3, [r5, #0]
 80037c6:	e7d3      	b.n	8003770 <_free_r+0x24>
 80037c8:	6820      	ldr	r0, [r4, #0]
 80037ca:	1821      	adds	r1, r4, r0
 80037cc:	428a      	cmp	r2, r1
 80037ce:	bf04      	itt	eq
 80037d0:	6811      	ldreq	r1, [r2, #0]
 80037d2:	6852      	ldreq	r2, [r2, #4]
 80037d4:	6062      	str	r2, [r4, #4]
 80037d6:	bf04      	itt	eq
 80037d8:	1809      	addeq	r1, r1, r0
 80037da:	6021      	streq	r1, [r4, #0]
 80037dc:	605c      	str	r4, [r3, #4]
 80037de:	e7c7      	b.n	8003770 <_free_r+0x24>
 80037e0:	bd38      	pop	{r3, r4, r5, pc}
 80037e2:	bf00      	nop
 80037e4:	20000568 	.word	0x20000568

080037e8 <_malloc_r>:
 80037e8:	b570      	push	{r4, r5, r6, lr}
 80037ea:	1ccd      	adds	r5, r1, #3
 80037ec:	f025 0503 	bic.w	r5, r5, #3
 80037f0:	3508      	adds	r5, #8
 80037f2:	2d0c      	cmp	r5, #12
 80037f4:	bf38      	it	cc
 80037f6:	250c      	movcc	r5, #12
 80037f8:	2d00      	cmp	r5, #0
 80037fa:	4606      	mov	r6, r0
 80037fc:	db01      	blt.n	8003802 <_malloc_r+0x1a>
 80037fe:	42a9      	cmp	r1, r5
 8003800:	d903      	bls.n	800380a <_malloc_r+0x22>
 8003802:	230c      	movs	r3, #12
 8003804:	6033      	str	r3, [r6, #0]
 8003806:	2000      	movs	r0, #0
 8003808:	bd70      	pop	{r4, r5, r6, pc}
 800380a:	f000 fba5 	bl	8003f58 <__malloc_lock>
 800380e:	4a21      	ldr	r2, [pc, #132]	; (8003894 <_malloc_r+0xac>)
 8003810:	6814      	ldr	r4, [r2, #0]
 8003812:	4621      	mov	r1, r4
 8003814:	b991      	cbnz	r1, 800383c <_malloc_r+0x54>
 8003816:	4c20      	ldr	r4, [pc, #128]	; (8003898 <_malloc_r+0xb0>)
 8003818:	6823      	ldr	r3, [r4, #0]
 800381a:	b91b      	cbnz	r3, 8003824 <_malloc_r+0x3c>
 800381c:	4630      	mov	r0, r6
 800381e:	f000 fb15 	bl	8003e4c <_sbrk_r>
 8003822:	6020      	str	r0, [r4, #0]
 8003824:	4629      	mov	r1, r5
 8003826:	4630      	mov	r0, r6
 8003828:	f000 fb10 	bl	8003e4c <_sbrk_r>
 800382c:	1c43      	adds	r3, r0, #1
 800382e:	d124      	bne.n	800387a <_malloc_r+0x92>
 8003830:	230c      	movs	r3, #12
 8003832:	6033      	str	r3, [r6, #0]
 8003834:	4630      	mov	r0, r6
 8003836:	f000 fb90 	bl	8003f5a <__malloc_unlock>
 800383a:	e7e4      	b.n	8003806 <_malloc_r+0x1e>
 800383c:	680b      	ldr	r3, [r1, #0]
 800383e:	1b5b      	subs	r3, r3, r5
 8003840:	d418      	bmi.n	8003874 <_malloc_r+0x8c>
 8003842:	2b0b      	cmp	r3, #11
 8003844:	d90f      	bls.n	8003866 <_malloc_r+0x7e>
 8003846:	600b      	str	r3, [r1, #0]
 8003848:	50cd      	str	r5, [r1, r3]
 800384a:	18cc      	adds	r4, r1, r3
 800384c:	4630      	mov	r0, r6
 800384e:	f000 fb84 	bl	8003f5a <__malloc_unlock>
 8003852:	f104 000b 	add.w	r0, r4, #11
 8003856:	1d23      	adds	r3, r4, #4
 8003858:	f020 0007 	bic.w	r0, r0, #7
 800385c:	1ac3      	subs	r3, r0, r3
 800385e:	d0d3      	beq.n	8003808 <_malloc_r+0x20>
 8003860:	425a      	negs	r2, r3
 8003862:	50e2      	str	r2, [r4, r3]
 8003864:	e7d0      	b.n	8003808 <_malloc_r+0x20>
 8003866:	428c      	cmp	r4, r1
 8003868:	684b      	ldr	r3, [r1, #4]
 800386a:	bf16      	itet	ne
 800386c:	6063      	strne	r3, [r4, #4]
 800386e:	6013      	streq	r3, [r2, #0]
 8003870:	460c      	movne	r4, r1
 8003872:	e7eb      	b.n	800384c <_malloc_r+0x64>
 8003874:	460c      	mov	r4, r1
 8003876:	6849      	ldr	r1, [r1, #4]
 8003878:	e7cc      	b.n	8003814 <_malloc_r+0x2c>
 800387a:	1cc4      	adds	r4, r0, #3
 800387c:	f024 0403 	bic.w	r4, r4, #3
 8003880:	42a0      	cmp	r0, r4
 8003882:	d005      	beq.n	8003890 <_malloc_r+0xa8>
 8003884:	1a21      	subs	r1, r4, r0
 8003886:	4630      	mov	r0, r6
 8003888:	f000 fae0 	bl	8003e4c <_sbrk_r>
 800388c:	3001      	adds	r0, #1
 800388e:	d0cf      	beq.n	8003830 <_malloc_r+0x48>
 8003890:	6025      	str	r5, [r4, #0]
 8003892:	e7db      	b.n	800384c <_malloc_r+0x64>
 8003894:	20000568 	.word	0x20000568
 8003898:	2000056c 	.word	0x2000056c

0800389c <__ssputs_r>:
 800389c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038a0:	688e      	ldr	r6, [r1, #8]
 80038a2:	429e      	cmp	r6, r3
 80038a4:	4682      	mov	sl, r0
 80038a6:	460c      	mov	r4, r1
 80038a8:	4690      	mov	r8, r2
 80038aa:	4699      	mov	r9, r3
 80038ac:	d837      	bhi.n	800391e <__ssputs_r+0x82>
 80038ae:	898a      	ldrh	r2, [r1, #12]
 80038b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80038b4:	d031      	beq.n	800391a <__ssputs_r+0x7e>
 80038b6:	6825      	ldr	r5, [r4, #0]
 80038b8:	6909      	ldr	r1, [r1, #16]
 80038ba:	1a6f      	subs	r7, r5, r1
 80038bc:	6965      	ldr	r5, [r4, #20]
 80038be:	2302      	movs	r3, #2
 80038c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80038c4:	fb95 f5f3 	sdiv	r5, r5, r3
 80038c8:	f109 0301 	add.w	r3, r9, #1
 80038cc:	443b      	add	r3, r7
 80038ce:	429d      	cmp	r5, r3
 80038d0:	bf38      	it	cc
 80038d2:	461d      	movcc	r5, r3
 80038d4:	0553      	lsls	r3, r2, #21
 80038d6:	d530      	bpl.n	800393a <__ssputs_r+0x9e>
 80038d8:	4629      	mov	r1, r5
 80038da:	f7ff ff85 	bl	80037e8 <_malloc_r>
 80038de:	4606      	mov	r6, r0
 80038e0:	b950      	cbnz	r0, 80038f8 <__ssputs_r+0x5c>
 80038e2:	230c      	movs	r3, #12
 80038e4:	f8ca 3000 	str.w	r3, [sl]
 80038e8:	89a3      	ldrh	r3, [r4, #12]
 80038ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038ee:	81a3      	strh	r3, [r4, #12]
 80038f0:	f04f 30ff 	mov.w	r0, #4294967295
 80038f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038f8:	463a      	mov	r2, r7
 80038fa:	6921      	ldr	r1, [r4, #16]
 80038fc:	f000 fb08 	bl	8003f10 <memcpy>
 8003900:	89a3      	ldrh	r3, [r4, #12]
 8003902:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800390a:	81a3      	strh	r3, [r4, #12]
 800390c:	6126      	str	r6, [r4, #16]
 800390e:	6165      	str	r5, [r4, #20]
 8003910:	443e      	add	r6, r7
 8003912:	1bed      	subs	r5, r5, r7
 8003914:	6026      	str	r6, [r4, #0]
 8003916:	60a5      	str	r5, [r4, #8]
 8003918:	464e      	mov	r6, r9
 800391a:	454e      	cmp	r6, r9
 800391c:	d900      	bls.n	8003920 <__ssputs_r+0x84>
 800391e:	464e      	mov	r6, r9
 8003920:	4632      	mov	r2, r6
 8003922:	4641      	mov	r1, r8
 8003924:	6820      	ldr	r0, [r4, #0]
 8003926:	f000 fafe 	bl	8003f26 <memmove>
 800392a:	68a3      	ldr	r3, [r4, #8]
 800392c:	1b9b      	subs	r3, r3, r6
 800392e:	60a3      	str	r3, [r4, #8]
 8003930:	6823      	ldr	r3, [r4, #0]
 8003932:	441e      	add	r6, r3
 8003934:	6026      	str	r6, [r4, #0]
 8003936:	2000      	movs	r0, #0
 8003938:	e7dc      	b.n	80038f4 <__ssputs_r+0x58>
 800393a:	462a      	mov	r2, r5
 800393c:	f000 fb0e 	bl	8003f5c <_realloc_r>
 8003940:	4606      	mov	r6, r0
 8003942:	2800      	cmp	r0, #0
 8003944:	d1e2      	bne.n	800390c <__ssputs_r+0x70>
 8003946:	6921      	ldr	r1, [r4, #16]
 8003948:	4650      	mov	r0, sl
 800394a:	f7ff feff 	bl	800374c <_free_r>
 800394e:	e7c8      	b.n	80038e2 <__ssputs_r+0x46>

08003950 <_svfiprintf_r>:
 8003950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003954:	b09d      	sub	sp, #116	; 0x74
 8003956:	4680      	mov	r8, r0
 8003958:	9303      	str	r3, [sp, #12]
 800395a:	898b      	ldrh	r3, [r1, #12]
 800395c:	061d      	lsls	r5, r3, #24
 800395e:	460c      	mov	r4, r1
 8003960:	4616      	mov	r6, r2
 8003962:	d50f      	bpl.n	8003984 <_svfiprintf_r+0x34>
 8003964:	690b      	ldr	r3, [r1, #16]
 8003966:	b96b      	cbnz	r3, 8003984 <_svfiprintf_r+0x34>
 8003968:	2140      	movs	r1, #64	; 0x40
 800396a:	f7ff ff3d 	bl	80037e8 <_malloc_r>
 800396e:	6020      	str	r0, [r4, #0]
 8003970:	6120      	str	r0, [r4, #16]
 8003972:	b928      	cbnz	r0, 8003980 <_svfiprintf_r+0x30>
 8003974:	230c      	movs	r3, #12
 8003976:	f8c8 3000 	str.w	r3, [r8]
 800397a:	f04f 30ff 	mov.w	r0, #4294967295
 800397e:	e0c7      	b.n	8003b10 <_svfiprintf_r+0x1c0>
 8003980:	2340      	movs	r3, #64	; 0x40
 8003982:	6163      	str	r3, [r4, #20]
 8003984:	2300      	movs	r3, #0
 8003986:	9309      	str	r3, [sp, #36]	; 0x24
 8003988:	2320      	movs	r3, #32
 800398a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800398e:	2330      	movs	r3, #48	; 0x30
 8003990:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003994:	f04f 0b01 	mov.w	fp, #1
 8003998:	4637      	mov	r7, r6
 800399a:	463d      	mov	r5, r7
 800399c:	f815 3b01 	ldrb.w	r3, [r5], #1
 80039a0:	b10b      	cbz	r3, 80039a6 <_svfiprintf_r+0x56>
 80039a2:	2b25      	cmp	r3, #37	; 0x25
 80039a4:	d13e      	bne.n	8003a24 <_svfiprintf_r+0xd4>
 80039a6:	ebb7 0a06 	subs.w	sl, r7, r6
 80039aa:	d00b      	beq.n	80039c4 <_svfiprintf_r+0x74>
 80039ac:	4653      	mov	r3, sl
 80039ae:	4632      	mov	r2, r6
 80039b0:	4621      	mov	r1, r4
 80039b2:	4640      	mov	r0, r8
 80039b4:	f7ff ff72 	bl	800389c <__ssputs_r>
 80039b8:	3001      	adds	r0, #1
 80039ba:	f000 80a4 	beq.w	8003b06 <_svfiprintf_r+0x1b6>
 80039be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039c0:	4453      	add	r3, sl
 80039c2:	9309      	str	r3, [sp, #36]	; 0x24
 80039c4:	783b      	ldrb	r3, [r7, #0]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	f000 809d 	beq.w	8003b06 <_svfiprintf_r+0x1b6>
 80039cc:	2300      	movs	r3, #0
 80039ce:	f04f 32ff 	mov.w	r2, #4294967295
 80039d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039d6:	9304      	str	r3, [sp, #16]
 80039d8:	9307      	str	r3, [sp, #28]
 80039da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80039de:	931a      	str	r3, [sp, #104]	; 0x68
 80039e0:	462f      	mov	r7, r5
 80039e2:	2205      	movs	r2, #5
 80039e4:	f817 1b01 	ldrb.w	r1, [r7], #1
 80039e8:	484f      	ldr	r0, [pc, #316]	; (8003b28 <_svfiprintf_r+0x1d8>)
 80039ea:	f000 fa41 	bl	8003e70 <memchr>
 80039ee:	9b04      	ldr	r3, [sp, #16]
 80039f0:	b9d0      	cbnz	r0, 8003a28 <_svfiprintf_r+0xd8>
 80039f2:	06d9      	lsls	r1, r3, #27
 80039f4:	bf44      	itt	mi
 80039f6:	2220      	movmi	r2, #32
 80039f8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80039fc:	071a      	lsls	r2, r3, #28
 80039fe:	bf44      	itt	mi
 8003a00:	222b      	movmi	r2, #43	; 0x2b
 8003a02:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003a06:	782a      	ldrb	r2, [r5, #0]
 8003a08:	2a2a      	cmp	r2, #42	; 0x2a
 8003a0a:	d015      	beq.n	8003a38 <_svfiprintf_r+0xe8>
 8003a0c:	9a07      	ldr	r2, [sp, #28]
 8003a0e:	462f      	mov	r7, r5
 8003a10:	2000      	movs	r0, #0
 8003a12:	250a      	movs	r5, #10
 8003a14:	4639      	mov	r1, r7
 8003a16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a1a:	3b30      	subs	r3, #48	; 0x30
 8003a1c:	2b09      	cmp	r3, #9
 8003a1e:	d94d      	bls.n	8003abc <_svfiprintf_r+0x16c>
 8003a20:	b1b8      	cbz	r0, 8003a52 <_svfiprintf_r+0x102>
 8003a22:	e00f      	b.n	8003a44 <_svfiprintf_r+0xf4>
 8003a24:	462f      	mov	r7, r5
 8003a26:	e7b8      	b.n	800399a <_svfiprintf_r+0x4a>
 8003a28:	4a3f      	ldr	r2, [pc, #252]	; (8003b28 <_svfiprintf_r+0x1d8>)
 8003a2a:	1a80      	subs	r0, r0, r2
 8003a2c:	fa0b f000 	lsl.w	r0, fp, r0
 8003a30:	4318      	orrs	r0, r3
 8003a32:	9004      	str	r0, [sp, #16]
 8003a34:	463d      	mov	r5, r7
 8003a36:	e7d3      	b.n	80039e0 <_svfiprintf_r+0x90>
 8003a38:	9a03      	ldr	r2, [sp, #12]
 8003a3a:	1d11      	adds	r1, r2, #4
 8003a3c:	6812      	ldr	r2, [r2, #0]
 8003a3e:	9103      	str	r1, [sp, #12]
 8003a40:	2a00      	cmp	r2, #0
 8003a42:	db01      	blt.n	8003a48 <_svfiprintf_r+0xf8>
 8003a44:	9207      	str	r2, [sp, #28]
 8003a46:	e004      	b.n	8003a52 <_svfiprintf_r+0x102>
 8003a48:	4252      	negs	r2, r2
 8003a4a:	f043 0302 	orr.w	r3, r3, #2
 8003a4e:	9207      	str	r2, [sp, #28]
 8003a50:	9304      	str	r3, [sp, #16]
 8003a52:	783b      	ldrb	r3, [r7, #0]
 8003a54:	2b2e      	cmp	r3, #46	; 0x2e
 8003a56:	d10c      	bne.n	8003a72 <_svfiprintf_r+0x122>
 8003a58:	787b      	ldrb	r3, [r7, #1]
 8003a5a:	2b2a      	cmp	r3, #42	; 0x2a
 8003a5c:	d133      	bne.n	8003ac6 <_svfiprintf_r+0x176>
 8003a5e:	9b03      	ldr	r3, [sp, #12]
 8003a60:	1d1a      	adds	r2, r3, #4
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	9203      	str	r2, [sp, #12]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	bfb8      	it	lt
 8003a6a:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a6e:	3702      	adds	r7, #2
 8003a70:	9305      	str	r3, [sp, #20]
 8003a72:	4d2e      	ldr	r5, [pc, #184]	; (8003b2c <_svfiprintf_r+0x1dc>)
 8003a74:	7839      	ldrb	r1, [r7, #0]
 8003a76:	2203      	movs	r2, #3
 8003a78:	4628      	mov	r0, r5
 8003a7a:	f000 f9f9 	bl	8003e70 <memchr>
 8003a7e:	b138      	cbz	r0, 8003a90 <_svfiprintf_r+0x140>
 8003a80:	2340      	movs	r3, #64	; 0x40
 8003a82:	1b40      	subs	r0, r0, r5
 8003a84:	fa03 f000 	lsl.w	r0, r3, r0
 8003a88:	9b04      	ldr	r3, [sp, #16]
 8003a8a:	4303      	orrs	r3, r0
 8003a8c:	3701      	adds	r7, #1
 8003a8e:	9304      	str	r3, [sp, #16]
 8003a90:	7839      	ldrb	r1, [r7, #0]
 8003a92:	4827      	ldr	r0, [pc, #156]	; (8003b30 <_svfiprintf_r+0x1e0>)
 8003a94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a98:	2206      	movs	r2, #6
 8003a9a:	1c7e      	adds	r6, r7, #1
 8003a9c:	f000 f9e8 	bl	8003e70 <memchr>
 8003aa0:	2800      	cmp	r0, #0
 8003aa2:	d038      	beq.n	8003b16 <_svfiprintf_r+0x1c6>
 8003aa4:	4b23      	ldr	r3, [pc, #140]	; (8003b34 <_svfiprintf_r+0x1e4>)
 8003aa6:	bb13      	cbnz	r3, 8003aee <_svfiprintf_r+0x19e>
 8003aa8:	9b03      	ldr	r3, [sp, #12]
 8003aaa:	3307      	adds	r3, #7
 8003aac:	f023 0307 	bic.w	r3, r3, #7
 8003ab0:	3308      	adds	r3, #8
 8003ab2:	9303      	str	r3, [sp, #12]
 8003ab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ab6:	444b      	add	r3, r9
 8003ab8:	9309      	str	r3, [sp, #36]	; 0x24
 8003aba:	e76d      	b.n	8003998 <_svfiprintf_r+0x48>
 8003abc:	fb05 3202 	mla	r2, r5, r2, r3
 8003ac0:	2001      	movs	r0, #1
 8003ac2:	460f      	mov	r7, r1
 8003ac4:	e7a6      	b.n	8003a14 <_svfiprintf_r+0xc4>
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	3701      	adds	r7, #1
 8003aca:	9305      	str	r3, [sp, #20]
 8003acc:	4619      	mov	r1, r3
 8003ace:	250a      	movs	r5, #10
 8003ad0:	4638      	mov	r0, r7
 8003ad2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ad6:	3a30      	subs	r2, #48	; 0x30
 8003ad8:	2a09      	cmp	r2, #9
 8003ada:	d903      	bls.n	8003ae4 <_svfiprintf_r+0x194>
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d0c8      	beq.n	8003a72 <_svfiprintf_r+0x122>
 8003ae0:	9105      	str	r1, [sp, #20]
 8003ae2:	e7c6      	b.n	8003a72 <_svfiprintf_r+0x122>
 8003ae4:	fb05 2101 	mla	r1, r5, r1, r2
 8003ae8:	2301      	movs	r3, #1
 8003aea:	4607      	mov	r7, r0
 8003aec:	e7f0      	b.n	8003ad0 <_svfiprintf_r+0x180>
 8003aee:	ab03      	add	r3, sp, #12
 8003af0:	9300      	str	r3, [sp, #0]
 8003af2:	4622      	mov	r2, r4
 8003af4:	4b10      	ldr	r3, [pc, #64]	; (8003b38 <_svfiprintf_r+0x1e8>)
 8003af6:	a904      	add	r1, sp, #16
 8003af8:	4640      	mov	r0, r8
 8003afa:	f3af 8000 	nop.w
 8003afe:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003b02:	4681      	mov	r9, r0
 8003b04:	d1d6      	bne.n	8003ab4 <_svfiprintf_r+0x164>
 8003b06:	89a3      	ldrh	r3, [r4, #12]
 8003b08:	065b      	lsls	r3, r3, #25
 8003b0a:	f53f af36 	bmi.w	800397a <_svfiprintf_r+0x2a>
 8003b0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b10:	b01d      	add	sp, #116	; 0x74
 8003b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b16:	ab03      	add	r3, sp, #12
 8003b18:	9300      	str	r3, [sp, #0]
 8003b1a:	4622      	mov	r2, r4
 8003b1c:	4b06      	ldr	r3, [pc, #24]	; (8003b38 <_svfiprintf_r+0x1e8>)
 8003b1e:	a904      	add	r1, sp, #16
 8003b20:	4640      	mov	r0, r8
 8003b22:	f000 f881 	bl	8003c28 <_printf_i>
 8003b26:	e7ea      	b.n	8003afe <_svfiprintf_r+0x1ae>
 8003b28:	0800a419 	.word	0x0800a419
 8003b2c:	0800a41f 	.word	0x0800a41f
 8003b30:	0800a423 	.word	0x0800a423
 8003b34:	00000000 	.word	0x00000000
 8003b38:	0800389d 	.word	0x0800389d

08003b3c <_printf_common>:
 8003b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b40:	4691      	mov	r9, r2
 8003b42:	461f      	mov	r7, r3
 8003b44:	688a      	ldr	r2, [r1, #8]
 8003b46:	690b      	ldr	r3, [r1, #16]
 8003b48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	bfb8      	it	lt
 8003b50:	4613      	movlt	r3, r2
 8003b52:	f8c9 3000 	str.w	r3, [r9]
 8003b56:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b5a:	4606      	mov	r6, r0
 8003b5c:	460c      	mov	r4, r1
 8003b5e:	b112      	cbz	r2, 8003b66 <_printf_common+0x2a>
 8003b60:	3301      	adds	r3, #1
 8003b62:	f8c9 3000 	str.w	r3, [r9]
 8003b66:	6823      	ldr	r3, [r4, #0]
 8003b68:	0699      	lsls	r1, r3, #26
 8003b6a:	bf42      	ittt	mi
 8003b6c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003b70:	3302      	addmi	r3, #2
 8003b72:	f8c9 3000 	strmi.w	r3, [r9]
 8003b76:	6825      	ldr	r5, [r4, #0]
 8003b78:	f015 0506 	ands.w	r5, r5, #6
 8003b7c:	d107      	bne.n	8003b8e <_printf_common+0x52>
 8003b7e:	f104 0a19 	add.w	sl, r4, #25
 8003b82:	68e3      	ldr	r3, [r4, #12]
 8003b84:	f8d9 2000 	ldr.w	r2, [r9]
 8003b88:	1a9b      	subs	r3, r3, r2
 8003b8a:	42ab      	cmp	r3, r5
 8003b8c:	dc28      	bgt.n	8003be0 <_printf_common+0xa4>
 8003b8e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003b92:	6822      	ldr	r2, [r4, #0]
 8003b94:	3300      	adds	r3, #0
 8003b96:	bf18      	it	ne
 8003b98:	2301      	movne	r3, #1
 8003b9a:	0692      	lsls	r2, r2, #26
 8003b9c:	d42d      	bmi.n	8003bfa <_printf_common+0xbe>
 8003b9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ba2:	4639      	mov	r1, r7
 8003ba4:	4630      	mov	r0, r6
 8003ba6:	47c0      	blx	r8
 8003ba8:	3001      	adds	r0, #1
 8003baa:	d020      	beq.n	8003bee <_printf_common+0xb2>
 8003bac:	6823      	ldr	r3, [r4, #0]
 8003bae:	68e5      	ldr	r5, [r4, #12]
 8003bb0:	f8d9 2000 	ldr.w	r2, [r9]
 8003bb4:	f003 0306 	and.w	r3, r3, #6
 8003bb8:	2b04      	cmp	r3, #4
 8003bba:	bf08      	it	eq
 8003bbc:	1aad      	subeq	r5, r5, r2
 8003bbe:	68a3      	ldr	r3, [r4, #8]
 8003bc0:	6922      	ldr	r2, [r4, #16]
 8003bc2:	bf0c      	ite	eq
 8003bc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003bc8:	2500      	movne	r5, #0
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	bfc4      	itt	gt
 8003bce:	1a9b      	subgt	r3, r3, r2
 8003bd0:	18ed      	addgt	r5, r5, r3
 8003bd2:	f04f 0900 	mov.w	r9, #0
 8003bd6:	341a      	adds	r4, #26
 8003bd8:	454d      	cmp	r5, r9
 8003bda:	d11a      	bne.n	8003c12 <_printf_common+0xd6>
 8003bdc:	2000      	movs	r0, #0
 8003bde:	e008      	b.n	8003bf2 <_printf_common+0xb6>
 8003be0:	2301      	movs	r3, #1
 8003be2:	4652      	mov	r2, sl
 8003be4:	4639      	mov	r1, r7
 8003be6:	4630      	mov	r0, r6
 8003be8:	47c0      	blx	r8
 8003bea:	3001      	adds	r0, #1
 8003bec:	d103      	bne.n	8003bf6 <_printf_common+0xba>
 8003bee:	f04f 30ff 	mov.w	r0, #4294967295
 8003bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bf6:	3501      	adds	r5, #1
 8003bf8:	e7c3      	b.n	8003b82 <_printf_common+0x46>
 8003bfa:	18e1      	adds	r1, r4, r3
 8003bfc:	1c5a      	adds	r2, r3, #1
 8003bfe:	2030      	movs	r0, #48	; 0x30
 8003c00:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c04:	4422      	add	r2, r4
 8003c06:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c0a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c0e:	3302      	adds	r3, #2
 8003c10:	e7c5      	b.n	8003b9e <_printf_common+0x62>
 8003c12:	2301      	movs	r3, #1
 8003c14:	4622      	mov	r2, r4
 8003c16:	4639      	mov	r1, r7
 8003c18:	4630      	mov	r0, r6
 8003c1a:	47c0      	blx	r8
 8003c1c:	3001      	adds	r0, #1
 8003c1e:	d0e6      	beq.n	8003bee <_printf_common+0xb2>
 8003c20:	f109 0901 	add.w	r9, r9, #1
 8003c24:	e7d8      	b.n	8003bd8 <_printf_common+0x9c>
	...

08003c28 <_printf_i>:
 8003c28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c2c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003c30:	460c      	mov	r4, r1
 8003c32:	7e09      	ldrb	r1, [r1, #24]
 8003c34:	b085      	sub	sp, #20
 8003c36:	296e      	cmp	r1, #110	; 0x6e
 8003c38:	4617      	mov	r7, r2
 8003c3a:	4606      	mov	r6, r0
 8003c3c:	4698      	mov	r8, r3
 8003c3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003c40:	f000 80b3 	beq.w	8003daa <_printf_i+0x182>
 8003c44:	d822      	bhi.n	8003c8c <_printf_i+0x64>
 8003c46:	2963      	cmp	r1, #99	; 0x63
 8003c48:	d036      	beq.n	8003cb8 <_printf_i+0x90>
 8003c4a:	d80a      	bhi.n	8003c62 <_printf_i+0x3a>
 8003c4c:	2900      	cmp	r1, #0
 8003c4e:	f000 80b9 	beq.w	8003dc4 <_printf_i+0x19c>
 8003c52:	2958      	cmp	r1, #88	; 0x58
 8003c54:	f000 8083 	beq.w	8003d5e <_printf_i+0x136>
 8003c58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c5c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003c60:	e032      	b.n	8003cc8 <_printf_i+0xa0>
 8003c62:	2964      	cmp	r1, #100	; 0x64
 8003c64:	d001      	beq.n	8003c6a <_printf_i+0x42>
 8003c66:	2969      	cmp	r1, #105	; 0x69
 8003c68:	d1f6      	bne.n	8003c58 <_printf_i+0x30>
 8003c6a:	6820      	ldr	r0, [r4, #0]
 8003c6c:	6813      	ldr	r3, [r2, #0]
 8003c6e:	0605      	lsls	r5, r0, #24
 8003c70:	f103 0104 	add.w	r1, r3, #4
 8003c74:	d52a      	bpl.n	8003ccc <_printf_i+0xa4>
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6011      	str	r1, [r2, #0]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	da03      	bge.n	8003c86 <_printf_i+0x5e>
 8003c7e:	222d      	movs	r2, #45	; 0x2d
 8003c80:	425b      	negs	r3, r3
 8003c82:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003c86:	486f      	ldr	r0, [pc, #444]	; (8003e44 <_printf_i+0x21c>)
 8003c88:	220a      	movs	r2, #10
 8003c8a:	e039      	b.n	8003d00 <_printf_i+0xd8>
 8003c8c:	2973      	cmp	r1, #115	; 0x73
 8003c8e:	f000 809d 	beq.w	8003dcc <_printf_i+0x1a4>
 8003c92:	d808      	bhi.n	8003ca6 <_printf_i+0x7e>
 8003c94:	296f      	cmp	r1, #111	; 0x6f
 8003c96:	d020      	beq.n	8003cda <_printf_i+0xb2>
 8003c98:	2970      	cmp	r1, #112	; 0x70
 8003c9a:	d1dd      	bne.n	8003c58 <_printf_i+0x30>
 8003c9c:	6823      	ldr	r3, [r4, #0]
 8003c9e:	f043 0320 	orr.w	r3, r3, #32
 8003ca2:	6023      	str	r3, [r4, #0]
 8003ca4:	e003      	b.n	8003cae <_printf_i+0x86>
 8003ca6:	2975      	cmp	r1, #117	; 0x75
 8003ca8:	d017      	beq.n	8003cda <_printf_i+0xb2>
 8003caa:	2978      	cmp	r1, #120	; 0x78
 8003cac:	d1d4      	bne.n	8003c58 <_printf_i+0x30>
 8003cae:	2378      	movs	r3, #120	; 0x78
 8003cb0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003cb4:	4864      	ldr	r0, [pc, #400]	; (8003e48 <_printf_i+0x220>)
 8003cb6:	e055      	b.n	8003d64 <_printf_i+0x13c>
 8003cb8:	6813      	ldr	r3, [r2, #0]
 8003cba:	1d19      	adds	r1, r3, #4
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	6011      	str	r1, [r2, #0]
 8003cc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003cc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e08c      	b.n	8003de6 <_printf_i+0x1be>
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	6011      	str	r1, [r2, #0]
 8003cd0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003cd4:	bf18      	it	ne
 8003cd6:	b21b      	sxthne	r3, r3
 8003cd8:	e7cf      	b.n	8003c7a <_printf_i+0x52>
 8003cda:	6813      	ldr	r3, [r2, #0]
 8003cdc:	6825      	ldr	r5, [r4, #0]
 8003cde:	1d18      	adds	r0, r3, #4
 8003ce0:	6010      	str	r0, [r2, #0]
 8003ce2:	0628      	lsls	r0, r5, #24
 8003ce4:	d501      	bpl.n	8003cea <_printf_i+0xc2>
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	e002      	b.n	8003cf0 <_printf_i+0xc8>
 8003cea:	0668      	lsls	r0, r5, #25
 8003cec:	d5fb      	bpl.n	8003ce6 <_printf_i+0xbe>
 8003cee:	881b      	ldrh	r3, [r3, #0]
 8003cf0:	4854      	ldr	r0, [pc, #336]	; (8003e44 <_printf_i+0x21c>)
 8003cf2:	296f      	cmp	r1, #111	; 0x6f
 8003cf4:	bf14      	ite	ne
 8003cf6:	220a      	movne	r2, #10
 8003cf8:	2208      	moveq	r2, #8
 8003cfa:	2100      	movs	r1, #0
 8003cfc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d00:	6865      	ldr	r5, [r4, #4]
 8003d02:	60a5      	str	r5, [r4, #8]
 8003d04:	2d00      	cmp	r5, #0
 8003d06:	f2c0 8095 	blt.w	8003e34 <_printf_i+0x20c>
 8003d0a:	6821      	ldr	r1, [r4, #0]
 8003d0c:	f021 0104 	bic.w	r1, r1, #4
 8003d10:	6021      	str	r1, [r4, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d13d      	bne.n	8003d92 <_printf_i+0x16a>
 8003d16:	2d00      	cmp	r5, #0
 8003d18:	f040 808e 	bne.w	8003e38 <_printf_i+0x210>
 8003d1c:	4665      	mov	r5, ip
 8003d1e:	2a08      	cmp	r2, #8
 8003d20:	d10b      	bne.n	8003d3a <_printf_i+0x112>
 8003d22:	6823      	ldr	r3, [r4, #0]
 8003d24:	07db      	lsls	r3, r3, #31
 8003d26:	d508      	bpl.n	8003d3a <_printf_i+0x112>
 8003d28:	6923      	ldr	r3, [r4, #16]
 8003d2a:	6862      	ldr	r2, [r4, #4]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	bfde      	ittt	le
 8003d30:	2330      	movle	r3, #48	; 0x30
 8003d32:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d36:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d3a:	ebac 0305 	sub.w	r3, ip, r5
 8003d3e:	6123      	str	r3, [r4, #16]
 8003d40:	f8cd 8000 	str.w	r8, [sp]
 8003d44:	463b      	mov	r3, r7
 8003d46:	aa03      	add	r2, sp, #12
 8003d48:	4621      	mov	r1, r4
 8003d4a:	4630      	mov	r0, r6
 8003d4c:	f7ff fef6 	bl	8003b3c <_printf_common>
 8003d50:	3001      	adds	r0, #1
 8003d52:	d14d      	bne.n	8003df0 <_printf_i+0x1c8>
 8003d54:	f04f 30ff 	mov.w	r0, #4294967295
 8003d58:	b005      	add	sp, #20
 8003d5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d5e:	4839      	ldr	r0, [pc, #228]	; (8003e44 <_printf_i+0x21c>)
 8003d60:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003d64:	6813      	ldr	r3, [r2, #0]
 8003d66:	6821      	ldr	r1, [r4, #0]
 8003d68:	1d1d      	adds	r5, r3, #4
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	6015      	str	r5, [r2, #0]
 8003d6e:	060a      	lsls	r2, r1, #24
 8003d70:	d50b      	bpl.n	8003d8a <_printf_i+0x162>
 8003d72:	07ca      	lsls	r2, r1, #31
 8003d74:	bf44      	itt	mi
 8003d76:	f041 0120 	orrmi.w	r1, r1, #32
 8003d7a:	6021      	strmi	r1, [r4, #0]
 8003d7c:	b91b      	cbnz	r3, 8003d86 <_printf_i+0x15e>
 8003d7e:	6822      	ldr	r2, [r4, #0]
 8003d80:	f022 0220 	bic.w	r2, r2, #32
 8003d84:	6022      	str	r2, [r4, #0]
 8003d86:	2210      	movs	r2, #16
 8003d88:	e7b7      	b.n	8003cfa <_printf_i+0xd2>
 8003d8a:	064d      	lsls	r5, r1, #25
 8003d8c:	bf48      	it	mi
 8003d8e:	b29b      	uxthmi	r3, r3
 8003d90:	e7ef      	b.n	8003d72 <_printf_i+0x14a>
 8003d92:	4665      	mov	r5, ip
 8003d94:	fbb3 f1f2 	udiv	r1, r3, r2
 8003d98:	fb02 3311 	mls	r3, r2, r1, r3
 8003d9c:	5cc3      	ldrb	r3, [r0, r3]
 8003d9e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003da2:	460b      	mov	r3, r1
 8003da4:	2900      	cmp	r1, #0
 8003da6:	d1f5      	bne.n	8003d94 <_printf_i+0x16c>
 8003da8:	e7b9      	b.n	8003d1e <_printf_i+0xf6>
 8003daa:	6813      	ldr	r3, [r2, #0]
 8003dac:	6825      	ldr	r5, [r4, #0]
 8003dae:	6961      	ldr	r1, [r4, #20]
 8003db0:	1d18      	adds	r0, r3, #4
 8003db2:	6010      	str	r0, [r2, #0]
 8003db4:	0628      	lsls	r0, r5, #24
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	d501      	bpl.n	8003dbe <_printf_i+0x196>
 8003dba:	6019      	str	r1, [r3, #0]
 8003dbc:	e002      	b.n	8003dc4 <_printf_i+0x19c>
 8003dbe:	066a      	lsls	r2, r5, #25
 8003dc0:	d5fb      	bpl.n	8003dba <_printf_i+0x192>
 8003dc2:	8019      	strh	r1, [r3, #0]
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	6123      	str	r3, [r4, #16]
 8003dc8:	4665      	mov	r5, ip
 8003dca:	e7b9      	b.n	8003d40 <_printf_i+0x118>
 8003dcc:	6813      	ldr	r3, [r2, #0]
 8003dce:	1d19      	adds	r1, r3, #4
 8003dd0:	6011      	str	r1, [r2, #0]
 8003dd2:	681d      	ldr	r5, [r3, #0]
 8003dd4:	6862      	ldr	r2, [r4, #4]
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	4628      	mov	r0, r5
 8003dda:	f000 f849 	bl	8003e70 <memchr>
 8003dde:	b108      	cbz	r0, 8003de4 <_printf_i+0x1bc>
 8003de0:	1b40      	subs	r0, r0, r5
 8003de2:	6060      	str	r0, [r4, #4]
 8003de4:	6863      	ldr	r3, [r4, #4]
 8003de6:	6123      	str	r3, [r4, #16]
 8003de8:	2300      	movs	r3, #0
 8003dea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dee:	e7a7      	b.n	8003d40 <_printf_i+0x118>
 8003df0:	6923      	ldr	r3, [r4, #16]
 8003df2:	462a      	mov	r2, r5
 8003df4:	4639      	mov	r1, r7
 8003df6:	4630      	mov	r0, r6
 8003df8:	47c0      	blx	r8
 8003dfa:	3001      	adds	r0, #1
 8003dfc:	d0aa      	beq.n	8003d54 <_printf_i+0x12c>
 8003dfe:	6823      	ldr	r3, [r4, #0]
 8003e00:	079b      	lsls	r3, r3, #30
 8003e02:	d413      	bmi.n	8003e2c <_printf_i+0x204>
 8003e04:	68e0      	ldr	r0, [r4, #12]
 8003e06:	9b03      	ldr	r3, [sp, #12]
 8003e08:	4298      	cmp	r0, r3
 8003e0a:	bfb8      	it	lt
 8003e0c:	4618      	movlt	r0, r3
 8003e0e:	e7a3      	b.n	8003d58 <_printf_i+0x130>
 8003e10:	2301      	movs	r3, #1
 8003e12:	464a      	mov	r2, r9
 8003e14:	4639      	mov	r1, r7
 8003e16:	4630      	mov	r0, r6
 8003e18:	47c0      	blx	r8
 8003e1a:	3001      	adds	r0, #1
 8003e1c:	d09a      	beq.n	8003d54 <_printf_i+0x12c>
 8003e1e:	3501      	adds	r5, #1
 8003e20:	68e3      	ldr	r3, [r4, #12]
 8003e22:	9a03      	ldr	r2, [sp, #12]
 8003e24:	1a9b      	subs	r3, r3, r2
 8003e26:	42ab      	cmp	r3, r5
 8003e28:	dcf2      	bgt.n	8003e10 <_printf_i+0x1e8>
 8003e2a:	e7eb      	b.n	8003e04 <_printf_i+0x1dc>
 8003e2c:	2500      	movs	r5, #0
 8003e2e:	f104 0919 	add.w	r9, r4, #25
 8003e32:	e7f5      	b.n	8003e20 <_printf_i+0x1f8>
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1ac      	bne.n	8003d92 <_printf_i+0x16a>
 8003e38:	7803      	ldrb	r3, [r0, #0]
 8003e3a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e3e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e42:	e76c      	b.n	8003d1e <_printf_i+0xf6>
 8003e44:	0800a42a 	.word	0x0800a42a
 8003e48:	0800a43b 	.word	0x0800a43b

08003e4c <_sbrk_r>:
 8003e4c:	b538      	push	{r3, r4, r5, lr}
 8003e4e:	4c06      	ldr	r4, [pc, #24]	; (8003e68 <_sbrk_r+0x1c>)
 8003e50:	2300      	movs	r3, #0
 8003e52:	4605      	mov	r5, r0
 8003e54:	4608      	mov	r0, r1
 8003e56:	6023      	str	r3, [r4, #0]
 8003e58:	f7fd faa2 	bl	80013a0 <_sbrk>
 8003e5c:	1c43      	adds	r3, r0, #1
 8003e5e:	d102      	bne.n	8003e66 <_sbrk_r+0x1a>
 8003e60:	6823      	ldr	r3, [r4, #0]
 8003e62:	b103      	cbz	r3, 8003e66 <_sbrk_r+0x1a>
 8003e64:	602b      	str	r3, [r5, #0]
 8003e66:	bd38      	pop	{r3, r4, r5, pc}
 8003e68:	2000057c 	.word	0x2000057c
 8003e6c:	00000000 	.word	0x00000000

08003e70 <memchr>:
 8003e70:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8003e74:	2a10      	cmp	r2, #16
 8003e76:	db2b      	blt.n	8003ed0 <memchr+0x60>
 8003e78:	f010 0f07 	tst.w	r0, #7
 8003e7c:	d008      	beq.n	8003e90 <memchr+0x20>
 8003e7e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003e82:	3a01      	subs	r2, #1
 8003e84:	428b      	cmp	r3, r1
 8003e86:	d02d      	beq.n	8003ee4 <memchr+0x74>
 8003e88:	f010 0f07 	tst.w	r0, #7
 8003e8c:	b342      	cbz	r2, 8003ee0 <memchr+0x70>
 8003e8e:	d1f6      	bne.n	8003e7e <memchr+0xe>
 8003e90:	b4f0      	push	{r4, r5, r6, r7}
 8003e92:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8003e96:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8003e9a:	f022 0407 	bic.w	r4, r2, #7
 8003e9e:	f07f 0700 	mvns.w	r7, #0
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8003ea8:	3c08      	subs	r4, #8
 8003eaa:	ea85 0501 	eor.w	r5, r5, r1
 8003eae:	ea86 0601 	eor.w	r6, r6, r1
 8003eb2:	fa85 f547 	uadd8	r5, r5, r7
 8003eb6:	faa3 f587 	sel	r5, r3, r7
 8003eba:	fa86 f647 	uadd8	r6, r6, r7
 8003ebe:	faa5 f687 	sel	r6, r5, r7
 8003ec2:	b98e      	cbnz	r6, 8003ee8 <memchr+0x78>
 8003ec4:	d1ee      	bne.n	8003ea4 <memchr+0x34>
 8003ec6:	bcf0      	pop	{r4, r5, r6, r7}
 8003ec8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8003ecc:	f002 0207 	and.w	r2, r2, #7
 8003ed0:	b132      	cbz	r2, 8003ee0 <memchr+0x70>
 8003ed2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003ed6:	3a01      	subs	r2, #1
 8003ed8:	ea83 0301 	eor.w	r3, r3, r1
 8003edc:	b113      	cbz	r3, 8003ee4 <memchr+0x74>
 8003ede:	d1f8      	bne.n	8003ed2 <memchr+0x62>
 8003ee0:	2000      	movs	r0, #0
 8003ee2:	4770      	bx	lr
 8003ee4:	3801      	subs	r0, #1
 8003ee6:	4770      	bx	lr
 8003ee8:	2d00      	cmp	r5, #0
 8003eea:	bf06      	itte	eq
 8003eec:	4635      	moveq	r5, r6
 8003eee:	3803      	subeq	r0, #3
 8003ef0:	3807      	subne	r0, #7
 8003ef2:	f015 0f01 	tst.w	r5, #1
 8003ef6:	d107      	bne.n	8003f08 <memchr+0x98>
 8003ef8:	3001      	adds	r0, #1
 8003efa:	f415 7f80 	tst.w	r5, #256	; 0x100
 8003efe:	bf02      	ittt	eq
 8003f00:	3001      	addeq	r0, #1
 8003f02:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8003f06:	3001      	addeq	r0, #1
 8003f08:	bcf0      	pop	{r4, r5, r6, r7}
 8003f0a:	3801      	subs	r0, #1
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop

08003f10 <memcpy>:
 8003f10:	b510      	push	{r4, lr}
 8003f12:	1e43      	subs	r3, r0, #1
 8003f14:	440a      	add	r2, r1
 8003f16:	4291      	cmp	r1, r2
 8003f18:	d100      	bne.n	8003f1c <memcpy+0xc>
 8003f1a:	bd10      	pop	{r4, pc}
 8003f1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f24:	e7f7      	b.n	8003f16 <memcpy+0x6>

08003f26 <memmove>:
 8003f26:	4288      	cmp	r0, r1
 8003f28:	b510      	push	{r4, lr}
 8003f2a:	eb01 0302 	add.w	r3, r1, r2
 8003f2e:	d807      	bhi.n	8003f40 <memmove+0x1a>
 8003f30:	1e42      	subs	r2, r0, #1
 8003f32:	4299      	cmp	r1, r3
 8003f34:	d00a      	beq.n	8003f4c <memmove+0x26>
 8003f36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f3a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003f3e:	e7f8      	b.n	8003f32 <memmove+0xc>
 8003f40:	4283      	cmp	r3, r0
 8003f42:	d9f5      	bls.n	8003f30 <memmove+0xa>
 8003f44:	1881      	adds	r1, r0, r2
 8003f46:	1ad2      	subs	r2, r2, r3
 8003f48:	42d3      	cmn	r3, r2
 8003f4a:	d100      	bne.n	8003f4e <memmove+0x28>
 8003f4c:	bd10      	pop	{r4, pc}
 8003f4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f52:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003f56:	e7f7      	b.n	8003f48 <memmove+0x22>

08003f58 <__malloc_lock>:
 8003f58:	4770      	bx	lr

08003f5a <__malloc_unlock>:
 8003f5a:	4770      	bx	lr

08003f5c <_realloc_r>:
 8003f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f5e:	4607      	mov	r7, r0
 8003f60:	4614      	mov	r4, r2
 8003f62:	460e      	mov	r6, r1
 8003f64:	b921      	cbnz	r1, 8003f70 <_realloc_r+0x14>
 8003f66:	4611      	mov	r1, r2
 8003f68:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003f6c:	f7ff bc3c 	b.w	80037e8 <_malloc_r>
 8003f70:	b922      	cbnz	r2, 8003f7c <_realloc_r+0x20>
 8003f72:	f7ff fbeb 	bl	800374c <_free_r>
 8003f76:	4625      	mov	r5, r4
 8003f78:	4628      	mov	r0, r5
 8003f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f7c:	f000 f814 	bl	8003fa8 <_malloc_usable_size_r>
 8003f80:	42a0      	cmp	r0, r4
 8003f82:	d20f      	bcs.n	8003fa4 <_realloc_r+0x48>
 8003f84:	4621      	mov	r1, r4
 8003f86:	4638      	mov	r0, r7
 8003f88:	f7ff fc2e 	bl	80037e8 <_malloc_r>
 8003f8c:	4605      	mov	r5, r0
 8003f8e:	2800      	cmp	r0, #0
 8003f90:	d0f2      	beq.n	8003f78 <_realloc_r+0x1c>
 8003f92:	4631      	mov	r1, r6
 8003f94:	4622      	mov	r2, r4
 8003f96:	f7ff ffbb 	bl	8003f10 <memcpy>
 8003f9a:	4631      	mov	r1, r6
 8003f9c:	4638      	mov	r0, r7
 8003f9e:	f7ff fbd5 	bl	800374c <_free_r>
 8003fa2:	e7e9      	b.n	8003f78 <_realloc_r+0x1c>
 8003fa4:	4635      	mov	r5, r6
 8003fa6:	e7e7      	b.n	8003f78 <_realloc_r+0x1c>

08003fa8 <_malloc_usable_size_r>:
 8003fa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fac:	1f18      	subs	r0, r3, #4
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	bfbc      	itt	lt
 8003fb2:	580b      	ldrlt	r3, [r1, r0]
 8003fb4:	18c0      	addlt	r0, r0, r3
 8003fb6:	4770      	bx	lr

08003fb8 <handlers>:
 8003fb8:	05e1 0800 05e1 0800 05e1 0800 05e1 0800     ................
 8003fc8:	05e1 0800 05e1 0800 05e1 0800 05e1 0800     ................
 8003fd8:	05e1 0800 05e1 0800 05e1 0800 05e1 0800     ................
 8003fe8:	05e1 0800 05e1 0800 05e1 0800 05e9 0800     ................
 8003ff8:	05e1 0800                                   ....

08003ffc <buttonsTestOrder>:
 8003ffc:	0008 0109 020a 030b 040c 070d 0f05 060e     ................
 800400c:	1110 0000                                   ....

08004010 <handlers>:
 8004010:	0641 0800 065d 0800 067d 0800 069d 0800     A...]...}.......
 8004020:	06bd 0800 06dd 0800 06fd 0800 071d 0800     ................
 8004030:	073d 0800 075d 0800 077d 0800 079d 0800     =...]...}.......
 8004040:	07bd 0800 07dd 0800 086d 0800 07fd 0800     ........m.......
 8004050:	081d 0800                                   ....

08004054 <handlers>:
 8004054:	0931 0800 0931 0800 0931 0800 0931 0800     1...1...1...1...
 8004064:	0931 0800 0931 0800 0931 0800 0931 0800     1...1...1...1...
 8004074:	0931 0800 0931 0800 0931 0800 0931 0800     1...1...1...1...
 8004084:	0931 0800 0931 0800 0931 0800 0939 0800     1...1...1...9...
 8004094:	0931 0800                                   1...

08004098 <handlers>:
 8004098:	09a1 0800 09a1 0800 09a1 0800 09a1 0800     ................
 80040a8:	09a1 0800 09a1 0800 09a1 0800 09a1 0800     ................
 80040b8:	09a1 0800 09a1 0800 09a1 0800 09a1 0800     ................
 80040c8:	09a1 0800 09a1 0800 09a9 0800 09a1 0800     ................
 80040d8:	09a1 0800 0105 0000                         ........

080040e0 <tetrominos>:
 80040e0:	0001 0101 0201 0301 0200 0201 0202 0203     ................
 80040f0:	0003 0103 0203 0303 0100 0101 0102 0103     ................
 8004100:	0000 0001 0101 0201 0100 0200 0101 0102     ................
 8004110:	0001 0101 0201 0202 0100 0101 0002 0102     ................
 8004120:	0200 0001 0101 0201 0100 0101 0102 0202     ................
 8004130:	0001 0101 0201 0002 0000 0100 0101 0102     ................
 8004140:	0100 0200 0101 0201 0100 0200 0101 0201     ................
 8004150:	0100 0200 0101 0201 0100 0200 0101 0201     ................
 8004160:	0100 0200 0001 0101 0100 0101 0201 0202     ................
 8004170:	0101 0201 0002 0102 0000 0001 0101 0102     ................
 8004180:	0100 0001 0101 0201 0100 0101 0201 0102     ................
 8004190:	0001 0101 0201 0102 0100 0001 0101 0102     ................
 80041a0:	0000 0100 0101 0201 0200 0101 0201 0102     ................
 80041b0:	0001 0101 0102 0202 0100 0001 0101 0002     ................

080041c0 <handlers>:
 80041c0:	114d 0800 114d 0800 114d 0800 114d 0800     M...M...M...M...
 80041d0:	1129 0800 114d 0800 114d 0800 114d 0800     )...M...M...M...
 80041e0:	114d 0800 114d 0800 114d 0800 114d 0800     M...M...M...M...
 80041f0:	1109 0800 114d 0800 1155 0800 114d 0800     ....M...U...M...
 8004200:	10f9 0800                                   ....

08004204 <manualTestsHandlers>:
 8004204:	09c1 0800 08a1 0800 1369 0800 0951 0800     ........i...Q...
 8004214:	1219 0800 12d1 0800 0609 0800 6f44 726f     ............Door
 8004224:	7420 7365 0074 0000 654b 6279 616f 6472      test...Keyboard
 8004234:	7420 7365 0074 0000 6554 7274 7369 0000      test...Tetris..
 8004244:	6944 7073 616c 2079 6574 7473 0000 0000     Display test....
 8004254:	6f4d 6f74 2072 6574 7473 0000 6f53 6e75     Motor test..Soun
 8004264:	2064 6574 7473 0000 6c41 7261 206d 6574     d test..Alarm te
 8004274:	7473 0000                                   st..

08004278 <handlers>:
 8004278:	11d9 0800 11d9 0800 11d9 0800 11d9 0800     ................
 8004288:	120b 0800 11d9 0800 11d9 0800 11d9 0800     ................
 8004298:	11d9 0800 11d9 0800 11d9 0800 11d9 0800     ................
 80042a8:	11fd 0800 11d9 0800 11d9 0800 11e1 0800     ................
 80042b8:	11d9 0800                                   ....

080042bc <handlers>:
 80042bc:	12ad 0800 12ad 0800 12ad 0800 12ad 0800     ................
 80042cc:	12ad 0800 12ad 0800 12ad 0800 12ad 0800     ................
 80042dc:	12ad 0800 12ad 0800 12ad 0800 12ad 0800     ................
 80042ec:	12ad 0800 12ad 0800 12ad 0800 12b5 0800     ................
 80042fc:	12ad 0800                                   ....

08004300 <handlers>:
 8004300:	1309 0800 1309 0800 1309 0800 1309 0800     ................
 8004310:	1309 0800 1309 0800 1361 0800 1309 0800     ........a.......
 8004320:	1309 0800 1309 0800 1309 0800 1359 0800     ............Y...
 8004330:	1351 0800 1349 0800 1325 0800 1331 0800     Q...I...%...1...
 8004340:	1309 0800 7453 6361 206b 7266 6d61 3a65     ....Stack frame:
 8004350:	000a 0000 5220 2030 203d 2520 3830 0a58     .... R0 =  %08X.
 8004360:	0000 0000 5220 2031 203d 2520 3830 0a58     .... R1 =  %08X.
 8004370:	0000 0000 5220 2032 203d 2520 3830 0a58     .... R2 =  %08X.
 8004380:	0000 0000 5220 2033 203d 2520 3830 0a58     .... R3 =  %08X.
 8004390:	0000 0000 5220 3231 3d20 2520 3830 0a58     .... R12 = %08X.
 80043a0:	0000 0000 4c20 2052 203d 2520 3830 0a58     .... LR =  %08X.
 80043b0:	0000 0000 5020 2043 203d 2520 3830 0a58     .... PC =  %08X.
 80043c0:	0000 0000 5020 5253 3d20 2520 3830 0a58     .... PSR = %08X.
 80043d0:	0000 0000 5346 2f52 4146 3a52 000a 0000     ....FSR/FAR:....
 80043e0:	4320 5346 2052 203d 2520 3830 0a58 0000      CFSR =  %08X...
 80043f0:	4820 5346 2052 203d 2520 3830 0a58 0000      HFSR =  %08X...
 8004400:	4420 5346 2052 203d 2520 3830 0a58 0000      DFSR =  %08X...
 8004410:	4120 5346 2052 203d 2520 3830 0a58 0000      AFSR =  %08X...
 8004420:	4d20 464d 5241 3d20 2520 3830 0a58 0000      MMFAR = %08X...
 8004430:	4220 4146 2052 203d 2520 3830 0a58 0000      BFAR =  %08X...
 8004440:	694d 6373 000a 0000 4c20 2f52 5845 5f43     Misc.... LR/EXC_
 8004450:	4552 5554 4e52 203d 3025 5838 000a 0000     RETURN= %08X....
 8004460:	485b 7261 4664 7561 746c 0a5d 0000 0000     [HardFault].....
 8004470:	425b 7375 6146 6c75 5d74 000a 555b 6173     [BusFault]..[Usa
 8004480:	6567 6146 6c75 5d74 000a 0000               geFault]....

0800448c <AHBPrescTable>:
	...
 8004494:	0201 0403 0706 0908                         ........

0800449c <MSIRangeTable>:
 800449c:	86a0 0001 0d40 0003 1a80 0006 3500 000c     ....@........5..
 80044ac:	4240 000f 8480 001e 0900 003d 1200 007a     @B........=...z.
 80044bc:	2400 00f4 3600 016e 4800 01e8 6c00 02dc     .$...6n..H...l..

080044cc <DisplayInitSequence>:
 80044cc:	1100 3a00 0501 3600 0001 b200 0001 0001     ...:...6........
 80044dc:	0001 3301 3301 b700 3501 b800 2f01 2b01     ...3.3...5.../.+
 80044ec:	2f01 bb00 2401 c000 2c01 c300 0b01 c400     ./...$...,......
 80044fc:	2001 c600 1101 d000 a401 a101 e800 0301     . ..............
 800450c:	e900 0d01 1201 0001 e000 d001 0001 0001     ................
 800451c:	0801 1101 1a01 2b01 3301 4201 2601 1201     .......+.3.B.&..
 800452c:	2101 2f01 1101 e100 d001 0201 0901 0d01     .!./............
 800453c:	0d01 2701 2b01 3301 4201 1701 1201 1101     ...'.+.3.B......
 800454c:	2f01 3101 2100 2a00 0001 0001 0001 ef01     ./.1.!.*........
 800455c:	2b00 0001 0001 0101 3f01 2900 2020 4120     .+.......?.)   A
 800456c:	7275 6769 0061 0000 6953 546d 6365 0068     uriga...SimTech.
 800457c:	4d54 0000 4120 4d52 4320 726f 6574 2d78     TM.. ARM Cortex-
 800458c:	344d 6920 736e 6469 0065 0000 6f53 7466     M4 inside...Soft
 800459c:	6177 6572 5620 7265 6973 6e6f 203a 0000     ware Version: ..
 80045ac:	5453 334d 4c32 7834 2078 6544 6f6d 6620     STM32L4xx Demo f
 80045bc:	7269 776d 7261 0065 694c 7262 7261 0079     irmware.Library.
 80045cc:	2d2d 2d2d 2d2d 2d2d 2d2d 002d 6553 6972     -----------.Seri
 80045dc:	6c61 4e20 6d75 6562 3a72 0020 2054 2020     al Number: .T   
 80045ec:	2020 2031 2020 0020 7250 646f 6375 6974       1    .Producti
 80045fc:	6e6f 4420 7461 3a65 0020 0000 3432 4a2d     on Date: ...24-J
 800460c:	6e61 322d 3230 0030 6554 6863 696e 6963     an-2020.Technici
 800461c:	6e61 6f20 7470 6f69 736e 203a 0000 0000     an options: ....
 800462c:	6553 656c 7463 0020 202c 0000 6120 646e     Select ., .. and
 800463c:	7020 6572 7373 0020 654b 7079 6461 5420      press .Keypad T
 800464c:	7365 2074 0000 0000 4b20 7965 0000 0000     est .... Key....
 800465c:	6554 7473 4f20 214b 5020 6572 7373 0020     Test OK! Press .
 800466c:	7420 206f 6f63 746e 6e69 6575 002e 0000      to continue....
 800467c:	6f53 6e75 2064 6c61 7261 206d 6574 7473     Sound alarm test
 800468c:	0000 0000 7543 7272 6e65 2074 6f73 6e75     ....Current soun
 800469c:	2064 656c 6576 3a6c 0020 0000 6f44 726f     d level: ...Door
 80046ac:	5320 6e65 6f73 2072 6554 7473 0020 0000      Sensor Test ...
 80046bc:	704f 6e65 0000 0000 6c43 736f 0065 0000     Open....Close...
 80046cc:	7250 7365 2073 0000 4b20 7965 7420 206f     Press .. Key to 
 80046dc:	6f43 746e 6e69 6575 0000 0000 6f4d 6f74     Continue....Moto
 80046ec:	2072 6f72 6174 6974 6e6f 7420 7365 0074     r rotation test.
 80046fc:	6c50 6165 6573 6320 6568 6b63 6d20 746f     Please check mot
 800470c:	726f 7220 746f 7461 6f69 006e 7420 206f     or rotation. to 
 800471c:	6e69 7263 6165 6573 6120 646e 0020 0000     increase and ...
 800472c:	6f74 6420 6365 6572 7361 2065 6874 2065     to decrease the 
 800473c:	6f6d 6f74 2072 7073 6565 0064 7420 206f     motor speed. to 
 800474c:	7865 7469 0000 0000 6948 6867 7020 6972     exit....High pri
 800475c:	726f 7469 2079 6c61 7261 006d 2d20 4c20     ority alarm. - L
 800476c:	6665 0074 2d20 5220 6769 7468 0000 0000     eft. - Right....
 800477c:	2d20 5220 746f 7461 0065 0000 2d20 4420      - Rotate... - D
 800478c:	776f 006e 2d20 4e20 7765 0000 6353 726f     own. - New..Scor
 800479c:	7365 0000 6147 656d 0000 0000 764f 7265     es..Game....Over
 80047ac:	0000 0000 654e 7478 003a 0000               ....Next:...

080047b8 <FontKey_0>:
	...
 80047c0:	0000 1c00 0000 007e e601 0700 0086 0c1f     ......~.........
 80047d0:	3c00 000c 0cf0 c003 0f18 1800 3e3c 7818     .<..........<>.x
 80047e0:	3041 4960 7830 3041 3e3c 0f18 1800 c003     A0`I0xA0<>......
 80047f0:	0018 0cf0 3c00 000c 0c1f 0700 0086 e601     .....<..........
 8004800:	0000 007e 1c00 0000 0000 0000 0000 0000     ..~.............

08004810 <FontKey_1>:
	...
 8004838:	0042 7f00 0000 0040 0000 0000 0000 0000     B.....@.........
	...

08004868 <FontKey_2>:
	...
 800488c:	4200 0000 0061 5100 0000 0049 4600 0000     .B..a..Q..I..F..
	...

080048c0 <FontKey_3>:
	...
 80048e4:	2100 0000 0041 4500 0000 004b 3100 0000     .!..A..E..K..1..
	...

08004918 <FontKey_4>:
	...
 8004920:	0000 001c 3e00 0000 0036 7700 0000 0063     .....>..6..w..c.
 8004930:	c100 0080 80c1 8001 01c0 c080 1803 0760     ..............`.
 8004940:	7014 1206 0e30 387f 100c 1c18 1c00 0018     .p..0..8........
 8004950:	300c 0600 1c30 6006 83ff e367 7ff3 7f00     .0..0..`..g.....
 8004960:	0038 000e 0000 0000 0000 0000 0000 0000     8...............

08004970 <FontKey_5>:
	...
 8004978:	3800 0000 007e 6700 0080 e061 3000 00f8     .8..~..g..a..0..
 8004988:	3c30 3000 000f 0318 18c0 f000 2718 0c3c     0<.0.........'<.
 8004998:	1e45 450c 0c06 1e45 3918 183c f000 0318     E..E..E..9<.....
 80049a8:	30c0 000f 3c30 3000 00f8 e061 6700 0080     .0..0<.0..a..g..
 80049b8:	007e 3800 0000 0000 0000 0000 0000 0000     ~..8............

080049c8 <FontKey_6>:
	...
 80049ec:	3c00 0000 004a 4900 0000 0049 3000 0000     .<..J..I..I..0..
	...

08004a20 <FontKey_7>:
	...
 8004a44:	0100 0000 0071 0900 0000 0005 0300 0000     ....q...........
	...

08004a78 <FontKey_8>:
	...
 8004a9c:	3600 0000 0049 4900 0000 0049 3600 0000     .6..I..I..I..6..
	...

08004ad0 <FontKey_9>:
	...
 8004af4:	0600 0000 0049 4900 0000 0029 1e00 0000     ....I..I..).....
	...

08004b28 <FontKey_EndCap>:
 8004b28:	ff7f 1ffe f8ff 0000                         ........

08004b30 <FontKey_I>:
 8004b30:	0000 0000 0000 ff03 07c0 e0ff 000e 0c70     ..............p.
 8004b40:	3000 0018 1818 1800 0030 330c ccfe fe33     .0......0..3..3.
 8004b50:	30cc 0c00 0030 300c 0c18 1830 300c 0c18     .0..0..0..0..0..
 8004b60:	1830 310c 8cff ff31 308c 0c18 1830 180c     0..1..1..0..0...
 8004b70:	1818 1818 0c18 3000 000e 0770 e0ff ff03     .......0..p.....
 8004b80:	00c0 0000 0000 0000                         ........

08004b88 <FontKey_Lock>:
	...
 8004b9c:	0f00 00f8 f80f 0f00 00fe ff0f 0f80 c0f9     ................
 8004bac:	f80f 0f60 60f8 f80f 0f60 60f8 f90f 0fc0     ..`..`..`..`....
 8004bbc:	80ff fe0f 0f00 00f8 f80f 0000 0000 0000     ................
	...

08004be0 <FontKey_No>:
	...
 8004bf4:	0300 c0ff ff07 07e0 e0ff ff07 07e0 e0ff     ................
 8004c04:	ff07 07e0 e0ff ff07 07e0 e0ff ff07 07e0     ................
 8004c14:	e0ff ff07 07e0 e0ff ff07 03e0 c0ff 0000     ................
	...

08004c38 <FontKey_Ok>:
	...
 8004c4c:	0f00 e0ff ff07 07c0 c0ff ff03 0380 80ff     ................
 8004c5c:	ff01 0100 00ff fe00 0000 00fe 7c00 0000     .............|..
 8004c6c:	007c 3800 0000 0038 1000 0000 0000 0000     |..8..8.........
	...

08004c90 <FontKey_On>:
	...
 8004c9c:	7e00 0100 80ff 8103 06c0 6000 000c 1830     .~.........`..0.
 8004cac:	0000 0018 3000 0000 0030 3000 fe03 0330     .....0..0..0..0.
 8004cbc:	30fe 0000 0030 1800 0000 0018 0c00 3000     .0..0..........0
 8004ccc:	0006 0360 c081 ff01 0080 007e 0000 0000     ..`.......~.....
	...

08004ce8 <FontKey_Point>:
	...
 8004cf0:	3800 0e00 007f 677f f3e3 ff60 3083 061c     .8.....g..`..0..
 8004d00:	0030 1806 0c00 001c 0c1c 1860 6006 0630     0.........`..`0.
 8004d10:	3000 0003 0360 6000 0003 0160 c080 8001     .0..`..`..`.....
 8004d20:	00c0 80c1 c100 0080 0063 7700 0000 0036     ........c..w..6.
 8004d30:	3e00 0000 001c 0000 0000 0000 0000 0000     .>..............

08004d40 <FontKey_Prime>:
 8004d40:	0000 0f00 e0ff ff07 03c0 80ff ff01 0000     ................
 8004d50:	00fe 7c00 0000 0038 1000 0000 0000 ff0f     ...|..8.........
 8004d60:	07e0 c0ff ff03 0180 00ff fe00 0000 007c     ..............|.
 8004d70:	3800 0000 0010 0000 0f00 e0ff ff07 03c0     .8..............
 8004d80:	80ff ff01 0000 00fe 7c00 0000 0038 1000     .........|..8...
	...

08004d98 <FontKey_StartCap>:
 8004d98:	ff1f 7ff8 feff 0000                         ........

08004da0 <font16>:
 8004da0:	1010 0000 5d68 0800 5d80 0800 5d98 0800     ....h]...]...]..
 8004db0:	5db0 0800 5dc8 0800 5de0 0800 5df8 0800     .]...]...]...]..
 8004dc0:	5e10 0800 5e28 0800 5e40 0800 5e58 0800     .^..(^..@^..X^..
 8004dd0:	5e70 0800 5e88 0800 5ea0 0800 5eb8 0800     p^...^...^...^..
 8004de0:	5ed0 0800 5ee8 0800 5f00 0800 5f18 0800     .^...^..._..._..
 8004df0:	5f30 0800 5f48 0800 5f60 0800 5f78 0800     0_..H_..`_..x_..
 8004e00:	5f90 0800 5fa8 0800 5fc0 0800 5fd8 0800     ._..._..._..._..
 8004e10:	5ff0 0800 6008 0800 6020 0800 6038 0800     ._...`.. `..8`..
 8004e20:	6050 0800 6068 0800 6080 0800 6098 0800     P`..h`...`...`..
 8004e30:	60b0 0800 60c8 0800 60e0 0800 60f8 0800     .`...`...`...`..
 8004e40:	6110 0800 6128 0800 6140 0800 6158 0800     .a..(a..@a..Xa..
 8004e50:	6170 0800 6188 0800 61a0 0800 61b8 0800     pa...a...a...a..
 8004e60:	61d0 0800 61e8 0800 6200 0800 6218 0800     .a...a...b...b..
 8004e70:	6230 0800 6248 0800 6260 0800 6278 0800     0b..Hb..`b..xb..
 8004e80:	6290 0800 62a8 0800 62c0 0800 62d8 0800     .b...b...b...b..
 8004e90:	62f0 0800 6308 0800 6320 0800 6338 0800     .b...c.. c..8c..
 8004ea0:	6350 0800 6368 0800 6380 0800 6398 0800     Pc..hc...c...c..
 8004eb0:	63b0 0800 63c8 0800 63e0 0800 63f8 0800     .c...c...c...c..
 8004ec0:	6410 0800 6428 0800 6440 0800 6458 0800     .d..(d..@d..Xd..
 8004ed0:	6470 0800 6488 0800 64a0 0800 64b8 0800     pd...d...d...d..
 8004ee0:	64d0 0800 64e8 0800 6500 0800 6518 0800     .d...d...e...e..
 8004ef0:	6530 0800 6548 0800 6560 0800 6578 0800     0e..He..`e..xe..
 8004f00:	6590 0800 65a8 0800 65c0 0800 65d8 0800     .e...e...e...e..
 8004f10:	65f0 0800 6608 0800 6620 0800 6638 0800     .e...f.. f..8f..
 8004f20:	6638 0800 6638 0800 6638 0800 6638 0800     8f..8f..8f..8f..
 8004f30:	6638 0800 6638 0800 6638 0800 6638 0800     8f..8f..8f..8f..
 8004f40:	6638 0800 6638 0800 6638 0800 6638 0800     8f..8f..8f..8f..
 8004f50:	6638 0800 6638 0800 6638 0800 6638 0800     8f..8f..8f..8f..
 8004f60:	6638 0800 6638 0800 6638 0800 6638 0800     8f..8f..8f..8f..
 8004f70:	6650 0800 6650 0800 6650 0800 6650 0800     Pf..Pf..Pf..Pf..
 8004f80:	6650 0800 6650 0800 6650 0800 6650 0800     Pf..Pf..Pf..Pf..
 8004f90:	6650 0800 6650 0800 6650 0800 6650 0800     Pf..Pf..Pf..Pf..
 8004fa0:	6650 0800 6650 0800 6650 0800 6650 0800     Pf..Pf..Pf..Pf..
 8004fb0:	6650 0800 6650 0800 6650 0800 6650 0800     Pf..Pf..Pf..Pf..
 8004fc0:	6650 0800 6650 0800 6650 0800 6650 0800     Pf..Pf..Pf..Pf..
 8004fd0:	6650 0800 6650 0800 6650 0800 6650 0800     Pf..Pf..Pf..Pf..
 8004fe0:	6650 0800 6668 0800 6668 0800 6668 0800     Pf..hf..hf..hf..
 8004ff0:	6668 0800 6668 0800 6668 0800 6668 0800     hf..hf..hf..hf..
 8005000:	6668 0800 6668 0800 6668 0800 6668 0800     hf..hf..hf..hf..
 8005010:	6668 0800 6668 0800 6668 0800 6668 0800     hf..hf..hf..hf..
 8005020:	6680 0800 6680 0800 6698 0800 6698 0800     .f...f...f...f..
 8005030:	6698 0800 66b0 0800 66c8 0800 66c8 0800     .f...f...f...f..
 8005040:	66c8 0800 66c8 0800 66c8 0800 66c8 0800     .f...f...f...f..
 8005050:	66c8 0800 66c8 0800 66c8 0800 66c8 0800     .f...f...f...f..
 8005060:	66c8 0800 66c8 0800 66c8 0800 66c8 0800     .f...f...f...f..
 8005070:	66c8 0800 66c8 0800 66c8 0800 66c8 0800     .f...f...f...f..
 8005080:	66c8 0800 66c8 0800 66c8 0800 66c8 0800     .f...f...f...f..
 8005090:	66c8 0800 66c8 0800 66c8 0800 66c8 0800     .f...f...f...f..
 80050a0:	66c8 0800 66e0 0800 66f8 0800 66f8 0800     .f...f...f...f..
 80050b0:	66f8 0800 6710 0800 6710 0800 6710 0800     .f...g...g...g..
 80050c0:	6710 0800 6710 0800 6728 0800 6728 0800     .g...g..(g..(g..
 80050d0:	6728 0800 6728 0800 6740 0800 6740 0800     (g..(g..@g..@g..
 80050e0:	6740 0800 6740 0800 6740 0800 6758 0800     @g..@g..@g..Xg..
 80050f0:	6758 0800 6770 0800 6770 0800 6770 0800     Xg..pg..pg..pg..
 8005100:	6788 0800 6788 0800 6788 0800 67a0 0800     .g...g...g...g..
 8005110:	67b8 0800 67b8 0800 67d0 0800 67d0 0800     .g...g...g...g..
 8005120:	67d0 0800                                   .g..

08005124 <font24>:
 8005124:	0818 0000 67ec 0800 6808 0800 6828 0800     .....g...h..(h..
 8005134:	6854 0800 6880 0800 68c4 0800 68fc 0800     Th...h...h...h..
 8005144:	6910 0800 6930 0800 6950 0800 6974 0800     .i..0i..Pi..ti..
 8005154:	69a0 0800 69bc 0800 69dc 0800 69f8 0800     .i...i...i...i..
 8005164:	6a14 0800 6a40 0800 6a6c 0800 6a98 0800     .j..@j..lj...j..
 8005174:	6ac4 0800 6af0 0800 6b1c 0800 6b48 0800     .j...j...k..Hk..
 8005184:	6b74 0800 6ba0 0800 6bcc 0800 6be8 0800     tk...k...k...k..
 8005194:	6c04 0800 6c34 0800 6c64 0800 6c94 0800     .l..4l..dl...l..
 80051a4:	6cc0 0800 6d0c 0800 6d40 0800 6d74 0800     .l...m..@m..tm..
 80051b4:	6dac 0800 6de4 0800 6e1c 0800 6e50 0800     .m...m...n..Pn..
 80051c4:	6e8c 0800 6ec0 0800 6edc 0800 6f04 0800     .n...n...n...o..
 80051d4:	6f3c 0800 6f68 0800 6fa8 0800 6fe0 0800     <o..ho...o...o..
 80051e4:	701c 0800 7050 0800 708c 0800 70c4 0800     .p..Pp...p...p..
 80051f4:	70f8 0800 712c 0800 7160 0800 7198 0800     .p..,q..`q...q..
 8005204:	71e4 0800 7218 0800 724c 0800 727c 0800     .q...r..Lr..|r..
 8005214:	7298 0800 72b4 0800 734c 0800 73e4 0800     .r...r..Ls...s..
 8005224:	7410 0800 742c 0800 7458 0800 7484 0800     .t..,t..Xt...t..
 8005234:	74b0 0800 74dc 0800 7508 0800 7528 0800     .t...t...u..(u..
 8005244:	7554 0800 7580 0800 7598 0800 75b0 0800     Tu...u...u...u..
 8005254:	75d8 0800 75ec 0800 762c 0800 7658 0800     .u...u..,v..Xv..
 8005264:	7684 0800 76b0 0800 76dc 0800 76fc 0800     .v...v...v...v..
 8005274:	7728 0800 7748 0800 7774 0800 77a0 0800     (w..Hw..tw...w..
 8005284:	77d8 0800 7804 0800 7830 0800 785c 0800     .w...x..0x..\x..
 8005294:	7888 0800 78a4 0800 78d0 0800 78e8 0800     .x...x...x...x..
 80052a4:	78e8 0800 78e8 0800 78e8 0800 78e8 0800     .x...x...x...x..
 80052b4:	78e8 0800 78e8 0800 78e8 0800 78e8 0800     .x...x...x...x..
 80052c4:	78e8 0800 78e8 0800 78e8 0800 78e8 0800     .x...x...x...x..
 80052d4:	78e8 0800 78e8 0800 78e8 0800 78e8 0800     .x...x...x...x..
 80052e4:	78e8 0800 78e8 0800 78e8 0800 78e8 0800     .x...x...x...x..
 80052f4:	7908 0800 7908 0800 7908 0800 7908 0800     .y...y...y...y..
 8005304:	7908 0800 7908 0800 7908 0800 7908 0800     .y...y...y...y..
 8005314:	7908 0800 7908 0800 7908 0800 7908 0800     .y...y...y...y..
 8005324:	7908 0800 7908 0800 7908 0800 7908 0800     .y...y...y...y..
 8005334:	7908 0800 7908 0800 7908 0800 7908 0800     .y...y...y...y..
 8005344:	7908 0800 7908 0800 7908 0800 7908 0800     .y...y...y...y..
 8005354:	7908 0800 7908 0800 7908 0800 7908 0800     .y...y...y...y..
 8005364:	7908 0800 7908 0800 7934 0800 7934 0800     .y...y..4y..4y..
 8005374:	7934 0800 7934 0800 7934 0800 7934 0800     4y..4y..4y..4y..
 8005384:	7934 0800 7934 0800 7934 0800 7934 0800     4y..4y..4y..4y..
 8005394:	7934 0800 7934 0800 7934 0800 7934 0800     4y..4y..4y..4y..
 80053a4:	7934 0800 7968 0800 7968 0800 799c 0800     4y..hy..hy...y..
 80053b4:	799c 0800 799c 0800 79d0 0800 79fc 0800     .y...y...y...y..
 80053c4:	79fc 0800 79fc 0800 79fc 0800 79fc 0800     .y...y...y...y..
 80053d4:	79fc 0800 79fc 0800 79fc 0800 79fc 0800     .y...y...y...y..
 80053e4:	79fc 0800 79fc 0800 79fc 0800 79fc 0800     .y...y...y...y..
 80053f4:	79fc 0800 79fc 0800 79fc 0800 79fc 0800     .y...y...y...y..
 8005404:	79fc 0800 79fc 0800 79fc 0800 79fc 0800     .y...y...y...y..
 8005414:	79fc 0800 79fc 0800 79fc 0800 79fc 0800     .y...y...y...y..
 8005424:	79fc 0800 79fc 0800 7a28 0800 7a54 0800     .y...y..(z..Tz..
 8005434:	7a54 0800 7a54 0800 7a80 0800 7aac 0800     Tz..Tz...z...z..
 8005444:	7aac 0800 7aac 0800 7aac 0800 7ac8 0800     .z...z...z...z..
 8005454:	7ac8 0800 7ac8 0800 7ac8 0800 7af4 0800     .z...z...z...z..
 8005464:	7af4 0800 7af4 0800 7af4 0800 7b20 0800     .z...z...z.. {..
 8005474:	7b20 0800 7b4c 0800 7b4c 0800 7b4c 0800      {..L{..L{..L{..
 8005484:	7b78 0800 7b78 0800 7b78 0800 7ba4 0800     x{..x{..x{...{..
 8005494:	7bd0 0800 7bd0 0800 7bec 0800 7bec 0800     .{...{...{...{..
 80054a4:	7bec 0800                                   .{..

080054a8 <font32>:
 80054a8:	2020 0000 7c10 0800 7c38 0800 7c68 0800       ...|..8|..h|..
 80054b8:	7cb8 0800 7d08 0800 7d78 0800 7dd0 0800     .|...}..x}...}..
 80054c8:	7df8 0800 7e30 0800 7e64 0800 7ea4 0800     .}..0~..d~...~..
 80054d8:	7ef4 0800 7f1c 0800 7f4c 0800 7f74 0800     .~......L...t...
 80054e8:	7fa0 0800 7fec 0800 8034 0800 8080 0800     ........4.......
 80054f8:	80cc 0800 8114 0800 815c 0800 81a4 0800     ........\.......
 8005508:	81ec 0800 8238 0800 8280 0800 82a8 0800     ....8...........
 8005518:	82d0 0800 8320 0800 8370 0800 83c0 0800     .... ...p.......
 8005528:	8408 0800 848c 0800 84e8 0800 853c 0800     ............<...
 8005538:	8598 0800 85f4 0800 8648 0800 8698 0800     ........H.......
 8005548:	86f8 0800 8750 0800 8774 0800 87b4 0800     ....P...t.......
 8005558:	8810 0800 885c 0800 88c0 0800 8918 0800     ....\...........
 8005568:	897c 0800 89d0 0800 8a34 0800 8a94 0800     |.......4.......
 8005578:	8ae8 0800 8b3c 0800 8b94 0800 8bf0 0800     ....<...........
 8005588:	8c6c 0800 8cc4 0800 8d20 0800 8d74 0800     l....... ...t...
 8005598:	8df4 0800 8e1c 0800 8eb8 0800 8f6c 0800     ............l...
 80055a8:	8fb8 0800 9000 0800 9000 0800 9044 0800     ............D...
 80055b8:	908c 0800 90d8 0800 9120 0800 9154 0800     ........ ...T...
 80055c8:	919c 0800 91dc 0800 9200 0800 9224 0800     ............$...
 80055d8:	9268 0800 928c 0800 92f0 0800 9330 0800     h...........0...
 80055e8:	9378 0800 93bc 0800 9404 0800 9434 0800     x...........4...
 80055f8:	9478 0800 94a8 0800 94f0 0800 953c 0800     x...........<...
 8005608:	95a0 0800 95e4 0800 962c 0800 9670 0800     ........,...p...
 8005618:	96c4 0800 96ec 0800 9740 0800 9764 0800     ........@...d...
 8005628:	9764 0800 9764 0800 9764 0800 9764 0800     d...d...d...d...
 8005638:	9764 0800 9764 0800 9764 0800 9764 0800     d...d...d...d...
 8005648:	9764 0800 9764 0800 9764 0800 9764 0800     d...d...d...d...
 8005658:	9764 0800 9764 0800 9764 0800 9764 0800     d...d...d...d...
 8005668:	9764 0800 9764 0800 9764 0800 9764 0800     d...d...d...d...
 8005678:	9798 0800 9798 0800 9798 0800 9798 0800     ................
 8005688:	9798 0800 9798 0800 9798 0800 9798 0800     ................
 8005698:	9798 0800 9798 0800 9798 0800 9798 0800     ................
 80056a8:	9798 0800 9798 0800 9798 0800 9798 0800     ................
 80056b8:	9798 0800 9798 0800 9798 0800 9798 0800     ................
 80056c8:	9798 0800 9798 0800 9798 0800 9798 0800     ................
 80056d8:	9798 0800 9798 0800 9798 0800 9798 0800     ................
 80056e8:	9798 0800 9798 0800 97e0 0800 97e0 0800     ................
 80056f8:	97e0 0800 97e0 0800 97e0 0800 97e0 0800     ................
 8005708:	97e0 0800 97e0 0800 97e0 0800 97e0 0800     ................
 8005718:	97e0 0800 97e0 0800 97e0 0800 97e0 0800     ................
 8005728:	97e0 0800 983c 0800 983c 0800 983c 0800     ....<...<...<...
 8005738:	983c 0800 983c 0800 9898 0800 98e0 0800     <...<...........
 8005748:	98e0 0800 98e0 0800 98e0 0800 98e0 0800     ................
 8005758:	98e0 0800 98e0 0800 98e0 0800 98e0 0800     ................
 8005768:	98e0 0800 98e0 0800 98e0 0800 98e0 0800     ................
 8005778:	98e0 0800 98e0 0800 98e0 0800 98e0 0800     ................
 8005788:	98e0 0800 98e0 0800 98e0 0800 98e0 0800     ................
 8005798:	98e0 0800 98e0 0800 98e0 0800 98e0 0800     ................
 80057a8:	98e0 0800 98e0 0800 9928 0800 9970 0800     ........(...p...
 80057b8:	9970 0800 9970 0800 99b8 0800 9a00 0800     p...p...........
 80057c8:	9a00 0800 9a00 0800 9a00 0800 9a28 0800     ............(...
 80057d8:	9a28 0800 9a28 0800 9a28 0800 9a70 0800     (...(...(...p...
 80057e8:	9a70 0800 9a70 0800 9a70 0800 9abc 0800     p...p...p.......
 80057f8:	9abc 0800 9b04 0800 9b04 0800 9b04 0800     ................
 8005808:	9b4c 0800 9b4c 0800 9b4c 0800 9b94 0800     L...L...L.......
 8005818:	9bdc 0800 9bdc 0800 9c00 0800 9c00 0800     ................
 8005828:	9c00 0800                                   ....

0800582c <font8>:
 800582c:	0808 0000 9c0c 0800 9c1c 0800 9c2c 0800     ............,...
 800583c:	9c3c 0800 9c4c 0800 9c5c 0800 9c6c 0800     <...L...\...l...
 800584c:	9c7c 0800 9c8c 0800 9c9c 0800 9cac 0800     |...............
 800585c:	9cbc 0800 9ccc 0800 9cdc 0800 9cec 0800     ................
 800586c:	9cfc 0800 9d0c 0800 9d1c 0800 9d2c 0800     ............,...
 800587c:	9d3c 0800 9d4c 0800 9d5c 0800 9d6c 0800     <...L...\...l...
 800588c:	9d7c 0800 9d8c 0800 9d9c 0800 9dac 0800     |...............
 800589c:	9dbc 0800 9dcc 0800 9ddc 0800 9dec 0800     ................
 80058ac:	9dfc 0800 9e0c 0800 9e1c 0800 9e2c 0800     ............,...
 80058bc:	9e3c 0800 9e4c 0800 9e5c 0800 9e6c 0800     <...L...\...l...
 80058cc:	9e7c 0800 9e8c 0800 9e9c 0800 9eac 0800     |...............
 80058dc:	9ebc 0800 9ecc 0800 9edc 0800 9eec 0800     ................
 80058ec:	9efc 0800 9f0c 0800 9f1c 0800 9f2c 0800     ............,...
 80058fc:	9f3c 0800 9f4c 0800 9f5c 0800 9f6c 0800     <...L...\...l...
 800590c:	9f7c 0800 9f8c 0800 9f9c 0800 9fac 0800     |...............
 800591c:	9fbc 0800 9fcc 0800 9fdc 0800 9fec 0800     ................
 800592c:	9ffc 0800 a00c 0800 a01c 0800 a02c 0800     ............,...
 800593c:	a03c 0800 a04c 0800 a05c 0800 a06c 0800     <...L...\...l...
 800594c:	a07c 0800 a08c 0800 a09c 0800 a0ac 0800     |...............
 800595c:	a0bc 0800 a0cc 0800 a0dc 0800 a0ec 0800     ................
 800596c:	a0fc 0800 a10c 0800 a11c 0800 a12c 0800     ............,...
 800597c:	a13c 0800 a14c 0800 a15c 0800 a16c 0800     <...L...\...l...
 800598c:	a17c 0800 a18c 0800 a19c 0800 a1ac 0800     |...............
 800599c:	a1bc 0800 a1c8 0800 a1d8 0800 a1e8 0800     ................
 80059ac:	a1e8 0800 a1e8 0800 a1e8 0800 a1e8 0800     ................
 80059bc:	a1e8 0800 a1e8 0800 a1e8 0800 a1e8 0800     ................
 80059cc:	a1e8 0800 a1e8 0800 a1e8 0800 a1e8 0800     ................
 80059dc:	a1e8 0800 a1e8 0800 a1e8 0800 a1e8 0800     ................
 80059ec:	a1e8 0800 a1e8 0800 a1e8 0800 a1e8 0800     ................
 80059fc:	a1e8 0800 a1e8 0800 a1e8 0800 a1e8 0800     ................
 8005a0c:	a1e8 0800 a1e8 0800 a1e8 0800 a1e8 0800     ................
 8005a1c:	a1e8 0800 a1e8 0800 a1e8 0800 a1e8 0800     ................
 8005a2c:	a1e8 0800 a1e8 0800 a1e8 0800 a1e8 0800     ................
 8005a3c:	a1e8 0800 a1e8 0800 a1e8 0800 a1e8 0800     ................
 8005a4c:	a1e8 0800 a1e8 0800 a1e8 0800 a1e8 0800     ................
 8005a5c:	a1e8 0800 a1e8 0800 a1e8 0800 a1e8 0800     ................
 8005a6c:	a1e8 0800 a1e8 0800 a1e8 0800 a1e8 0800     ................
 8005a7c:	a1e8 0800 a1e8 0800 a1e8 0800 a1e8 0800     ................
 8005a8c:	a1e8 0800 a1e8 0800 a1e8 0800 a1e8 0800     ................
 8005a9c:	a1e8 0800 a1e8 0800 a1e8 0800 a1e8 0800     ................
 8005aac:	a1e8 0800 a1e8 0800 a1e8 0800 a1f8 0800     ................
 8005abc:	a1f8 0800 a1f8 0800 a208 0800 a218 0800     ................
 8005acc:	a218 0800 a218 0800 a218 0800 a218 0800     ................
 8005adc:	a218 0800 a218 0800 a218 0800 a218 0800     ................
 8005aec:	a218 0800 a218 0800 a218 0800 a218 0800     ................
 8005afc:	a218 0800 a218 0800 a218 0800 a218 0800     ................
 8005b0c:	a218 0800 a218 0800 a218 0800 a218 0800     ................
 8005b1c:	a218 0800 a218 0800 a218 0800 a218 0800     ................
 8005b2c:	a218 0800 a218 0800 a218 0800 a228 0800     ............(...
 8005b3c:	a228 0800 a228 0800 a238 0800 a238 0800     (...(...8...8...
 8005b4c:	a238 0800 a238 0800 a238 0800 a248 0800     8...8...8...H...
 8005b5c:	a248 0800 a248 0800 a248 0800 a258 0800     H...H...H...X...
 8005b6c:	a258 0800 a258 0800 a258 0800 a268 0800     X...X...X...h...
 8005b7c:	a268 0800 a278 0800 a278 0800 a278 0800     h...x...x...x...
 8005b8c:	a288 0800 a288 0800 a288 0800 a288 0800     ................
 8005b9c:	a298 0800 a298 0800 a2a4 0800 a2a4 0800     ................
 8005bac:	a2a4 0800                                   ....

08005bb0 <fontKey_0>:
 8005bb0:	ffff 32ae 5d50 0800 5bc0 0800 5ca0 0800     ...2P]...[...\..

08005bc0 <fontKey_0_char>:
 8005bc0:	001d 0000 47b8 0800                         .....G..

08005bc8 <fontKey_1>:
 8005bc8:	ffff 32ae 5d50 0800 5bd8 0800 5ca0 0800     ...2P]...[...\..

08005bd8 <fontKey_1_char>:
 8005bd8:	001d 0000 4810 0800                         .....H..

08005be0 <fontKey_2>:
 8005be0:	ffff 32ae 5d50 0800 5bf0 0800 5ca0 0800     ...2P]...[...\..

08005bf0 <fontKey_2_char>:
 8005bf0:	001d 0000 4868 0800                         ....hH..

08005bf8 <fontKey_3>:
 8005bf8:	ffff 32ae 5d50 0800 5c08 0800 5ca0 0800     ...2P]...\...\..

08005c08 <fontKey_3_char>:
 8005c08:	001d 0000 48c0 0800                         .....H..

08005c10 <fontKey_4>:
 8005c10:	ffff 32ae 5d50 0800 5c20 0800 5ca0 0800     ...2P].. \...\..

08005c20 <fontKey_4_char>:
 8005c20:	001d 0000 4918 0800                         .....I..

08005c28 <fontKey_5>:
 8005c28:	ffff 32ae 5d50 0800 5c38 0800 5ca0 0800     ...2P]..8\...\..

08005c38 <fontKey_5_char>:
 8005c38:	001d 0000 4970 0800                         ....pI..

08005c40 <fontKey_6>:
 8005c40:	ffff 32ae 5d50 0800 5c50 0800 5ca0 0800     ...2P]..P\...\..

08005c50 <fontKey_6_char>:
 8005c50:	001d 0000 49c8 0800                         .....I..

08005c58 <fontKey_7>:
 8005c58:	ffff 32ae 5d50 0800 5c68 0800 5ca0 0800     ...2P]..h\...\..

08005c68 <fontKey_7_char>:
 8005c68:	001d 0000 4a20 0800                         .... J..

08005c70 <fontKey_8>:
 8005c70:	ffff 32ae 5d50 0800 5c80 0800 5ca0 0800     ...2P]...\...\..

08005c80 <fontKey_8_char>:
 8005c80:	001d 0000 4a78 0800                         ....xJ..

08005c88 <fontKey_9>:
 8005c88:	ffff 32ae 5d50 0800 5c98 0800 5ca0 0800     ...2P]...\...\..

08005c98 <fontKey_9_char>:
 8005c98:	001d 0000 4ad0 0800                         .....J..

08005ca0 <fontKey_EndCap_char>:
 8005ca0:	0002 0000 4b28 0800                         ....(K..

08005ca8 <fontKey_I>:
 8005ca8:	ffff 32ae 5d50 0800 5cb8 0800 5ca0 0800     ...2P]...\...\..

08005cb8 <fontKey_I_char>:
 8005cb8:	001d 0000 4b30 0800                         ....0K..

08005cc0 <fontKey_Lock>:
 8005cc0:	ffff 32ae 5d50 0800 5cd0 0800 5ca0 0800     ...2P]...\...\..

08005cd0 <fontKey_Lock_char>:
 8005cd0:	001d 0000 4b88 0800                         .....K..

08005cd8 <fontKey_No>:
 8005cd8:	d086 ffff 5d50 0800 5ce8 0800 5ca0 0800     ....P]...\...\..

08005ce8 <fontKey_No_char>:
 8005ce8:	001d 0000 4be0 0800                         .....K..

08005cf0 <fontKey_Ok>:
 8005cf0:	1565 ffff 5d50 0800 5d00 0800 5ca0 0800     e...P]...]...\..

08005d00 <fontKey_Ok_char>:
 8005d00:	001d 0000 4c38 0800                         ....8L..

08005d08 <fontKey_On>:
 8005d08:	32ae ffff 5d50 0800 5d18 0800 5ca0 0800     .2..P]...]...\..

08005d18 <fontKey_On_char>:
 8005d18:	001d 0000 4c90 0800                         .....L..

08005d20 <fontKey_Point>:
 8005d20:	ffff 32ae 5d50 0800 5d30 0800 5ca0 0800     ...2P]..0]...\..

08005d30 <fontKey_Point_char>:
 8005d30:	001d 0000 4ce8 0800                         .....L..

08005d38 <fontKey_Prime>:
 8005d38:	fae0 ffff 5d50 0800 5d48 0800 5ca0 0800     ....P]..H]...\..

08005d48 <fontKey_Prime_char>:
 8005d48:	001d 0000 4d40 0800                         ....@M..

08005d50 <fontKey_StartCap_char>:
 8005d50:	0002 0000 4d98 0800                         .....M..

08005d58 <fonts16_20>:
	...

08005d68 <fonts16_20_char>:
 8005d68:	0008 0000 5d58 0800                         ....X]..

08005d70 <fonts16_21>:
 8005d70:	0000 0000 0000 33fe 33fe 0000 0000 0000     .......3.3......

08005d80 <fonts16_21_char>:
 8005d80:	0008 0000 5d70 0800                         ....p]..

08005d88 <fonts16_22>:
 8005d88:	0000 0000 0007 0000 0000 0007 0000 0000     ................

08005d98 <fonts16_22_char>:
 8005d98:	0008 0000 5d88 0800                         .....]..

08005da0 <fonts16_23>:
 8005da0:	0000 0410 3ffe 0410 0410 3ffe 0410 0000     .....?.....?....

08005db0 <fonts16_23_char>:
 8005db0:	0008 0000 5da0 0800                         .....]..

08005db8 <fonts16_24>:
 8005db8:	0000 0470 0888 0888 3ffe 0888 0888 0710     ..p......?......

08005dc8 <fonts16_24_char>:
 8005dc8:	0008 0000 5db8 0800                         .....]..

08005dd0 <fonts16_25>:
 8005dd0:	0000 301c 0c22 0322 1c9c 2260 2218 1c06     ...0"."...`"."..

08005de0 <fonts16_25_char>:
 8005de0:	0008 0000 5dd0 0800                         .....]..

08005de8 <fonts16_26>:
 8005de8:	0000 1e00 217c 2082 2142 163c 0800 1600     ....|!. B!<.....

08005df8 <fonts16_26_char>:
 8005df8:	0008 0000 5de8 0800                         .....]..

08005e00 <fonts16_27>:
 8005e00:	0000 0000 0000 0004 0002 0001 0000 0000     ................

08005e10 <fonts16_27_char>:
 8005e10:	0008 0000 5e00 0800                         .....^..

08005e18 <fonts16_28>:
 8005e18:	0000 0000 0000 07f0 180c 2002 4001 0000     ........... .@..

08005e28 <fonts16_28_char>:
 8005e28:	0008 0000 5e18 0800                         .....^..

08005e30 <fonts16_29>:
 8005e30:	0000 0000 4001 2002 180c 07f0 0000 0000     .....@. ........

08005e40 <fonts16_29_char>:
 8005e40:	0008 0000 5e30 0800                         ....0^..

08005e48 <fonts16_2A>:
 8005e48:	0000 0110 00a0 0040 07fc 0040 00a0 0110     ......@...@.....

08005e58 <fonts16_2A_char>:
 8005e58:	0008 0000 5e48 0800                         ....H^..

08005e60 <fonts16_2B>:
 8005e60:	0000 0040 0040 0040 07fc 0040 0040 0040     ..@.@.@...@.@.@.

08005e70 <fonts16_2B_char>:
 8005e70:	0008 0000 5e60 0800                         ....`^..

08005e78 <fonts16_2C>:
 8005e78:	0000 0000 4c00 3c00 0000 0000 0000 0000     .....L.<........

08005e88 <fonts16_2C_char>:
 8005e88:	0008 0000 5e78 0800                         ....x^..

08005e90 <fonts16_2D>:
 8005e90:	0000 0040 0040 0040 0040 0040 0040 0040     ..@.@.@.@.@.@.@.

08005ea0 <fonts16_2D_char>:
 8005ea0:	0008 0000 5e90 0800                         .....^..

08005ea8 <fonts16_2E>:
 8005ea8:	0000 0000 0000 3000 3000 0000 0000 0000     .......0.0......

08005eb8 <fonts16_2E_char>:
 8005eb8:	0008 0000 5ea8 0800                         .....^..

08005ec0 <fonts16_2F>:
 8005ec0:	0000 6000 1800 0600 0180 0060 0018 0006     ...`......`.....

08005ed0 <fonts16_2F_char>:
 8005ed0:	0008 0000 5ec0 0800                         .....^..

08005ed8 <fonts16_30>:
 8005ed8:	0000 07f0 180c 2002 2002 2002 180c 07f0     ....... . . ....

08005ee8 <fonts16_30_char>:
 8005ee8:	0008 0000 5ed8 0800                         .....^..

08005ef0 <fonts16_31>:
 8005ef0:	0000 0000 2008 200c 3ffe 2000 2000 0000     ..... . .?. . ..

08005f00 <fonts16_31_char>:
 8005f00:	0008 0000 5ef0 0800                         .....^..

08005f08 <fonts16_32>:
 8005f08:	0000 3008 2c04 2202 2102 2082 2044 2038     ...0.,.".!. D 8 

08005f18 <fonts16_32_char>:
 8005f18:	0008 0000 5f08 0800                         ....._..

08005f20 <fonts16_33>:
 8005f20:	0000 2008 2004 2082 2082 2082 1144 0e38     ... . . . . D.8.

08005f30 <fonts16_33_char>:
 8005f30:	0008 0000 5f20 0800                         .... _..

08005f38 <fonts16_34>:
 8005f38:	0000 0400 0700 04c0 0430 240c 3ffe 2400     ........0..$.?.$

08005f48 <fonts16_34_char>:
 8005f48:	0008 0000 5f38 0800                         ....8_..

08005f50 <fonts16_35>:
 8005f50:	0000 20fe 2042 2022 1022 1022 0842 0782     ... B " ".".B...

08005f60 <fonts16_35_char>:
 8005f60:	0008 0000 5f50 0800                         ....P_..

08005f68 <fonts16_36>:
 8005f68:	0000 0fe0 1098 2044 2042 2042 1082 0f00     ......D B B ....

08005f78 <fonts16_36_char>:
 8005f78:	0008 0000 5f68 0800                         ....h_..

08005f80 <fonts16_37>:
 8005f80:	0000 001e 0002 0002 3c02 03c2 003a 0006     .........<..:...

08005f90 <fonts16_37_char>:
 8005f90:	0008 0000 5f80 0800                         ....._..

08005f98 <fonts16_38>:
 8005f98:	0000 0e38 1144 2082 2082 2082 1144 0e38     ..8.D.. . . D.8.

08005fa8 <fonts16_38_char>:
 8005fa8:	0008 0000 5f98 0800                         ....._..

08005fb0 <fonts16_39>:
 8005fb0:	0000 0078 0084 2102 2102 1102 0c84 03f8     ..x....!.!......

08005fc0 <fonts16_39_char>:
 8005fc0:	0008 0000 5fb0 0800                         ....._..

08005fc8 <fonts16_3A>:
 8005fc8:	0000 0000 0000 1860 1860 0000 0000 0000     ......`.`.......

08005fd8 <fonts16_3A_char>:
 8005fd8:	0008 0000 5fc8 0800                         ....._..

08005fe0 <fonts16_3B>:
 8005fe0:	0000 0000 0000 4c60 3c60 0000 0000 0000     ......`L`<......

08005ff0 <fonts16_3B_char>:
 8005ff0:	0008 0000 5fe0 0800                         ....._..

08005ff8 <fonts16_3C>:
 8005ff8:	0000 0080 0140 0220 0410 0808 1004 2002     ....@. ........ 

08006008 <fonts16_3C_char>:
 8006008:	0008 0000 5ff8 0800                         ....._..

08006010 <fonts16_3D>:
 8006010:	0000 0120 0120 0120 0120 0120 0120 0120     .. . . . . . . .

08006020 <fonts16_3D_char>:
 8006020:	0008 0000 6010 0800                         .....`..

08006028 <fonts16_3E>:
 8006028:	0000 4004 2008 1010 0820 0440 0280 0100     ...@. .. .@.....

08006038 <fonts16_3E_char>:
 8006038:	0008 0000 6028 0800                         ....(`..

08006040 <fonts16_3F>:
 8006040:	0000 0008 0004 0002 3302 0082 0044 0038     .........3..D.8.

08006050 <fonts16_3F_char>:
 8006050:	0008 0000 6040 0800                         ....@`..

08006058 <fonts16_40>:
 8006058:	0000 4000 3fe0 0400 0400 0400 03e0 0400     ...@.?..........

08006068 <fonts16_40_char>:
 8006068:	0008 0000 6058 0800                         ....X`..

08006070 <fonts16_41>:
 8006070:	0000 3800 0780 0270 020e 0270 0780 3800     ...8..p...p....8

08006080 <fonts16_41_char>:
 8006080:	0008 0000 6070 0800                         ....p`..

08006088 <fonts16_42>:
 8006088:	0000 3ffe 2082 2082 2082 2082 1144 0e38     ...?. . . . D.8.

08006098 <fonts16_42_char>:
 8006098:	0008 0000 6088 0800                         .....`..

080060a0 <fonts16_43>:
 80060a0:	0000 0ff8 1004 2002 2002 2002 1004 0808     ....... . . ....

080060b0 <fonts16_43_char>:
 80060b0:	0008 0000 60a0 0800                         .....`..

080060b8 <fonts16_44>:
 80060b8:	0000 3ffe 2002 2002 2002 1004 0808 07f0     ...?. . . ......

080060c8 <fonts16_44_char>:
 80060c8:	0008 0000 60b8 0800                         .....`..

080060d0 <fonts16_45>:
 80060d0:	0000 3ffe 2082 2082 2082 2082 2082 2002     ...?. . . . . . 

080060e0 <fonts16_45_char>:
 80060e0:	0008 0000 60d0 0800                         .....`..

080060e8 <fonts16_46>:
 80060e8:	0000 3ffe 0082 0082 0082 0082 0082 0002     ...?............

080060f8 <fonts16_46_char>:
 80060f8:	0008 0000 60e8 0800                         .....`..

08006100 <fonts16_47>:
 8006100:	0000 0ff8 1004 2002 2082 2082 1084 3f88     ....... . . ...?

08006110 <fonts16_47_char>:
 8006110:	0008 0000 6100 0800                         .....a..

08006118 <fonts16_48>:
 8006118:	0000 3ffe 0080 0080 0080 0080 0080 3ffe     ...?...........?

08006128 <fonts16_48_char>:
 8006128:	0008 0000 6118 0800                         .....a..

08006130 <fonts16_49>:
 8006130:	0000 0000 0000 2002 3ffe 2002 0000 0000     ....... .?. ....

08006140 <fonts16_49_char>:
 8006140:	0008 0000 6130 0800                         ....0a..

08006148 <fonts16_4A>:
 8006148:	0000 0800 1000 2000 2000 2000 1000 0ffe     ....... . . ....

08006158 <fonts16_4A_char>:
 8006158:	0008 0000 6148 0800                         ....Ha..

08006160 <fonts16_4B>:
 8006160:	0000 3ffe 0180 0240 0420 0810 1008 2004     ...?..@. ...... 

08006170 <fonts16_4B_char>:
 8006170:	0008 0000 6160 0800                         ....`a..

08006178 <fonts16_4C>:
 8006178:	0000 3ffe 2000 2000 2000 2000 2000 2000     ...?. . . . . . 

08006188 <fonts16_4C_char>:
 8006188:	0008 0000 6178 0800                         ....xa..

08006190 <fonts16_4D>:
 8006190:	0000 3ffe 0018 0060 0180 0060 0018 3ffe     ...?..`...`....?

080061a0 <fonts16_4D_char>:
 80061a0:	0008 0000 6190 0800                         .....a..

080061a8 <fonts16_4E>:
 80061a8:	0000 3ffe 000c 0030 00c0 0300 0c00 3ffe     ...?..0........?

080061b8 <fonts16_4E_char>:
 80061b8:	0008 0000 61a8 0800                         .....a..

080061c0 <fonts16_4F>:
 80061c0:	0000 0ff8 1004 2002 2002 2002 1004 0ff8     ....... . . ....

080061d0 <fonts16_4F_char>:
 80061d0:	0008 0000 61c0 0800                         .....a..

080061d8 <fonts16_50>:
 80061d8:	0000 3ffe 0102 0102 0102 0102 0084 0078     ...?..........x.

080061e8 <fonts16_50_char>:
 80061e8:	0008 0000 61d8 0800                         .....a..

080061f0 <fonts16_51>:
 80061f0:	0000 0ff8 1004 2802 2402 2802 1004 2ff8     .......(.$.(.../

08006200 <fonts16_51_char>:
 8006200:	0008 0000 61f0 0800                         .....a..

08006208 <fonts16_52>:
 8006208:	0000 3ffe 0102 0102 0102 0302 0c84 3078     ...?..........x0

08006218 <fonts16_52_char>:
 8006218:	0008 0000 6208 0800                         .....b..

08006220 <fonts16_53>:
 8006220:	0000 0838 1044 2082 2082 2082 1104 0e08     ..8.D.. . . ....

08006230 <fonts16_53_char>:
 8006230:	0008 0000 6220 0800                         .... b..

08006238 <fonts16_54>:
 8006238:	0000 0002 0002 0002 3ffe 0002 0002 0002     .........?......

08006248 <fonts16_54_char>:
 8006248:	0008 0000 6238 0800                         ....8b..

08006250 <fonts16_55>:
 8006250:	0000 0ffe 1000 2000 2000 2000 1000 0ffe     ....... . . ....

08006260 <fonts16_55_char>:
 8006260:	0008 0000 6250 0800                         ....Pb..

08006268 <fonts16_56>:
 8006268:	0000 001e 01e0 0e00 3000 0e00 01e0 001e     .........0......

08006278 <fonts16_56_char>:
 8006278:	0008 0000 6268 0800                         ....hb..

08006280 <fonts16_57>:
 8006280:	0000 0ffe 3000 0e00 01c0 0e00 3000 0ffe     .....0.......0..

08006290 <fonts16_57_char>:
 8006290:	0008 0000 6280 0800                         .....b..

08006298 <fonts16_58>:
 8006298:	0000 3002 0c0c 0330 00c0 0330 0c0c 3002     ...0..0...0....0

080062a8 <fonts16_58_char>:
 80062a8:	0008 0000 6298 0800                         .....b..

080062b0 <fonts16_59>:
 80062b0:	0000 000e 0030 00c0 3f00 00c0 0030 000e     ....0....?..0...

080062c0 <fonts16_59_char>:
 80062c0:	0008 0000 62b0 0800                         .....b..

080062c8 <fonts16_5A>:
 80062c8:	0000 3002 2c02 2302 20c2 2032 200a 2006     ...0.,.#. 2 . . 

080062d8 <fonts16_5A_char>:
 80062d8:	0008 0000 62c8 0800                         .....b..

080062e0 <fonts16_5B>:
	...

080062f0 <fonts16_5B_char>:
 80062f0:	0008 0000 62e0 0800                         .....b..

080062f8 <fonts16_5C>:
 80062f8:	0000 0006 0018 0060 0180 0600 1800 6000     ......`........`

08006308 <fonts16_5C_char>:
 8006308:	0008 0000 62f8 0800                         .....b..

08006310 <fonts16_5D>:
	...

08006320 <fonts16_5D_char>:
 8006320:	0008 0000 6310 0800                         .....c..

08006328 <fonts16_5E>:
	...

08006338 <fonts16_5E_char>:
 8006338:	0008 0000 6328 0800                         ....(c..

08006340 <fonts16_5F>:
 8006340:	0000 4000 4000 4000 4000 4000 4000 4000     ...@.@.@.@.@.@.@

08006350 <fonts16_5F_char>:
 8006350:	0008 0000 6340 0800                         ....@c..

08006358 <fonts16_60>:
	...

08006368 <fonts16_60_char>:
 8006368:	0008 0000 6358 0800                         ....Xc..

08006370 <fonts16_61>:
 8006370:	0000 1880 2440 2240 2240 1240 3f80 0000     ....@$@"@"@..?..

08006380 <fonts16_61_char>:
 8006380:	0008 0000 6370 0800                         ....pc..

08006388 <fonts16_62>:
 8006388:	0000 3ffc 1080 2040 2040 2040 1f80 0000     ...?..@ @ @ ....

08006398 <fonts16_62_char>:
 8006398:	0008 0000 6388 0800                         .....c..

080063a0 <fonts16_63>:
 80063a0:	0000 1f80 2040 2040 2040 2040 1080 0000     ....@ @ @ @ ....

080063b0 <fonts16_63_char>:
 80063b0:	0008 0000 63a0 0800                         .....c..

080063b8 <fonts16_64>:
 80063b8:	0000 1f80 2040 2040 2040 1080 3ffc 0000     ....@ @ @ ...?..

080063c8 <fonts16_64_char>:
 80063c8:	0008 0000 63b8 0800                         .....c..

080063d0 <fonts16_65>:
 80063d0:	0000 1f80 2240 2240 2240 2240 1380 0000     ....@"@"@"@"....

080063e0 <fonts16_65_char>:
 80063e0:	0008 0000 63d0 0800                         .....c..

080063e8 <fonts16_66>:
 80063e8:	0000 0040 0040 3ff8 0044 0044 0044 0000     ..@.@..?D.D.D...

080063f8 <fonts16_66_char>:
 80063f8:	0008 0000 63e8 0800                         .....c..

08006400 <fonts16_67>:
 8006400:	0000 2780 4840 4840 4840 4480 3fc0 0000     ...'@H@H@H.D.?..

08006410 <fonts16_67_char>:
 8006410:	0008 0000 6400 0800                         .....d..

08006418 <fonts16_68>:
 8006418:	0000 3ffc 0080 0040 0040 0040 3f80 0000     ...?..@.@.@..?..

08006428 <fonts16_68_char>:
 8006428:	0008 0000 6418 0800                         .....d..

08006430 <fonts16_69>:
 8006430:	0000 0000 0000 2040 3fcc 2000 0000 0000     ......@ .?. ....

08006440 <fonts16_69_char>:
 8006440:	0008 0000 6430 0800                         ....0d..

08006448 <fonts16_6A>:
 8006448:	0000 2000 4000 4000 4040 3fcc 0000 0000     ... .@.@@@.?....

08006458 <fonts16_6A_char>:
 8006458:	0008 0000 6448 0800                         ....Hd..

08006460 <fonts16_6B>:
 8006460:	0000 3ffc 0200 0500 0880 1040 2000 0000     ...?......@.. ..

08006470 <fonts16_6B_char>:
 8006470:	0008 0000 6460 0800                         ....`d..

08006478 <fonts16_6C>:
 8006478:	0000 0000 0000 0004 3ffc 2000 0000 0000     .........?. ....

08006488 <fonts16_6C_char>:
 8006488:	0008 0000 6478 0800                         ....xd..

08006490 <fonts16_6D>:
 8006490:	0000 3fc0 0040 0040 3f80 0040 0040 3f80     ...?@.@..?@.@..?

080064a0 <fonts16_6D_char>:
 80064a0:	0008 0000 6490 0800                         .....d..

080064a8 <fonts16_6E>:
 80064a8:	0000 3fc0 0080 0040 0040 0040 3f80 0000     ...?..@.@.@..?..

080064b8 <fonts16_6E_char>:
 80064b8:	0008 0000 64a8 0800                         .....d..

080064c0 <fonts16_6F>:
 80064c0:	0000 1f80 2040 2040 2040 2040 1f80 0000     ....@ @ @ @ ....

080064d0 <fonts16_6F_char>:
 80064d0:	0008 0000 64c0 0800                         .....d..

080064d8 <fonts16_70>:
 80064d8:	0000 7fc0 0840 0840 0840 0840 0780 0000     ....@.@.@.@.....

080064e8 <fonts16_70_char>:
 80064e8:	0008 0000 64d8 0800                         .....d..

080064f0 <fonts16_71>:
 80064f0:	0000 0780 0840 0840 0840 0840 7fc0 0000     ....@.@.@.@.....

08006500 <fonts16_71_char>:
 8006500:	0008 0000 64f0 0800                         .....d..

08006508 <fonts16_72>:
 8006508:	0000 0000 3fc0 0100 0080 0080 0040 0040     .....?......@.@.

08006518 <fonts16_72_char>:
 8006518:	0008 0000 6508 0800                         .....e..

08006520 <fonts16_73>:
 8006520:	0000 1180 2240 2240 2440 2440 1880 0000     ....@"@"@$@$....

08006530 <fonts16_73_char>:
 8006530:	0008 0000 6520 0800                         .... e..

08006538 <fonts16_74>:
 8006538:	0000 0040 0040 1ff8 2040 2040 2040 0000     ..@.@...@ @ @ ..

08006548 <fonts16_74_char>:
 8006548:	0008 0000 6538 0800                         ....8e..

08006550 <fonts16_75>:
 8006550:	0000 1fc0 2000 2000 2000 1000 3fc0 0000     ..... . . ...?..

08006560 <fonts16_75_char>:
 8006560:	0008 0000 6550 0800                         ....Pe..

08006568 <fonts16_76>:
 8006568:	0000 00c0 0300 0c00 3000 0c00 0300 00c0     .........0......

08006578 <fonts16_76_char>:
 8006578:	0008 0000 6568 0800                         ....he..

08006580 <fonts16_77>:
 8006580:	0000 0fc0 3000 0c00 0300 0c00 3000 0fc0     .....0.......0..

08006590 <fonts16_77_char>:
 8006590:	0008 0000 6580 0800                         .....e..

08006598 <fonts16_78>:
 8006598:	0000 2040 1080 0900 0600 0900 1080 2040     ..@ ..........@ 

080065a8 <fonts16_78_char>:
 80065a8:	0008 0000 6598 0800                         .....e..

080065b0 <fonts16_79>:
 80065b0:	0000 0040 4180 2600 1800 0600 0180 0040     ..@..A.&......@.

080065c0 <fonts16_79_char>:
 80065c0:	0008 0000 65b0 0800                         .....e..

080065c8 <fonts16_7A>:
 80065c8:	0000 3040 2840 2440 2240 2140 20c0 0000     ..@0@(@$@"@!. ..

080065d8 <fonts16_7A_char>:
 80065d8:	0008 0000 65c8 0800                         .....e..

080065e0 <fonts16_7B>:
	...

080065f0 <fonts16_7B_char>:
 80065f0:	0008 0000 65e0 0800                         .....e..

080065f8 <fonts16_7C>:
	...
 8006600:	ffff 0000 0000 0000                         ........

08006608 <fonts16_7C_char>:
 8006608:	0008 0000 65f8 0800                         .....e..

08006610 <fonts16_7D>:
	...

08006620 <fonts16_7D_char>:
 8006620:	0008 0000 6610 0800                         .....f..

08006628 <fonts16_7E_92>:
 8006628:	0000 0000 0000 0004 0002 0001 0000 0000     ................

08006638 <fonts16_7E_92_char>:
 8006638:	0008 0000 6628 0800                         ....(f..

08006640 <fonts16_93_B0>:
 8006640:	0000 0006 0009 0009 0006 0000 0000 0000     ................

08006650 <fonts16_93_B0_char>:
 8006650:	0008 0000 6640 0800                         ....@f..

08006658 <fonts16_B1_BF>:
 8006658:	0000 1c00 2200 4100 40cc 4000 2000 1000     .....".A.@.@. ..

08006668 <fonts16_B1_BF_char>:
 8006668:	0008 0000 6658 0800                         ....Xf..

08006670 <fonts16_C0_C1>:
 8006670:	0000 3800 0780 0274 020e 0271 0780 3800     ...8..t...q....8

08006680 <fonts16_C0_C1_char>:
 8006680:	0008 0000 6670 0800                         ....pf..

08006688 <fonts16_C2_C4>:
 8006688:	0000 3800 0782 0270 020e 0270 0782 3800     ...8..p...p....8

08006698 <fonts16_C2_C4_char>:
 8006698:	0008 0000 6688 0800                         .....f..

080066a0 <fonts16_C5>:
 80066a0:	0000 3800 0780 0273 020f 0273 0780 3800     ...8..s...s....8

080066b0 <fonts16_C5_char>:
 80066b0:	0008 0000 66a0 0800                         .....f..

080066b8 <fonts16_C6_E0>:
 80066b8:	0000 1880 2440 2244 2248 1240 3f80 0000     ....@$D"H"@..?..

080066c8 <fonts16_C6_E0_char>:
 80066c8:	0008 0000 66b8 0800                         .....f..

080066d0 <fonts16_E1>:
 80066d0:	0000 1880 2440 2248 2244 1242 3f80 0000     ....@$H"D"B..?..

080066e0 <fonts16_E1_char>:
 80066e0:	0008 0000 66d0 0800                         .....f..

080066e8 <fonts16_E2_E4>:
 80066e8:	0000 1880 244c 2240 2240 124c 3f80 0000     ....L$@"@"L..?..

080066f8 <fonts16_E2_E4_char>:
 80066f8:	0008 0000 66e8 0800                         .....f..

08006700 <fonts16_E5_E9>:
 8006700:	0000 1f80 2240 2248 2244 2242 1380 0000     ....@"H"D"B"....

08006710 <fonts16_E5_E9_char>:
 8006710:	0008 0000 6700 0800                         .....g..

08006718 <fonts16_EA_ED>:
 8006718:	0000 0000 0000 2048 3fc4 2002 0000 0000     ......H .?. ....

08006728 <fonts16_EA_ED_char>:
 8006728:	0008 0000 6718 0800                         .....g..

08006730 <fonts16_EE_F1>:
 8006730:	0000 3fc0 0084 0042 0044 0042 3f80 0000     ...?..B.D.B..?..

08006740 <fonts16_EE_F1_char>:
 8006740:	0008 0000 6730 0800                         ....0g..

08006748 <fonts16_F2_F3>:
 8006748:	0000 1f80 2040 2048 2044 2042 1f80 0000     ....@ H D B ....

08006758 <fonts16_F2_F3_char>:
 8006758:	0008 0000 6748 0800                         ....Hg..

08006760 <fonts16_F4_F6>:
 8006760:	0000 1f80 204c 2040 2040 204c 1f80 0000     ....L @ @ L ....

08006770 <fonts16_F4_F6_char>:
 8006770:	0008 0000 6760 0800                         ....`g..

08006778 <fonts16_F7_F9>:
 8006778:	0000 1fc0 2000 2004 2002 1000 3fc0 0000     ..... . . ...?..

08006788 <fonts16_F7_F9_char>:
 8006788:	0008 0000 6778 0800                         ....xg..

08006790 <fonts16_FA>:
 8006790:	0000 1fc0 2000 2008 2004 1002 3fc0 0000     ..... . . ...?..

080067a0 <fonts16_FA_char>:
 80067a0:	0008 0000 6790 0800                         .....g..

080067a8 <fonts16_FB_FC>:
 80067a8:	0000 1fc0 200c 2000 2000 100c 3fc0 0000     ..... . . ...?..

080067b8 <fonts16_FB_FC_char>:
 80067b8:	0008 0000 67a8 0800                         .....g..

080067c0 <fonts16_FD_FF>:
	...

080067d0 <fonts16_FD_FF_char>:
 80067d0:	0008 0000 67c0 0800                         .....g..

080067d8 <fonts24_20>:
	...

080067ec <fonts24_20_char>:
 80067ec:	0006 0000 67d8 0800                         .....g..

080067f4 <fonts24_21>:
 80067f4:	0000 0000 0000 ff0c 0cf0 f0ff 0000 0000     ................
 8006804:	0000 0000                                   ....

08006808 <fonts24_21_char>:
 8006808:	0006 0000 67f4 0800                         .....g..

08006810 <fonts24_22>:
 8006810:	0000 0000 f001 0100 00f0 0000 0000 0000     ................
 8006820:	f001 0100 00f0 0000                         ........

08006828 <fonts24_22_char>:
 8006828:	0008 0000 6810 0800                         .....h..

08006830 <fonts24_23>:
 8006830:	c300 0e00 00c3 f30f 0100 80ff cf00 00f0     ................
 8006840:	70c3 c30e 0f00 00f3 ff01 0080 f0cf c300     .p..............
 8006850:	0070 00c3                                   p...

08006854 <fonts24_23_char>:
 8006854:	000c 0000 6830 0800                         ....0h..

0800685c <fonts24_24>:
 800685c:	0000 0100 c081 8307 06e0 3006 0c0c 3f18     ...........0...?
 800686c:	fcff ff3f 0cfc 1818 1806 0730 e0f0 e003     ..?.......0.....
 800687c:	0040 0000                                   @...

08006880 <fonts24_24_char>:
 8006880:	000c 0000 685c 0800                         ....\h..

08006888 <fonts24_25>:
 8006888:	0000 0000 c003 0700 00e0 300c 0c00 0c30     ...........0..0.
 8006898:	300c 070f 03e0 c083 e000 0000 007c 1e00     .0..........|...
 80068a8:	0300 80c3 e107 0ce0 7030 300c 0c10 0030     ........0p.0..0.
 80068b8:	e007 0300 00c0 0000 0000 0000               ............

080068c4 <fonts24_25_char>:
 80068c4:	0014 0000 6888 0800                         .....h..

080068cc <fonts24_26>:
 80068cc:	0000 0300 00e0 f007 0600 c01b 0f0c 0ce0     ................
 80068dc:	300c 0c0c 0c30 700e 1b06 07e0 8071 e003     .0..0..p....q...
 80068ec:	0100 00c0 6007 0e00 0020 0004 0000 0000     .....`.. .......

080068fc <fonts24_26_char>:
 80068fc:	0010 0000 68cc 0800                         .....h..

08006904 <fonts24_27>:
 8006904:	0000 0000 f003 0300 00f0 0000               ............

08006910 <fonts24_27_char>:
 8006910:	0004 0000 6904 0800                         .....i..

08006918 <fonts24_28>:
 8006918:	0000 0100 00f8 ff0f 3e00 c007 00f0 c0f0     .........>......
 8006928:	3000 0000 0000 0000                         .0......

08006930 <fonts24_28_char>:
 8006930:	0007 0000 6918 0800                         .....i..

08006938 <fonts24_29>:
 8006938:	0000 8000 1000 00c0 7870 e003 ff3f 0780     ........px..?...
 8006948:	00fc 0000 0000 0000                         ........

08006950 <fonts24_29_char>:
 8006950:	0007 0000 6938 0800                         ....8i..

08006958 <fonts24_2A>:
 8006958:	0000 0000 4000 0200 0040 c001 0000 00f0     .....@..@.......
 8006968:	c001 0200 0040 4000 0000 0000               ....@..@....

08006974 <fonts24_2A_char>:
 8006974:	0009 0000 6958 0800                         ....Xi..

0800697c <fonts24_2B>:
 800697c:	0000 0000 0018 1800 0000 0018 1800 0100     ................
 800698c:	80ff ff01 0080 0018 1800 0000 0018 1800     ................
 800699c:	0000 0000                                   ....

080069a0 <fonts24_2B_char>:
 80069a0:	000c 0000 697c 0800                         ....|i..

080069a8 <fonts24_2C>:
 80069a8:	0000 0000 0000 006c 3c00 0000 0000 0000     ......l..<......
 80069b8:	0000 0000                                   ....

080069bc <fonts24_2C_char>:
 80069bc:	0006 0000 69a8 0800                         .....i..

080069c4 <fonts24_2D>:
 80069c4:	0000 0000 0060 6000 0000 0060 6000 0000     ....`..`..`..`..
 80069d4:	0060 0000 0000 0000                         `.......

080069dc <fonts24_2D_char>:
 80069dc:	0007 0000 69c4 0800                         .....i..

080069e4 <fonts24_2E>:
 80069e4:	0000 0000 0000 000c 0c00 0000 0000 0000     ................
 80069f4:	0000 0000                                   ....

080069f8 <fonts24_2E_char>:
 80069f8:	0006 0000 69e4 0800                         .....i..

08006a00 <fonts24_2F>:
 8006a00:	000e 0f00 00c0 fc01 0000 803f 0300 00f0     ..........?.....
 8006a10:	7000 0000                                   .p..

08006a14 <fonts24_2F_char>:
 8006a14:	0006 0000 6a00 0800                         .....j..

08006a1c <fonts24_30>:
 8006a1c:	0000 0000 00ff ff03 07c0 e000 000c 0c30     ..............0.
 8006a2c:	3000 000c 0c30 3000 0007 03e0 c0ff ff00     .0..0..0........
 8006a3c:	0000 0000                                   ....

08006a40 <fonts24_30_char>:
 8006a40:	000c 0000 6a1c 0800                         .....j..

08006a48 <fonts24_31>:
 8006a48:	0000 0000 0000 0100 0000 8001 0000 00c0     ................
 8006a58:	6000 ff0f 0ff0 f0ff 0000 0000 0000 0000     .`..............
 8006a68:	0000 0000                                   ....

08006a6c <fonts24_31_char>:
 8006a6c:	000c 0000 6a48 0800                         ....Hj..

08006a74 <fonts24_32>:
 8006a74:	0000 0e00 c001 010f 0de0 3080 c00c 0c30     ...........0..0.
 8006a84:	3060 300c 0c30 3018 0c0c 0ce0 c007 030c     `0.00..0........
 8006a94:	0000 0000                                   ....

08006a98 <fonts24_32_char>:
 8006a98:	000c 0000 6a74 0800                         ....tj..

08006aa0 <fonts24_33>:
 8006aa0:	0000 0100 8080 8003 06e0 7000 000c 0c30     ...........p..0.
 8006ab0:	300c 0c0c 0c30 300c 1f0c 07e0 c0f3 e003     .0..0..0........
 8006ac0:	0000 0000                                   ....

08006ac4 <fonts24_33_char>:
 8006ac4:	000c 0000 6aa0 0800                         .....j..

08006acc <fonts24_34>:
 8006acc:	c000 0000 00f0 f800 0000 00ce c700 0000     ................
 8006adc:	80c1 c000 0fc0 f0ff ff0f 00f0 00c0 c000     ................
 8006aec:	0000 0000                                   ....

08006af0 <fonts24_34_char>:
 8006af0:	000c 0000 6acc 0800                         .....j..

08006af8 <fonts24_35>:
 8006af8:	0000 0100 0080 8f03 06e0 f00f 0c0c 0c30     ..............0.
 8006b08:	3006 060c 0c30 3006 0c0e 0730 30fc f001     .0..0..0..0..0..
 8006b18:	0000 0000                                   ....

08006b1c <fonts24_35_char>:
 8006b1c:	000c 0000 6af8 0800                         .....j..

08006b24 <fonts24_36>:
 8006b24:	0000 0100 80ff ff03 06e0 7008 0c0c 0c30     ...........p..0.
 8006b34:	3006 060c 0c30 3006 0c0e 0770 e0fc f001     .0..0..0..p.....
 8006b44:	0080 0000                                   ....

08006b48 <fonts24_36_char>:
 8006b48:	000c 0000 6b24 0800                         ....$k..

08006b50 <fonts24_37>:
 8006b50:	0000 0000 3000 0000 0e30 3000 e00f 0130     .....0..0..0..0.
 8006b60:	30f8 1e00 0030 3007 0100 00f0 f000 0000     .0..0..0........
 8006b70:	0030 0000                                   0...

08006b74 <fonts24_37_char>:
 8006b74:	000c 0000 6b50 0800                         ....Pk..

08006b7c <fonts24_38>:
 8006b7c:	0000 0300 00e0 f307 06c0 e01f 0c0c 0c30     ..............0.
 8006b8c:	300c 0c0c 0c30 300c 1e06 0770 e0f7 e303     .0..0..0..p.....
 8006b9c:	0080 0000                                   ....

08006ba0 <fonts24_38_char>:
 8006ba0:	000c 0000 6b7c 0800                         ....|k..

08006ba8 <fonts24_39>:
 8006ba8:	0000 0100 800f 1f07 06c0 6030 300c 0c30     ..........0`.00.
 8006bb8:	3030 300c 0c30 3030 1807 0360 c0ff ff00     00.00.00..`.....
 8006bc8:	0080 0000                                   ....

08006bcc <fonts24_39_char>:
 8006bcc:	000c 0000 6ba8 0800                         .....k..

08006bd4 <fonts24_3A>:
 8006bd4:	0000 0000 0000 030c 0c00 0003 0000 0000     ................
 8006be4:	0000 0000                                   ....

08006be8 <fonts24_3A_char>:
 8006be8:	0006 0000 6bd4 0800                         .....k..

08006bf0 <fonts24_3B>:
 8006bf0:	0000 0000 0000 034c 3c00 0003 0000 0000     ......L..<......
 8006c00:	0000 0000                                   ....

08006c04 <fonts24_3B_char>:
 8006c04:	0006 0000 6bf0 0800                         .....k..

08006c0c <fonts24_3C>:
 8006c0c:	0000 0000 0018 3c00 0000 003c 3c00 0000     .......<..<..<..
 8006c1c:	0066 6600 0000 0063 c300 0000 80c1 8101     f..f..c.........
 8006c2c:	0180 8081 0000 0000                         ........

08006c34 <fonts24_3C_char>:
 8006c34:	000d 0000 6c0c 0800                         .....l..

08006c3c <fonts24_3D>:
 8006c3c:	0000 0000 0063 6300 0000 0063 6300 0000     ....c..c..c..c..
 8006c4c:	0063 6300 0000 0063 6300 0000 0063 6300     c..c..c..c..c..c
 8006c5c:	0000 0063 0000 0000                         ..c.....

08006c64 <fonts24_3D_char>:
 8006c64:	000d 0000 6c3c 0800                         ....<l..

08006c6c <fonts24_3E>:
 8006c6c:	0000 0100 8081 8101 0180 0083 c300 0000     ................
 8006c7c:	0063 6600 0000 0066 3c00 0000 0038 1800     c..f..f..<..8...
 8006c8c:	0000 0018 0000 0000                         ........

08006c94 <fonts24_3E_char>:
 8006c94:	000d 0000 6c6c 0800                         ....ll..

08006c9c <fonts24_3F>:
 8006c9c:	0000 0000 8001 0100 00c0 6000 0000 0c30     ...........`..0.
 8006cac:	30e0 f00c 0030 3018 0c00 0030 e007 0300     .0..0..0..0.....
 8006cbc:	00c0 0000                                   ....

08006cc0 <fonts24_3F_char>:
 8006cc0:	000c 0000 6c9c 0800                         .....l..

08006cc8 <fonts24_40>:
 8006cc8:	0000 0100 00fc ff0f 1e00 8003 0030 30c0     ............0..0
 8006cd8:	60e0 fc61 6330 301e 03c6 c630 3003 03c2     .`a.0c.0..0..0..
 8006ce8:	c330 3003 c3c3 c730 30fe 3fc6 c630 3001     0..0..0..0.?0..0
 8006cf8:	0066 3360 c000 ff11 1880 00ff 0008 0000     f.`3............
 8006d08:	0000 0000                                   ....

08006d0c <fonts24_40_char>:
 8006d0c:	0016 0000 6cc8 0800                         .....l..

08006d14 <fonts24_41>:
 8006d14:	0004 0700 0080 f003 0000 007e 6f00 00c0     ..........~..o..
 8006d24:	e061 6000 0030 f060 6700 00e0 007f f800     a..`0.`..g......
 8006d34:	0300 00e0 0007 0400 0000 0000               ............

08006d40 <fonts24_41_char>:
 8006d40:	000e 0000 6d14 0800                         .....m..

08006d48 <fonts24_42>:
 8006d48:	0000 0700 f0ff ff07 06f0 300c 0c06 0630     ...........0..0.
 8006d58:	300c 0c06 0630 300c 0c06 0630 300c 1f03     .0..0..0..0..0..
 8006d68:	01f0 e0f3 e000 0000 0000 0000               ............

08006d74 <fonts24_42_char>:
 8006d74:	000e 0000 6d48 0800                         ....Hm..

08006d7c <fonts24_43>:
 8006d7c:	0000 0000 007f ff01 03c0 e080 0006 0c60     ..............`.
 8006d8c:	3000 000c 0c30 3000 000c 0c30 3000 0006     .0..0..0..0..0..
 8006d9c:	0730 7000 8003 01e0 c0c0 c000 0000 0000     0..p............

08006dac <fonts24_43_char>:
 8006dac:	0010 0000 6d7c 0800                         ....|m..

08006db4 <fonts24_44>:
 8006db4:	0000 0f00 f0ff ff0f 0cf0 3000 000c 0c30     ...........0..0.
 8006dc4:	3000 000c 0c30 3000 000c 0c30 3000 0006     .0..0..0..0..0..
 8006dd4:	0770 e000 ff03 01c0 80ff 0000 0000 0000     p...............

08006de4 <fonts24_44_char>:
 8006de4:	000f 0000 6db4 0800                         .....m..

08006dec <fonts24_45>:
 8006dec:	0000 0f00 f0ff ff0f 0cf0 300c 0c0c 0c30     ...........0..0.
 8006dfc:	300c 0c0c 0c30 300c 0c0c 0c30 300c 0c0c     .0..0..0..0..0..
 8006e0c:	0c30 300c 0c0c 0c30 0000 0000 0000 0000     0..0..0.........

08006e1c <fonts24_45_char>:
 8006e1c:	000f 0000 6dec 0800                         .....m..

08006e24 <fonts24_46>:
 8006e24:	0000 0f00 f0ff ff0f 00f0 300c 0c00 0030     ...........0..0.
 8006e34:	300c 0c00 0030 300c 0c00 0030 300c 0c00     .0..0..0..0..0..
 8006e44:	0030 3000 0000 0030 0000 0000               0..0..0.....

08006e50 <fonts24_46_char>:
 8006e50:	000e 0000 6e24 0800                         ....$n..

08006e58 <fonts24_47>:
 8006e58:	0000 0000 007e ff00 01c0 e081 0003 0670     ....~.........p.
 8006e68:	3000 0006 0c30 3000 000c 0c30 3018 180c     .0..0..0..0..0..
 8006e78:	0e30 3018 1806 0670 c018 f803 01c0 00f8     0..0..p.........
 8006e88:	0000 0000                                   ....

08006e8c <fonts24_47_char>:
 8006e8c:	0011 0000 6e58 0800                         ....Xn..

08006e94 <fonts24_48>:
 8006e94:	0000 0f00 f0ff ff0f 00f0 000c 0c00 0000     ................
 8006ea4:	000c 0c00 0000 000c 0c00 0000 000c 0c00     ................
 8006eb4:	0f00 f0ff ff0f 00f0 0000 0000               ............

08006ec0 <fonts24_48_char>:
 8006ec0:	000e 0000 6e94 0800                         .....n..

08006ec8 <fonts24_49>:
 8006ec8:	0000 0000 0000 ff0f 0ff0 f0ff 0000 0000     ................
 8006ed8:	0000 0000                                   ....

08006edc <fonts24_49_char>:
 8006edc:	0006 0000 6ec8 0800                         .....n..

08006ee4 <fonts24_4A>:
 8006ee4:	0000 0300 0080 8007 0600 0000 000c 0c00     ................
 8006ef4:	0000 0006 0700 f0ff ff03 00f0 0000 0000     ................

08006f04 <fonts24_4A_char>:
 8006f04:	000a 0000 6ee4 0800                         .....n..

08006f0c <fonts24_4B>:
 8006f0c:	0000 0f00 f0ff ff0f 00f0 0030 1800 0000     ..........0.....
 8006f1c:	000c 0e00 0000 001f 3900 0080 c0e0 c001     .........9......
 8006f2c:	0760 3000 000e 0810 0000 0000 0000 0000     `..0............

08006f3c <fonts24_4B_char>:
 8006f3c:	000f 0000 6f0c 0800                         .....o..

08006f44 <fonts24_4C>:
 8006f44:	0000 0f00 f0ff ff0f 0cf0 0000 000c 0c00     ................
 8006f54:	0000 000c 0c00 0000 000c 0c00 0000 000c     ................
 8006f64:	0000 0000                                   ....

08006f68 <fonts24_4C_char>:
 8006f68:	000c 0000 6f44 0800                         ....Do..

08006f70 <fonts24_4D>:
 8006f70:	0000 0f00 f0ff ff0f 00f0 3000 0100 00e0     ...........0....
 8006f80:	c00f fe00 0300 00f0 0007 0700 0000 e003     ................
 8006f90:	0000 00fe 1f00 00c0 e001 0000 0f30 f0ff     ............0...
 8006fa0:	ff0f 00f0 0000 0000                         ........

08006fa8 <fonts24_4D_char>:
 8006fa8:	0012 0000 6f70 0800                         ....po..

08006fb0 <fonts24_4E>:
 8006fb0:	0000 0f00 f0ff ff0f 00f0 3000 0000 0060     ...........0..`.
 8006fc0:	c001 0700 0080 001e 7800 0100 00e0 8003     .........x......
 8006fd0:	0600 0000 ff0f 0ff0 f0ff 0000 0000 0000     ................

08006fe0 <fonts24_4E_char>:
 8006fe0:	000f 0000 6fb0 0800                         .....o..

08006fe8 <fonts24_4F>:
 8006fe8:	0000 0000 80ff ff01 03c0 e080 0007 0670     ..............p.
 8006ff8:	3000 000c 0c30 3000 000c 0c30 3000 000c     .0..0..0..0..0..
 8007008:	0630 7000 0007 03e0 c0c3 ff01 0080 003c     0..p..........<.
 8007018:	0000 0000                                   ....

0800701c <fonts24_4F_char>:
 800701c:	0011 0000 6fe8 0800                         .....o..

08007024 <fonts24_50>:
 8007024:	0000 0f00 f0ff ff0f 00f0 3018 1800 0030     ...........0..0.
 8007034:	3018 1800 0030 3018 1800 0030 3018 1c00     .0..0..0..0..0..
 8007044:	0070 e00f 0700 00c0 0000 0000               p...........

08007050 <fonts24_50_char>:
 8007050:	000e 0000 7024 0800                         ....$p..

08007058 <fonts24_51>:
 8007058:	0000 0000 00ff ff01 0380 c080 0007 0660     ..............`.
 8007068:	3000 000c 0c30 3000 000d 0d30 3080 800f     .0..0..0..0..0..
 8007078:	0730 3000 0007 0f60 c0ff ff0c 1880 0000     0..0..`.........
 8007088:	0000 0000                                   ....

0800708c <fonts24_51_char>:
 800708c:	0011 0000 7058 0800                         ....Xp..

08007094 <fonts24_52>:
 8007094:	0000 0f00 f0ff ff0f 00f0 3018 1800 0030     ...........0..0.
 80070a4:	3018 1800 0030 3018 1800 0030 3038 6c00     .0..0..0..0.80.l
 80070b4:	0130 70ce 8707 0ee0 c001 0008 0000 0000     0..p............

080070c4 <fonts24_52_char>:
 80070c4:	0010 0000 7094 0800                         .....p..

080070cc <fonts24_53>:
 80070cc:	0000 0100 00c0 c303 07c0 e007 0e06 0c30     ..............0.
 80070dc:	300c 0c0c 0c30 300c 180c 0c30 3018 3806     .0..0..0..0..0.8
 80070ec:	0770 e0f0 e003 00c0 0000 0000               p...........

080070f8 <fonts24_53_char>:
 80070f8:	000e 0000 70cc 0800                         .....p..

08007100 <fonts24_54>:
 8007100:	0000 0000 3000 0000 0030 3000 0000 0030     .....0..0..0..0.
 8007110:	3000 ff0f 0ff0 f0ff 0000 0030 3000 0000     .0........0..0..
 8007120:	0030 3000 0000 0030 0000 0000               0..0..0.....

0800712c <fonts24_54_char>:
 800712c:	000e 0000 7100 0800                         .....q..

08007134 <fonts24_55>:
 8007134:	0000 0100 f0ff ff03 06f0 0000 0006 0c00     ................
 8007144:	0000 000c 0c00 0000 000c 0600 0000 0006     ................
 8007154:	0300 f0ff ff01 00f0 0000 0000               ............

08007160 <fonts24_55_char>:
 8007160:	000e 0000 7134 0800                         ....4q..

08007168 <fonts24_56>:
 8007168:	0000 0010 7000 0300 00f0 800f 7c00 0300     .....p.......|..
 8007178:	00f0 800f 0e00 0000 c007 0100 00f8 3e00     ...............>
 8007188:	0000 8007 0100 00e0 7000 0000 0010 0000     .........p......

08007198 <fonts24_56_char>:
 8007198:	000f 0000 7168 0800                         ....hq..

080071a0 <fonts24_57>:
 80071a0:	0000 0030 f003 3f00 03c0 00fc c00f 0c00     ..0....?........
 80071b0:	0000 c00f 0300 00fc 3f00 00c0 f003 0000     .........?......
 80071c0:	0030 f003 3f00 03c0 00fc c00f 0c00 0000     0....?..........
 80071d0:	c00f 0300 00fc 3f00 00c0 f003 0000 0030     .......?......0.
 80071e0:	0000 0000                                   ....

080071e4 <fonts24_57_char>:
 80071e4:	0016 0000 71a0 0800                         .....q..

080071ec <fonts24_58>:
 80071ec:	0008 0c00 1000 0006 0330 6000 e001 00c0     ........0..`....
 80071fc:	80f3 1f00 0000 001e f300 0100 80e1 0003     ................
 800720c:	06c0 6000 000c 0830 1000 0000               ...`..0.....

08007218 <fonts24_58_char>:
 8007218:	000e 0000 71ec 0800                         .....q..

08007220 <fonts24_59>:
 8007220:	0000 0000 1000 0000 0070 e001 0700 0080     ........p.......
 8007230:	000f fc0f 0f00 00fc 0e00 0000 0007 0100     ................
 8007240:	00c0 e000 0000 0030 1000 0000               ......0.....

0800724c <fonts24_59_char>:
 800724c:	000e 0000 7220 0800                         .... r..

08007254 <fonts24_5A>:
 8007254:	000c 0e00 3000 000f 0d30 3080 e00c 0c30     .....0..0..0..0.
 8007264:	3078 1c0c 0c30 3006 030c 0c30 b001 000c     x0..0..0..0.....
 8007274:	0cf0 7000 000c 0000                         ...p....

0800727c <fonts24_5A_char>:
 800727c:	000d 0000 7254 0800                         ....Tr..

08007284 <fonts24_5B>:
	...

08007298 <fonts24_5B_char>:
 8007298:	0006 0000 7284 0800                         .....r..

080072a0 <fonts24_5C>:
 80072a0:	0000 0030 f003 3f00 03c0 00fc c00f 0c00     ..0....?........
 80072b0:	0000 0000                                   ....

080072b4 <fonts24_5C_char>:
 80072b4:	0006 0000 72a0 0800                         .....r..

080072bc <fonts24_5D>:
 80072bc:	00e0 ff00 0000 c0ff ff00 00f0 fcff ff00     ................
 80072cc:	00ff 7fff fe00 c0ff fffc fcc0 e0ff fff8     ................
 80072dc:	f1f0 f8ff fff1 61f8 7cff fc41 03fc fee1     .......a.|A.....
 80072ec:	0303 00fe fe07 0f00 00ff ff1f 3f00 00ff     .............?..
 80072fc:	ff7f 0700 00ff 1f00 0000 000f ff07 7f00     ................
 800730c:	00ff ff3f 1f00 00ff ff0f 0700 03fe fe03     ..?.............
 800731c:	e103 41fe fcfc ff61 f17c f8ff fff1 f8f8     ...A..a.|.......
 800732c:	f0ff fffc fce0 c0ff fffe ffc0 007f ffff     ................
 800733c:	ff00 00fc f0ff ff00 00c0 00ff e000 0000     ................

0800734c <fonts24_5D_char>:
 800734c:	0030 0000 72bc 0800                         0....r..

08007354 <fonts24_5E>:
 8007354:	0000 0007 7f00 0300 00ff ff0f 3f00 00fb     .............?..
 8007364:	f37f ff00 01f3 f1ff ff03 07f1 f1ff ff0f     ................
 8007374:	0fe0 80ff fe1f 1f00 00fc f83f 3f00 00f8     ..........?..?..
 8007384:	f07f 7f00 00e0 cf7f 7fe0 f0df ffff fff8     ................
 8007394:	f8ff ffff fff8 f8ff ffff fff8 f8ff ffff     ................
 80073a4:	fff8 f8ff df7f 7ff0 e0cf e07f 7f00 00f0     ................
 80073b4:	f83f 3f00 00f8 fc1f 1f00 00fe ff0f 0f80     ?..?............
 80073c4:	e0ff ff07 03f1 f1ff ff01 00f1 f3ff 7f00     ................
 80073d4:	00f3 fb3f 0f00 00ff ff03 0000 007f 0700     ..?.............

080073e4 <fonts24_5E_char>:
 80073e4:	0030 0000 7354 0800                         0...Ts..

080073ec <fonts24_5F>:
 80073ec:	00c0 c000 0000 00c0 c000 0000 00c0 c000     ................
 80073fc:	0000 00c0 c000 0000 00c0 c000 0000 00c0     ................
 800740c:	c000 0000                                   ....

08007410 <fonts24_5F_char>:
 8007410:	000c 0000 73ec 0800                         .....s..

08007418 <fonts24_60>:
	...

0800742c <fonts24_60_char>:
 800742c:	0006 0000 7418 0800                         .....t..

08007434 <fonts24_61>:
 8007434:	0000 0300 00cc ee07 0e00 0067 630c 0c00     ..........g..c..
 8007444:	0063 630c 0600 0033 3703 0f00 00fe fc0f     c..c..3..7......
 8007454:	0000 0000                                   ....

08007458 <fonts24_61_char>:
 8007458:	000c 0000 7434 0800                         ....4t..

08007460 <fonts24_62>:
 8007460:	0000 0f00 f0ff ff0f 03f0 000c 0606 0c00     ................
 8007470:	0003 030c 0c00 0003 0706 0300 00fe fc01     ................
 8007480:	0000 0000                                   ....

08007484 <fonts24_62_char>:
 8007484:	000c 0000 7460 0800                         ....`t..

0800748c <fonts24_63>:
 800748c:	0000 0100 00f8 fc07 0e00 0006 030c 0c00     ................
 800749c:	0003 030c 0e00 0003 0707 0300 008e 8801     ................
 80074ac:	0000 0000                                   ....

080074b0 <fonts24_63_char>:
 80074b0:	000c 0000 748c 0800                         .....t..

080074b8 <fonts24_64>:
 80074b8:	0000 0100 00f8 fc07 0e00 0006 030c 0c00     ................
 80074c8:	0003 030c 0e00 0003 0e07 0f00 f0ff ff0f     ................
 80074d8:	00f0 0000                                   ....

080074dc <fonts24_64_char>:
 80074dc:	000c 0000 74b8 0800                         .....t..

080074e4 <fonts24_65>:
 80074e4:	0000 0100 00f8 fc07 0e00 0036 330c 0c00     ..........6..3..
 80074f4:	0033 330c 0e00 0033 3607 0300 003e 3c01     3..3..3..6..>..<
 8007504:	0000 0000                                   ....

08007508 <fonts24_65_char>:
 8007508:	000c 0000 74e4 0800                         .....t..

08007510 <fonts24_66>:
 8007510:	0300 0000 0003 ff0f 0fe0 f0ff 0300 0030     ..............0.
 8007520:	3003 0000 0030 0000                         .0..0...

08007528 <fonts24_66_char>:
 8007528:	0007 0000 7510 0800                         .....u..

08007530 <fonts24_67>:
 8007530:	0000 3100 00fc fe73 e700 0007 03c6 c600     ...1..s.........
 8007540:	0003 03c6 c300 0006 ff7f 3f00 00ff 0000     ...........?....
 8007550:	0000 0000                                   ....

08007554 <fonts24_67_char>:
 8007554:	000b 0000 7530 0800                         ....0u..

0800755c <fonts24_68>:
 800755c:	0000 0f00 f0ff ff0f 00f0 000c 0600 0000     ................
 800756c:	0003 0300 0000 0003 0700 0f00 00fe fc0f     ................
 800757c:	0000 0000                                   ....

08007580 <fonts24_68_char>:
 8007580:	000c 0000 755c 0800                         ....\u..

08007588 <fonts24_69>:
 8007588:	0000 0f00 30ff ff0f 0030 0000 0000 0000     .....0..0.......

08007598 <fonts24_69_char>:
 8007598:	0005 0000 7588 0800                         .....u..

080075a0 <fonts24_6A>:
 80075a0:	00c0 ff00 30ff ff7f 0030 0000 0000 0000     .....0..0.......

080075b0 <fonts24_6A_char>:
 80075b0:	0005 0000 75a0 0800                         .....u..

080075b8 <fonts24_6B>:
 80075b8:	0000 0f00 f0ff ff0f 00f0 0060 3000 0000     ..........`..0..
 80075c8:	0078 ec01 0300 0086 030e 0c00 0001 0000     x...............

080075d8 <fonts24_6B_char>:
 80075d8:	000a 0000 75b8 0800                         .....u..

080075e0 <fonts24_6C>:
 80075e0:	0000 0f00 f0ff ff0f 00f0 0000               ............

080075ec <fonts24_6C_char>:
 80075ec:	0004 0000 75e0 0800                         .....u..

080075f4 <fonts24_6D>:
 80075f4:	0000 0f00 00ff ff0f 0000 000c 0600 0000     ................
 8007604:	0003 0300 0000 0003 ff0f 0f00 00fe 0600     ................
 8007614:	0000 0003 0300 0000 0003 0700 0f00 00fe     ................
 8007624:	fc0f 0000 0000 0000                         ........

0800762c <fonts24_6D_char>:
 800762c:	0012 0000 75f4 0800                         .....u..

08007634 <fonts24_6E>:
 8007634:	0000 0f00 00ff ff0f 0000 000c 0600 0000     ................
 8007644:	0003 0300 0000 0003 ff0f 0f00 00fe 0000     ................
 8007654:	0000 0000                                   ....

08007658 <fonts24_6E_char>:
 8007658:	000b 0000 7634 0800                         ....4v..

08007660 <fonts24_6F>:
 8007660:	0000 0100 00f8 fc03 0600 0006 030c 0c00     ................
 8007670:	0003 030c 0c00 0003 0606 0300 00fc f801     ................
 8007680:	0000 0000                                   ....

08007684 <fonts24_6F_char>:
 8007684:	000c 0000 7660 0800                         ....`v..

0800768c <fonts24_70>:
 800768c:	0000 ff00 00ff ffff 0600 0006 030c 0c00     ................
 800769c:	0003 030c 0c00 0003 0606 0300 00fc f801     ................
 80076ac:	0000 0000                                   ....

080076b0 <fonts24_70_char>:
 80076b0:	000c 0000 768c 0800                         .....v..

080076b8 <fonts24_71>:
 80076b8:	0000 0100 00fc fe03 0600 0006 030c 0c00     ................
 80076c8:	0003 030c 0c00 0003 0606 ff00 00ff ffff     ................
 80076d8:	0000 0000                                   ....

080076dc <fonts24_71_char>:
 80076dc:	000c 0000 76b8 0800                         .....v..

080076e4 <fonts24_72>:
 80076e4:	0000 0f00 00ff ff0f 0000 0006 0300 0000     ................
 80076f4:	0003 0300 0000 0000                         ........

080076fc <fonts24_72_char>:
 80076fc:	0008 0000 76e4 0800                         .....v..

08007704 <fonts24_73>:
 8007704:	0000 0300 000c 3e07 0e00 0033 330c 0c00     .......>..3..3..
 8007714:	0063 630c 0e00 006f ce07 0300 0080 0000     c..c..o.........
 8007724:	0000 0000                                   ....

08007728 <fonts24_73_char>:
 8007728:	000b 0000 7704 0800                         .....w..

08007730 <fonts24_74>:
 8007730:	0300 0000 0003 ff07 0fe0 e0ff 030c 0c00     ................
 8007740:	0003 0000 0000 0000                         ........

08007748 <fonts24_74_char>:
 8007748:	0007 0000 7730 0800                         ....0w..

08007750 <fonts24_75>:
 8007750:	0000 0100 00ff ff03 0600 0000 000c 0c00     ................
 8007760:	0000 000c 0600 0000 0003 0f00 00ff ff0f     ................
 8007770:	0000 0000                                   ....

08007774 <fonts24_75_char>:
 8007774:	000c 0000 7750 0800                         ....Pw..

0800777c <fonts24_76>:
 800777c:	0100 0000 0007 3e00 0100 00f8 c007 0600     .......>........
 800778c:	0000 c007 0100 00f8 3e00 0000 0007 0100     .........>......
 800779c:	0000 0000                                   ....

080077a0 <fonts24_76_char>:
 80077a0:	000b 0000 777c 0800                         ....|w..

080077a8 <fonts24_77>:
 80077a8:	0300 0000 001f fc01 0700 00e0 000e 0700     ................
 80077b8:	00f0 fe01 0000 000f fe01 0700 00f0 000e     ................
 80077c8:	0700 00e0 fc01 0000 001f 0300 0000 0000     ................

080077d8 <fonts24_77_char>:
 80077d8:	000f 0000 77a8 0800                         .....w..

080077e0 <fonts24_78>:
 80077e0:	0008 0e00 0001 0707 0100 009e f800 0000     ................
 80077f0:	0070 dc00 0100 008e 0307 0e00 0001 0008     p...............
 8007800:	0000 0000                                   ....

08007804 <fonts24_78_char>:
 8007804:	000c 0000 77e0 0800                         .....w..

0800780c <fonts24_79>:
 800780c:	0000 c000 000f 7fc0 c100 00f0 8067 3e00     ............g..>
 800781c:	0000 801f 0300 00f0 7f00 0000 000f 0000     ................
 800782c:	0000 0000                                   ....

08007830 <fonts24_79_char>:
 8007830:	000b 0000 780c 0800                         .....x..

08007838 <fonts24_7A>:
 8007838:	000c 0e00 0003 030f 0d00 0083 e30c 0c00     ................
 8007848:	0073 1b0c 0c00 000f 070c 0c00 0003 0000     s...............
 8007858:	0000 0000                                   ....

0800785c <fonts24_7A_char>:
 800785c:	000b 0000 7838 0800                         ....8x..

08007864 <fonts24_7B>:
 8007864:	0000 0000 0003 0100 0080 c000 0000 0f60     ..............`.
 8007874:	f0ff ff0f 00f0 6000 0000 00c0 8001 0300     .......`........
 8007884:	0000 0000                                   ....

08007888 <fonts24_7B_char>:
 8007888:	000c 0000 7864 0800                         ....dx..

08007890 <fonts24_7C>:
 8007890:	0000 0000 0000 ffff fff0 f0ff 0000 0000     ................
 80078a0:	0000 0000                                   ....

080078a4 <fonts24_7C_char>:
 80078a4:	0006 0000 7890 0800                         .....x..

080078ac <fonts24_7D>:
 80078ac:	0000 0000 00c0 8001 0300 0000 0006 0f00     ................
 80078bc:	f0ff ff0f 06f0 0000 0003 0100 0080 c000     ................
 80078cc:	0000 0000                                   ....

080078d0 <fonts24_7D_char>:
 80078d0:	000c 0000 78ac 0800                         .....x..

080078d8 <fonts24_7E_92>:
 80078d8:	0000 0000 3001 0000 00f0 0000 0000 0000     .....0..........

080078e8 <fonts24_7E_92_char>:
 80078e8:	0005 0000 78d8 0800                         .....x..

080078f0 <fonts24_93_B0>:
 80078f0:	0000 0000 e000 0100 0010 1001 0100 0010     ................
 8007900:	e000 0000 0000 0000                         ........

08007908 <fonts24_93_B0_char>:
 8007908:	0007 0000 78f0 0800                         .....x..

08007910 <fonts24_B1_BF>:
 8007910:	000c 0e00 0003 030f 0d00 0083 e30c 0cc0     ................
 8007920:	c073 1b0c 0c00 000f 070c 0c00 0003 0000     s...............
 8007930:	0000 0000                                   ....

08007934 <fonts24_B1_BF_char>:
 8007934:	000b 0000 7910 0800                         .....y..

0800793c <fonts24_C0_C1>:
 800793c:	0004 0700 0080 f003 0000 007e 6f00 00c0     ..........~..o..
 800794c:	e061 6000 0038 f460 6700 00e2 017f f800     a..`8.`..g......
 800795c:	0300 00e0 0007 0400 0000 0000               ............

08007968 <fonts24_C0_C1_char>:
 8007968:	000e 0000 793c 0800                         ....<y..

08007970 <fonts24_C2_C4>:
 8007970:	0004 0700 0080 f003 0000 007e 6f00 00c6     ..........~..o..
 8007980:	e661 6000 0030 f060 6700 00e6 067f f800     a..`0.`..g......
 8007990:	0300 00e0 0007 0400 0000 0000               ............

0800799c <fonts24_C2_C4_char>:
 800799c:	000e 0000 7970 0800                         ....py..

080079a4 <fonts24_C5>:
 80079a4:	0004 0700 0080 f003 0000 007e 6f00 00c0     ..........~..o..
 80079b4:	ec61 6000 0032 f260 6700 00ec 007f f800     a..`2.`..g......
 80079c4:	0300 00e0 0007 0400 0000 0000               ............

080079d0 <fonts24_C5_char>:
 80079d0:	000e 0000 79a4 0800                         .....y..

080079d8 <fonts24_C6_E0>:
 80079d8:	0000 0300 00cc ee07 0e00 0067 630c 0c10     ..........g..c..
 80079e8:	3063 630c 0660 4033 3703 0f00 00fe fc0f     c0.c`.3@.7......
 80079f8:	0000 0000                                   ....

080079fc <fonts24_C6_E0_char>:
 80079fc:	000c 0000 79d8 0800                         .....y..

08007a04 <fonts24_E1>:
 8007a04:	0000 0700 0088 cc07 0c00 0066 630c 0c40     ..........f..c@.
 8007a14:	6063 330c 0630 1033 3702 0f00 00fe f80f     c`.30.3..7......
 8007a24:	0000 0000                                   ....

08007a28 <fonts24_E1_char>:
 8007a28:	000c 0000 7a04 0800                         .....z..

08007a30 <fonts24_E2_E4>:
 8007a30:	0000 0300 00cc ee07 0e00 6067 630c 0c60     ..........g`.c`.
 8007a40:	0063 630c 0600 6033 3703 0f60 00fe fc0f     c..c..3`.7`.....
 8007a50:	0000 0000                                   ....

08007a54 <fonts24_E2_E4_char>:
 8007a54:	000c 0000 7a30 0800                         ....0z..

08007a5c <fonts24_E5>:
 8007a5c:	0000 0300 00cc ee07 0e00 0067 630c 0c30     ..........g..c0.
 8007a6c:	4863 630c 0648 3033 3703 0f00 00fe fc0f     cH.cH.30.7......
 8007a7c:	0000 0000                                   ....

08007a80 <fonts24_E5_char>:
 8007a80:	000c 0000 7a5c 0800                         ....\z..

08007a88 <fonts24_E6_E9>:
 8007a88:	0000 0300 00f8 fc07 0600 0066 630c 0c40     ..........f..c@.
 8007a98:	6063 630c 0630 1063 6706 0300 007e 7803     c`.c0.c..g..~..x
 8007aa8:	0000 0000                                   ....

08007aac <fonts24_E6_E9_char>:
 8007aac:	000c 0000 7a88 0800                         .....z..

08007ab4 <fonts24_EA_ED>:
 8007ab4:	0000 0000 4000 ff0f 0f60 30ff 0000 0010     .....@..`..0....
 8007ac4:	0000 0000                                   ....

08007ac8 <fonts24_EA_ED_char>:
 8007ac8:	0006 0000 7ab4 0800                         .....z..

08007ad0 <fonts24_EE_F1>:
 8007ad0:	0000 0000 0000 ff0f 0f00 60ff 0600 0030     ...........`..0.
 8007ae0:	3003 0300 0060 6003 0700 0f60 30fe fc0f     .0..`..`..`..0..
 8007af0:	0000 0000                                   ....

08007af4 <fonts24_EE_F1_char>:
 8007af4:	000c 0000 7ad0 0800                         .....z..

08007afc <fonts24_F2_F3>:
 8007afc:	0000 0100 00f8 fc07 0e00 0006 030c 0c40     ..............@.
 8007b0c:	6003 030c 0e30 1003 0706 0300 00fe f801     .`..0...........
 8007b1c:	0000 0000                                   ....

08007b20 <fonts24_F2_F3_char>:
 8007b20:	000c 0000 7afc 0800                         .....z..

08007b28 <fonts24_F4_F6>:
 8007b28:	0000 0100 00f8 fc03 0600 6006 030c 0c60     ...........`..`.
 8007b38:	0003 030c 0c00 6003 0606 0360 00fc f801     .......`..`.....
 8007b48:	0000 0000                                   ....

08007b4c <fonts24_F4_F6_char>:
 8007b4c:	000c 0000 7b28 0800                         ....({..

08007b54 <fonts24_F7_F9>:
 8007b54:	0000 0100 00ff ff03 0600 0000 000c 0c10     ................
 8007b64:	3000 000c 0660 4000 0003 0f00 00ff ff0f     .0..`..@........
 8007b74:	0000 0000                                   ....

08007b78 <fonts24_F7_F9_char>:
 8007b78:	000c 0000 7b54 0800                         ....T{..

08007b80 <fonts24_FA>:
 8007b80:	0000 0100 00ff ff07 0e00 0000 000c 0c40     ..............@.
 8007b90:	6000 000c 0e30 1000 0006 0f00 00ff ff0f     .`..0...........
 8007ba0:	0000 0000                                   ....

08007ba4 <fonts24_FA_char>:
 8007ba4:	000c 0000 7b80 0800                         .....{..

08007bac <fonts24_FB_FC>:
 8007bac:	0000 0100 00ff ff03 0600 6000 000c 0c60     ...........`..`.
 8007bbc:	0000 000c 0600 6000 0003 0f60 00ff ff0f     .......`..`.....
 8007bcc:	0000 0000                                   ....

08007bd0 <fonts24_FB_FC_char>:
 8007bd0:	000c 0000 7bac 0800                         .....{..

08007bd8 <fonts24_FD_FF>:
	...

08007bec <fonts24_FD_FF_char>:
 8007bec:	0006 0000 7bd8 0800                         .....{..

08007bf4 <fonts32_20>:
	...

08007c10 <fonts32_20_char>:
 8007c10:	0007 0000 7bf4 0800                         .....{..

08007c18 <fonts32_21>:
	...
 8007c20:	ffe0 039f ffe0 039f ffe0 039f 0000 0000     ................
	...

08007c38 <fonts32_21_char>:
 8007c38:	0008 0000 7c18 0800                         .....|..

08007c40 <fonts32_22>:
 8007c40:	0000 0000 0fe0 0000 1fe0 0000 0fe0 0000     ................
	...
 8007c58:	0fe0 0000 1fe0 0000 0fe0 0000 0000 0000     ................

08007c68 <fonts32_22_char>:
 8007c68:	000a 0000 7c40 0800                         ....@|..

08007c70 <fonts32_23>:
 8007c70:	3800 001c 3800 071c 3800 07fc f800 07ff     .8...8...8......
 8007c80:	fe00 01ff ffe0 001f 7fe0 001c 3be0 001c     .............;..
 8007c90:	3800 07fc 3800 07fe f800 07ff ff80 003f     .8...8........?.
 8007ca0:	ffe0 001f 3fe0 001c 38e0 001c 3800 001c     .....?...8...8..
	...

08007cb8 <fonts32_23_char>:
 8007cb8:	0012 0000 7c70 0800                         ....p|..

08007cc0 <fonts32_24>:
 8007cc0:	0000 0000 3f00 00f0 7f80 01f0 ffc0 03f0     .....?..........
 8007cd0:	f0e0 07c0 e0e0 0781 e0e0 0701 fff8 3fff     ...............?
 8007ce0:	fff8 3fff c0e0 0703 c0e0 0783 83e0 07c7     ...?............
 8007cf0:	83c0 03ff 0380 01ff 0000 00fe 0000 0000     ................
	...

08007d08 <fonts32_24_char>:
 8007d08:	0012 0000 7cc0 0800                         .....|..

08007d10 <fonts32_25>:
 8007d10:	0000 0000 1f00 0000 7fc0 0000 ffe0 0000     ................
 8007d20:	e1e0 0000 c0e0 0000 c0e0 0600 e1e0 0780     ................
 8007d30:	ffe0 07e0 7fc0 03f8 1f00 00fe 8000 003f     ..............?.
 8007d40:	c000 000f f000 0003 fc00 0000 3f00 01fc     .............?..
 8007d50:	0fc0 03fe 03e0 07ff 00e0 0603 0060 0603     ............`...
 8007d60:	0000 0603 0000 07ff 0000 03fe 0000 01fc     ................
	...

08007d78 <fonts32_25_char>:
 8007d78:	001a 0000 7d10 0800                         .....}..

08007d80 <fonts32_26>:
 8007d80:	0000 0000 0000 007c 0000 01fe 0000 03ff     ......|.........
 8007d90:	9f80 03ff ffc0 0783 ffe0 0701 f8e0 0700     ................
 8007da0:	f0e0 0701 f0e0 0707 f8e0 038f 3fe0 03ff     .............?..
 8007db0:	1fc0 01fe 0f80 00f8 0000 01fe 0000 03fe     ................
 8007dc0:	0000 038e 0000 0380 0000 0000 0000 0000     ................

08007dd0 <fonts32_26_char>:
 8007dd0:	0014 0000 7d80 0800                         .....}..

08007dd8 <fonts32_27>:
 8007dd8:	0000 0000 07e0 0000 1fe0 0000 1fe0 0000     ................
 8007de8:	07e0 0000 0000 0000 0000 0000 0000 0000     ................

08007df8 <fonts32_27_char>:
 8007df8:	0008 0000 7dd8 0800                         .....}..

08007e00 <fonts32_28>:
 8007e00:	0000 0000 0000 003f f000 03ff fc00 0fff     ......?.........
 8007e10:	ff00 3fff 1fc0 7f00 03e0 f800 00e0 c000     ...?............
 8007e20:	0020 8000 0000 0000 0000 0000 0000 0000      ...............

08007e30 <fonts32_28_char>:
 8007e30:	000c 0000 7e00 0800                         .....~..

08007e38 <fonts32_29>:
 8007e38:	0000 0000 0020 0000 00e0 c000 03e0 f000     .... ...........
 8007e48:	0fc0 fe00 ff80 7fff fe00 1fff f800 07ff     ................
 8007e58:	c000 00ff 0000 0000 0000 0000               ............

08007e64 <fonts32_29_char>:
 8007e64:	000b 0000 7e38 0800                         ....8~..

08007e6c <fonts32_2A>:
 8007e6c:	0380 0000 0380 0000 3b80 0000 3f00 0000     .........;...?..
 8007e7c:	3fe0 0000 0fe0 0000 3fe0 0000 3f00 0000     .?.......?...?..
 8007e8c:	3b80 0000 0380 0000 0380 0000 0000 0000     .;..............
	...

08007ea4 <fonts32_2A_char>:
 8007ea4:	000e 0000 7e6c 0800                         ....l~..

08007eac <fonts32_2B>:
 8007eac:	0000 0000 8000 0003 8000 0003 8000 0003     ................
 8007ebc:	8000 0003 8000 0003 8000 0003 fe00 007f     ................
 8007ecc:	fe00 007f fe00 007f 8000 0003 8000 0003     ................
 8007edc:	8000 0003 8000 0003 8000 0003 8000 0003     ................
	...

08007ef4 <fonts32_2B_char>:
 8007ef4:	0012 0000 7eac 0800                         .....~..

08007efc <fonts32_2C>:
	...
 8007f04:	0000 2780 0000 3f80 0000 3f80 0000 1f80     ...'...?...?....
	...

08007f1c <fonts32_2C_char>:
 8007f1c:	0008 0000 7efc 0800                         .....~..

08007f24 <fonts32_2D>:
 8007f24:	0000 000e 0000 000e 0000 000e 0000 000e     ................
 8007f34:	0000 000e 0000 000e 0000 000e 0000 000e     ................
 8007f44:	0000 000e 0000 0000                         ........

08007f4c <fonts32_2D_char>:
 8007f4c:	000a 0000 7f24 0800                         ....$...

08007f54 <fonts32_2E>:
	...
 8007f5c:	0000 0780 0000 0780 0000 0780 0000 0780     ................
	...

08007f74 <fonts32_2E_char>:
 8007f74:	0008 0000 7f54 0800                         ....T...

08007f7c <fonts32_2F>:
 8007f7c:	0000 0780 0000 07f8 8000 07ff f000 00ff     ................
 8007f8c:	ff00 000f ffe0 0000 1fe0 0000 01e0 0000     ................
 8007f9c:	0000 0000                                   ....

08007fa0 <fonts32_2F_char>:
 8007fa0:	0009 0000 7f7c 0800                         ....|...

08007fa8 <fonts32_30>:
 8007fa8:	0000 0000 fc00 003f ff00 00ff ff80 01ff     ......?.........
 8007fb8:	0fc0 03e0 01e0 0780 00e0 0700 00e0 0700     ................
 8007fc8:	00e0 0700 00e0 0700 01e0 0380 0fc0 03e0     ................
 8007fd8:	ff80 01ff ff00 00ff fc00 003f 0000 0000     ..........?.....
 8007fe8:	0000 0000                                   ....

08007fec <fonts32_30_char>:
 8007fec:	0011 0000 7fa8 0800                         ........

08007ff4 <fonts32_31>:
	...
 8008000:	1800 0000 1c00 0000 0e00 0000 0f00 0000     ................
 8008010:	0780 0000 ffc0 07ff ffe0 07ff ffe0 07ff     ................
	...

08008034 <fonts32_31_char>:
 8008034:	0010 0000 7ff4 0800                         ........

0800803c <fonts32_32>:
 800803c:	0000 0000 0c00 0380 0f80 03c0 0fc0 03e0     ................
 800804c:	03c0 03f0 00e0 0378 00e0 033c 00e0 031e     ......x...<.....
 800805c:	00e0 030f 80e0 0307 c0e0 0303 f3c0 0301     ................
 800806c:	ff80 0300 3f00 0300 0c00 0300 0000 0000     .....?..........
 800807c:	0000 0000                                   ....

08008080 <fonts32_32_char>:
 8008080:	0011 0000 803c 0800                         ....<...

08008088 <fonts32_33>:
 8008088:	0000 0000 0700 0070 0780 00f0 07c0 01f0     ......p.........
 8008098:	03c0 03e0 01e0 0780 c0e0 0701 c0e0 0701     ................
 80080a8:	c0e0 0701 c1e0 0701 e3e0 0781 ffc0 07c7     ................
 80080b8:	3f80 03ff 1f00 01fe 0000 00fc 0000 0000     .?..............
 80080c8:	0000 0000                                   ....

080080cc <fonts32_33_char>:
 80080cc:	0011 0000 8088 0800                         ........

080080d4 <fonts32_34>:
 80080d4:	0000 003e 0000 003f 8000 003f c000 003b     ..>...?...?...;.
 80080e4:	e000 0039 f000 0038 7c00 0038 3e00 0038     ..9...8..|8..>8.
 80080f4:	1f80 0038 ffc0 07ff ffe0 07ff ffe0 07ff     ..8.............
 8008104:	0000 0038 0000 0038 0000 0038 0000 0000     ..8...8...8.....

08008114 <fonts32_34_char>:
 8008114:	0010 0000 80d4 0800                         ........

0800811c <fonts32_35>:
 800811c:	0000 0000 c000 0071 fe00 00f1 ffc0 01f1     ......q.........
 800812c:	ffc0 03c1 e3c0 0780 f1c0 0700 71c0 0700     .............q..
 800813c:	71c0 0700 71c0 0700 f1c0 0780 f1c0 03c1     .q...q..........
 800814c:	e1c0 01ff c1c0 00ff 8000 007f 0000 0000     ................

0800815c <fonts32_35_char>:
 800815c:	0010 0000 811c 0800                         ........

08008164 <fonts32_36>:
 8008164:	0000 0000 fc00 007f ff00 00ff ff80 01ff     ................
 8008174:	c7c0 03f7 e1e0 0781 e0e0 0700 e0e0 0700     ................
 8008184:	e0e0 0700 e0e0 0700 e0e0 0780 e3e0 03c1     ................
 8008194:	c7c0 01ff 8780 00ff 0700 007f 0000 0000     ................

080081a4 <fonts32_36_char>:
 80081a4:	0010 0000 8164 0800                         ....d...

080081ac <fonts32_37>:
 80081ac:	0000 0000 01e0 0000 01e0 0000 01e0 0000     ................
 80081bc:	01e0 07e0 01e0 07fc 81e0 07ff e1e0 07ff     ................
 80081cc:	f9e0 001f fde0 0003 7fe0 0000 1fe0 0000     ................
 80081dc:	07e0 0000 03e0 0000 01e0 0000 0000 0000     ................

080081ec <fonts32_37_char>:
 80081ec:	0010 0000 81ac 0800                         ........

080081f4 <fonts32_38>:
 80081f4:	0000 0000 0000 007e 1f80 01ff bfc0 03ff     ......~.........
 8008204:	ffc0 03e7 f1e0 0781 e0e0 0701 e0e0 0701     ................
 8008214:	e0e0 0701 e0e0 0701 f1e0 0781 ffc0 03e7     ................
 8008224:	bfc0 01ff 1f00 00ff 0000 007e 0000 0000     ..........~.....
 8008234:	0000 0000                                   ....

08008238 <fonts32_38_char>:
 8008238:	0011 0000 81f4 0800                         ........

08008240 <fonts32_39>:
 8008240:	0000 0000 fc00 0060 ff00 01e1 ff80 03e3     ......`.........
 8008250:	efc0 03e7 81e0 0787 00e0 0707 00e0 0707     ................
 8008260:	00e0 0707 00e0 0787 81e0 03c7 efc0 03f3     ................
 8008270:	ff80 01ff ff00 00ff fc00 003f 0000 0000     ..........?.....

08008280 <fonts32_39_char>:
 8008280:	0010 0000 8240 0800                         ....@...

08008288 <fonts32_3A>:
	...
 8008290:	3800 0780 3800 0780 3800 0780 3800 0780     .8...8...8...8..
	...

080082a8 <fonts32_3A_char>:
 80082a8:	0008 0000 8288 0800                         ........

080082b0 <fonts32_3B>:
	...
 80082b8:	3800 6780 3800 7f80 3800 3f80 3800 1f80     .8.g.8...8.?.8..
	...

080082d0 <fonts32_3B_char>:
 80082d0:	0008 0000 82b0 0800                         ........

080082d8 <fonts32_3C>:
 80082d8:	0000 0000 c000 0003 c000 0003 e000 0007     ................
 80082e8:	e000 0007 e000 0007 f000 000f 7000 000e     .............p..
 80082f8:	7800 001e 7800 001e 3800 001c 3c00 003c     .x...x...8...<<.
 8008308:	1c00 0038 1e00 0078 0e00 0070 0e00 0070     ..8...x...p...p.
	...

08008320 <fonts32_3C_char>:
 8008320:	0012 0000 82d8 0800                         ........

08008328 <fonts32_3D>:
 8008328:	0000 0000 3800 001e 3800 001e 3800 001e     .....8...8...8..
 8008338:	3800 001e 3800 001e 3800 001e 3800 001e     .8...8...8...8..
 8008348:	3800 001e 3800 001e 3800 001e 3800 001e     .8...8...8...8..
 8008358:	3800 001e 3800 001e 3800 001e 3800 001e     .8...8...8...8..
	...

08008370 <fonts32_3D_char>:
 8008370:	0012 0000 8328 0800                         ....(...

08008378 <fonts32_3E>:
 8008378:	0000 0000 0e00 0070 1e00 0078 1e00 0078     ......p...x...x.
 8008388:	1c00 0038 3c00 003c 3800 001c 3800 001c     ..8..<<..8...8..
 8008398:	7800 001e 7000 000e f000 000f e000 0007     .x...p..........
 80083a8:	e000 0007 e000 0007 c000 0003 c000 0003     ................
	...

080083c0 <fonts32_3E_char>:
 80083c0:	0012 0000 8378 0800                         ....x...

080083c8 <fonts32_3F>:
 80083c8:	0000 0000 0f00 0000 0f80 0000 0fc0 0000     ................
 80083d8:	07e0 0000 01e0 0000 00e0 079e 00e0 079f     ................
 80083e8:	80e0 079f c0e0 079f e1e0 0003 fbe0 0000     ................
 80083f8:	ffc0 0000 7f80 0000 1f00 0000 0000 0000     ................

08008408 <fonts32_3F_char>:
 8008408:	0010 0000 83c8 0800                         ........

08008410 <fonts32_40>:
 8008410:	0000 0000 8000 007f e000 03ff f800 0fff     ................
 8008420:	fc00 1f81 3e00 3e00 0f00 3c00 0780 787f     .....>.>...<...x
 8008430:	c3c0 f1ff e1c0 f1ff f1e0 e3c1 78e0 e780     .............x..
 8008440:	38e0 e700 38e0 c780 38e0 c380 38e0 c1c0     .8...8...8...8..
 8008450:	78e0 c1f0 f8e0 c3ff c0e0 c7ff f8e0 e7ff     .x..............
 8008460:	f9e0 e783 39c0 e380 03c0 f3c0 0780 71e0     .....9.........q
 8008470:	1f00 78f8 fe00 3c7f fc00 1c3f f000 0c0f     ...x...<..?.....
 8008480:	0000 0400 0000 0000 0000 0000               ............

0800848c <fonts32_40_char>:
 800848c:	001f 0000 8410 0800                         ........

08008494 <fonts32_41>:
 8008494:	0000 0780 0000 07e0 0000 07fc 0000 03ff     ................
 80084a4:	e000 007f f800 000f ff00 000d 7fe0 000c     ................
 80084b4:	0fe0 000c 01e0 000c 1fe0 000c 7fe0 000c     ................
 80084c4:	ff00 000f f800 000f e000 007f 0000 03ff     ................
 80084d4:	0000 07fc 0000 07e0 0000 0780 0000 0600     ................
 80084e4:	0000 0000                                   ....

080084e8 <fonts32_41_char>:
 80084e8:	0015 0000 8494 0800                         ........

080084f0 <fonts32_42>:
	...
 80084f8:	ffe0 07ff ffe0 07ff ffe0 07ff c0e0 0701     ................
 8008508:	c0e0 0701 c0e0 0701 c0e0 0701 c0e0 0701     ................
 8008518:	c0e0 0701 c0e0 0701 e1e0 0701 f3e0 0783     ................
 8008528:	ffc0 03c7 bf80 03ff 1f00 01ff 0000 00fe     ................
 8008538:	0000 0000                                   ....

0800853c <fonts32_42_char>:
 800853c:	0013 0000 84f0 0800                         ........

08008544 <fonts32_43>:
 8008544:	0000 0000 f800 000f fe00 003f ff00 00ff     ..........?.....
 8008554:	ff80 01ff 0fc0 03f0 03e0 03c0 01e0 0780     ................
 8008564:	01e0 0780 00e0 0700 00e0 0700 00e0 0700     ................
 8008574:	00e0 0700 01e0 0780 01e0 0780 07c0 03e0     ................
 8008584:	0fc0 01f8 0f80 00f8 0f00 0078 0c00 0038     ..........x...8.
 8008594:	0000 0000                                   ....

08008598 <fonts32_43_char>:
 8008598:	0015 0000 8544 0800                         ....D...

080085a0 <fonts32_44>:
	...
 80085a8:	ffe0 03ff ffe0 03ff ffe0 03ff 00e0 0380     ................
 80085b8:	00e0 0380 00e0 0380 00e0 0380 00e0 0380     ................
 80085c8:	00e0 0380 00e0 0380 01e0 0380 01e0 0380     ................
 80085d8:	03c0 03c0 0fc0 01f0 ff80 00ff ff00 007f     ................
 80085e8:	fc00 003f f000 000f 0000 0000               ..?.........

080085f4 <fonts32_44_char>:
 80085f4:	0015 0000 85a0 0800                         ........

080085fc <fonts32_45>:
	...
 8008604:	ffe0 03ff ffe0 03ff ffe0 03ff c0e0 0381     ................
 8008614:	c0e0 0381 c0e0 0381 c0e0 0381 c0e0 0381     ................
 8008624:	c0e0 0381 c0e0 0381 c0e0 0381 c0e0 0381     ................
 8008634:	c0e0 0381 c0e0 0381 c0e0 0381 00e0 0380     ................
 8008644:	0000 0000                                   ....

08008648 <fonts32_45_char>:
 8008648:	0013 0000 85fc 0800                         ........

08008650 <fonts32_46>:
	...
 8008658:	ffe0 07ff ffe0 07ff ffe0 07ff c0e0 0001     ................
 8008668:	c0e0 0001 c0e0 0001 c0e0 0001 c0e0 0001     ................
 8008678:	c0e0 0001 c0e0 0001 c0e0 0001 c0e0 0001     ................
 8008688:	c0e0 0001 00e0 0000 00e0 0000 0000 0000     ................

08008698 <fonts32_46_char>:
 8008698:	0012 0000 8650 0800                         ....P...

080086a0 <fonts32_47>:
 80086a0:	0000 0000 f000 000f fc00 003f ff00 007f     ..........?.....
 80086b0:	ff80 01ff 07c0 01f0 01c0 03e0 01e0 03c0     ................
 80086c0:	00e0 0780 00e0 0780 00e0 0700 00e0 0700     ................
 80086d0:	00e0 0707 00e0 0707 01e0 0787 01e0 0787     ................
 80086e0:	03c0 03c7 0fc0 03c7 0f80 01ff 0f00 01ff     ................
 80086f0:	0c00 00ff 0000 0000                         ........

080086f8 <fonts32_47_char>:
 80086f8:	0016 0000 86a0 0800                         ........

08008700 <fonts32_48>:
	...
 8008708:	ffe0 07ff ffe0 07ff ffe0 07ff c000 0001     ................
 8008718:	c000 0001 c000 0001 c000 0001 c000 0001     ................
 8008728:	c000 0001 c000 0001 c000 0001 c000 0001     ................
 8008738:	c000 0001 c000 0001 ffe0 07ff ffe0 07ff     ................
 8008748:	ffe0 07ff 0000 0000                         ........

08008750 <fonts32_48_char>:
 8008750:	0014 0000 8700 0800                         ........

08008758 <fonts32_49>:
	...
 8008760:	ffe0 07ff ffe0 07ff ffe0 07ff ffe0 07ff     ................
 8008770:	0000 0000                                   ....

08008774 <fonts32_49_char>:
 8008774:	0007 0000 8758 0800                         ....X...

0800877c <fonts32_4A>:
 800877c:	0000 00f0 0000 01f0 0000 03f0 0000 07f0     ................
 800878c:	0000 07c0 0000 0780 0000 0780 0000 0780     ................
 800879c:	0000 07c0 ffe0 07ff ffe0 03ff ffe0 01ff     ................
 80087ac:	ffe0 007f 0000 0000                         ........

080087b4 <fonts32_4A_char>:
 80087b4:	000e 0000 877c 0800                         ....|...

080087bc <fonts32_4B>:
	...
 80087c4:	ffe0 07ff ffe0 07ff ffe0 07ff c000 0007     ................
 80087d4:	e000 0003 f000 0001 f800 0001 fc00 0007     ................
 80087e4:	fe00 000f 9f00 001f 0f80 007f 07c0 00fc     ................
 80087f4:	03e0 01f8 01e0 07f0 00e0 07c0 0060 0780     ............`...
 8008804:	0020 0700 0000 0600 0000 0000                ...........

08008810 <fonts32_4B_char>:
 8008810:	0015 0000 87bc 0800                         ........

08008818 <fonts32_4C>:
	...
 8008820:	ffe0 07ff ffe0 07ff ffe0 07ff 0000 0780     ................
 8008830:	0000 0780 0000 0780 0000 0780 0000 0780     ................
 8008840:	0000 0780 0000 0780 0000 0780 0000 0780     ................
 8008850:	0000 0780 0000 0780 0000 0000               ............

0800885c <fonts32_4C_char>:
 800885c:	0011 0000 8818 0800                         ........

08008864 <fonts32_4D>:
	...
 800886c:	ffe0 07ff ffe0 07ff ffe0 07ff 0fe0 0000     ................
 800887c:	7fe0 0000 ff00 0003 f800 001f e000 00ff     ................
 800888c:	0000 07fe 0000 07f0 0000 07f0 0000 07fc     ................
 800889c:	8000 00ff f000 003f fe00 0003 ffc0 0000     ......?.........
 80088ac:	0fe0 0000 ffe0 07ff ffe0 07ff ffe0 07ff     ................
 80088bc:	0000 0000                                   ....

080088c0 <fonts32_4D_char>:
 80088c0:	0017 0000 8864 0800                         ....d...

080088c8 <fonts32_4E>:
	...
 80088d0:	ffe0 07ff ffe0 07ff ffe0 07ff 07e0 0000     ................
 80088e0:	1fc0 0000 7f00 0000 fc00 0000 f800 0003     ................
 80088f0:	f000 0007 c000 001f 8000 003f 0000 007e     ..........?...~.
 8008900:	0000 01f8 0000 03f0 ffe0 07ff ffe0 07ff     ................
 8008910:	ffe0 07ff 0000 0000                         ........

08008918 <fonts32_4E_char>:
 8008918:	0014 0000 88c8 0800                         ........

08008920 <fonts32_4F>:
 8008920:	e000 0007 f800 000f fe00 003f ff00 007f     ..........?.....
 8008930:	1f80 01f8 07c0 03f0 03c0 03c0 01e0 0780     ................
 8008940:	01e0 0780 00e0 0700 00e0 0700 00e0 0700     ................
 8008950:	00e0 0700 00e0 0700 01e0 0780 03e0 03c0     ................
 8008960:	07c0 03e0 1f80 01f8 ff00 00ff fe00 007f     ................
 8008970:	fc00 001f e000 0007 0000 0000               ............

0800897c <fonts32_4F_char>:
 800897c:	0017 0000 8920 0800                         .... ...

08008984 <fonts32_50>:
	...
 800898c:	ffe0 07ff ffe0 07ff ffe0 07ff 80e0 0003     ................
 800899c:	80e0 0003 80e0 0003 80e0 0003 80e0 0003     ................
 80089ac:	80e0 0003 80e0 0003 80e0 0003 c1e0 0003     ................
 80089bc:	e3e0 0003 ffc0 0001 ff80 0000 7f00 0000     ................
 80089cc:	0000 0000                                   ....

080089d0 <fonts32_50_char>:
 80089d0:	0013 0000 8984 0800                         ........

080089d8 <fonts32_51>:
 80089d8:	e000 0007 f800 000f fe00 003f ff00 007f     ..........?.....
 80089e8:	1f80 01f8 07c0 03f0 03c0 03c0 01e0 0780     ................
 80089f8:	01e0 0780 00e0 0700 00e0 0700 00e0 0770     ..............p.
 8008a08:	00e0 07f0 00e0 07f0 01e0 07e0 03e0 03c0     ................
 8008a18:	07c0 03e0 1f80 07f8 ff00 0fff fe00 0f7f     ................
 8008a28:	fc00 0e1f e000 0c07 0000 0000               ............

08008a34 <fonts32_51_char>:
 8008a34:	0017 0000 89d8 0800                         ........

08008a3c <fonts32_52>:
	...
 8008a44:	ffe0 07ff ffe0 07ff ffe0 07ff c0e0 0001     ................
 8008a54:	c0e0 0001 c0e0 0001 c0e0 0001 c0e0 0001     ................
 8008a64:	c0e0 0003 c0e0 0007 c0e0 000f c0e0 001f     ................
 8008a74:	c0e0 007f ffe0 01fd ffc0 03f8 7f80 07e0     ................
 8008a84:	0000 07c0 0000 0700 0000 0600 0000 0000     ................

08008a94 <fonts32_52_char>:
 8008a94:	0016 0000 8a3c 0800                         ....<...

08008a9c <fonts32_53>:
 8008a9c:	0000 0000 0000 0078 3f00 00f8 7f80 01f8     ......x..?......
 8008aac:	ffc0 03f0 f3e0 03c0 e1e0 0781 e0e0 0781     ................
 8008abc:	e0e0 0701 c0e0 0701 c0e0 0703 c0e0 0703     ................
 8008acc:	c1e0 0783 83e0 0787 8fc0 03ff 0f80 01ff     ................
 8008adc:	0f00 00fe 0e00 007c 0000 0000               ......|.....

08008ae8 <fonts32_53_char>:
 8008ae8:	0013 0000 8a9c 0800                         ........

08008af0 <fonts32_54>:
 8008af0:	00e0 0000 00e0 0000 00e0 0000 00e0 0000     ................
 8008b00:	00e0 0000 00e0 0000 00e0 0000 ffe0 07ff     ................
 8008b10:	ffe0 07ff ffe0 07ff ffe0 07ff 00e0 0000     ................
 8008b20:	00e0 0000 00e0 0000 00e0 0000 00e0 0000     ................
 8008b30:	00e0 0000 00e0 0000 0000 0000               ............

08008b3c <fonts32_54_char>:
 8008b3c:	0013 0000 8af0 0800                         ........

08008b44 <fonts32_55>:
	...
 8008b4c:	ffe0 007f ffe0 00ff ffe0 03ff 0000 03f0     ................
 8008b5c:	0000 03c0 0000 0780 0000 0780 0000 0780     ................
 8008b6c:	0000 0780 0000 0780 0000 0780 0000 0780     ................
 8008b7c:	0000 03c0 0000 03f0 ffe0 03ff ffe0 00ff     ................
 8008b8c:	ffe0 007f 0000 0000                         ........

08008b94 <fonts32_55_char>:
 8008b94:	0014 0000 8b44 0800                         ....D...

08008b9c <fonts32_56>:
 8008b9c:	00e0 0000 03e0 0000 1fe0 0000 7fe0 0000     ................
 8008bac:	ff00 0003 f800 000f c000 007f 0000 03fe     ................
 8008bbc:	0000 07f0 0000 0780 0000 07e0 0000 03fc     ................
 8008bcc:	8000 00ff f000 001f fc00 0007 ff80 0000     ................
 8008bdc:	3fe0 0000 07e0 0000 01e0 0000 0060 0000     .?..........`...
 8008bec:	0000 0000                                   ....

08008bf0 <fonts32_56_char>:
 8008bf0:	0015 0000 8b9c 0800                         ........

08008bf8 <fonts32_57>:
 8008bf8:	00e0 0000 0fe0 0000 ffe0 0000 ffe0 000f     ................
 8008c08:	fe00 007f e000 07ff 0000 07fc 0000 07f8     ................
 8008c18:	0000 07ff e000 01ff fe00 003f ffc0 0003     ..........?.....
 8008c28:	3fe0 0000 03e0 0000 1fe0 0000 ffe0 0000     .?..............
 8008c38:	ff80 000f f800 00ff 8000 07ff 0000 07f8     ................
 8008c48:	0000 07f8 8000 07ff fc00 01ff ffc0 001f     ................
 8008c58:	ffe0 0001 1fe0 0000 01e0 0000 0060 0000     ............`...
 8008c68:	0000 0000                                   ....

08008c6c <fonts32_57_char>:
 8008c6c:	001d 0000 8bf8 0800                         ........

08008c74 <fonts32_58>:
 8008c74:	0000 0600 0060 0700 00e0 07c0 03e0 07e0     ....`...........
 8008c84:	07e0 03f0 1fc0 00fc 3f00 007e fc00 003f     .........?~...?.
 8008c94:	f800 000f f000 0007 f800 000f fc00 001f     ................
 8008ca4:	7e00 007f 1f80 00fc 0fc0 03f8 03e0 07e0     .~..............
 8008cb4:	01e0 07c0 00e0 0780 0060 0600 0000 0000     ........`.......

08008cc4 <fonts32_58_char>:
 8008cc4:	0014 0000 8c74 0800                         ....t...

08008ccc <fonts32_59>:
 8008ccc:	0060 0000 01e0 0000 03e0 0000 0fe0 0000     `...............
 8008cdc:	1fc0 0000 3f00 0000 fe00 0000 f800 0001     .....?..........
 8008cec:	f000 07ff c000 07ff e000 07ff f800 0001     ................
 8008cfc:	fc00 0000 7f00 0000 1f80 0000 0fe0 0000     ................
 8008d0c:	03e0 0000 01e0 0000 0060 0000 0020 0000     ........`... ...
 8008d1c:	0000 0000                                   ....

08008d20 <fonts32_59_char>:
 8008d20:	0015 0000 8ccc 0800                         ........

08008d28 <fonts32_5A>:
 8008d28:	0000 0780 00e0 07c0 00e0 07f0 00e0 07f8     ................
 8008d38:	00e0 07fc 00e0 073e 80e0 071f c0e0 070f     ......>.........
 8008d48:	e0e0 0707 f0e0 0703 f8e0 0700 7ee0 0700     .............~..
 8008d58:	3fe0 0700 1fe0 0700 0fe0 0700 07e0 0700     .?..............
 8008d68:	01e0 0700 0000 0700 0000 0000               ............

08008d74 <fonts32_5A_char>:
 8008d74:	0013 0000 8d28 0800                         ....(...

08008d7c <fonts32_5B>:
	...
 8008d84:	0000 01c0 0008 0530 0010 030c 0020 0103     ......0..... ...
 8008d94:	c040 0180 3000 0100 0d00 0120 0200 0110     @....0.... .....
 8008da4:	0500 0108 0880 0104 0080 0900 2080 1d01     ............. ..
 8008db4:	c080 3f00 c0fe 3f00 2080 1d01 0080 0900     ...?...?. ......
 8008dc4:	0880 0104 0500 0108 0200 0110 0d00 0120     .............. .
 8008dd4:	3000 0100 c040 0180 0020 0103 0010 030c     .0..@... .......
 8008de4:	0008 0530 0000 01c0 0000 0000 0000 0000     ..0.............

08008df4 <fonts32_5B_char>:
 8008df4:	001e 0000 8d7c 0800                         ....|...

08008dfc <fonts32_5C>:
 8008dfc:	01e0 0000 1fe0 0000 ffc0 0000 fe00 000f     ................
 8008e0c:	e000 00ff 0000 07ff 0000 07f0 0000 0780     ................

08008e1c <fonts32_5C_char>:
 8008e1c:	0008 0000 8dfc 0800                         ........

08008e24 <fonts32_5D>:
 8008e24:	f800 001f 0600 0060 0180 0182 0440 0206     ......`.....@...
 8008e34:	0420 0406 0c10 0807 1808 1007 3804 201f      ............8. 
 8008e44:	b814 203f f8f2 407f fbe2 40ff ffc1 81cf     ..? ...@...@....
 8008e54:	ff81 8107 ff01 8203 fe01 8003 fff9 8001     ................
 8008e64:	fffd 8001 ffc1 8003 fe01 8203 ff81 8107     ................
 8008e74:	ffc1 81cf fbe2 40ff f8f2 407f b814 203f     .......@...@..? 
 8008e84:	3804 201f 1808 1007 0c10 0807 0420 0406     .8. ........ ...
 8008e94:	0440 0206 0180 0182 0600 0060 f800 001f     @.........`.....
	...

08008eb8 <fonts32_5D_char>:
 8008eb8:	0025 0000 8e24 0800                         %...$...

08008ec0 <fonts32_5E>:
 8008ec0:	0000 0000 ffe0 07ff fff0 0fff fff0 0fff     ................
 8008ed0:	fff0 0fff e0f0 0f01 e0f0 0f01 e0f0 0f01     ................
 8008ee0:	e0f0 0f01 e0f0 0f01 e0f0 0f01 e0f0 0f01     ................
 8008ef0:	e0f0 0f01 f1f0 0f83 fbe0 0f83 ffe0 07ef     ................
 8008f00:	bfc0 07ff 1f80 03ff 0000 01fe 0000 007c     ..............|.
	...
 8008f18:	ffe0 07ff fff0 0fff fff0 0fff fff0 0fff     ................
 8008f28:	00f0 0f00 00f0 0f00 00f0 0f00 00f0 0f00     ................
 8008f38:	00f0 0f00 00f0 0f00 00f0 0f00 00f0 0f00     ................
 8008f48:	01e0 0780 03e0 07c0 07c0 03e0 0fc0 03f0     ................
 8008f58:	ff80 01ff ff00 00ff fe00 007f f800 001f     ................
 8008f68:	0000 0000                                   ....

08008f6c <fonts32_5E_char>:
 8008f6c:	002b 0000 8ec0 0800                         +.......

08008f74 <fonts32_5F>:
 8008f74:	0000 c000 0000 c000 0000 c000 0000 c000     ................
 8008f84:	0000 c000 0000 c000 0000 c000 0000 c000     ................
 8008f94:	0000 c000 0000 c000 0000 c000 0000 c000     ................
 8008fa4:	0000 c000 0000 c000 0000 c000 0000 c000     ................
 8008fb4:	0000 c000                                   ....

08008fb8 <fonts32_5F_char>:
 8008fb8:	0011 0000 8f74 0800                         ....t...

08008fc0 <fonts32_60_61>:
 8008fc0:	0000 0000 c000 01f0 f000 03f8 f800 07fc     ................
 8008fd0:	fc00 079c 3c00 071e 1c00 070e 1c00 070e     .....<..........
 8008fe0:	1c00 070e 3c00 078e 3c00 03cf fc00 01ff     .....<...<......
 8008ff0:	f800 07ff f000 07ff c000 07ff 0000 0000     ................

08009000 <fonts32_60_61_char>:
 8009000:	0010 0000 8fc0 0800                         ........

08009008 <fonts32_62>:
 8009008:	0000 0000 ffe0 07ff ffe0 07ff ffe0 07ff     ................
 8009018:	7000 03c0 3800 0780 1c00 0700 1c00 0700     .p...8..........
 8009028:	1c00 0700 3c00 0780 f800 03c0 f000 01ff     .....<..........
 8009038:	e000 00ff c000 007f 0000 0000               ............

08009044 <fonts32_62_char>:
 8009044:	000f 0000 9008 0800                         ........

0800904c <fonts32_63>:
 800904c:	0000 0000 c000 007f e000 01ff f000 03ff     ................
 800905c:	f800 03e0 3800 0780 3c00 0700 1c00 0700     .....8...<......
 800906c:	1c00 0700 3c00 0700 7800 0780 f800 03e0     .....<...x......
 800907c:	f000 01e0 e000 00e0 8000 0020 0000 0000     .......... .....

0800908c <fonts32_63_char>:
 800908c:	0010 0000 904c 0800                         ....L...

08009094 <fonts32_64>:
 8009094:	0000 0000 8000 003f c000 007f f000 01ff     ......?.........
 80090a4:	f800 03ff f800 03e0 3c00 0780 3c00 0700     .........<...<..
 80090b4:	1c00 0700 1c00 0700 3c00 0700 7800 0380     .........<...x..
 80090c4:	ffe0 03ff ffe0 07ff ffe0 07ff ffe0 07ff     ................
 80090d4:	0000 0000                                   ....

080090d8 <fonts32_64_char>:
 80090d8:	0011 0000 9094 0800                         ........

080090e0 <fonts32_65>:
 80090e0:	0000 0000 c000 007f e000 01ff f000 03ff     ................
 80090f0:	f800 03e6 3800 0786 3c00 0706 1c00 0706     .....8...<......
 8009100:	1c00 0706 3c00 0706 3800 0786 f800 03c6     .....<...8......
 8009110:	f000 03e7 e000 01e7 c000 00e7 0000 0000     ................

08009120 <fonts32_65_char>:
 8009120:	0010 0000 90e0 0800                         ........

08009128 <fonts32_66>:
 8009128:	0000 0000 3800 0000 3800 0000 ffc0 07ff     .....8...8......
 8009138:	ffe0 07ff ffe0 07ff 39e0 0000 38e0 0000     .........9...8..
 8009148:	38e0 0000 38e0 0000 0000 0000               .8...8......

08009154 <fonts32_66_char>:
 8009154:	000b 0000 9128 0800                         ....(...

0800915c <fonts32_67>:
 800915c:	0000 0000 c000 387f f000 79ff f800 fbff     .......8...y....
 800916c:	f800 f3c0 7c00 e780 3c00 c700 3c00 c700     .....|...<...<..
 800917c:	3c00 c700 3c00 e780 7800 f3c0 f000 ffe0     .<...<...x......
 800918c:	f800 7fff f800 3fff f800 0fff 0000 0000     .......?........

0800919c <fonts32_67_char>:
 800919c:	0010 0000 915c 0800                         ....\...

080091a4 <fonts32_68>:
 80091a4:	0000 0000 ffe0 07ff ffe0 07ff ffe0 07ff     ................
 80091b4:	7800 0000 3800 0000 1c00 0000 1c00 0000     .x...8..........
 80091c4:	1c00 0000 3c00 0000 f800 07ff f800 07ff     .....<..........
 80091d4:	f000 07ff 0000 0000                         ........

080091dc <fonts32_68_char>:
 80091dc:	000e 0000 91a4 0800                         ........

080091e4 <fonts32_69>:
	...
 80091ec:	f9e0 03ff f9e0 03ff f9e0 03ff 0000 0000     ................
 80091fc:	0000 0000                                   ....

08009200 <fonts32_69_char>:
 8009200:	0007 0000 91e4 0800                         ........

08009208 <fonts32_6A>:
 8009208:	0000 c000 0000 e000 f9e0 ffff f9e0 ffff     ................
 8009218:	f9e0 7fff 0000 0000 0000 0000               ............

08009224 <fonts32_6A_char>:
 8009224:	0007 0000 9208 0800                         ........

0800922c <fonts32_6B>:
 800922c:	0000 0000 ffe0 07ff ffe0 07ff ffe0 07ff     ................
 800923c:	0000 000f c000 000f e000 001f f000 007f     ................
 800924c:	f800 00fc 7800 03f8 3800 07e0 1800 07c0     .....x...8......
 800925c:	0800 0700 0000 0600 0000 0000               ............

08009268 <fonts32_6B_char>:
 8009268:	000f 0000 922c 0800                         ....,...

08009270 <fonts32_6C>:
	...
 8009278:	ffe0 03ff ffe0 03ff ffe0 03ff 0000 0000     ................
 8009288:	0000 0000                                   ....

0800928c <fonts32_6C_char>:
 800928c:	0007 0000 9270 0800                         ....p...

08009294 <fonts32_6D>:
 8009294:	0000 0000 fc00 07ff fc00 07ff f000 07ff     ................
 80092a4:	7800 0000 3800 0000 3c00 0000 1c00 0000     .x...8...<......
 80092b4:	3c00 0000 3c00 0000 f800 07ff f000 07ff     .<...<..........
 80092c4:	f000 07ff 3000 0000 3800 0000 3c00 0000     .....0...8...<..
 80092d4:	1c00 0000 3c00 0000 3c00 0000 f800 07ff     .....<...<......
 80092e4:	f000 07ff e000 07ff 0000 0000               ............

080092f0 <fonts32_6D_char>:
 80092f0:	0017 0000 9294 0800                         ........

080092f8 <fonts32_6E>:
 80092f8:	0000 0000 fc00 07ff fc00 07ff f000 07ff     ................
 8009308:	7800 0000 3800 0000 3c00 0000 1c00 0000     .x...8...<......
 8009318:	3c00 0000 3c00 0000 f800 07ff f800 07ff     .<...<..........
 8009328:	f000 07ff 0000 0000                         ........

08009330 <fonts32_6E_char>:
 8009330:	000e 0000 92f8 0800                         ........

08009338 <fonts32_6F>:
 8009338:	0000 0000 c000 007f e000 01ff f000 03ff     ................
 8009348:	f800 03e0 3800 0780 3c00 0700 1c00 0700     .....8...<......
 8009358:	1c00 0700 3c00 0700 3800 0780 f800 03e0     .....<...8......
 8009368:	f000 03ff e000 01ff c000 00ff 0000 0000     ................

08009378 <fonts32_6F_char>:
 8009378:	0010 0000 9338 0800                         ....8...

08009380 <fonts32_70>:
 8009380:	0000 0000 f800 ffff f800 ffff e000 ffff     ................
 8009390:	7000 03c0 3800 0700 3800 0700 3800 0700     .p...8...8...8..
 80093a0:	3800 0700 3800 0780 f800 03c0 f000 03ff     .8...8..........
 80093b0:	e000 01ff c000 007f 0000 0000               ............

080093bc <fonts32_70_char>:
 80093bc:	000f 0000 9380 0800                         ........

080093c4 <fonts32_71>:
 80093c4:	0000 0000 c000 007f f000 01ff f800 03ff     ................
 80093d4:	7800 03c0 3c00 0780 1c00 0700 1c00 0700     .x...<..........
 80093e4:	1c00 0700 3c00 0780 7800 03c0 f000 01e0     .....<...x......
 80093f4:	fc00 ffff fc00 ffff fc00 ffff 0000 0000     ................

08009404 <fonts32_71_char>:
 8009404:	0010 0000 93c4 0800                         ........

0800940c <fonts32_72>:
 800940c:	0000 0000 f800 07ff f800 07ff e000 07ff     ................
 800941c:	f000 0000 7800 0000 3800 0000 3800 0000     .....x...8...8..
 800942c:	3800 0000 0000 0000                         .8......

08009434 <fonts32_72_char>:
 8009434:	000a 0000 940c 0800                         ........

0800943c <fonts32_73>:
 800943c:	0000 0000 e000 00e1 f000 03e7 f800 03e7     ................
 800944c:	3c00 078f 1c00 070f 1c00 070f 1c00 070e     .<..............
 800945c:	1c00 071e 3c00 071e 7800 07fe 7800 03fc     .....<...x...x..
 800946c:	7000 01f8 0000 00f0 0000 0000               .p..........

08009478 <fonts32_73_char>:
 8009478:	000f 0000 943c 0800                         ....<...

08009480 <fonts32_74>:
 8009480:	0000 0000 1800 0000 1800 0000 ff80 03ff     ................
 8009490:	ffc0 07ff ffe0 07ff 1800 0700 1800 0700     ................
 80094a0:	1800 0700 0000 0000                         ........

080094a8 <fonts32_74_char>:
 80094a8:	000a 0000 9480 0800                         ........

080094b0 <fonts32_75>:
 80094b0:	0000 0000 f800 007f f800 01ff f800 03ff     ................
 80094c0:	f800 07ff 0000 0780 0000 0700 0000 0700     ................
 80094d0:	0000 0700 0000 0780 0000 07c0 f800 03ff     ................
 80094e0:	f800 01ff f800 07ff f800 07ff 0000 0000     ................

080094f0 <fonts32_75_char>:
 80094f0:	0010 0000 94b0 0800                         ........

080094f8 <fonts32_76>:
 80094f8:	0000 0000 1800 0000 f800 0000 f800 0007     ................
 8009508:	f800 001f c000 00ff 0000 03fe 0000 07f0     ................
 8009518:	0000 07e0 0000 07fc 8000 03ff f000 007f     ................
 8009528:	f800 0007 f800 0001 3800 0000 1800 0000     .........8......
 8009538:	0000 0000                                   ....

0800953c <fonts32_76_char>:
 800953c:	0011 0000 94f8 0800                         ........

08009544 <fonts32_77>:
 8009544:	0000 0000 7800 0000 f800 0003 f800 001f     .....x..........
 8009554:	f000 01ff 8000 07ff 0000 07f8 0000 07f8     ................
 8009564:	8000 07ff f800 00ff f800 000f f800 0001     ................
 8009574:	f800 001f f000 03ff 0000 07ff 0000 07f0     ................
 8009584:	0000 07fc 8000 03ff f800 003f f800 0007     ..........?.....
 8009594:	f800 0000 1800 0000 0000 0000               ............

080095a0 <fonts32_77_char>:
 80095a0:	0017 0000 9544 0800                         ....D...

080095a8 <fonts32_78>:
 80095a8:	0800 0600 1800 0700 7800 07c0 f800 07e0     .........x......
 80095b8:	f000 01fb e000 00ff 8000 003f 8000 003f     ..........?...?.
 80095c8:	e000 00ff f000 01fb f800 03e1 7800 07c0     .............x..
 80095d8:	3800 0780 1800 0600 0000 0000               .8..........

080095e4 <fonts32_78_char>:
 80095e4:	000f 0000 95a8 0800                         ........

080095ec <fonts32_79>:
 80095ec:	1800 0000 7800 e000 f800 e003 f800 e00f     .....x..........
 80095fc:	e000 e07f 0000 ffff 0000 fff8 0000 3fc0     ...............?
 800960c:	0000 0ff8 0000 00ff e000 003f f800 0007     ..........?.....
 800961c:	f800 0001 3800 0000 0800 0000 0000 0000     .....8..........

0800962c <fonts32_79_char>:
 800962c:	0010 0000 95ec 0800                         ........

08009634 <fonts32_7A>:
 8009634:	0000 0780 3800 07c0 3800 07e0 3800 07f0     .....8...8...8..
 8009644:	3800 07f8 3800 077c 3800 073f b800 071f     .8...8|..8?.....
 8009654:	f800 070f f800 0703 f800 0701 f800 0700     ................
 8009664:	7800 0700 3800 0700 0000 0000               .x...8......

08009670 <fonts32_7A_char>:
 8009670:	000f 0000 9634 0800                         ....4...

08009678 <fonts32_7B>:
 8009678:	0000 000e 0000 000e 0000 001f ff80 3fff     ...............?
 8009688:	ffc0 7ffb ffe0 fff1 01e0 f000 00e0 e000     ................
 8009698:	00e0 e000 00e0 e000 0000 0000 0000 0000     ................
	...

080096c4 <fonts32_7B_char>:
 80096c4:	0013 0000 9678 0800                         ....x...

080096cc <fonts32_7C>:
	...
 80096d4:	ffe0 ffff ffe0 ffff ffe0 ffff 0000 0000     ................
	...

080096ec <fonts32_7C_char>:
 80096ec:	0008 0000 96cc 0800                         ........

080096f4 <fonts32_7D>:
 80096f4:	00e0 e000 00e0 e000 00e0 e000 ffe0 ffe1     ................
 8009704:	ffe0 fff3 ffc0 7fff 0000 003f 0000 001e     ..........?.....
 8009714:	0000 001e 0000 0000 0000 0000 0000 0000     ................
	...

08009740 <fonts32_7D_char>:
 8009740:	0013 0000 96f4 0800                         ........

08009748 <fonts32_7E_92>:
	...
 8009750:	0ce0 0000 07e0 0000 03e0 0000 0000 0000     ................
 8009760:	0000 0000                                   ....

08009764 <fonts32_7E_92_char>:
 8009764:	0007 0000 9748 0800                         ....H...

0800976c <fonts32_93_B0>:
	...
 8009774:	0780 0000 0fc0 0000 1860 0000 1860 0000     ........`...`...
 8009784:	1860 0000 1ce0 0000 0fc0 0000 0300 0000     `...............
 8009794:	0000 0000                                   ....

08009798 <fonts32_93_B0_char>:
 8009798:	000b 0000 976c 0800                         ....l...

080097a0 <fonts32_B1_BF>:
 80097a0:	0000 0000 0000 00f8 0000 01fe 0000 03ff     ................
 80097b0:	0000 07bf c000 0787 f9e0 0703 f9e0 0701     ................
 80097c0:	f9e0 0700 79e0 0700 0000 0780 0000 07e0     .....y..........
 80097d0:	0000 03f0 0000 01f0 0000 00f0 0000 0000     ................

080097e0 <fonts32_B1_BF_char>:
 80097e0:	0010 0000 97a0 0800                         ........

080097e8 <fonts32_C0_C4>:
 80097e8:	0000 0780 0000 07e0 0000 07fc 0000 03ff     ................
 80097f8:	e00e 007f f80e 000f ff0e 000d 7fe0 000c     ................
 8009808:	0fe0 000c 01e0 000c 1fe0 000c 7fe0 000c     ................
 8009818:	ff0e 000f f80e 000f e00e 007f 0000 03ff     ................
 8009828:	0000 07fc 0000 07e0 0000 0780 0000 0600     ................
 8009838:	0000 0000                                   ....

0800983c <fonts32_C0_C4_char>:
 800983c:	0015 0000 97e8 0800                         ........

08009844 <fonts32_C5>:
 8009844:	0000 0780 0000 07e0 0000 07fc 0000 03ff     ................
 8009854:	e000 007f f800 000f ff00 000d 7fdc 000c     ................
 8009864:	0fe2 000c 01e2 000c 1fe2 000c 7fdc 000c     ................
 8009874:	ff00 000f f800 000f e000 007f 0000 03ff     ................
 8009884:	0000 07fc 0000 07e0 0000 0780 0000 0600     ................
 8009894:	0000 0000                                   ....

08009898 <fonts32_C5_char>:
 8009898:	0015 0000 9844 0800                         ....D...

080098a0 <fonts32_C6_E0>:
 80098a0:	0000 0000 c000 01f0 f000 03f8 f800 07fc     ................
 80098b0:	fc00 079c 3c20 071e 1c60 070e 1ce0 070e     .... <..`.......
 80098c0:	1de0 070e 3d80 078e 3c00 03cf fc00 01ff     .....=...<......
 80098d0:	f800 07ff f000 07ff c000 07ff 0000 0000     ................

080098e0 <fonts32_C6_E0_char>:
 80098e0:	0010 0000 98a0 0800                         ........

080098e8 <fonts32_E1>:
 80098e8:	0000 0000 0000 00e0 e000 01f8 f000 03f8     ................
 80098f8:	7000 030c 1800 030c 1800 030c 1980 030c     .p..............
 8009908:	19e0 0306 18e0 0306 1860 0186 3000 00c6     ........`....0..
 8009918:	f000 01ff e000 03ff 0000 0200 0000 0000     ................

08009928 <fonts32_E1_char>:
 8009928:	0010 0000 98e8 0800                         ........

08009930 <fonts32_E2_E4>:
 8009930:	0000 0000 c000 01f0 f000 03f8 f800 07fc     ................
 8009940:	fdc0 079c 3dc0 071e 1c00 070e 1c00 070e     .....=..........
 8009950:	1c00 070e 3c00 078e 3dc0 03cf fdc0 01ff     .....<...=......
 8009960:	f800 07ff f000 07ff c000 07ff 0000 0000     ................

08009970 <fonts32_E2_E4_char>:
 8009970:	0010 0000 9930 0800                         ....0...

08009978 <fonts32_E5>:
 8009978:	0000 0000 c000 01f0 f000 03f8 f800 07fc     ................
 8009988:	fc00 079c 3ce0 071e 1d10 070e 1d10 070e     .....<..........
 8009998:	1d10 070e 3ce0 078e 3c00 03cf fc00 01ff     .....<...<......
 80099a8:	f800 07ff f000 07ff c000 07ff 0000 0000     ................

080099b8 <fonts32_E5_char>:
 80099b8:	0010 0000 9978 0800                         ....x...

080099c0 <fonts32_E6_E9>:
 80099c0:	0000 0000 8000 007f e000 00ff f000 01ff     ................
 80099d0:	3000 0386 1800 0306 1800 0306 1980 0306     .0..............
 80099e0:	19e0 0306 18e0 0306 1860 0306 7000 0186     ........`....p..
 80099f0:	f000 01c7 e000 00c7 0000 0007 0000 0000     ................

08009a00 <fonts32_E6_E9_char>:
 8009a00:	0010 0000 99c0 0800                         ........

08009a08 <fonts32_EA_ED>:
	...
 8009a10:	0100 0000 f980 03ff f8e0 03ff 0060 0000     ............`...
 8009a20:	0020 0000 0000 0000                          .......

08009a28 <fonts32_EA_ED_char>:
 8009a28:	0008 0000 9a08 0800                         ........

08009a30 <fonts32_EE_F1>:
	...
 8009a3c:	f800 03ff f980 03ff 61c0 0000 30c0 0000     .........a...0..
 8009a4c:	18c0 0000 1980 0000 1980 0000 1980 0000     ................
 8009a5c:	38c0 0000 e0c0 03ff c000 03ff 0000 0000     .8..............
 8009a6c:	0000 0000                                   ....

08009a70 <fonts32_EE_F1_char>:
 8009a70:	0010 0000 9a30 0800                         ....0...

08009a78 <fonts32_F2_F3>:
 8009a78:	0000 0000 8000 003f e000 00ff f000 01ff     ......?.........
 8009a88:	7000 03c0 1800 0300 1800 0300 1980 0300     .p..............
 8009a98:	19e0 0300 18e0 0300 1860 0380 3000 01c0     ........`....0..
 8009aa8:	f000 01ff e000 00ff 8000 003f 0000 0000     ..........?.....
 8009ab8:	0000 0000                                   ....

08009abc <fonts32_F2_F3_char>:
 8009abc:	0011 0000 9a78 0800                         ....x...

08009ac4 <fonts32_F4_F6>:
 8009ac4:	0000 0000 c000 007f e000 01ff f0c0 03ff     ................
 8009ad4:	f8c0 03e0 38c0 0780 3c00 0700 1c00 0700     .....8...<......
 8009ae4:	1c00 0700 3c00 0700 38c0 0780 f8c0 03e0     .....<...8......
 8009af4:	f0c0 03ff e000 01ff c000 00ff 0000 0000     ................

08009b04 <fonts32_F4_F6_char>:
 8009b04:	0010 0000 9ac4 0800                         ........

08009b0c <fonts32_F7_F9>:
 8009b0c:	0000 0000 f800 007f f800 01ff f800 03ff     ................
 8009b1c:	f800 07ff 0020 0780 0060 0700 00e0 0700     .... ...`.......
 8009b2c:	01e0 0700 0180 0780 0000 07c0 f800 03ff     ................
 8009b3c:	f800 01ff f800 07ff f800 07ff 0000 0000     ................

08009b4c <fonts32_F7_F9_char>:
 8009b4c:	0010 0000 9b0c 0800                         ........

08009b54 <fonts32_FA>:
	...
 8009b5c:	f800 00ff f800 01ff 0000 0380 0000 0300     ................
 8009b6c:	0000 0300 0180 0300 01e0 0300 00e0 0300     ................
 8009b7c:	0060 0180 0000 00c0 f800 03ff f800 03ff     `...............
	...

08009b94 <fonts32_FA_char>:
 8009b94:	0010 0000 9b54 0800                         ....T...

08009b9c <fonts32_FB_FC>:
 8009b9c:	0000 0000 f800 007f f800 01ff f9c0 03ff     ................
 8009bac:	f9c0 07ff 01c0 0780 0000 0700 0000 0700     ................
 8009bbc:	0000 0700 0000 0780 01c0 07c0 f9c0 03ff     ................
 8009bcc:	f9c0 01ff f800 07ff f800 07ff 0000 0000     ................

08009bdc <fonts32_FB_FC_char>:
 8009bdc:	0010 0000 9b9c 0800                         ........

08009be4 <fonts32_FD_FF>:
	...

08009c00 <fonts32_FD_FF_char>:
 8009c00:	0007 0000 9be4 0800                         ........

08009c08 <fonts8_20>:
 8009c08:	0000 0000                                   ....

08009c0c <fonts8_20_char>:
 8009c0c:	0004 0000 9c08 0800                         ........

08009c14 <fonts8_21>:
 8009c14:	0000 4f00 0000 0000                         ...O....

08009c1c <fonts8_21_char>:
 8009c1c:	0006 0000 9c14 0800                         ........

08009c24 <fonts8_22>:
 8009c24:	0000 0007 0007 0000                         ........

08009c2c <fonts8_22_char>:
 8009c2c:	0006 0000 9c24 0800                         ....$...

08009c34 <fonts8_23>:
 8009c34:	1400 147f 147f 0000                         ........

08009c3c <fonts8_23_char>:
 8009c3c:	0006 0000 9c34 0800                         ....4...

08009c44 <fonts8_24>:
 8009c44:	2400 7f2a 122a 0000                         .$*.*...

08009c4c <fonts8_24_char>:
 8009c4c:	0006 0000 9c44 0800                         ....D...

08009c54 <fonts8_25>:
 8009c54:	2300 0813 6264 0000                         .#..db..

08009c5c <fonts8_25_char>:
 8009c5c:	0006 0000 9c54 0800                         ....T...

08009c64 <fonts8_26>:
 8009c64:	3600 5549 5022 0000                         .6IU"P..

08009c6c <fonts8_26_char>:
 8009c6c:	0006 0000 9c64 0800                         ....d...

08009c74 <fonts8_27>:
 8009c74:	0000 0305 0000 0000                         ........

08009c7c <fonts8_27_char>:
 8009c7c:	0006 0000 9c74 0800                         ....t...

08009c84 <fonts8_28>:
 8009c84:	0000 221c 0041 0000                         ..."A...

08009c8c <fonts8_28_char>:
 8009c8c:	0006 0000 9c84 0800                         ........

08009c94 <fonts8_29>:
 8009c94:	0000 2241 001c 0000                         ..A"....

08009c9c <fonts8_29_char>:
 8009c9c:	0006 0000 9c94 0800                         ........

08009ca4 <fonts8_2A>:
 8009ca4:	1400 3e08 1408 0000                         ...>....

08009cac <fonts8_2A_char>:
 8009cac:	0006 0000 9ca4 0800                         ........

08009cb4 <fonts8_2B>:
 8009cb4:	0800 3e08 0808 0000                         ...>....

08009cbc <fonts8_2B_char>:
 8009cbc:	0006 0000 9cb4 0800                         ........

08009cc4 <fonts8_2C>:
 8009cc4:	0000 3050 0000 0000                         ..P0....

08009ccc <fonts8_2C_char>:
 8009ccc:	0006 0000 9cc4 0800                         ........

08009cd4 <fonts8_2D>:
 8009cd4:	0800 0808 0808 0000                         ........

08009cdc <fonts8_2D_char>:
 8009cdc:	0006 0000 9cd4 0800                         ........

08009ce4 <fonts8_2E>:
 8009ce4:	0000 6060 0000 0000                         ..``....

08009cec <fonts8_2E_char>:
 8009cec:	0006 0000 9ce4 0800                         ........

08009cf4 <fonts8_2F>:
 8009cf4:	2000 0810 0204 0000                         . ......

08009cfc <fonts8_2F_char>:
 8009cfc:	0006 0000 9cf4 0800                         ........

08009d04 <fonts8_30>:
 8009d04:	3e00 4941 3e41 0000                         .>AIA>..

08009d0c <fonts8_30_char>:
 8009d0c:	0006 0000 9d04 0800                         ........

08009d14 <fonts8_31>:
 8009d14:	0000 7f42 0040 0000                         ..B.@...

08009d1c <fonts8_31_char>:
 8009d1c:	0006 0000 9d14 0800                         ........

08009d24 <fonts8_32>:
 8009d24:	4200 5161 4649 0000                         .BaQIF..

08009d2c <fonts8_32_char>:
 8009d2c:	0006 0000 9d24 0800                         ....$...

08009d34 <fonts8_33>:
 8009d34:	2100 4541 314b 0000                         .!AEK1..

08009d3c <fonts8_33_char>:
 8009d3c:	0006 0000 9d34 0800                         ....4...

08009d44 <fonts8_34>:
 8009d44:	1800 1214 107f 0000                         ........

08009d4c <fonts8_34_char>:
 8009d4c:	0006 0000 9d44 0800                         ....D...

08009d54 <fonts8_35>:
 8009d54:	2700 4545 3945 0000                         .'EEE9..

08009d5c <fonts8_35_char>:
 8009d5c:	0006 0000 9d54 0800                         ....T...

08009d64 <fonts8_36>:
 8009d64:	3c00 494a 3049 0000                         .<JII0..

08009d6c <fonts8_36_char>:
 8009d6c:	0006 0000 9d64 0800                         ....d...

08009d74 <fonts8_37>:
 8009d74:	0100 0971 0305 0000                         ..q.....

08009d7c <fonts8_37_char>:
 8009d7c:	0006 0000 9d74 0800                         ....t...

08009d84 <fonts8_38>:
 8009d84:	3600 4949 3649 0000                         .6III6..

08009d8c <fonts8_38_char>:
 8009d8c:	0006 0000 9d84 0800                         ........

08009d94 <fonts8_39>:
 8009d94:	0600 4949 1e29 0000                         ..II)...

08009d9c <fonts8_39_char>:
 8009d9c:	0006 0000 9d94 0800                         ........

08009da4 <fonts8_3A>:
 8009da4:	0000 3636 0000 0000                         ..66....

08009dac <fonts8_3A_char>:
 8009dac:	0006 0000 9da4 0800                         ........

08009db4 <fonts8_3B>:
 8009db4:	0000 3656 0000 0000                         ..V6....

08009dbc <fonts8_3B_char>:
 8009dbc:	0006 0000 9db4 0800                         ........

08009dc4 <fonts8_3C>:
 8009dc4:	0800 2214 0841 0000                         ..."A...

08009dcc <fonts8_3C_char>:
 8009dcc:	0006 0000 9dc4 0800                         ........

08009dd4 <fonts8_3D>:
 8009dd4:	1400 1414 1414 0000                         ........

08009ddc <fonts8_3D_char>:
 8009ddc:	0006 0000 9dd4 0800                         ........

08009de4 <fonts8_3E>:
 8009de4:	0000 2241 0814 0000                         ..A"....

08009dec <fonts8_3E_char>:
 8009dec:	0006 0000 9de4 0800                         ........

08009df4 <fonts8_3F>:
 8009df4:	0200 5101 0609 0000                         ...Q....

08009dfc <fonts8_3F_char>:
 8009dfc:	0006 0000 9df4 0800                         ........

08009e04 <fonts8_40>:
 8009e04:	fe00 2020 3e10 0000                         ..  .>..

08009e0c <fonts8_40_char>:
 8009e0c:	0006 0000 9e04 0800                         ........

08009e14 <fonts8_41>:
 8009e14:	7e00 1111 7e11 0000                         .~...~..

08009e1c <fonts8_41_char>:
 8009e1c:	0006 0000 9e14 0800                         ........

08009e24 <fonts8_42>:
 8009e24:	7f00 4949 3649 0000                         ..III6..

08009e2c <fonts8_42_char>:
 8009e2c:	0006 0000 9e24 0800                         ....$...

08009e34 <fonts8_43>:
 8009e34:	3e00 4141 2241 0000                         .>AAA"..

08009e3c <fonts8_43_char>:
 8009e3c:	0006 0000 9e34 0800                         ....4...

08009e44 <fonts8_44>:
 8009e44:	7f00 4141 1c22 0000                         ..AA"...

08009e4c <fonts8_44_char>:
 8009e4c:	0006 0000 9e44 0800                         ....D...

08009e54 <fonts8_45>:
 8009e54:	7f00 4949 4149 0000                         ..IIIA..

08009e5c <fonts8_45_char>:
 8009e5c:	0006 0000 9e54 0800                         ....T...

08009e64 <fonts8_46>:
 8009e64:	7f00 0909 0109 0000                         ........

08009e6c <fonts8_46_char>:
 8009e6c:	0006 0000 9e64 0800                         ....d...

08009e74 <fonts8_47>:
 8009e74:	3e00 4941 7a49 0000                         .>AIIz..

08009e7c <fonts8_47_char>:
 8009e7c:	0006 0000 9e74 0800                         ....t...

08009e84 <fonts8_48>:
 8009e84:	7f00 0808 7f08 0000                         ........

08009e8c <fonts8_48_char>:
 8009e8c:	0006 0000 9e84 0800                         ........

08009e94 <fonts8_49>:
 8009e94:	0000 7f41 0041 0000                         ..A.A...

08009e9c <fonts8_49_char>:
 8009e9c:	0006 0000 9e94 0800                         ........

08009ea4 <fonts8_4A>:
 8009ea4:	2000 4140 013f 0000                         . @A?...

08009eac <fonts8_4A_char>:
 8009eac:	0006 0000 9ea4 0800                         ........

08009eb4 <fonts8_4B>:
 8009eb4:	7f00 1408 4122 0000                         ...."A..

08009ebc <fonts8_4B_char>:
 8009ebc:	0006 0000 9eb4 0800                         ........

08009ec4 <fonts8_4C>:
 8009ec4:	7f00 4040 4040 0000                         ..@@@@..

08009ecc <fonts8_4C_char>:
 8009ecc:	0006 0000 9ec4 0800                         ........

08009ed4 <fonts8_4D>:
 8009ed4:	7f00 0c02 7f02 0000                         ........

08009edc <fonts8_4D_char>:
 8009edc:	0006 0000 9ed4 0800                         ........

08009ee4 <fonts8_4E>:
 8009ee4:	7f00 0804 7f10 0000                         ........

08009eec <fonts8_4E_char>:
 8009eec:	0006 0000 9ee4 0800                         ........

08009ef4 <fonts8_4F>:
 8009ef4:	3e00 4141 3e41 0000                         .>AAA>..

08009efc <fonts8_4F_char>:
 8009efc:	0006 0000 9ef4 0800                         ........

08009f04 <fonts8_50>:
 8009f04:	7f00 0909 0609 0000                         ........

08009f0c <fonts8_50_char>:
 8009f0c:	0006 0000 9f04 0800                         ........

08009f14 <fonts8_51>:
 8009f14:	3e00 5141 5e21 0000                         .>AQ!^..

08009f1c <fonts8_51_char>:
 8009f1c:	0006 0000 9f14 0800                         ........

08009f24 <fonts8_52>:
 8009f24:	7f00 1909 4629 0000                         ....)F..

08009f2c <fonts8_52_char>:
 8009f2c:	0006 0000 9f24 0800                         ....$...

08009f34 <fonts8_53>:
 8009f34:	4600 4949 3149 0000                         .FIII1..

08009f3c <fonts8_53_char>:
 8009f3c:	0006 0000 9f34 0800                         ....4...

08009f44 <fonts8_54>:
 8009f44:	0100 7f01 0101 0000                         ........

08009f4c <fonts8_54_char>:
 8009f4c:	0006 0000 9f44 0800                         ....D...

08009f54 <fonts8_55>:
 8009f54:	3f00 4040 3f40 0000                         .?@@@?..

08009f5c <fonts8_55_char>:
 8009f5c:	0006 0000 9f54 0800                         ....T...

08009f64 <fonts8_56>:
 8009f64:	1f00 4020 1f20 0000                         .. @ ...

08009f6c <fonts8_56_char>:
 8009f6c:	0006 0000 9f64 0800                         ....d...

08009f74 <fonts8_57>:
 8009f74:	3f00 3840 3f40 0000                         .?@8@?..

08009f7c <fonts8_57_char>:
 8009f7c:	0006 0000 9f74 0800                         ....t...

08009f84 <fonts8_58>:
 8009f84:	6300 0814 6314 0000                         .c...c..

08009f8c <fonts8_58_char>:
 8009f8c:	0006 0000 9f84 0800                         ........

08009f94 <fonts8_59>:
 8009f94:	0700 7008 0708 0000                         ...p....

08009f9c <fonts8_59_char>:
 8009f9c:	0006 0000 9f94 0800                         ........

08009fa4 <fonts8_5A>:
 8009fa4:	6100 4951 4345 0000                         .aQIEC..

08009fac <fonts8_5A_char>:
 8009fac:	0006 0000 9fa4 0800                         ........

08009fb4 <fonts8_5B>:
 8009fb4:	fe00 8183 fe83 0000                         ........

08009fbc <fonts8_5B_char>:
 8009fbc:	0006 0000 9fb4 0800                         ........

08009fc4 <fonts8_5C>:
 8009fc4:	0200 0804 2010 0000                         ..... ..

08009fcc <fonts8_5C_char>:
 8009fcc:	0006 0000 9fc4 0800                         ........

08009fd4 <fonts8_5D>:
 8009fd4:	fe00 f9f3 feff 0000                         ........

08009fdc <fonts8_5D_char>:
 8009fdc:	0006 0000 9fd4 0800                         ........

08009fe4 <fonts8_5E>:
 8009fe4:	fe00 ffff feff 0000                         ........

08009fec <fonts8_5E_char>:
 8009fec:	0006 0000 9fe4 0800                         ........

08009ff4 <fonts8_5F>:
 8009ff4:	c000 c0c0 c0c0 0000                         ........

08009ffc <fonts8_5F_char>:
 8009ffc:	0006 0000 9ff4 0800                         ........

0800a004 <fonts8_60>:
 800a004:	fe00 e1c3 fef3 0000                         ........

0800a00c <fonts8_60_char>:
 800a00c:	0006 0000 a004 0800                         ........

0800a014 <fonts8_61>:
 800a014:	2000 5454 7854 0000                         . TTTx..

0800a01c <fonts8_61_char>:
 800a01c:	0006 0000 a014 0800                         ........

0800a024 <fonts8_62>:
 800a024:	7f00 4448 3844 0000                         ..HDD8..

0800a02c <fonts8_62_char>:
 800a02c:	0006 0000 a024 0800                         ....$...

0800a034 <fonts8_63>:
 800a034:	3800 4444 2044 0000                         .8DDD ..

0800a03c <fonts8_63_char>:
 800a03c:	0006 0000 a034 0800                         ....4...

0800a044 <fonts8_64>:
 800a044:	3800 4444 7f48 0000                         .8DDH...

0800a04c <fonts8_64_char>:
 800a04c:	0006 0000 a044 0800                         ....D...

0800a054 <fonts8_65>:
 800a054:	3800 5454 1854 0000                         .8TTT...

0800a05c <fonts8_65_char>:
 800a05c:	0006 0000 a054 0800                         ....T...

0800a064 <fonts8_66>:
 800a064:	0800 097e 0201 0000                         ..~.....

0800a06c <fonts8_66_char>:
 800a06c:	0006 0000 a064 0800                         ....d...

0800a074 <fonts8_67>:
 800a074:	1800 a4a4 7ca4 0000                         .....|..

0800a07c <fonts8_67_char>:
 800a07c:	0006 0000 a074 0800                         ....t...

0800a084 <fonts8_68>:
 800a084:	7f00 0408 7804 0000                         .....x..

0800a08c <fonts8_68_char>:
 800a08c:	0006 0000 a084 0800                         ........

0800a094 <fonts8_69>:
 800a094:	0000 7d44 0040 0000                         ..D}@...

0800a09c <fonts8_69_char>:
 800a09c:	0005 0000 a094 0800                         ........

0800a0a4 <fonts8_6A>:
 800a0a4:	2000 4440 003d 0000                         . @D=...

0800a0ac <fonts8_6A_char>:
 800a0ac:	0006 0000 a0a4 0800                         ........

0800a0b4 <fonts8_6B>:
 800a0b4:	7f00 2810 0044 0000                         ...(D...

0800a0bc <fonts8_6B_char>:
 800a0bc:	0006 0000 a0b4 0800                         ........

0800a0c4 <fonts8_6C>:
 800a0c4:	0000 7f41 0040 0000                         ..A.@...

0800a0cc <fonts8_6C_char>:
 800a0cc:	0005 0000 a0c4 0800                         ........

0800a0d4 <fonts8_6D>:
 800a0d4:	7c00 1804 7804 0000                         .|...x..

0800a0dc <fonts8_6D_char>:
 800a0dc:	0006 0000 a0d4 0800                         ........

0800a0e4 <fonts8_6E>:
 800a0e4:	7c00 0408 7804 0000                         .|...x..

0800a0ec <fonts8_6E_char>:
 800a0ec:	0006 0000 a0e4 0800                         ........

0800a0f4 <fonts8_6F>:
 800a0f4:	3800 4444 3844 0000                         .8DDD8..

0800a0fc <fonts8_6F_char>:
 800a0fc:	0006 0000 a0f4 0800                         ........

0800a104 <fonts8_70>:
 800a104:	7c00 1414 0814 0000                         .|......

0800a10c <fonts8_70_char>:
 800a10c:	0006 0000 a104 0800                         ........

0800a114 <fonts8_71>:
 800a114:	0800 1414 7c18 0000                         .....|..

0800a11c <fonts8_71_char>:
 800a11c:	0006 0000 a114 0800                         ........

0800a124 <fonts8_72>:
 800a124:	7c00 0408 0804 0000                         .|......

0800a12c <fonts8_72_char>:
 800a12c:	0006 0000 a124 0800                         ....$...

0800a134 <fonts8_73>:
 800a134:	4800 5454 2054 0000                         .HTTT ..

0800a13c <fonts8_73_char>:
 800a13c:	0006 0000 a134 0800                         ....4...

0800a144 <fonts8_74>:
 800a144:	0400 443f 2040 0000                         ..?D@ ..

0800a14c <fonts8_74_char>:
 800a14c:	0006 0000 a144 0800                         ....D...

0800a154 <fonts8_75>:
 800a154:	3c00 4040 7c20 0000                         .<@@ |..

0800a15c <fonts8_75_char>:
 800a15c:	0006 0000 a154 0800                         ....T...

0800a164 <fonts8_76>:
 800a164:	1c00 4020 1c20 0000                         .. @ ...

0800a16c <fonts8_76_char>:
 800a16c:	0006 0000 a164 0800                         ....d...

0800a174 <fonts8_77>:
 800a174:	3c00 3040 3c40 0000                         .<@0@<..

0800a17c <fonts8_77_char>:
 800a17c:	0006 0000 a174 0800                         ....t...

0800a184 <fonts8_78>:
 800a184:	4400 1028 4428 0000                         .D(.(D..

0800a18c <fonts8_78_char>:
 800a18c:	0006 0000 a184 0800                         ........

0800a194 <fonts8_79>:
 800a194:	0c00 5050 3c50 0000                         ..PPP<..

0800a19c <fonts8_79_char>:
 800a19c:	0006 0000 a194 0800                         ........

0800a1a4 <fonts8_7A>:
 800a1a4:	4400 5464 444c 0000                         .DdTLD..

0800a1ac <fonts8_7A_char>:
 800a1ac:	0006 0000 a1a4 0800                         ........

0800a1b4 <fonts8_7B>:
 800a1b4:	0400 7f02 0402 0000                         ........

0800a1bc <fonts8_7B_char>:
 800a1bc:	0006 0000 a1b4 0800                         ........

0800a1c4 <fonts8_7C>:
 800a1c4:	0000 00ff                                   ....

0800a1c8 <fonts8_7C_char>:
 800a1c8:	0004 0000 a1c4 0800                         ........

0800a1d0 <fonts8_7D>:
 800a1d0:	1000 7f20 1020 0000                         .. . ...

0800a1d8 <fonts8_7D_char>:
 800a1d8:	0006 0000 a1d0 0800                         ........

0800a1e0 <fonts8_7E_C1>:
 800a1e0:	7e00 1111 7e11 0000                         .~...~..

0800a1e8 <fonts8_7E_C1_char>:
 800a1e8:	0006 0000 a1e0 0800                         ........

0800a1f0 <fonts8_C2_C4>:
 800a1f0:	7e00 1111 7e11 0000                         .~...~..

0800a1f8 <fonts8_C2_C4_char>:
 800a1f8:	0006 0000 a1f0 0800                         ........

0800a200 <fonts8_C5>:
 800a200:	7e00 1111 7e11 0000                         .~...~..

0800a208 <fonts8_C5_char>:
 800a208:	0006 0000 a200 0800                         ........

0800a210 <fonts8_C6_E1>:
 800a210:	2000 5554 7854 0000                         . TUTx..

0800a218 <fonts8_C6_E1_char>:
 800a218:	0006 0000 a210 0800                         ........

0800a220 <fonts8_E2_E4>:
 800a220:	3800 5454 1854 0000                         .8TTT...

0800a228 <fonts8_E2_E4_char>:
 800a228:	0006 0000 a220 0800                         .... ...

0800a230 <fonts8_E5_E9>:
 800a230:	3800 5554 1854 0000                         .8TUT...

0800a238 <fonts8_E5_E9_char>:
 800a238:	0006 0000 a230 0800                         ....0...

0800a240 <fonts8_EA_ED>:
 800a240:	0000 7d44 0040 0000                         ..D}@...

0800a248 <fonts8_EA_ED_char>:
 800a248:	0006 0000 a240 0800                         ....@...

0800a250 <fonts8_EE_F1>:
 800a250:	7c00 0509 7805 0000                         .|...x..

0800a258 <fonts8_EE_F1_char>:
 800a258:	0006 0000 a250 0800                         ....P...

0800a260 <fonts8_F2_F3>:
 800a260:	3800 4544 3844 0000                         .8DED8..

0800a268 <fonts8_F2_F3_char>:
 800a268:	0006 0000 a260 0800                         ....`...

0800a270 <fonts8_F4_F6>:
 800a270:	3800 4445 3845 0000                         .8EDE8..

0800a278 <fonts8_F4_F6_char>:
 800a278:	0006 0000 a270 0800                         ....p...

0800a280 <fonts8_F7_FA>:
 800a280:	3c00 4140 7c20 0000                         .<@A |..

0800a288 <fonts8_F7_FA_char>:
 800a288:	0006 0000 a280 0800                         ........

0800a290 <fonts8_FB_FC>:
 800a290:	3c00 4041 7c21 0000                         .<A@!|..

0800a298 <fonts8_FB_FC_char>:
 800a298:	0006 0000 a290 0800                         ........

0800a2a0 <fonts8_FD_FF>:
 800a2a0:	0000 0000                                   ....

0800a2a4 <fonts8_FD_FF_char>:
 800a2a4:	0004 0000 a2a0 0800                         ........

0800a2ac <audioleveltab>:
 800a2ac:	0604 0f0a 2819 7f40                         .....(@.

0800a2b4 <waveformSteps>:
 800a2b4:	0002 0000 0260 2000 0003 0000 025c 2000     ....`.. ....\.. 
 800a2c4:	0005 0000 0258 2000 0007 0000 025c 2000     ....X.. ....\.. 
 800a2d4:	0008 0000 0260 2000 000b 0000 0254 2000     ....`.. ....T.. 

0800a2e4 <buttonsConfig>:
 800a2e4:	2fd9 0800 31c3 0800 30fd 0800 0000 0000     ./...1...0......
 800a2f4:	2fdb 0800 31b9 0800 30ed 0800 0001 0000     ./...1...0......
 800a304:	2fdd 0800 31af 0800 30dd 0800 0002 0000     ./...1...0......
 800a314:	2fdf 0800 31a5 0800 30cd 0800 0003 0000     ./...1...0......
 800a324:	2fe1 0800 319b 0800 30bd 0800 0004 0000     ./...1...0......
 800a334:	2fe3 0800 3191 0800 30ad 0800 0005 0000     ./...1...0......
 800a344:	2fe5 0800 3187 0800 309d 0800 0006 0000     ./...1...0......
 800a354:	2fe7 0800 317d 0800 308d 0800 0007 0000     ./..}1...0......
 800a364:	2fe9 0800 3173 0800 307d 0800 0008 0000     ./..s1..}0......
 800a374:	2feb 0800 3169 0800 306d 0800 0009 0000     ./..i1..m0......
 800a384:	2fed 0800 315f 0800 305d 0800 000a 0000     ./.._1..]0......
 800a394:	2fef 0800 3155 0800 304d 0800 000b 0000     ./..U1..M0......
 800a3a4:	2ff1 0800 314b 0800 303d 0800 000c 0000     ./..K1..=0......
 800a3b4:	2ff3 0800 3141 0800 302d 0800 000d 0000     ./..A1..-0......
 800a3c4:	2ff5 0800 3137 0800 301d 0800 000e 0000     ./..71...0......
 800a3d4:	2ff7 0800 312d 0800 300d 0800 000f 0000     ./..-1...0......
 800a3e4:	2ff9 0800 3123 0800 2ffd 0800 0010 0000     ./..#1.../......
 800a3f4:	3130 3332 3534 3736 3938 6261 6463 6665     0123456789abcdef
 800a404:	6867 6a69 6c6b 6e6d 706f 7271 7473 7675     ghijklmnopqrstuv
 800a414:	7877 7a79 2300 302d 202b 6800 4c6c 6500     wxyz.#-0+ .hlL.e
 800a424:	6766 4645 0047 3130 3332 3534 3736 3938     fgEFG.0123456789
 800a434:	4241 4443 4645 3000 3231 3433 3635 3837     ABCDEF.012345678
 800a444:	6139 6362 6564 0066                         9abcdef.
